@model Telerik.Sitefinity.Frontend.Mvc.Models.ContentListViewModel

@using Telerik.Sitefinity;
@using Telerik.Sitefinity.Frontend.Blogs.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Blogs.Mvc.Models.Blog;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Modules.Pages;
@using Telerik.Sitefinity.Model;
@using Telerik.Sitefinity.Taxonomies;
@using Telerik.Sitefinity.Taxonomies.Model;





@using Telerik.Sitefinity.Web.DataResolving;

@using Telerik.Sitefinity.Frontend.DynamicContent.WidgetTemplates.Fields.Helpers;

@using Telerik.Sitefinity.Data.ContentLinks;
@using Telerik.Sitefinity.Frontend.Mvc.Models;
@using Telerik.Sitefinity.Model.ContentLinks;
@using Telerik.Sitefinity.Modules.Libraries;
@* Used for getting category list *@
@using Telerik.Sitefinity.Services;
@using Telerik.Sitefinity.Security.Model;
@using Telerik.OpenAccess;
@* For Dynamic content: Module builder [Office] *@
@using Telerik.Sitefinity.DynamicModules;
@using Telerik.Sitefinity.DynamicModules.Model;
@using Telerik.Sitefinity.Utilities.TypeConverters;


@Html.Script(ScriptRef.JQuery, "top", false)
@{
    List<Taxon>
    _cates = JXTNext.Sitefinity.Common.Helpers.SitefinityHelper.GetTopLevelCategories();

    Taxon _sectorTaxon = _cates.Where(c => c.Title.ToUpper() == "BLOG CATEGORIES").FirstOrDefault();

    Taxon _sectorTaxon1 = _cates.Where(c => c.Title.ToUpper() == "BLOG INDUSTRIES").FirstOrDefault();

    Taxon _sectorTaxon2 = _cates.Where(c => c.Title.ToUpper() == "BLOG TYPE").FirstOrDefault();

    var _dd_blogCategories = _sectorTaxon as HierarchicalTaxon;

    var _dd_blogIndustries = _sectorTaxon1 as HierarchicalTaxon;

    var _dd_blogTypes = _sectorTaxon2 as HierarchicalTaxon;
}



@{

    var BlogParentCategories = Request.QueryString["BlogParentCategories"];
    var BlogChildCategories = Request.QueryString["BlogChildCategories"];

    var BlogParentIndustries = Request.QueryString["BlogParentIndustries"];
    var BlogParentTypes = Request.QueryString["BlogParentTypes"];

    var sortby = Request.QueryString["sortby"];
    var reqkeywords = Request.QueryString["keyword"];



    IEnumerable<ItemViewModel> blogList = Model.Items;


    if (BlogParentTypes != "undefined" && BlogParentTypes + "" != "")
    {
        List<ItemViewModel> filteredBlogList = new List<ItemViewModel>();
        List<string>
        BlogParentTypesGuid = BlogParentTypes.Split(',').ToList();

        foreach (var blog in blogList)
        {
            foreach (var c in blog.Fields.Category)
            {
                if (BlogParentTypesGuid.Any(str => str.Contains(c.ToString())))
                {
                    filteredBlogList.Add(blog);
                }
            }
        }

        blogList = filteredBlogList.AsEnumerable();
    }

    if (BlogParentIndustries != "undefined" && BlogParentIndustries + "" != "")
    {
        List<ItemViewModel> filteredBlogList = new List<ItemViewModel>();
        List<string>
        BlogParentIndustriesGuid = BlogParentIndustries.Split(',').ToList();

        foreach (var blog in blogList)
        {
            foreach (var c in blog.Fields.Category)
            {
                if (BlogParentIndustriesGuid.Any(str => str.Contains(c.ToString())))
                {
                    filteredBlogList.Add(blog);
                }
            }
        }

        blogList = filteredBlogList.AsEnumerable();
    }

    if (BlogParentCategories != "undefined" && BlogParentCategories + "" != "")
    {
        List<ItemViewModel> filteredBlogList = new List<ItemViewModel>();
        List<string>
        BlogParentCategoriessGuid = BlogParentCategories.Split(',').ToList();

        foreach (var blog in blogList)
        {
            foreach (var c in blog.Fields.Category)
            {

                if (BlogParentCategoriessGuid.Any(str => str.Contains(c.ToString())))
                {
                    filteredBlogList.Add(blog);
                }
            }
        }

        blogList = filteredBlogList.AsEnumerable();
    }

    if (BlogChildCategories != "undefined" && BlogChildCategories + "" != "")
    {
        List<ItemViewModel> filteredBlogList = new List<ItemViewModel>();
        List<string>
        BlogChildCategoriesGuid = BlogChildCategories.Split(',').ToList();

        foreach (var blog in blogList)
        {
            foreach (var c in blog.Fields.Category)
            {
                if (BlogChildCategoriesGuid.Any(str => str.Contains(c.ToString())))
                {
                    filteredBlogList.Add(blog);
                }
            }
        }

        blogList = filteredBlogList.AsEnumerable();
    }

    if (reqkeywords != "undefined" && reqkeywords + "" != "")
    {
        blogList = blogList.Where(c => c.Fields.Title.ToString().ToLower().Contains(reqkeywords.ToString().ToLower()) || c.Fields.Summary.ToString().ToLower().Contains(reqkeywords.ToString().ToLower()));
    }
    if (sortby != "undefined" && sortby + "" != "")
    {
        switch (sortby)
        {
            case "latest":
                blogList = blogList.OrderByDescending(o => o.Fields.PublicationDate);
                break;

            case "oldest":
                blogList = blogList.OrderBy(o => o.Fields.PublicationDate);
                break;

            case "az":
                blogList = blogList.OrderBy(o => o.Fields.Title);
                break;

            case "za":
                blogList = blogList.OrderByDescending(o => o.Fields.Title);
                break;
        }
    }

    Dictionary<Guid, string>
        catgeoryListDictionary = new Dictionary<Guid, string>
            ();
    var managerArticle1 = TaxonomyManager.GetManager();
    var articleTaxonomy1 = managerArticle1.GetTaxonomies<HierarchicalTaxonomy>
        ().Where(t => t.Name == "Categories").SingleOrDefault();
    List<Taxon>
        topLovelTaxa1 = new List<Taxon>
            ();
    if (articleTaxonomy1 != null)
    {
        foreach (var taxon in articleTaxonomy1.Taxa)
        {
            if (taxon.Parent == null)
            {
                topLovelTaxa1.Add(taxon);
            }
        }
        foreach (var taxon in topLovelTaxa1)
        {

            var hierarchicalTaxon1 = taxon as HierarchicalTaxon;
            catgeoryListDictionary.Add(@taxon.Id, @taxon.Title);
            foreach (var it in hierarchicalTaxon1.Subtaxa)
            {
                @;
            }
        }
    }
}


@helper ProcessCategories_Add(HierarchicalTaxon taxon1, Dictionary<Guid, string>
                            catgeoryListDictionary)
{
                    /**/

                    if (taxon1 != null)
                    {
                        catgeoryListDictionary.Add(taxon1.Id, @taxon1.Title);
                        foreach (var subTaxon in taxon1.Subtaxa)
                        {
                            @ProcessCategories_Add(subTaxon, catgeoryListDictionary);
                        }
                    }
}


<div class="row">
    @foreach (var item in blogList)
    {
        var imageurl = "";
        foreach (var relatedItem in item.Fields.BlogImage)
        {
            imageurl = (string)relatedItem.Fields.ItemDefaultUrl;
        }
        var navigateUrl = HyperLinkHelpers.GetDetailPageUrl(item, ViewBag.DetailsPageId, ViewBag.OpenInSamePage, Model.UrlKeyPrefix);

        <div class="list-item blog-list-item col-12 col-sm-6">
            <div class="list-item-inner">
                <div class="bg-image-wrap"><div class="bg-image" style="background-image: url('@imageurl');"></div></div>
                <div class="list-content">
                    <div class="list-date">@item.GetDateTime("PublicationDate", "MMM d, yyyy")</div>
                    <p class="list-desc">@item.Fields.Title</p>
                    @{
                        var categoriesName = "";
                    }
                    @foreach (var c in item.Fields.Category)
                    {

                        if (catgeoryListDictionary.ContainsKey((Guid)c))
                        {
                            if (string.IsNullOrEmpty(categoriesName))
                            {
                                categoriesName = @catgeoryListDictionary[c];
                            }
                            else
                            {
                                categoriesName += ", " + @catgeoryListDictionary[c];
                            }

                        }
                    }
                    <a href="@navigateUrl" class="btn btn-link">Read more</a>
                    <div class="list-footer">
                        Category <a href="" class="btn-link">@</a>
                    </div>
                </div>

            </div>
        </div>
        <!-- .list-item/ -->
    }
</div>
@if (Model.ShowPager)
{
    @Html.Action("Index", "ContentPager", new
    {
    currentPage = Model.CurrentPage,
    totalPagesCount = Model.TotalPagesCount.Value,
    redirectUrlTemplate = ViewBag.RedirectPageUrlTemplate
    })
}

@helper ProcessCategories(HierarchicalTaxon taxon)
{
                    /**/

                    if (taxon != null)
                    {
                        <p>@taxon.Title</p>
                        foreach (var subTaxon in taxon.Subtaxa)
                        {
                            //Recursive call
                            @ProcessCategories(subTaxon);
                        }
                    }
}


<script type="text/javascript">
    $(document).ready(function () {

        //if ($('.row .list-item').length == 0) {
        //    $('.pagination').hide();
        //}

        var sortByValue = GetQueryStringParams("sortby");
        if (sortByValue != "undefined" && sortByValue != null && sortByValue + "" != "") {
            $("#sortOrder").val(sortByValue);
        }

        var keyword = GetQueryStringParams("keyword");
        if (keyword != "undefined" && keyword != null && keyword + "" != "") {
            $("#txtSearch").val(unescape(keyword));
        }

        var BlogParentCategories = GetQueryStringParams("BlogParentCategories");
        if (BlogParentCategories != "undefined" && BlogParentCategories != null && BlogParentCategories + "" != "") {
            var arr = BlogParentCategories.split(",");
            for (var i = 0; i < arr.length; i++) {
                // Trim the excess whitespace.
                var id = arr[i].replace(/^\s*/, "").replace(/\s*$/, "");
                // Add additional code here, such as:
                $('#' + id).prop("checked", true);
            }
        }

        var BlogParentIndustries = GetQueryStringParams("BlogParentIndustries");
        if (BlogParentIndustries != "undefined" && BlogParentIndustries != null && BlogParentIndustries + "" != "") {
            var arr = BlogParentIndustries.split(",");
            for (var i = 0; i < arr.length; i++) {
                // Trim the excess whitespace.
                var id = arr[i].replace(/^\s*/, "").replace(/\s*$/, "");
                // Add additional code here, such as:
                $('#' + id).prop("checked", true);
            }
        }

        var BlogParentTypes = GetQueryStringParams("BlogParentTypes");
        if (BlogParentTypes != "undefined" && BlogParentTypes != null && BlogParentTypes + "" != "") {
            var arr = BlogParentTypes.split(",");
            for (var i = 0; i < arr.length; i++) {
                // Trim the excess whitespace.
                var id = arr[i].replace(/^\s*/, "").replace(/\s*$/, "");
                // Add additional code here, such as:
                $('#' + id).prop("checked", true);
            }
        }

        var BlogChildCategories = GetQueryStringParams("BlogChildCategories");
        if (BlogChildCategories != "undefined" && BlogChildCategories != null && BlogChildCategories + "" != "") {
            var arr = BlogChildCategories.split(",");
            for (var i = 0; i < arr.length; i++) {
                // Trim the excess whitespace.
                var id = arr[i].replace(/^\s*/, "").replace(/\s*$/, "");
                // Add additional code here, such as:
                $('#' + id).prop("checked", true);
            }
        }

    });

    function GetQueryStringParams(sParam) {
        var sPageURL = window.location.search.substring(1);
        var sURLVariables = sPageURL.split('&');
        for (var i = 0; i < sURLVariables.length; i++) {
            var sParameterName = sURLVariables[i].split('=');
            if (sParameterName[0] == sParam) {
                return sParameterName[1];
            }
        }
    }


</script>

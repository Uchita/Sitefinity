@model dynamic
@using Telerik.Sitefinity.Services;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers
@using JXTNext.Sitefinity.Common.Helpers


@{
    var isMemberUser = JXTNext.Sitefinity.Common.Helpers.SitefinityHelper.IsUserLoggedIn("Member");
    var isLoggedIn = JXTNext.Sitefinity.Common.Helpers.SitefinityHelper.IsUserLoggedIn();
}

@*<p>@Newtonsoft.Json.JsonConvert.SerializeObject(Model)</p>*@
<div class="row">
    <div class="col-12">
        <div class="row">
            <div class="col-12 job-count">
                <h3><span class="count-num">@ViewBag.TotalCount</span> job(s) found</h3>
            </div>
            <div class="col-12 col-md-6">
                <span class="new-serch"><a class="btn-link" href="/advancedsearch" title="New advanced search"> New search</a></span>
            </div>
            <div class="col-12 col-lg-6">
                <div class="form-group">
                    <select id="sortOrder" class="form-control">
                        <option value="Recent">@Html.Resource("SortByRecent", "JobSearchResultsResources")</option>
                        <option value="Relevance">@Html.Resource("SortByRelevance", "JobSearchResultsResources")</option>
                        <option value="Old">@Html.Resource("SortByOldest", "JobSearchResultsResources")</option>
                        <option value="A-Z">@Html.Resource("SortByAlphaAZ", "JobSearchResultsResources")</option>
                        <option value="Z-A">@Html.Resource("SortByAlphaZA", "JobSearchResultsResources")</option>
                        <option value="SalaryHighToLow">@Html.Resource("SortBySalHighToLow", "JobSearchResultsResources")</option>
                        <option value="SalaryLowToHigh">@Html.Resource("SortBySalLowToHigh", "JobSearchResultsResources")</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="row" style="display:none;">
            <div class="col-12 col-lg-12 mb-2" style="display:none">Receive new jobs for this search by email.</div>
        </div>
        <div class="row">
            @if (ViewBag.IsMember)
            {
                <div class="col-12">
                    <div class="alert alert-info jobalert-message hidden">Alert created. We’ll send new jobs to your email address.</div>
                </div>
                <div class="col-12 col-lg-6">
                    <div class="form-group text-right">
                        <a id="anon-job-alert" class="btn btn-outline-primary btn-block" href="#" title="Create your job alert">CREATE JOB ALERT</a>
                    </div>
                </div>
                <div class="col-12 col-lg-6">
                    <div class="form-group">
                        <input type="email" id="anonycreatejobalert" value="@ViewBag.Email" hidden />

                        <div class="alert alert-danger jobalert-error-message hidden">Please enter your valid email address.</div>
                    </div>
                </div>

            }
            else
            {
                <div class="col-12 col-lg-6">
                    <div class="form-group">
                        <input type="email" id="anonycreatejobalert" value="" placeholder="Enter email address" class="jobalert-field form-control" />

                        <div class="alert alert-danger jobalert-error-message hidden">Please enter your valid email address.</div>
                    </div>
                </div>
                <div class="col-12 col-lg-6">
                    <div class="form-group text-right">
                        <a id="anon-job-alert" class="btn btn-outline-primary btn-block" href="#" title="Create your job alert">CREATE JOB ALERT</a>
                    </div>
                </div>
                <div class="col-12">
                    <div class="alert alert-info jobalert-message hidden">Alert created. We’ll send new jobs to your email address.</div>
                </div>


            }
        </div>
        <!-- .row/ -->
    </div>
    <!-- .col-12/ -->

</div>
<!-- .row/ -->
<div id="listView" class="search-results"></div>



<div class="popup-overlay">
    <div class="container">
        <div class="popup-box">
            <p class="info">Please login or register as a member to <span>create job alert</span>.</p>
            <div class="button-wrapper">
                <a href="/register" class="btn btn-primary">Register</a>
                <a href="/login" class="btn btn-primary">Login</a>
            </div>
            <a href="javascript:void(0)" class="fa fa-times"></a>
        </div>
    </div>
</div>
<script type="text/x-kendo-template" id="template">
    <div class="job-list border rounded p-4 fadeInUp wow">
        <p class="company-hidden" style="display:none">#:CustomData["CompanyName"]#</p>
        <img src="" class="float-right"
             alt="">
        <h2 class="mt-2"><a href="@ViewBag.JobDetailsPageUrl/#:ClassificationsSEORouteName#/#:JobID#">#:Title#</a></h2>
        <ul class="bayside-listing">
            # if(data.CustomData["Bulletpoints.BulletPoint1"] != "" || data.CustomData["Bulletpoints.BulletPoint2"] != "" || data.CustomData["Bulletpoints.BulletPoint3"] != ""){#
            <ul>
                <li>#:CustomData["Bulletpoints.BulletPoint1"]#</li>
                <li>#:CustomData["Bulletpoints.BulletPoint2"]#</li>
                <li>#:CustomData["Bulletpoints.BulletPoint3"]#</li>

            </ul>#
            }
            else{#
            <p>#:ShortDescription#</p>
            #}#
        </ul>
        <div class="row jobCatHirarchy border border-top-0 border-right-0 border-left-0 pb-4 pb-4 ">
            <div class="col-xs-12">
                # $.each(Classifications, function(index, item){#
                <small class="jobCatItem">
                    # var isAppend= true ; #
                    <a class="a-link">
                        # for (var key in item) {#

                        # if(key.length >= 32){#
                        # var hrefLink = '';#

                        # hrefLink = '@ViewBag.CurrentPageUrl' + '?Filters[0].rootId=' + ClassificationsRootName + '&Filters[0].values=' + key;#

                        # if(isAppend){#

                        <em> #:item[key]# </em> >
                        # isAppend= false ; #
                        #}else{#
                        <em class="em-link" href=#:hrefLink#>  #:item[key]# </em>
                        #}#
                        #}#
                        #}#
                    </a>


                </small>
                #});#
            </div>
        </div>
        <div class="row align-items-center mt-4">
            <div class="col">

                <ul class="inline-list p-0 mb-0 location-hover">
                    <li class="hidden-salary" style="display:none;">#:CustomData["Salary.Filters[0].Value"]# </li>
                    
                    <li class="mr-3"><span><img src="/ResourcePackages/BaySide/assets/images/location-icon.svg" alt="pin"></span><div class="sub-level">#:CustomData["CountryLocationArea[0].Filters[0].SubLevel[0].Value"]# > #:CustomData["CountryLocationArea[0].Filters[0].SubLevel[0].SubLevel[0].Value"]#</div></li>

                    <li class="hidden-salary" style="display:none;">#:CustomData["Salary.Filters[0].Value"]# </li>
                    <li class="mr-3"><img class="dollar" src="/ResourcePackages/BaySide/assets/images/dollar-icon.svg" alt="$"> <div class="sub-level"> #:CustomData["Salary.Filters[0].Value"]#</div></li>

                    <li class="mr-3 clock-icon"> <span><img class="clock" src="/ResourcePackages/BaySide/assets/images/clock-icon.svg" alt="time"></span><div> #:CustomData["WorkType.Filters[0].Value"]#</div></li>

                </ul>
            </div>
            <div class="col-auto text-right">
                <a href="@ViewBag.JobDetailsPageUrl/#:ClassificationsSEORouteName#/#:JobID#" class="btn btn-outline-primary">View job</a>
            </div>
        </div>
    </div>
</script>
<div id="pager" class="row k-pager-wrap k-widget k-floatwrap" data-role="]">
    @*<ul class="pagination k-pager-numbers k-reset"></ul>*@
    <div class="col-12">
        <ul class="pagination"></ul>
    </div>
    @*<div class="col-12">
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    <li>
                        <a class="prev-btn" href="#" aria-label="Previous">
                            <span aria-hidden="true">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24">
                                    <path d="M10.02 6L8.61 7.41 13.19 12l-4.58 4.59L10.02 18l6-6-6-6z"></path>
                                </svg>
                            </span>
                        </a>
                    </li>
                    <li><a href="#">1</a></li>
                    <li><a href="#">2</a></li>
                    <li><a href="#">3</a></li>
                    <li>
                        <a class="next-btn" href="#" aria-label="Next">
                            <span aria-hidden="true">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24">
                                    <path d="M10.02 6L8.61 7.41 13.19 12l-4.58 4.59L10.02 18l6-6-6-6z"></path>
                                </svg>
                            </span>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>*@
</div>


<script>

    @{
        var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
        var json = serializer.Serialize(Model);
    }

    $(document).ready(function () {

        $('em.em-link').each(function (i, obj) {
            var href = $(this).attr('href');
            if (href != undefined && href != "") {
                $(this).removeAttr('href');
                var aHref = $(this).parent()
                if (aHref != undefined && href != "")
                    $(aHref).attr('href', href);
            }
        });

        $(document).on('click', '.save-job', function (e) {
            e.preventDefault();
            var unSaveJob = false;
            var ajaxActionName = "/SaveJob";
            var jobid = $(this).data('jobid');
            if ($(this).hasClass('saved')) {
                unSaveJob = true;
                ajaxActionName = "/RemoveSavedJob";
                jobid = $(this).attr('data-savedjobid');
            }

            var parm = { JobId: jobid };
            var urlPath = $(location).attr('pathname') + ajaxActionName;
            var self = $(this);
            $.ajax({
                type: 'POST',
                cache: false,
                url: urlPath,
                data: parm,
                dataType: 'Json',
                success: function (response) {

                    if (response.Success == true) { // Job Saved
                        if (unSaveJob) {
                            self.removeClass("saved");
                            self.text("Save job");
                        }
                        else {
                            self.addClass("saved");
                            self.text("Job saved");
                            self.attr('data-savedjobid', response.SavedJobId);
                        }
                    }
                    else { // Job failed to save
                        if ((response.Errors[0].indexOf("(401)") > -1) || (response.Errors[0].indexOf("(403)") > -1))
                            //alert("Please sign-in or register as a member to save a job.");
                            if ($('.popup-overlay').length) {
                                $('.popup-overlay .info span').text('save a job');
                                $('.popup-overlay').fadeIn('fast');
                            }
                            else
                                alert(response.Errors[0]);
                    }
                },
                error: function (response) { // Error
                }
            });
        });

        var memberStatus = '@ViewBag.IsMember';
        //checking user logged in is member role
        $('.jobalert-btn').click(function (e) {

            if (memberStatus.toLocaleLowerCase() != "true") {
                e.preventDefault();
                //alert('Please sign-in or register as a member to create job alert.');
                if ($('.popup-overlay').length) {
                    $('.popup-overlay .info span').text('create job alert');
                    $('.popup-overlay').fadeIn('fast');
                }
            }
        });

        $('.popup-overlay .fa-times').click(function () {
            $('.popup-overlay').fadeOut('fast');
        });

    });

    var model = @Html.Raw(json);
    var isDesignMode = @Html.Raw(Json.Encode(@SystemManager.IsDesignMode));
    var jobContainer = $("#listView");

    if (model != null && model != "undefined" && !isDesignMode) {
        var pageSize = @ViewBag.PageSize;
        var totalCount = @ViewBag.TotalCount;
        var filterModel = JSON.parse('@Html.Raw(@ViewBag.FilterModel)');
        var PageNumber = filterModel.Page;
        var highestPage = Math.ceil(totalCount / pageSize);
        var dataSource;
        var queryStringArr = [];

        //onpage load checking if any filter is selected
        function checkFilterCheck() {
            //checking keyword
            if ($("#selectedkeywordsfilter").val() != "") {
                return true;
            }
            //checking checkboxes selected
            if ($('#filtersPagePartialContent .dropdown-tree >ul>li>a').hasClass('active')) {
                return true;
            }
        }

        if (checkFilterCheck()) {
            var sortBy = "Relevance";
        } else {
            var sortBy = '@ViewBag.SortOrder';
        }

        $("#sortOrder").val(sortBy);
        bindJobsPages(PageNumber);
        bindJobs(PageNumber);

        function processSavedJobs() {
            var parm = {};
            var urlPath = $(location).attr('pathname') + "/GetAllSavedJobs";
            var self = $(this);
            $.ajax({
                type: 'POST',
                cache: false,
                url: urlPath,
                data: parm,
                dataType: 'Json',
                success: function (response) {

                    if (response.Success == true) { // Getting the all saved jobs
                        $('.save-job').each(function () {
                            var jobid = $(this).data('jobid');
                            var selfJob = $(this);

                            $.each(response.SavedJobs, function (index, saveJobInfo) {

                                if (saveJobInfo.JobId == jobid) {

                                    $(selfJob).addClass("saved");
                                    $(selfJob).text("Job saved");
                                    $(selfJob).attr('data-savedjobid', saveJobInfo.SavedJobId);
                                }
                            });
                        });
                    }
                    else {

                    }
                },
                error: function (response) { // Error
                }
            });


        };


        $('#anon-job-alert').click(function () {
            var email = $('#anonycreatejobalert').val();


            if (email.length < 1) {
                $('.jobalert-error-message').removeClass('hidden').text('Please enter your email address.');
                return false;
            }
            //else if (!pattern.test(email)) {
            //    $('.jobalert-error-message').removeClass('hidden').text('Please enter your valid email address.');
            //    return false;
            //}

            if (filterModel.Filters !== null && filterModel.Filters.length === 0) {
                var filter = {};
                filter.rootId = "CountryLocationArea";
                searchTarget = null;
                values = [];
                filterModel.Filters.push(filter);
            }

            var alertData = { filterModel: filterModel, email: email };
            var urlPath = $(location).attr('pathname') + "/CreateAnonymousJobAlert";

            $.ajax({
                type: 'POST',
                cache: false,
                url: urlPath,
                data: alertData,
                dataType: 'Json',
                success: function (response) {
                    console.log(response);
                    if (response.Success == true) {
                        $('#anonycreatejobalert, #anon-job-alert').hide();
                        //$(this).hide();
                        $('.jobalert-error-message').addClass('hidden');
                        $('.jobalert-message').removeClass('hidden');
                    }
                    else {
                        $('.jobalert-error-message').removeClass('hidden').text(response.Errors[0]);
                    }
                },
                error: function (response) { // Error
                }
            });
        });


        $("#sortOrder").change(function () {
            sortBy = $(this).val();
            PageNumber = 1;
            bindJobs(PageNumber);
        });

        layoutSwitch();

        function makeQueryString(obj, prefix, isArray) {

            for (var p in obj) {
                if (obj.hasOwnProperty(p)) {
                    var k, v;
                    if (isArray)
                        k = prefix ? prefix + "%5B" + p + "%5D" : p, v = obj[p];
                    else {
                        if (prefix.match(".values$"))
                            k = prefix ? prefix : p, v = obj[p];
                        else
                            k = prefix ? prefix + "." + p + "" : p, v = obj[p];
                    }

                    if (v !== null && typeof v === "object") {
                        if (Array.isArray(v)) {
                            if (k.match(".values$"))
                                makeQueryString(v, k, false);
                            else
                                makeQueryString(v, k, true);
                        } else {
                            makeQueryString(v, k, false);
                        }
                    } else {
                        if (v === null || v === "undefined")
                            v = "";

                        var query = k + "=" + v;
                        queryStringArr.push(query);
                    }
                }
            }
            return queryStringArr.join("&");
        };

        function bindJobsPages(PageNumber) {
            if (highestPage > 1) {
                var lis = '';
                var pageJumpNext = false;
                var pageJumpVal = 5;
                var startPage = (parseInt(PageNumber) / pageJumpVal) > 1 ? pageJumpVal * (Math.ceil(parseInt(PageNumber) / pageJumpVal) - 1) + 1 : 1;

                lis += '<li class="pagePrev pageController"><a tabindex="-1" href="javascript:void(0);" onclick="pageChange(this)" class="k-link prev-btn" disabled data-page="0"><span aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"><path d="M10.02 6L8.61 7.41 13.19 12l-4.58 4.59L10.02 18l6-6-6-6z"></path></svg ></span ></a></li>';

                //dot page jump previous
                //if (startPage > 1) {
                //    lis += '<li><a tabindex="-1" href="javascript:void(0);" onclick="pageChange(this);" class="k-link" data-page="' + (startPage - 1) + '">...</a></li>';
                //}

                for (var i = startPage; i <= highestPage; i++) {
                    if (i < (startPage + pageJumpVal) && highestPage >= parseInt(PageNumber)) {
                        lis += '<li><a tabindex="-1" href="javascript:void(0);" onclick="pageChange(this);" class="k-link" data-page="' + i + '">' + i + '</a></li>';
                        pageJumpNext = true;
                    }
                }

                ////dot page jump next
                //if (highestPage >= parseInt(PageNumber) + 1 && highestPage >= (startPage + pageJumpVal)) {
                //    lis += '<li><a tabindex="-1" href="javascript:void(0);" onclick="pageChange(this);" class="k-link" data-page="' + (startPage + pageJumpVal) + '">...</a></li>';
                //}

                lis += '<li class="pageNext pageController"><a tabindex="-1" href="javascript:void(0);" onclick="pageChange(this)" class="k-link next-btn" data-page="2"><span aria-hidden="true"><svg xmlns = "http://www.w3.org/2000/svg" width = "20" height = "20" viewBox = "0 0 24 24" ><path d="M10.02 6L8.61 7.41 13.19 12l-4.58 4.59L10.02 18l6-6-6-6z"></path></svg ></span ></a></li>';
                $('#pager ul').html(lis);
            }
        };

        function bindJobs(PageNumber) {

            var parm = { jobRequest: @Html.Raw(Json.Encode(@ViewBag.Request)), pageNumber: PageNumber, sortBy: sortBy
        };
        var urlPath = $(location).attr('pathname') + "/GetSearchResults";
        var searchPath = $(location).attr('search');
        if (searchPath == null || searchPath == "") {
            searchPath += ("?" + "Page=" + PageNumber);
        }
        else if (searchPath.indexOf("Page=") > -1) {
            let pageIndex = searchPath.indexOf("Page=");
            searchPath = searchPath.slice(0, pageIndex);
            searchPath += ("Page=" + PageNumber);
        }
        else {
            searchPath += ("&Page=" + PageNumber);
        }

        if (searchPath.indexOf("SortBy=") > -1) {
            let pageIndex = searchPath.indexOf("SortBy=");
            searchPath = searchPath.slice(0, pageIndex);
            searchPath += ("SortBy=" + sortBy);
        }
        else {
            searchPath += ("&SortBy=" + sortBy);
        }

        queryStringArr.length = 0;
        filterModel.Page = PageNumber;
        filterModel.SortBy = sortBy;
        var pushStateUrl = $(location).attr('pathname') + searchPath;
        var data = { filterModel: filterModel }
        window.history.pushState(data, "", pushStateUrl);

        $('.jobalert-btn').prop('href', '/user-dashboard/Create' + searchPath);

        //pager status
        $('#pager li:not(.pageController) a').removeClass('active');
        $('#pager li:not(.pageController) a[data-page="' + (PageNumber == 0 ? 1 : PageNumber) + '"]').addClass('active');
        //prev next status
        if (PageNumber <= 1) {
            $('#pager li.pagePrev a').attr('disabled', true);
        } else {
            $('#pager li.pagePrev a').removeAttr('disabled');
            $('#pager li.pagePrev a').attr('data-page', parseInt(PageNumber) - 1);
        }

        if (parseInt(PageNumber) + 1 <= highestPage) {
            $('#pager li.pageNext a').attr('data-page', parseInt(PageNumber) + 1);
        }
        if (parseInt(PageNumber) >= highestPage) {
            $('#pager li.pageNext a').attr('disabled', true);
        } else {
            $('#pager li.pageNext a').removeAttr('disabled');
        }
        $('html,body').animate({
            scrollTop: 0
        }, 0);
        //adding loader
        if (!jobContainer.hasClass('loading')) {
            jobContainer.addClass('loading');
        }

        $.ajax({
            type: 'POST',
            cache: false,
            url: urlPath,
            data: parm,
            dataType: 'Json',
            success: function (response) {

                if (response.Total > 0) {
                    dataSource = new kendo.data.DataSource({
                        data: response.SearchResults,
                        total: response.Total,
                    });

                    if ($('#sortOrder').val() == null) {
                        $('#sortOrder').val('Recent');
                    }

                    $(".count-num").html(response.Total);

                    var sorttext = getSortOrder();
                    var token = sorttext.split(':');

                    //dataSource.sort({ field: token[0], dir: token[1] });

                    jobContainer.kendoListView({
                        dataSource: dataSource,
                        template: kendo.template($("#template").html()),

                    });


                    processSavedJobs();

                    processCustomFunction();


                    $('em.em-link').each(function (i, obj) {
                        var href = $(this).attr('href');
                        if (href != undefined && href != "") {
                            $(this).removeAttr('href');
                            var aHref = $(this).parent()
                            if (aHref != undefined && href != "")
                                $(aHref).attr('href', href);
                        }
                    });

                } else {

                    $(".info-block").removeClass('hidden');
                    $("#sortOrder").parent().hide();
                }

                //check the layout on the base of active
                //or Retrieve from local storage for checking too
                if ($('.layout-switch .jn_ico.active').hasClass('icon-grid-view')) {
                    $('#resultsPagePartialContent').removeClass('list-view').addClass('grid-view');
                    $('.job-holder').addClass('col-lg-6');
                }
                //in case of taking from local storage, when data is loaded on filter selection
                else if (typeof (Storage) !== "undefined" && localStorage.getItem("resultLayout") == 'grid') {
                    $('#resultsPagePartialContent').removeClass('list-view').addClass('grid-view');
                    $('.layout-switch .jn_ico').removeClass('active');
                    $('.layout-switch .icon-grid-view').addClass('active');
                    $('.job-holder').addClass('col-lg-6');
                }

                //removing the loader in the job result widget
                jobContainer.removeClass('loading');

                //removing the loader in the search keyword - job filter widget
                $("#selectedkeywordsfilter").parent().removeClass('loader');
                //removing the loading in the filter widget itself
                $('.filter-outer-wrapper').removeClass('lockoverlay visible-hidden');
            },
            error: function (response) {
                console.log(response);
            }
        });
    };

    function processCustomFunction() {
        $('p.hidden-salary').each(function (i, obj) {
            var li = $(this).next();
            if ($(li).find('div').html().trim().toLowerCase() == "")
                $(li).find('img.dollar').attr("src", "");
        });

        $('p.company-hidden').each(function (i, obj) {
            var text = $(this).html().trim().toLowerCase();
            var img = $(this).next();
            if (text != "" && text != undefined)
                if (text == "alitis")
                    $(img).attr("src", "/ResourcePackages/BaySide/assets/images/brand/logo/alitis-logo.svg");
                else if (text == "austra health")
                    $(img).attr("src", "/ResourcePackages/BaySide/assets/images/brand/logo/austra-health-logo.svg");
                else if (text == "bayside group automotive")
                    $(img).attr("src", "/ResourcePackages/BaySide/assets/images/brand/logo/bayside-group-automotive-logo.svg");
                else if (text == "bayside personnel")
                    $(img).attr("src", "/ResourcePackages/BaySide/assets/images/brand/logo/bayside-personnel-logo.svg");
                else if (text == "baytech")
                    $(img).attr("src", "/ResourcePackages/BaySide/assets/images/brand/logo/baytech-logo.svg");
                else if (text == "bridge consulting")
                    $(img).attr("src", "/ResourcePackages/BaySide/assets/images/brand/logo/bridge-consulting-logo.svg");
                else if (text == "cozwine")
                    $(img).attr("src", "/ResourcePackages/BaySide/assets/images/brand/logo/cozwine-logo.svg");
                else if (text == "techstaff")
                    $(img).attr("src", "/ResourcePackages/BaySide/assets/images/brand/logo/techstaff-logo.svg");
                else if (text == "payments &amp;amp; cards network")
                    $(img).attr("src", "https://teampcn.jxtnext.net/ResourcePackages/PCN/assets/dist/images/logo.png");
        });

    }

    function SelectLeftFilter(response) {
        var myArray = [];
        if (response.SearchResults.length > 0) {

            for (var i = 0; i < response.SearchResults.length; i++) {
                var jobDetail = response.SearchResults[i];
                if (jobDetail.Classifications.length > 0) {
                    for (var j = 0; j < jobDetail.Classifications.length; j++) {
                        var classification = jobDetail.Classifications[j];
                        var result = Object.keys(classification).map(function (key) {
                            return [String(key), classification[key]];
                        });
                        if (result.length > 0) {
                            for (var k = 0; k < result.length; k++) {
                                var classiifcationSingle = result[k];
                                if (classiifcationSingle.length == 2) {
                                    myArray.push({ id: classiifcationSingle[0], value: classiifcationSingle[0] });
                                }
                            }
                        }
                    }
                }
            }
        }

        return myArray;
    }

    function pageChange(pageObj) {
        var currPageNumber = $(pageObj).attr('data-page');
        var disableFlag = $(pageObj).attr('disabled');
        if (disableFlag == "disabled") {
            return false;
        }

        bindJobsPages(currPageNumber);

        if (currPageNumber != PageNumber) {
            PageNumber = parseInt(currPageNumber);
            bindJobs(PageNumber);
            //changing the prev & next page number attribute
            $('.pagePrev a').attr('data-page', PageNumber - 1);
            if (PageNumber + 1 <= highestPage) {
                $('.pageNext a').attr('data-page', PageNumber + 1);
            }
        }

    };

    function getSortOrder() {
        var sortValue = $("#sortOrder").val();
        switch (sortValue) {
            case 'Old':
                return 'DatePosted:desc';
                break;
            case 'AZ':
                return 'Title:asc';
                break;
            case 'ZA':
                return 'Title:desc';
                break;
            case 'SalaryHighToLow':
                return 'CustomData["Salary.Filters[0].Min"]:desc';
                break;
            case 'SalaryLowToHigh':
                return 'CustomData["Salary.Filters[0].Max"]:asc';
                break;
            default:
                return 'DatePosted:asc';
                break;
        }
    };

    function layoutSwitch() {
        if ($('.layout-switch').length) {
            $('.layout-switch span.jn_ico').click(function () {
                $(this).siblings().removeClass('active');
                $(this).addClass('active');

                if ($(this).hasClass('icon-grid-view')) {
                    //browser local Store
                    if (typeof (Storage) !== "undefined") {
                        localStorage.setItem("resultLayout", "grid");
                    }
                    $('.list-view').removeClass('list-view').addClass('grid-view');
                    $('.job-holder').addClass('col-lg-6');
                } else {
                    if (typeof (Storage) !== "undefined") {
                        localStorage.setItem("resultLayout", "list");
                    }
                    $('.grid-view').removeClass('grid-view').addClass('list-view');
                    $('.job-holder').removeClass('col-lg-6');
                }
            });
        }
    }
    }

</script>
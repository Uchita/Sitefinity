@model Telerik.Sitefinity.Frontend.Mvc.Models.ContentDetailsViewModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Web.DataResolving;

@using Telerik.Sitefinity.Taxonomies;
@using Telerik.Sitefinity.Taxonomies.Model;


@{
    Dictionary<Guid, string>
    catgeoryListDictionary = new Dictionary<Guid, string>();
    var managerArticle1 = TaxonomyManager.GetManager();
    var articleTaxonomy1 = managerArticle1.GetTaxonomies<HierarchicalTaxonomy>
        ().Where(t => t.Name.ToLower() == "Categories").FirstOrDefault();
    List<Taxon>
        topLovelTaxa1 = new List<Taxon>
            ();
    if (articleTaxonomy1 != null)
    {
        foreach (var taxon in articleTaxonomy1.Taxa)
        {
            if (taxon.Parent == null)
            {
                topLovelTaxa1.Add(taxon);
            }
        }
        foreach (var taxon in topLovelTaxa1)
        {
            var hierarchicalTaxon1 = taxon as HierarchicalTaxon;
            catgeoryListDictionary.Add(@taxon.Id, @taxon.Title + "#" + @taxon.UrlName);
            foreach (var it in hierarchicalTaxon1.Subtaxa)
            {
                @ProcessCategories_Add(it, catgeoryListDictionary);
            }
        }
    }
}
@helper ProcessCategories_Add(HierarchicalTaxon taxon1, Dictionary<Guid, string>
    catgeoryListDictionary)
{
    if (taxon1 != null)
    {
        catgeoryListDictionary.Add(taxon1.Id, @taxon1.Title + "#" + taxon1.UrlName);
        foreach (var subTaxon in taxon1.Subtaxa)
        {
            @ProcessCategories_Add(subTaxon, catgeoryListDictionary);
        }
    }
}

@{
    var categoriesName = "";
}
@foreach (var c in Model.Item.Fields.Category)
{

    if (catgeoryListDictionary.ContainsKey((Guid)c))
    {
        if (string.IsNullOrEmpty(categoriesName))
        {
            categoriesName = "<a href=\"/pro-iq/-in-category/categories/news-category/" + @catgeoryListDictionary[c].Split('#')[1] + "\">" + @catgeoryListDictionary[c].Split('#')[0] + "</a>";
        }
        else
        {
            categoriesName += ", " + "<a href=\"/pro-iq/-in-category/categories/news-category/" + @catgeoryListDictionary[c].Split('#')[1] + "\">" + @catgeoryListDictionary[c].Split('#')[0] + "</a>";
        }

    }
}

<style>
    .banner-overlay h1 {
        opacity: 0;
    }
</style>
<div class="single-news-wrap @Model.CssClass">
    <div class="job-detailtop-title">
        <div class="container-fluid">
            <div class="row">
                <div class="col-xs-12">
                    <a href="/pro-iq/">News</a>
                    -
                    @Html.HtmlSanitize((string)categoriesName)
                </div>
            </div>
        </div>
    </div>
    <section class="jxt-news-container jxt-single-item">
        <article class="jxt-news-item jxt-has-image">
            <div class="hidden single-news-title">@Model.Item.Fields.Title</div>
            <div class="news-content" @Html.InlineEditingFieldAttributes("Content", "LongText")>@Html.HtmlSanitize((string)Model.Item.Fields.Content)</div>
            <p>
                &nbsp;
            </p>
            <footer class="jxt-news-item-meta-data">

                <dl class="jxt-news-item-category">
                    <dt>
                        Filed under
                    </dt>
                    <dd itemprop="keywords">
                        @Html.HtmlSanitize((string)categoriesName)
                    </dd>
                </dl>
                <dl class="jxt-news-item-date-published">
                    <dt>
                        Date published
                    </dt>
                    <dd>
                        <span itemprop="datePublished">
                            @Model.Item.GetDateTime("PublicationDate", "d/MM/yyyy")
                        </span>
                    </dd>
                </dl>
                <dl class="jxt-news-item-date-modified">
                    <dt>
                        Date modified
                    </dt>
                    <dd>
                        <span itemprop="dateModified"> </span>
                    </dd>
                </dl>

            </footer>
            <div class="author hidden">@DataResolver.Resolve(@Model.Item.DataItem, "Author", null)</div>
            <div class="jxt-news-item-share">
                @{
                    if (Model.EnableSocialSharing)
                    {
                        var item = Model.Item.DataItem as Telerik.Sitefinity.Model.IHasTitle;
                        @Html.SocialShareOptions(item);
                    }
                }
            </div>
        </article>
    </section>
    <hr class="jxt-news-separator">
    <div class="comments hidden">
        <div class="comments-count">@Html.CommentsCount(string.Empty, @Model.Item.DataItem)</div>
        @Html.CommentsList(@Model.Item.DataItem)
    </div>
</div>
<script>
    $(document).ready(function () {
        $(".banner-overlay h1").text($(".single-news-title").text()).addClass("jxt-news-item-title").css("opacity", 1);
        $(".job-detailtop-title").insertAfter(".banner");
    });
</script>

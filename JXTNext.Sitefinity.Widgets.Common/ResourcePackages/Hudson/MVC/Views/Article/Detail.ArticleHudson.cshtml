﻿@model Telerik.Sitefinity.Frontend.Mvc.Models.ContentDetailsViewModel
@using System.Collections;
@using System.Linq;
@using Telerik.Sitefinity.Frontend.DynamicContent.WidgetTemplates.Fields.Helpers;
@using Telerik.Sitefinity;
@using Telerik.Sitefinity.Data.ContentLinks;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Localization;
@using Telerik.Sitefinity.Model;
@using Telerik.Sitefinity.Model.ContentLinks;
@using Telerik.Sitefinity.Modules.Pages;
@using Telerik.Sitefinity.Pages.Model;
@using Telerik.Sitefinity.Services;
@using Telerik.Sitefinity.Security.Model;
@using Telerik.Sitefinity.Taxonomies;
@using Telerik.Sitefinity.Taxonomies.Model;
@using Telerik.OpenAccess;
@using Telerik.Sitefinity.Web;
@using Telerik.Sitefinity.DynamicModules;
@using Telerik.Sitefinity.Utilities.TypeConverters;
@using Telerik.Sitefinity.GenericContent.Model;
@using Telerik.Sitefinity.Web.DataResolving;
@using Telerik.Sitefinity.Frontend.Mvc.Models;
@using SitefinityWebApp.Helpers;
@using Telerik.Sitefinity.DynamicModules.Model;
@using Telerik.Sitefinity.Modules.Libraries;
@using Telerik.Sitefinity.RelatedData;
@using Telerik.Sitefinity.Libraries.Model;
@using Telerik.Sitefinity.Web.Utilities;
@using Telerik.Sitefinity.Modules.GenericContent;
@using System.Text.RegularExpressions;
@using JXTNext.Sitefinity.Common.Mvc.Helpers;
@*Common JXT build functions*@
@using JXTNext.Sitefinity.Common.Helpers;
@{
                /**/

                List<string> filterValues = new List<string>();
                var articleIds = Model.Item.Fields.articles;
                var authorName = "Hudson";
                var authorUrl = "";

                foreach (var taxonItem in articleIds)
                {
                    Guid articleID = new Guid(taxonItem.ToString());
                    var taxonManager = TaxonomyManager.GetManager();
                    var taxon = taxonManager.GetTaxa<HierarchicalTaxon>().Where(t => t.Id == articleID).ToList().FirstOrDefault();
                    filterValues.Add(taxon.Title);
                }
}
<div class="article-details">
    <div class="@Model.CssClass article-container" @Html.InlineEditingAttributes(Model.ProviderName, Model.ContentType.FullName, (Guid)Model.Item.Fields.Id)>
        <p class="article-detail-category text-center">@(string.Join(", ", filterValues))</p>
        <h1 class="article-detail-title text-center" @Html.InlineEditingFieldAttributes("Title", "ShortText")>
            @Model.Item.Fields.Title
        </h1>
        <p class="article-detail-author text-center">by @authorName</p>

        <!-- TODO -->
        @*Start HeaderImage field*@
        @if (Model.Item.Fields.HeaderImage != null)
        {
            <img data-displaymode="Original" style="display: block; margin-left: auto; margin-right: auto; margin-bottom: 50px; margin-top: 50px; width:100%;" src='@Model.Item.Fields.HeaderImage.Fields.MediaUrl' alt='@Model.Item.Fields.HeaderImage.Fields.AlternativeText' title='@Model.Item.Fields.HeaderImage.Fields.Title' />
        }
        <div>
            @{
                if (Model.EnableSocialSharing)
                {
                    var item = Model.Item.DataItem as Telerik.Sitefinity.Model.IHasTitle;
                    @Html.AddThisShareButtons(item);
                }
            }
            @{
                // TODO temporary solution to route article links to the correct pages
                var fixedHtml = LinkParser.UnresolveLinks((string)Model.Item.Fields.Content);
                fixedHtml = LinkParser.ResolveLinks(fixedHtml, DynamicLinksParser.GetContentUrl, null, SystemManager.IsInlineEditingMode, false);

                // TODO until we have a solution for implementing from Sitefinity support, replace AU huson
                if (fixedHtml.Contains("//au.hudson.com/"))
                {
                    fixedHtml = Regex.Replace(fixedHtml, @"[a-z]+://au.hudson.com/", "/", RegexOptions.IgnoreCase);
                }
            }
            <div class="article-description" @Html.InlineEditingFieldAttributes("Content", "LongText")>@Html.HtmlSanitize(fixedHtml)</div>

            @{
                if (Model.EnableSocialSharing)
                {
                    var item = Model.Item.DataItem as Telerik.Sitefinity.Model.IHasTitle;
                    @Html.AddThisShareButtons(item);
                }
            }
        </div>
    </div>
</div>

@{
    var relatedArticles = ContentHelper.GetRelatedDynamicContentItemsByHierarchicalTaxonomy(articleIds, Model.Item.Fields.Id, "articles", "Telerik.Sitefinity.DynamicTypes.Model.Articles.Article");

    if (relatedArticles.Count > 0)
    {

        <div class="related-articles">
            <div class="text-center">
                <h2>Related articles</h2>
            </div>

            <div class="row long-card-basic-list flex justify-content-md-center">

                @for (int i = 0; i < 3; i++)
                {
                    if (relatedArticles.Count > i)
                    {
                        DynamicContent articleItem = relatedArticles[i];

                        var navigateUrl = HyperLinkHelpers.GetDetailPageUrl(articleItem, new Guid(SiteMapBase.GetCurrentProvider().CurrentNode.Key));
                        var image = articleItem.GetRelatedItems<Image>
                            ("HeaderImage").FirstOrDefault();
                        var thumbnailUrl = "";
                        var imageTitle = "";
                        var articleTitle = articleItem.GetValue("Title");
                        var articleSummary = articleItem.GetValue<Lstring>("Summary").ToString();
                        var articleTaxonIds = articleItem.GetValue<TrackedList<Guid>>("articles");
                        List<string> articleTaxonValues = new List<string>();

                        foreach (var taxonItem in articleTaxonIds)
                        {
                            Guid articleID = new Guid(taxonItem.ToString());
                            var taxonManager = TaxonomyManager.GetManager();
                            var taxon = taxonManager.GetTaxa<HierarchicalTaxon>().Where(t => t.Id == articleID).ToList().FirstOrDefault();
                            articleTaxonValues.Add(taxon.Title);

                        }

                        <div class="col-md-4">
                            <div class="thumbnail card-basic small-caption">
                                @if (image != null)
                                {
                                    thumbnailUrl = MediaContentExtensions.ResolveThumbnailUrl(image, "thumbartic");
                                    imageTitle = image.Title;
                                    <a href="@navigateUrl" class="img-wrap" title="@imageTitle"><img alt="@imageTitle" src="@thumbnailUrl" /></a>

                                }

                                <div class="caption">
                                    <p class="color-light text-uppercase font-medium "><small>@(string.Join(", ", articleTaxonValues))</small></p>
                                    <h4 @Html.InlineEditingFieldAttributes("Title", "ShortText")><a href="@navigateUrl" title="@articleTitle">@articleTitle</a></h4>
                                    @{
                                        string trimSummary = GeneralHelper.TrimStringContent(articleSummary, 90);

                                    }
                                    <p>@trimSummary</p>
                                    <a class="btn btn-more" href="@navigateUrl"></a>
                                </div>

                            </div>
                        </div>
                    }
                }
            </div>

            @if (relatedArticles.Count > 3)
            {
                <div class="text-center">
                    <a href="/insights/articles" class="btn btn-default" title="View more related articles">View more</a>
                </div>
            }

        </div>
    }

}
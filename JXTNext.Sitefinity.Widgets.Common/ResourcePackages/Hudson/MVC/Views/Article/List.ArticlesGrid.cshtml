@model Telerik.Sitefinity.Frontend.DynamicContent.Mvc.Models.DynamicContentListViewModel

@using Telerik.Sitefinity.Frontend.DynamicContent.WidgetTemplates.Fields.Helpers;
@using Telerik.Sitefinity;
@using Telerik.Sitefinity.Data.ContentLinks;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Mvc.Models;
@using Telerik.Sitefinity.Web.DataResolving;
@using Telerik.Sitefinity.Model.ContentLinks;
@using Telerik.Sitefinity.Modules.Pages;
@using Telerik.Sitefinity.RelatedData;
@using Telerik.Sitefinity.Web.DataResolving;
@using System;
@using Newtonsoft.Json;
@using Telerik.Sitefinity.DynamicModules;
@using Telerik.Sitefinity.DynamicModules.Model;

@using Telerik.Sitefinity.Services;
@using Telerik.Sitefinity.Security.Model;
@using Telerik.Sitefinity.Taxonomies;
@using Telerik.Sitefinity.Taxonomies.Model;
@using Telerik.Sitefinity.Model;
@using Telerik.OpenAccess;
@using Telerik.Sitefinity.Web;

@using Telerik.Sitefinity.Modules.Pages;
@using Telerik.Sitefinity.Modules.Libraries;


@*Recursive function to get the classification "Article" list as a Filter*@
@helper ProcessCategories(HierarchicalTaxon taxon)
{
    if (taxon != null)
    {
        var title = taxon.Title;

        <li><a href="/insights/articles/@taxon.UrlName.ToString()" data-filter="@taxon.Title">@taxon.Title</a></li>

        if (taxon.Subtaxa != null && taxon.Subtaxa.Count > 0)
        {
            foreach (var subTaxon in taxon.Subtaxa)
            {
                //Recursive call
                ProcessCategories(subTaxon);
            }
        }
    }
}

<div class="@Model.CssClass">

    <div class="articles-top">
        <div class="press-release-filter">
            <ul class="list-unstyled clearfix">

                @{

                    var managerArticle = TaxonomyManager.GetManager();
                    var articleTaxonomy = managerArticle.GetTaxonomies<HierarchicalTaxonomy>().Where(t => t.Name == "Articles").SingleOrDefault();
                    List<Taxon> topLovelTaxa = new List<Taxon>();

                    if (articleTaxonomy != null)
                    {
                        foreach (var taxon in articleTaxonomy.Taxa)
                        {
                            if (taxon.Parent == null)
                            {
                                topLovelTaxa.Add(taxon);
                            }
                        }

                        foreach (var taxon in topLovelTaxa)
                        {

                            var hierarchicalTaxon = taxon as HierarchicalTaxon;

                            var dropCls = "";
                            if (hierarchicalTaxon.Subtaxa != null && hierarchicalTaxon.Subtaxa.Count > 0)
                            {
                                dropCls = "dropdown";
                            }
                            <li class="@dropCls">
                                <a href="/insights/articles/@taxon.UrlName.ToString()" data-filter="@taxon.Title">@taxon.Title</a>

                                @if (hierarchicalTaxon != null)
                                {
                                    if (hierarchicalTaxon.Subtaxa != null && hierarchicalTaxon.Subtaxa.Count > 0)
                                    {
                                        <ul class="dropdown-menu">
                                            @foreach (var childTaxon in hierarchicalTaxon.Subtaxa)
                                            {
                                                @ProcessCategories(childTaxon)
                                            }

                                        </ul>
                                    }
                                }
                            </li>

                        }
                    }

                }


                <li><a href="@SiteMapBase.GetActualCurrentNode().Url.ToString().Substring(1)/">show all</a></li>
            </ul>
        </div>

    </div>


    <div class="row long-card-basic-list flex">
        @foreach (var item in Model.Items)
        {
            var navigateUrl = HyperLinkHelpers.GetDetailPageUrl(item, ViewBag.DetailsPageId, ViewBag.OpenInSamePage, Model.UrlKeyPrefix);

            <div class="col-md-4">
                <div class="thumbnail card-basic small-caption">
                    @if (item.Fields.HeaderImage.DataItem != null)
                    {
                        <a href="@navigateUrl" class="img-wrap" title="@item.Fields.HeaderImage.Fields.Title"><img alt="@item.Fields.HeaderImage.Fields.Title" src="@MediaContentExtensions.ResolveThumbnailUrl(item.Fields.HeaderImage.DataItem, "thumbartic")" /></a>
                    }
                    @*@MediaContentExtensions.ResolveThumbnailUrl(item.Fields.Pic.DataItem, "thumbcrop4")*@

                    <div class="caption">
                        <p class="color-light text-uppercase font-medium ">
                            @{
                                List<string> filterValues = new List<string>();
                                var articleIds = item.Fields.articles;
                                foreach (var taxonItem in articleIds)
                                {
                                    Guid articleID = new Guid(taxonItem.ToString());
                                    var taxonManager = TaxonomyManager.GetManager();
                                    var taxon = taxonManager.GetTaxa<HierarchicalTaxon>().Where(t => t.Id == articleID).ToList().FirstOrDefault();
                                    filterValues.Add(taxon.Title);
                                }
                            }
                            <small>
                                @(string.Join(", ", filterValues))
                            </small>
                        </p>
                        <h4>@Html.HtmlSanitize((string)item.Fields.Title)</h4>
                        @{
                            var summary = Html.HtmlSanitize((string)item.Fields.Summary).ToString();
                            string trimSummary = !String.IsNullOrWhiteSpace(summary) && summary.Length >= 120 ? summary.Substring(0, 120) + "..." : summary;
                        }
                        <p>@trimSummary</p>
                        <a class="btn btn-more" href="@navigateUrl"></a>
                    </div>

                </div>
            </div>
        }

    </div>

    @if (Model.ShowPager)
    {
        @Html.Action("Index", "ContentPager", new { currentPage = Model.CurrentPage,
                        totalPagesCount = Model.TotalPagesCount.Value,
                        redirectUrlTemplate = ViewBag.RedirectPageUrlTemplate })
    }


</div>

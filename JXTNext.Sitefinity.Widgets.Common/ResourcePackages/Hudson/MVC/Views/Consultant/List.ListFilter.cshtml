@model Telerik.Sitefinity.Frontend.DynamicContent.Mvc.Models.DynamicContentListViewModel

@using Telerik.Sitefinity.Frontend.DynamicContent.WidgetTemplates.Fields.Helpers;
@using Telerik.Sitefinity;
@using Telerik.Sitefinity.Data.ContentLinks;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Mvc.Models;
@using Telerik.Sitefinity.Web.DataResolving;
@using Telerik.Sitefinity.Model.ContentLinks;
@using Telerik.Sitefinity.Modules.Pages;
@using Telerik.Sitefinity.Modules.Libraries;

@* Used for getting category list *@
@using Telerik.Sitefinity.Services;
@using Telerik.Sitefinity.Security.Model;
@using Telerik.Sitefinity.Taxonomies;
@using Telerik.Sitefinity.Taxonomies.Model;
@using Telerik.Sitefinity.Model;
@using Telerik.OpenAccess;

@* For Dynamic content: Module builder [Office] *@
@using Telerik.Sitefinity.DynamicModules;
@using Telerik.Sitefinity.DynamicModules.Model;
@using Telerik.Sitefinity.Utilities.TypeConverters;

<div class="@Model.CssClass">
    <!-- Getting the filters -->
    <div class="row filters-wrapper">
        <!-- Specialisation filter list -->
        <div class="col-xs-12 col-sm-4 col-md-4">
            <div class="form-group">
                <label for="SectorFilter">
                    AREA OF SPECIALISATION
                </label>
                <div class="select">
                    <select id="SectorFilter" name="SectorFilter" required="required" class="form-control">
                        <option value="all">All Specialisation</option>
                        @{
                            List
                            <Taxon>
                                cates = JXTNext.Sitefinity.Common.Helpers.SitefinityHelper.GetTopLevelCategories();

                            Taxon sectorTaxon = cates.Where(c => c.Title.ToUpper() == "SECTORS").FirstOrDefault();

                            var dd = sectorTaxon as HierarchicalTaxon;
                            foreach (var item in dd.Subtaxa)
                            {
                                <option value="@item.Name">@item.Title</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>

        <!-- Location filter list -->
        <div class="col-xs-12 col-sm-4 col-md-4">
            <div class="form-group">
                <label for="LocationFilter">
                    Location
                </label>
                <div class="select">
                    <select id="LocationFilter" name="LocationFilter" required="required" class="form-control">
                        <option value="all">All Location</option>
                        @{
                            var manager = DynamicModuleManager.GetManager("OpenAccessProvider");
                            var officeType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.Offices.Office");
                            var officeItems = manager.GetDataItems(officeType).Where(x => x.Status == Telerik.Sitefinity.GenericContent.Model.ContentLifecycleStatus.Live).ToList();

                            foreach (var office in officeItems)
                            {
                                var officeId = office.Id;

                                <option value="@office.UrlName.ToString()">@office.GetValue("Name").ToString()</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>

        <div class="col-xs-12 col-sm-4 col-md-4">
            <div class="btn-near-labels form-group">
                <button type="button" id="consultantSearch" class="sf-SubmitButton btn btn-primary">SEARCH</button>
            </div>
        </div>

        <div class="col-xs-12">
            <p>Consultant(s) found: <strong class="const-found">0</strong></p>
        </div>
    </div>
    <!-- End of Specialisation filter list -->

</div>


@foreach (var item in Model.Items)
{
    var navigateUrl = HyperLinkHelpers.GetDetailPageUrl(item, ViewBag.DetailsPageId, ViewBag.OpenInSamePage, Model.UrlKeyPrefix);

    List<string>
    filterValues = new List<string>
        ();

    if (item.Fields.Category != null)
    {
        foreach (var taxon in item.GetHierarchicalTaxons("Category"))
        {
            filterValues.Add(taxon.Name);
        }
    }

    var OfficeLocationName = "";
    var OfficeLocationUrl = "";

    if (item.Fields.Office != null)
    {
        if (item.Fields.Office.GetType().ToString() == "Telerik.Sitefinity.Frontend.Mvc.Models.ItemViewModel")
        {
            OfficeLocationName = Html.HtmlSanitize((string)item.Fields.Office.Fields.Name).ToString();
            OfficeLocationUrl = item.Fields.Office.Fields.UrlName.ToString();
        }
        else
        {
            List<string> OfficeLocationNameList = new List<string>();
            List<string> OfficeLocationUrlList = new List<string>();

            foreach (var office in item.Fields.Office)
            {
                if (!OfficeLocationNameList.Contains((string)office.Fields.Name))
                {
                    OfficeLocationNameList.Add((string)office.Fields.Name);
                    OfficeLocationUrlList.Add(office.Fields.UrlName.ToString());
                }
            }

            OfficeLocationName = string.Join(", ", OfficeLocationNameList.ToArray());
            OfficeLocationUrl = string.Join(",", OfficeLocationUrlList.ToArray());
        }
    }

    <div class="contact-consultant row" data-filtersector="@(string.Join(",",filterValues))" data-filterlocation="@OfficeLocationUrl">

        @if (item.Fields.Pic != null)
        {
            <div class="col-md-6">
                <a class="contact-consultant-image" href="@navigateUrl">
                    <img src="@MediaContentExtensions.ResolveThumbnailUrl(item.Fields.Pic.DataItem, "thumbcrop4")" alt="@item.Fields.Pic.Fields.Title" />
                    <div class="contact-image-rollover"><div class="display-table"><div class="display-cell">View Profile</div></div></div>
                </a>
            </div>
        }

        <div class="col-md-6">
            <div class="contact-consultant-info">
                <div class="color-highlight contact-consultant-name">@Html.HtmlSanitize((string)item.Fields.ConsultantName)</div>
                @if (item.Fields.Office != null)
                {
                    <div class="contact-consultant-position">@Html.HtmlSanitize((string)item.Fields.Position), @OfficeLocationName</div>
                }
                else
                {
                    <div class="contact-consultant-position">@Html.HtmlSanitize((string)item.Fields.Position)</div>
                }

                @if (!string.IsNullOrWhiteSpace(@item.Fields.Email)
                && !string.IsNullOrWhiteSpace(@item.Fields.PhoneNumber)
                && !string.IsNullOrWhiteSpace(@item.Fields.LinkedInProfileUrl))
                {
                    <div class="contact-consultant-contacts">
                        @if (!string.IsNullOrWhiteSpace(@item.Fields.Email))
                        {
                            <em class="far fa-envelope"></em>@item.Fields.Email<br />
                        }

                        @if (!string.IsNullOrWhiteSpace(@item.Fields.PhoneNumber))
                        {
                            <em class="fas fa-phone"></em> @item.Fields.PhoneNumber<br />
                        }

                        @if (!string.IsNullOrWhiteSpace(@item.Fields.LinkedInProfileUrl))
                        {
                            <a href="@item.Fields.LinkedInProfileUrl"><em class="fab fa-linkedin-in"></em></a>@item.Fields.LinkedInProfileName
                        }
                    </div>
                }
                <a class="btn btn-primary" href="@navigateUrl">Contact me</a>
            </div>
        </div>

    </div>
}

<div class="alert alert-info hidden"><small>There are no consultant matching with your search filter.</small></div>


<script>
    jQuery(document).ready(function ($) {
        $('#consultantSearch').on('click', function () {

            var sectorFilter = $('#SectorFilter').val().toLowerCase();
            var locationFilter = $('#LocationFilter').val().toLowerCase();
            var consultantItems = $('.contact-consultant');

            //except for all add hidden class to unmatched item
            consultantItems.removeClass('hidden');

            consultantItems.each(function () {
                if (!checkFilter($(this).data('filtersector'), $(this).data('filterlocation'), sectorFilter, locationFilter)) {
                    $(this).addClass('hidden');
                }
            });


            //checking if there are matched items
            if ($('.contact-consultant:not(.hidden)').length == 0) {
                $('.alert').removeClass('hidden');
            } else {
                $('.alert').addClass('hidden');
            } 

            $('.const-found').text($('.contact-consultant:not(.hidden)').length);

        }); //end of click function

        //function to check the filter match
        function checkFilter(curSectorVal, curLocationVal, filterSectorVal, filterLocationVal) {
            if (curSectorVal != "") {
                //multiple sector need to be split for individual check
                var curSectorVal = curSectorVal.split(',');
                if (curSectorVal.length) {
                    var flag = false;
                    if (filterSectorVal != 'all') {
                        for (i = 0; i < curSectorVal.length; i++) {
                            if (curSectorVal[i].toLowerCase() == filterSectorVal) {
                                flag = true;
                                break; // if true just break the loop
                            } else {
                                flag = false;
                            }
                        }
                    } else {
                        flag = true;
                    }

                    //checking location to matched result
                    var curLocationVal = curLocationVal.split(',');
                    if (curLocationVal.length) {
                        if (filterLocationVal != 'all' && flag == true) {
                            //match the value of filter and
                            //also check the result of sector that need to be true
                            for (i = 0; i < curLocationVal.length; i++) {
                                if (curLocationVal[i].toLowerCase() == filterLocationVal) {
                                    flag = true;
                                    break;
                                } else {
                                    flag = false;
                                }
                            }
                        } //end of all check
                    } else {
                        flag = false;
                    }

                    //final check the flag from results of two filters
                    if (flag === false) {
                        return false;
                    } else {
                        return true;
                    }
                }
            } else {
                return false;
            }

        }

    });
</script>




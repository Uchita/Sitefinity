@model dynamic
@using Telerik.Sitefinity.Frontend.Mvc.Helpers
@using JXTNext.Sitefinity.Widgets.JobAlert.Mvc.Models

@Html.StyleSheet(Url.EmbeddedResource("JXTNext.Sitefinity.Widgets.Job.Mvc.Controllers.JobSearchController", "JXTNext.Sitefinity.Widgets.Job.Mvc.Scripts.JobSearch.dropdowntree.css"), "bottom")
@Html.Script(Url.EmbeddedResource("JXTNext.Sitefinity.Widgets.Job.Mvc.Controllers.JobSearchController", "JXTNext.Sitefinity.Widgets.Job.Mvc.Scripts.JobSearch.dropdowntree.js"), "bottom")

@Html.Script(Url.WidgetContent("/Mvc/Scripts/jquery.nstSlider.js"))
@Html.StyleSheet(Url.WidgetContent("/Mvc/Styles/rangeSlider.css"))

<h2><span class="alert-icon far fa-bell"></span>Edit job alert</h2>

<h3>Alert details</h3>

@if (Model != null)
{
<form method="post" action="@Url.Action("Edit","JobAlert")" onsubmit="return preventSubmit();">
    @{
        int counter = 0;
        var privacyErrMsg = "Please agree to Hudson's privacy policy";
    }

    <div class="field-wrapper basic-form no-marg-top">
        <div class="row form-group">
            <div class="col-md-4 text-right">
                <label for="name">Job alert name*</label>
            </div>
            <div class="col-md-8">
                <input type="hidden" name="Id" value="@Model.Id" />
                <input type="text" name="Name" id="name" required value="@Model.Name" class="form-control" />
            </div>
        </div>

        <div class="row form-group">
            <div class="col-md-4 text-right">
                <label for="keywords">Keywords</label>
            </div>
            <div class="col-md-8">
                <input type="text" name="Keywords" id="keywords" value="@Model.Keywords" class="form-control" />
            </div>
        </div>


        @foreach (var item in Model.Data)
        {
            if (item.Name != "Salary" && item.Name != "CompanyName")
            {
                <div class="row form-group">
                    <div class="col-md-4 text-right">
                        @{
                            var displayTitle = item.Name;
                            if (displayTitle == "CountryLocationArea")
                            {
                                displayTitle = "Location";
                            }
                            else if (displayTitle == "WorkType")
                            {
                                displayTitle = "Work Type";
                            }
                            else if (displayTitle == "CompanyName")
                            {
                                displayTitle = "Company Name";
                            }
                        }
                        <label>@displayTitle</label>
                    </div>
                    <div class="col-md-8">
                        <input type="hidden" name="Filters[@counter].RootId" value='@item.Name' />
                        <select id=@string.Format("selected-{0}", item.Name) name="Filters[@counter].Values" style="display:none" multiple class="form-control"></select>
                        <div class="dropdown dropdown-tree" id=@item.Name></div>
                    </div>
                </div>
                counter++;
            }
            else if (item.Name == "Salary")
            {
                <div class="row form-group">
                    <div class="col-md-4 text-right">
                        <label>@item.Name</label>
                    </div>
                    <div class="col-md-8">
                        <input type="hidden" name="SalaryStringify" id="salary-model-bind-hidden" />
                        <select class="SalaryRangeSelect form-control">
                            <option value="-1" selected>Choose Salary</option>
                            @foreach (var salaryItem in item.Filters)
                            {
                                <option value="@salaryItem.ID">@salaryItem.Label</option>
                            }
                        </select>
                        @foreach (var salaryItem in item.Filters)
                        {
                            var lower = 15000;
                            var upper = 200000;
                            if (salaryItem.Label == "Hourly Rate")
                            {
                                lower = 18;
                                upper = 200;
                            }
                            <div class="salaryrangewrapper visible-hidden" id="@salaryItem.ID">

                                <div class="nstSlider" data-range_min="@lower" data-range_max="@upper"
                                     data-cur_min="@lower" data-cur_max="@upper">

                                    <div class="bar"></div>
                                    <div class="leftGrip"></div>
                                    <div class="rightGrip"></div>
                                </div>
                                <div class="leftLabel">$<span>@lower</span></div>
                                <div class="rightLabel">$<span>@upper</span></div>

                            </div>

                        }
                    </div>
                </div>
            }
        }
        <div class="row form-group">
            <div class="col-md-4 text-right"></div>
            <div class="col-md-8">
                <div class="checkbox clearfix">
                    <input id="privacypolicy" name="privacypolicy" type="checkbox" value="agree" checked required title="@privacyErrMsg" oninvalid='this.setCustomValidity("@privacyErrMsg")' oninput="this.setCustomValidity('')">
                    <span class="checkbox-icon fas fa-check"></span>
                    I agree to Hudson's <a href="/privacy-policy" target="_blank">Privacy Policy</a>
                </div>
            </div>
        </div>
        <div class="row form-group">
            <div class="col-md-4 text-right"></div>
            <div class="col-md-8">
                <input type="submit" value="SAVE" class="btn-primary" />
                <a href="/user-dashboard" class="btn">Cancel</a>
            </div>
        </div>


        @*@Html.ActionLink("SEARCH", "ViewResults", "JobAlert", new { id = Model.Id }, null)
        @Html.ActionLink("DELETE", "Delete", "JobAlert", new { id = Model.Id }, new { onclick = "return confirmDelete();" })*@
    </div>
</form>
}


<script type="text/javascript">
    var optionsArray = {};
    var isSalaryExists = false;
    var isSlarySelected = false;
    var salary = { RootName: 'Salary', TargetValue: '', LowerRange: 15000, UpperRange: 200000 };

    function preventSubmit() {
        $.each(optionsArray, function (id, item) {
            $($("#" + id).GetSelectedElementIds()).each(function (index, value) {
                $("#selected-" + id).append('<option value="' + value + '" selected="true">' + value + '</option>')
            });
        });

        if (isSlarySelected) {
            $('#salary-model-bind-hidden').val(JSON.stringify(salary));
        }

        return true;
    };

    function confirmDelete() {
        if (confirm("Are you sure you want to delete this record?")) {
            return true;
        }
        else {
            return false;
        }
    };

    

    $(document).ready(function () {
          @{
                var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
                var json = serializer.Serialize(Model);
          }

        var model = @Html.Raw(json);
        var modelSalary = model.Salary;
        
        if (modelSalary != null && modelSalary != 'undefined') {
            salary = modelSalary;
            isSlarySelected = true;
            $('.SalaryRangeSelect').val(modelSalary.TargetValue);
            $('#' + modelSalary.TargetValue).removeClass('visible-hidden');
            $('.SalaryRangeSelect').addClass('changed');

            var salarySliderEle = $('#' + modelSalary.TargetValue).parent().find('.nstSlider');
            if (salarySliderEle != null) {
                $(salarySliderEle).data("cur_min", modelSalary.LowerRange);
                $(salarySliderEle).data("cur_max", modelSalary.UpperRange);
            }
        }

        $('select').on('change', function () {
            isSlarySelected = false;
            $('.salaryrangewrapper').each(function (i, obj) {
                $(this).addClass('visible-hidden');
            });
            if (this.value != -1) {
                $(this).addClass('changed');
                isSlarySelected = true;
                $('#' + this.value).removeClass('visible-hidden');
                salary.TargetValue = this.value;
                salary.LowerRange = $(this).parent().find('.leftLabel span').text();
                salary.UpperRange = $(this).parent().find('.rightLabel span').text();
            } else if ($(this).hasClass('changed') && this.value == -1) {
                isSlarySelected = false;
            }

        });

        $('.nstSlider').each(function (i, obj) {
            $(this).nstSlider({
                "rounding": {
                    "1": "600",
                    "1000": "200000"
                },
                "crossable_handles": false,
                "left_grip_selector": ".leftGrip",
                "right_grip_selector": ".rightGrip",
                "value_bar_selector": ".bar",
                "user_mouseup_callback": function (leftValue, rightValue, isLeftGripMoved) {
                    salary.LowerRange = leftValue;
                    salary.UpperRange = rightValue;
                    $(this).parent().find('.leftLabel span').text(leftValue);
                    $(this).parent().find('.rightLabel span').text(rightValue);
                },
                "value_changed_callback": function (cause, leftValue, rightValue) {
                    $(this).parent().find('.leftLabel span').text(leftValue);
                    $(this).parent().find('.rightLabel span').text(rightValue);
                }
            });
        });

        
        if (model != null && model != "undefined") {
            var filterData = JSON.parse('@Html.Raw(Json.Encode(Model))');
            $.each(filterData.Data, function (index, item) {
                var displayTitle = item.Name;
                if (displayTitle == 'CountryLocationArea')
                    displayTitle = 'Location';
                else if (displayTitle == 'WorkType')
                    displayTitle = 'Work Type';
                else if (displayTitle == 'CompanyName')
                    displayTitle = 'Company Name';

                optionsArray[item.Name] = {
                    title: displayTitle,
                    data: item.Filters,
                    maxHeight: 500,
                    closedArrow: '<i class="fa fa-caret-right" aria-hidden="true"></i>',
                    openedArrow: '<i class="fa fa-caret-down" aria-hidden="true"></i>',
                    multiSelect: true,
                    selectChildren: true,
                    expandChildren: true,
                    enableSearch: false,
                    prefixIdText: ''
                };
                $("#" + item.Name).DropDownTree(optionsArray[item.Name]);
            });
        }
    });
</script>

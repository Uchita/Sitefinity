@using JXTNext.Sitefinity.Widgets.JobApplication.Mvc.Models.JobApplication;

@model JobApplicationViewModel

@using JXTNext.Sitefinity.Common.Helpers

@if (ViewBag.ShowFilesUploadMessage != null)
{
    <div class="alert alert-success">@ViewBag.ShowFilesUploadMessage</div>
}

    <form id="job-app-form" action="@Url.Action("ApplyJob","JobApplication")" method="post">
        <div class="container">
            <div class="section-header">

                <div id="login-register-container">
                    <div id="check-login">
                        E-mail id: <input id="userid" type="text" name="Email" required/>
                        
                    </div>

                    <div id="register" hidden>
                        <div id="firstname-lastname">
                            Name: <input id="firstname-reg" type="text" name="FirstName" /><input type="text" name="LastName" /><br />
                            Phone Number: <input type="text" name="PhoneNumber" /><br />
                        </div>

                     Password: <input id="password-reg" type="password" name="Password"/>

                    </div>
                </div>

                
            </div>

            <div class="row">

                @if (Model.ApplicationStatus == JobApplicationStatus.Available)
                {
                <p>@ViewBag.UserEmail</p>
                <div id="upload-files-container">
                    <h3>@Model.ApplicationTitle</h3>
                    @foreach (JobApplicationAttachmentItem attachment in Model.ApplicationAttachments)
                    {
                        <div class="form-group col-md-6">
                            <label>@attachment.Title</label>
                            <input type="file" id="@attachment.AttachementFileUploadKey" name="@attachment.AttachementFileUploadKey" />
                        </div>
                    }


                    <div class="row">
                        <div class="form-group col-md-6">
                            <button type="button" id="resume-google-drive-btn">Google Drive Resume</button>
                        </div>
                        <div class="form-group col-md-6">
                            <button type="button" id="coverletter-google-drive-btn">Google Drive CoverLetter</button>
                        </div>
                    </div>

                    <div class="row">
                        <div class="form-group col-md-6">
                            <button id="dropbox-resume-btn">Dropbox Resume</button>
                        </div>
                        <div class="form-group col-md-6">
                            <button id="dropbox-coverletter-btn">Dropbox Cover Letter</button>
                        </div>
                    </div>

                    <input type="hidden" id="uploadResumeJson" name="UploadFilesResume" />
                    <input type="hidden" id="uploadCoverLetterJson" name="UploadFilesCoverLetter" />
                    <input type="hidden" id="resume-selected-type" name="ResumeSelectedType" />
                    <input type="hidden" id="coverletter-selected-type" name="CoverLetterSelectedType" />
                    <input type="hidden" id="jobid" name="JobId" value="@Model.JobId" />

                    <div class="form-group button-wrapper">
                        <input id="apply" type="submit" value="Apply" class="btn" disabled />
                    </div>
                </div>
                }
                else
                {
                    <h4>@Model.ApplicationStatus.ToString()</h4>
                    <p>@Model.ApplicationMessage</p>
                }
            </div>
           

           
        </div>
    </form>

@{
    string googleClientId = new SiteSettingsHelper().GetCurrentSiteGoogleClientId();
    string googleAPIKey = new SiteSettingsHelper().GetCurrentSiteGoogleClientAPIKey();
    string dbAPIKey = new SiteSettingsHelper().GetCurrentSiteDropboxClientAPIKey();
}

 <script>

      var appStatus = '@Model.ApplicationStatus';
     var isUserLoggedIn = '@ViewBag.IsUserLoggedIn';
     var registerForm = false;


   
     function validateEmail(elementValue) {
        var emailPattern = /^[a-zA-Z0-9._-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
        return emailPattern.test(elementValue);
    };


    var uploadResumeModel = { UrlPath: '', FileName: '', Field: '', MIMEType: '', AuthToken: '' };
    var uploadCoverModel = { UrlPath: '', FileName: '', Field: '', MIMEType: '', AuthToken: '' };
    var isGoogleResume = false;
    var isDropboxResume = false;
    var resumeSelectedType = 'Local';
     var coverLetterSelectedType = 'Local';
    
    $("#coverletter-selected-type").val(coverLetterSelectedType);
    $("#resume-selected-type").val(resumeSelectedType);

     $(document).ready(function () {

         $('form').submit(function (e) {
             e.preventDefault();
             var self = this;
             if ((appStatus == 'Available' && isUserLoggedIn == 'True') || registerForm) {
                 self.submit();
             }
             
             var parm = { email: $('#userid').val(), password: $('#password-reg').val() };
             var urlPath = $(location).attr('pathname') + "/ValidateUser";
             $.ajax({
                 type: 'POST',
                 cache: false,
                 url: urlPath,
                 data: parm,
                 dataType: 'Json',
                 success: function (response) {
                     if (response == true) {
                         self.submit();
                     }
                 },
                 error: function (response) {               
                 }
             });
         });


         if (appStatus == 'Available' && isUserLoggedIn == 'True') {
             $('#login-register-container').hide();
             $('#apply').removeAttr('disabled');
             $('#userid').removeAttr('required');
         }

         if (appStatus == 'Available' && isUserLoggedIn != 'True') {
             $('#upload-files-container').hide();
             $('#apply').removeAttr('disabled');
         }

        $('#application-resume').change(function () {
            resumeSelectedType = 'Local';
            $("#resume-selected-type").val(resumeSelectedType);
        });

        $('#application-coverletter').change(function () {
            coverLetterSelectedType = 'Local';
            $("#coverletter-selected-type").val(coverLetterSelectedType);
        });


        $('#userid').keyup(function () {
            var emailId = $(this).val();
            var valid = validateEmail(emailId);
            var parm = { email: emailId };
            var urlPath = $(location).attr('pathname') + "/CheckUser";
            if (valid) {
                $(this).css('color', '#000');
                $.ajax({
                    type: 'POST',
                    cache: false,
                    url: urlPath,
                    data: parm,
                    dataType: 'Json',
                    success: function (response) {
                        if (response == false) {
                             $('#register').show();
                            $('#firstname-lastname').removeAttr('hidden');
                            registerForm = true;
                            $('#password-reg').prop('required', true);
                            $('#firstname-reg').prop('required', true);
                            $('#password-reg').prop('pattern', "(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}");
                            $('#password-reg').prop('title', "Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters");

                        }
                        else {
                             $('#register').show();
                            $('#firstname-lastname').attr('hidden', 'true');
                            registerForm = false; 
                            $('#firstname-reg').prop('required', false);
                            $('#password-reg').removeAttr('pattern');
                            $('#password-reg').removeAttr('title');
                            $('#password-reg').prop('required', true);
                        }
                        $('#upload-files-container').show();
                        $('#apply').removeAttr('disabled');
                        console.log(response);
                    },
                    error: function (response) {
                        console.log('error response: ' + response);
                    }
                });
            } else {
                console.log("red email");
                $('#upload-files-container').hide();
                $('#register').hide();
                $(this).css('color', 'red');
                $('#password-reg').prop('required', false);
                $('#firstname-reg').prop('required', false);
                $('#password-reg').removeAttr('pattern');
                $('#password-reg').removeAttr('title');
            }
        });

        
       dropboxResumeOptions = {
            // Required. Called when a user selects an item in the Chooser.
            success: function (files) {
                $('.test').each(function () {
                    $(this).val('');
                });

                uploadResumeModel.UrlPath = files[0].link;
                uploadResumeModel.FileName = files[0].name;

                var stringyModel = JSON.stringify(uploadResumeModel);

                if (isDropboxResume) {
                    resumeSelectedType = 'Dropbox';
                    $('#uploadResumeJson').val(stringyModel);
                    $('#application-resume').val('');
                    $("#resume-selected-type").val(resumeSelectedType);
                }
                else {
                    coverLetterSelectedType = 'Dropbox';
                    $('#uploadCoverLetterJson').val(stringyModel);
                    $('#application-coverletter').val('');
                    $("#coverletter-selected-type").val(coverLetterSelectedType);
                }

                $('#dburl').text(files[0].link);
                $('#dbname').text(files[0].name);
            },

            // Optional. Called when the user closes the dialog without selecting a file
            // and does not include any parameters.
            cancel: function () { },

            // Optional. "preview" (default) is a preview link to the document for sharing,
            // "direct" is an expiring link to download the contents of the file. For more
            // information about link types, see Link types below.
            linkType: "direct", // or "direct"

            // Optional. A value of false (default) limits selection to a single file, while
            // true enables multiple file selection.
            multiselect: false, // or true

            // Optional. This is a list of file extensions. If specified, the user will
            // only be able to select files with these extensions. You may also specify
            // file types, such as "video" or "images" in the list. For more information,
            // see File types below. By default, all extensions are allowed.
            extensions: ['.pdf', '.doc', '.docx'],

            // Optional. A value of false (default) limits selection to files,
            // while true allows the user to select both folders and files.
            // You cannot specify `linkType: "direct"` when using `folderselect: true`.
            folderselect: false, // or true
        };


        $('#dropbox-resume-btn').click(function () {
            isDropboxResume = true;
            Dropbox.choose(dropboxResumeOptions);
        });

        $('#dropbox-coverletter-btn').click(function () {
            isDropboxResume = false;
            Dropbox.choose(dropboxResumeOptions);
        });

    });


        // Googler Drive

        // The Browser API key obtained from the Google API Console.
        var developerKey = "@googleAPIKey";

        // The Client ID obtained from the Google API Console. Replace with your own Client ID.
        var clientId = "@googleClientId";

        // Scope to use to access user's photos.
        var scope = 'https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file';

        var pickerApiLoaded = false;
        var oauthToken;


        // Use the API Loader script to load google.picker and gapi.auth.
        function onApiLoad() {
            gapi.load('auth2', onAuthApiLoad);
            gapi.load('picker', onPickerApiLoad);
        }

        function onAuthApiLoad() {
            $('#resume-google-drive-btn').click(function () {
                isGoogleResume = true;

                gapi.auth2.authorize({
                    client_id: clientId,
                    scope: scope
                }, handleAuthResult);
            });

           $('#coverletter-google-drive-btn').click(function () {
                isGoogleResume = false;
                gapi.auth2.authorize({
                    client_id: clientId,
                    scope: scope
                }, handleAuthResult);
            });

        }

        function onPickerApiLoad() {
            pickerApiLoaded = true;
            createPicker();
        }

        function handleAuthResult(authResult) {
            if (authResult && !authResult.error) {
                oauthToken = authResult.access_token;
                document.getElementById('oAuthToken').innerHTML = authResult.access_token;
                createPicker();
            }
        }

        // Create and render a Picker object for picking user Photos.
        function createPicker() {
            if (pickerApiLoaded && oauthToken) {
                var picker = new google.picker.PickerBuilder().
                    addView(new google.picker.View(google.picker.ViewId.DOCS).setMimeTypes("application/pdf,text/plain,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/rtf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")).
                    setOAuthToken(oauthToken).
                    setDeveloperKey(developerKey).
                    setCallback(pickerCallback).
                    build();
                picker.setVisible(true);
            }
        }

        // A simple callback implementation.
        function pickerCallback(data) {
            var url = 'nothing';
            var name = "";
            var fileId = "";
            var mime = "";

            console.log(data);
            if (data[google.picker.Response.ACTION] == google.picker.Action.PICKED) {
                var doc = data[google.picker.Response.DOCUMENTS][0];
                fileId = doc[google.picker.Document.ID];
                url = doc[google.picker.Document.URL];
                name = doc[google.picker.Document.NAME]
                mime = doc[google.picker.Document.MIME_TYPE];

                uploadResumeModel.UrlPath = url;
                uploadResumeModel.FileName = name;
                uploadResumeModel.Field = fileId;
                uploadResumeModel.MIMEType = mime;
                uploadResumeModel.AuthToken = oauthToken;

                var stringyModel = JSON.stringify(uploadResumeModel);

                if (isGoogleResume) {
                    resumeSelectedType = 'GoogleDrive';
                    $('#uploadResumeJson').val(stringyModel);
                    $('#application-resume').val('');
                    $("#resume-selected-type").val(resumeSelectedType);
                }
                else {
                    coverLetterSelectedType = 'GoogleDrive';
                    $('#uploadCoverLetterJson').val(stringyModel);
                    $('#application-coverletter').val('');
                    $("#coverletter-selected-type").val(coverLetterSelectedType);
                }
            }

            var message = url;
        }
</script>

<script type="text/javascript" src="https://www.dropbox.com/static/api/2/dropins.js" id="dropboxjs" data-app-key="@dbAPIKey"></script>
<script type="text/javascript" src="https://apis.google.com/js/api.js?onload=onApiLoad"></script>
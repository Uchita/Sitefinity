@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel

@using System;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;

@* Used in articles navigation this template involves some trickery because the OOTB navigation
    doesn't show pages with "Show in Nvaigation" so we could not add a "Show all" to the menu.
    Instead I have used the parent page feature to add a show all. To use this select the base
    page and choose 3 levels, then go to advanced settings of the widget and set ShowParentPage to true*@

@{
    string uniqueId = Guid.NewGuid().ToString();
}
<div class="@Model.CssClass">
    <div class="button-toggler visible-xs text-center"><span class="btn btn-sm collapsed" data-toggle="collapse" data-target="#@uniqueId">Filter Topic</span></div>
    <div class="press-release-filter" id='@uniqueId'>
        <ul class="list-unstyled clearfix">
            @foreach (var node in Model.Nodes.FirstOrDefault()?.ChildNodes)
            {
                @RenderSubLevelsRecursive(node);
            }
            @if (Model.Nodes.FirstOrDefault() != null)
            {
                var parent = Model.Nodes.FirstOrDefault();
                <li class="@GetClass(parent)">
                    <a href="@parent.Url" title="@parent.Title">Show All</a>
                </li>
            }
        </ul>
    </div>
</div>

@*Here is specified the rendering for the sub levels*@
@helper RenderSubLevelsRecursive(NodeViewModel node)
{
    if (node != null && node.ChildNodes.Count > 0)
    {
        <li class="dropdown @GetClass(node)">
            <a href="@node.Url" title="@node.Title">@node.Title</a>
            @if (node.ChildNodes.Count > 0)
            {
                <ul class="dropdown-menu">
                    @foreach (var childNode in node.ChildNodes)
                    {
                        @RenderSubLevelsRecursive(childNode)
                    }
                </ul>
            }
        </li>
    }
    else
    {
        <li class="@GetClass(node)">
            <a href="@node.Url" title="@node.Title">@node.Title</a>
        </li>
    }
}

@*Resolves the class that will be added for each node depending whether it is selected*@
@helper GetClass(NodeViewModel node)
{
    if (node.IsCurrentlyOpened)
    {
        @Html.Raw("active");
    }
    else if (node.HasChildOpen)
    {
        @Html.Raw("active");
    }
}

@model List<JXTNext.Sitefinity.Widgets.Mvc.Models.JobSearchModel>
@using JXTNext.Sitefinity.Widgets.Mvc.Models

@using Telerik.Sitefinity.Frontend.Mvc.Helpers

@Html.StyleSheet(Url.Content("~/Mvc/Scripts/JobSearch/dropdowntree.css"), "bottom")
@Html.Script(Url.Content("~/Mvc/Scripts/JobSearch/dropdowntree.js"), "bottom")

@functions {
    List<string> _itemsList = new List<string>();
    Dictionary<string, dynamic> _idNamesLevelsPair = new Dictionary<string, dynamic>();

    public List<string> GetValuesList(List<JobSearchItem> searchItemsList)
    {

        foreach (var item in searchItemsList)
        {
            if (!string.IsNullOrEmpty(item.Label) && item.Show == true)
            {
                _itemsList.Add(item.Label);
                _idNamesLevelsPair.Add(item.ID, new { name = item.Label, level = item.Level });
            }
            if (item.Filters != null)
                GetValuesList(item.Filters);
        }

        return _itemsList;
    }
}

@if (Model != null)
{
    <div class="jn_word-scroller">
        
        @{
            int counter = 0;
        }

        @foreach (var item in Model)
        {
            switch (item.ControlType)
            {
                case "List":
                    _itemsList.Clear();
                    _idNamesLevelsPair.Clear();
                    GetValuesList(item.Filters);
                    <label>Quick Browse:</label>
                    <ul>
                    @foreach (dynamic itemName in _idNamesLevelsPair)
                    {
                        string hrefLink = string.Format("{0}?Filters[0].rootId={1}&Filters[0].values={2}", @ViewData["JobResultsPageUrl"], item.ID, itemName.Key);
                        <li><a href=@hrefLink title=@itemName.Value.name>@itemName.Value.name</a></li>
                    }
                    </ul>

                    break;

                case "Map Search":
                    break;

                default:
                    break;

            }
        }
        
    </div>
}

<script type="text/javascript">
    var optionsArray = {};

    $(document).ready(function () {
         @{
                var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
                var json = serializer.Serialize(Model);
          }
     
   });
</script>


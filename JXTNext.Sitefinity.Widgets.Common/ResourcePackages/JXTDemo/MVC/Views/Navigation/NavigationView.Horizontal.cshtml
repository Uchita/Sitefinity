@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;

@*Add scripts and stylesheets*@
@Html.Script(ScriptRef.JQuery, "top")

@Html.Script(Url.WidgetContent("Mvc/Scripts/Bootstrap/js/bootstrap.min.js"), "top", false)
@Html.Script(Url.WidgetContent("Mvc/Scripts/Navigation.js"), "bottom", false)

<div class="navbar-collapse collapse @Model.CssClass">
    @*@Html.Action("GetView", new { viewName = "Dropdown",  model= Model})*@
    @* Close button for mobile *@
    <a class="navbar-close fa fa-times" data-toggle="collapse" data-target=".navbar-collapse"></a>

    <ul class="nav navbar-nav" data-dropdown-menu>
        @foreach (var node in Model.Nodes)
        {
            @RenderRootLevelNode(node);
        }
    </ul>
</div>
@*Toggle navigation button for responsive design*@
<button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">Toggle navigation</button>

@*Here is specified the rendering for the root level*@
@helper RenderRootLevelNode(NodeViewModel node)
{
    if (node.ChildNodes.Count > 0)
    {
        <li class="@GetClass(node)">
            <a href="@node.Url" target="@node.LinkTarget">@node.Title</a>
            <ul class="menu">
                @RenderSubLevelsRecursive(node)
            </ul>
        </li>
    }
    else
    {
        <li class="@GetClass(node)"><a href="@node.Url" target="@node.LinkTarget">@node.Title</a></li>
    }
}

@*Here is specified the rendering for all child levels*@
@helper RenderSubLevelsRecursive(NodeViewModel node)
{
    foreach (var childNode in node.ChildNodes)
    {
        if(childNode.ChildNodes.Count > 0)
        {
             <li>
                <a href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
                <ul>
                    @RenderSubLevelsRecursive(childNode)
                </ul>
            </li>
        }
        else
        {
            <li class="@GetClass(childNode)">
                <a href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
            </li>
        }
    }
}

@*Resolves the class that will be added for each node depending whether it is selected*@
@helper GetClass(NodeViewModel node)
{

    if (node.IsCurrentlyOpened)
    {
        @Html.Raw("active");
    }
    else if (node.HasChildOpen)
    {
        @Html.Raw("active");
    }
}


@model Telerik.Sitefinity.Frontend.Identity.Mvc.Models.Registration.RegistrationViewModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Modules.Pages;
@using Telerik.Sitefinity.UI.MVC;
@using Telerik.Sitefinity.Utilities;
@using Telerik.Sitefinity.Services;

@*Add scripts and stylesheets*@
@Html.Script(ScriptRef.JQuery, "top")
@Html.Script("//ajax.aspnetcdn.com/ajax/jquery.validate/1.8.1/jquery.validate.js", "top")
@Html.Script("//ajax.aspnetcdn.com/ajax/mvc/4.0/jquery.validate.unobtrusive.min.js", "top")

@{
    var isTwoCols = (Model.ExternalProviders != null && Model.ExternalProviders.Count() > 0) ? "col-md-12" : "";
}

<div class="@Model.CssClass animate-label">
	@if ((Request.QueryString["ShowActivationMsg"] == "true") ||
	 (ViewBag.ShowActivationMsg is bool && ViewBag.ShowActivationMsg))
    {
        <h3>
            @Html.Resource("VisitYourEmail")
        </h3>

        <p>@string.Format(Html.Resource("ActivationLinkHasBeenSent"), Model.Email)</p>
        <a href="javascript:void(0)" data-sf-role="sendAgainLink" class="btn btn-primary">@Html.Resource("SendAgain")</a>

        <div data-sf-role="confirmationResendInfo" style="display:none;">
            @string.Format(Html.Resource("ActivationLinkHasBeenSentAgain"), Model.Email)
            <a href="javascript:void(0)" data-sf-role="sendAgainLink" class="btn btn-primary">@Html.Resource("SendAgain")</a>
        </div>

        <input type="hidden" data-sf-role="sf-resend-confirmation-endpoint-url" value="@Url.Action("ResendConfirmationEmail", new { email = Model.Email})" />
    }
    else if ((Request.QueryString["ShowSuccessfulRegistrationMsg"] == "true") ||
             (ViewBag.ShowSuccessfulRegistrationMsg is bool && ViewBag.ShowSuccessfulRegistrationMsg))
    {
        <h3>@Html.Resource("ThankYou")</h3>
        <p>@Html.Resource("DefaultSuccessfulRegistrationMessage")</p>

    }
    else
    {
        using (Html.BeginFormSitefinity(true))
        {
          @Html.ValidationSummary(true);
          <div class="@isTwoCols adj-form-wrap">
            
            <div class="row">
                @if (!string.IsNullOrEmpty(ViewBag.Error))
                {
                <div class="col-md-12">
                    <div class="alert alert-danger">
                        <small>@ViewBag.Error</small>
                    </div>
                </div>
                }
                
			   @Html.HiddenFor(m => m.RequiresQuestionAndAnswer)
				
                <div class="form-group col-md-6">

                    @Html.TextBox("Profile[FirstName]", null, new { @class = "form-control" })

                    <label>
                        @Html.Resource("FirstName")
                    </label>
                </div>
            
                <div class="form-group col-md-6">

                    @Html.TextBox("Profile[LastName]", null, new { @class = "form-control" })
                    <label>
                        @Html.Resource("LastName")
                    </label>
                </div>
            
                <div class="form-group col-md-6">

                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control", type = "email" })
                    <label>
                        @Html.Resource("Email")
                    </label>

                    @if (Html.ValidationMessageFor(m => m.Email) != null)
                    {
                        <div class="has-error">
                            <span class="help-block">@Html.ValidationMessageFor(m => m.Email)</span>
                        </div>
                    }

                </div>
       
                <div class="form-group col-md-6">

                    @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                    <label>
                        @Html.Resource("Password")
                    </label>

                    @if (Html.ValidationMessageFor(m => m.Password) != null)
                    {
                        <div class="has-error">
                            <span class="help-block"> @Html.ValidationMessageFor(m => m.Password)</span>
                        </div>
                    }

                </div>
            
               <div class="form-group col-md-6">
                    
                    @Html.PasswordFor(m => m.ReTypePassword, new { @class = "form-control" })
                   <label>
                       @Html.Resource("ReTypePassword")
                   </label>
                   
                    @if (Html.ValidationMessageFor(m => m.ReTypePassword) != null)
                    {
                        <div class="has-error">
                            <span class="help-block">@Html.ValidationMessageFor(m => m.ReTypePassword)</span>
                        </div>
                    } 

                </div>
    			
    			@if (Model.RequiresQuestionAndAnswer)
                {
    				
               <div class="form-group col-md-6">

                   @Html.TextBoxFor(m => m.Question, new { @class = "form-control" })
                   <label>
                       @Html.Resource("Question")
                   </label>

                   @if (Html.ValidationMessageFor(m => m.Question) != null)
                   {
                       <div class="has-error">
                           <span class="help-block"> @Html.ValidationMessageFor(m => m.Question)</span>
                       </div>
                   }
               </div>
    				
                    <div class="form-group col-md-6">

                        @Html.TextBoxFor(m => m.Answer, new { @class = "form-control" })
                        <label>
                            @Html.Resource("Answer")
                        </label>

                        @if (Html.ValidationMessageFor(m => m.Answer) != null)
                        {
                            <div class="has-error">
                                <span class="help-block"> @Html.ValidationMessageFor(m => m.Answer)</span>
                            </div>
                        }
                    </div>
                }
                </div>

                <div class="form-group button-wrapper text-center">
                @if (SystemManager.IsDesignMode && !SystemManager.IsPreviewMode )
                {
                    <button type="button" class="btn btn-sm">@Html.Resource("Register")</button>
                }
                else
                {
                    <button type="submit" class="btn btn-sm">@Html.Resource("Register")</button>
                }
                </div>

                <div class="sf-registration-link">
                    <label>Already registered?</label>
                    <a href="@Model.LoginPageUrl">@Html.Resource("BackToLogin")</a>
                </div>
            </div>
			
			if (Model.ExternalProviders != null && Model.ExternalProviders.Count() > 0)
            {
                <hr class="spacer" />
                <div class="@isTwoCols social-wrap">    
                    <h3 class="text-center">@Html.Resource("ConnectWith")</h3>
                    <div class="form-group button-wrapper text-center">
                        @foreach (var provider in Model.ExternalProviders)
                        {
                            var classToBeAdd = "btn btn-sm social-btn " + @provider.Value;
                            <span class="btn-wrap-@provider.Key.ToLower()">
                                @Html.ActionLink(provider.Key, "LoginExternalProvider", new { model = provider.Key }, new { @class = classToBeAdd })
                            </span>
                        }
                    </div>
                </div>
            }
        }
    }
</div>
@Html.Script(Url.WidgetContent("Mvc/Scripts/Registration/registration-form.js"), "bottom")
@model Telerik.Sitefinity.Frontend.Mvc.Models.ContentListViewModel

@using Telerik.Sitefinity;
@using Telerik.Sitefinity.Frontend.Blogs.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Blogs.Mvc.Models.Blog;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;
@using Telerik.Sitefinity.Model;
@using Telerik.Sitefinity.Taxonomies;
@using Telerik.Sitefinity.Taxonomies.Model;
@using Telerik.Sitefinity.Web.DataResolving;
@using Telerik.Sitefinity.DynamicModules.Model;


@Html.Script(ScriptRef.JQuery, "top", false)

@{
    dynamic blogCategory = null;
    IEnumerable<ItemViewModel>
    blogList = Model.Items;
    var reqcat = Request.QueryString["categories"];
    List<Taxon>
        _cates = JXTNext.Sitefinity.Common.Helpers.SitefinityHelper.GetTopLevelCategories();

        Taxon _sectorTaxon = _cates.Where(c => c.Title.ToUpper() == "BLOGS").FirstOrDefault();

        var _dd = _sectorTaxon as HierarchicalTaxon;
        List<string>
            catIds = new List<string>
                ();
                if (reqcat + "" != "")
                {
                catIds = reqcat.Split(',').ToList();
                blogCategory = _dd.Subtaxa.Where(c => catIds.Contains(c.Title.ToString().Trim()));
                }
                else
                {
                blogCategory = _dd.Subtaxa;
                }

                }
                <div class="@Model.CssClass row">
                    @foreach (var blogcatitem in blogCategory)
                    {
                    foreach (var item in Model.Items)
                    {
                    List<String>
                        list = new List<String>
                            ();
                            foreach (var catitem in item.Fields.Category)
                            {
                            list.Add(Convert.ToString(@catitem));
                            }
                            if (list.Contains(Convert.ToString(blogcatitem.Id)))
                            {
                            var imageurl = "";
                            foreach (var relatedItem in item.Fields.BlogImage)
                            {
                            imageurl = (string)relatedItem.Fields.ItemDefaultUrl;
                            }
                            var navigateUrl = HyperLinkHelpers.GetDetailPageUrl(item, ViewBag.DetailsPageId, ViewBag.OpenInSamePage, Model.UrlKeyPrefix);

                            <div class="news col-xs-12 col-sm-6">
                                <div class="sub">
                                    <div class="under">

                                        <div class="image">
                                            <a href="@navigateUrl"><img src="@imageurl" alt="image"></a>
                                        </div>

                                        <div class="text">

                                            <h4 class="sub_title"><a @Html.InlineEditingFieldAttributes("Title", "ShortText" ) href="@navigateUrl">@item.Fields.Title</a></h4>

                                            <div class="date_author">
                                                By <strong> @DataResolver.Resolve(item.DataItem, "Author", null)</strong> | @item.GetDateTime("PublicationDate", "MMM d, yyyy, HH:mm tt")
                                            </div>
                                            <p>@Html.HtmlSanitize((string)item.Fields.Summary)</p>
                                            <a href="@navigateUrl" class="action_link">Read More</a>
                                            @*<a href="#" class="action_link leave">Leave Comment</a>*@

                                        </div>
                                    </div>
                                </div>
                            </div>
                            }
                            }
                            }

                </div>

                @if (Model.ShowPager)
                {
                <div class="news_pagination">

                    @Html.Action("Index", "ContentPager", new
                    {
                    currentPage = Model.CurrentPage,
                    totalPagesCount = Model.TotalPagesCount.Value,
                    redirectUrlTemplate = ViewBag.RedirectPageUrlTemplate
                    })

                </div>
                }



@model Telerik.Sitefinity.Frontend.Mvc.Models.ContentListViewModel
@using Telerik.Sitefinity.Frontend.DynamicContent.WidgetTemplates.Fields.Helpers;
@using Telerik.Sitefinity;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Modules.Pages;
@using Telerik.Sitefinity.Web.DataResolving;
@Html.Script(ScriptRef.JQuery, "top", false)
@using Newtonsoft.Json;
@using Telerik.Sitefinity.Blogs.Model;
@using Telerik.Sitefinity.Frontend.Search.Mvc.Models;
@using Telerik.Sitefinity.Modules.Libraries;
@using Telerik.Sitefinity.Libraries.Model;
@using Telerik.Sitefinity.Modules.Blogs;
@using Telerik.Sitefinity.RelatedData;
@using Telerik.Sitefinity.Model;
@using Telerik.Sitefinity.Taxonomies;
@using Telerik.Sitefinity.Taxonomies.Model;
@using Telerik.Sitefinity.Web.DataResolving;
@using Telerik.Sitefinity.DynamicModules.Model;
@{
    BlogsManager blogsManager = BlogsManager.GetManager();
    var volval = Request.QueryString["vol"].ToString();
    var issueval = Request.QueryString["issue"].ToString();
    int counter = 0;
}

<div class="@Model.CssClass">
    <div class="container magazine-cover-wrap">
        <div class="row">
            @foreach (var item in Model.Items)
            {
                if (@item.Fields.ItemDefaultUrl.Contains("magazine"))
                {
                    if (item.Fields.volume != null)
                    {
                        var imageurl = "";
                        var volume = "";
                        var issue = "";
                        var volumetext = "";
                        var issuetext = "";
                        foreach (var relatedItem in item.Fields.BlogImage)
                        {
                            imageurl = (string)relatedItem.Fields.ItemDefaultUrl;
                        }
                        foreach (var taxonvolume in item.GetFlatTaxons("volume"))
                        {
                            volume = @taxonvolume.Title.ToString().ToLower().Replace(" ", "-");
                            volumetext = @taxonvolume.Title.ToString();
                        }
                        foreach (var taxonvolume in item.GetFlatTaxons("issue"))
                        {
                            issue = @taxonvolume.Title.ToString().ToLower().Replace(" ", "-");
                            issuetext = @taxonvolume.Title.ToString();
                        }

                        var navigateUrl = HyperLinkHelpers.GetDetailPageUrl(item, ViewBag.DetailsPageId, ViewBag.OpenInSamePage, Model.UrlKeyPrefix);
                        if (@volval == @volume && @issueval == @issue)
                        {


                            <div class="col-md-6">
                                <div class="magazine-issue magazine-issue-list">
                                    <div class="bg-corner border-corner">
                                        <div class="bg-corner-inner">
                                            <div class="magazine-cover-img" style="background-image: url('@imageurl')">
                                                <div class="magazine-overlay">
                                                    <a class="magazine-title" @Html.InlineEditingFieldAttributes("Title", "ShortText") href="@navigateUrl">@item.Fields.Title</a>
                                                </div>
                                            </div>
                                            <div class="magazine-cover-content">
                                                <a href="@navigateUrl" class="magazine-vol-name">@item.Fields.Title</a>
                                                <div class="magazine-vol-date">
                                                    <p>By <b>@DataResolver.Resolve(item.DataItem, "Author", null)</b> |  @item.GetDateTime("PublicationDate", "MMM, d yyyy")</p>
                                                </div>
                                                @*<div class="magazine-vol-date">@item.GetDateTime("PublicationDate", "MMM, yyyy")</div>*@
                                                <div class="issue-desc">@Html.HtmlSanitize((string)item.Fields.Summary)</div>
                                                <div class="action-links">
                                                    <div class="readmore-btn">
                                                        <a href="@navigateUrl" title="Read more" class="btn-link">Read more</a>
                                                    </div>
                                                    <div class="leavecomment-btn">
                                                        <a href="@navigateUrl" title="Leave comment" class="btn-link">Leave comment</a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        }
                    }
                }
            }
        </div>
    </div>
</div>
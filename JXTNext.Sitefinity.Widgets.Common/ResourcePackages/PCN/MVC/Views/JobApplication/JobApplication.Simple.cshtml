@using JXTNext.Sitefinity.Widgets.JobApplication.Mvc.Models.JobApplication;

@model JobApplicationViewModel

@using JXTNext.Sitefinity.Common.Helpers;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;


@if (ViewBag.ShowFilesUploadMessage != null)
{
    <div class="alert alert-success">@ViewBag.ShowFilesUploadMessage</div>
}
@if (ViewBag.PostBackMessage != null)
{
    <br /><div class="alert alert-info">@ViewBag.PostBackMessage</div>
}
@if (ViewBag.SeekResumeError == true)
{
    <br /><div class="alert alert-danger">@ViewBag.SeekResumeErrorMessage</div>
}
@if (ViewBag.JobRecordExists == true)
{
    <br /><div class="alert alert-danger">@ViewBag.JobRecordExistsErrorMessage</div>
}
@if (ViewBag.SeekAccessError == true)
{
    <br /><div class="alert alert-danger">@ViewBag.SeekAccessErrorMessage</div>
}

<div class="login-form sign-in-with">
    <form id="job-app-form" action="@Url.Action(" ApplyJob","JobApplication")" method="post" enctype="multipart/form-data" autocomplete="off">

        <div class="row">
            <div class="col-xs-12 col-md-4 text-right"></div>
            <div class="col-xs-12 col-md-8"><h2 id="appFormState">Enter your details</h2></div>
        </div>

        <div class="basic-form">
            <!-- Login/Register form fields -->
            @if (!ViewBag.IsUserLoggedIn)
            {
                <div id="login-register-container">

                    <div id="check-login" class="form-group">
                        <div class="row">
                            <div class="col-md-4 text-right">
                                <label class="form-label" for="userid">@Html.Resource("Email", "LoginFormResources")*</label>
                            </div>
                            <div class="col-md-8">
                                <input id="userid" type="text" name="Email" class="form-control" required placeholder="Enter email address to begin" autocomplete="email" aria-describedby="email-verify-message" />
                                <small class="welcome-message hidden">@Html.Resource("DashboardWelcomeWidgetTitle", "DashboardResources")</small>
                            </div>
                        </div>
                    </div>

                    <div id="register" hidden>
                        <div id="firstname-lastname">
                            <div class="row">
                                <div class="col-md-4 text-right">
                                    <label class="form-label" for="firstname-reg">@Html.Resource("Name", "LoginFormResources")*</label>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <input id="firstname-reg" type="text" name="FirstName" class="form-control" placeholder="First name" aria-describedby="firstName-message" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <input type="text" id="lastname-reg" name="LastName" class="form-control" placeholder="Last name" aria-describedby="lastName-message" />
                                    </div>
                                </div>
                            </div>

                            <div class="row form-group">
                                <div class="col-md-4 text-right">
                                    <label class="form-label" for="PhoneNumber">
                                        Phone Number
                                    </label>
                                </div>
                                <div class="col-md-8">
                                    <input type="tel" id="PhoneNumber" name="PhoneNumber" pattern="^\+?([0-9]{2})\)?[-. ]?([0-9]{4})[-. ]?([0-9]{4})" class="form-control" placeholder="Phone number" aria-describedby="phone-message" />
                                    <span class="text-muted"><em>@Html.Resource("phoneValidationMsg", "Labels")</em></span>
                                </div>
                            </div>
                        </div>

                        <div class="row form-group">
                            <div class="col-md-4 text-right">
                                <label class="form-label" for="password-reg">@Html.Resource("Password", "Labels")*</label>
                            </div>
                            <div class="col-md-8">
                                <input id="password-reg" type="password" name="Password" class="form-control" autocomplete="off" placeholder="Choose your password" aria-describedby="password-message" />
                                <span class="hidden alert alert-danger error-message wrongPassword-message">
                                    @Html.Resource("InvalidPassword", "ErrorMessages")
                                </span>
                                <span class="hidden alert alert-danger error-message emptyPassword-message">
                                    @Html.Resource("PasswordCannotBeEmpty", "Labels")
                                </span>
                                <span id="password-guide" class="text-muted">
                                    <em>@Html.Resource("passwordRequirementMsg", "Labels")</em>
                                </span>
                                <div id="forgot-password" class="form-group forgot-password hidden">
                                    <br /><a href="/sign-in/ForgotPassword/">@Html.Resource("ForgottenPasword", "LoginFormResources")</a>
                                </div>

                                <div class="form-group" id="rememberme-block">
                                    <div class="checkbox clearfix">
                                        <input checked="checked" id="RememberMe" name="RememberMe" type="checkbox" value="true">
                                        <span class="checkbox-icon fas fa-check"></span>
                                        @Html.Resource("RememberMe", "LoginFormResources")
                                    </div>
                                </div>

                                <input type="button" id="sign-in-btn" class="form-group hidden btn btn-primary btn-block" data-jobid="@Model.JobId" value="@Html.Resource(" JobApplicationSignIn", "JobApplicationResources" )" />
                            </div>
                        </div>

                        <!-- Password strenght -->
                        @*<div class="row" id="strength-wrap" style="display:none;">
                                <div class="col-md-4 text-right">
                                    <label class="form-label" for="password-reg">Password strength</label>
                                </div>
                                <div class="col-md-8">
                                    <div id="password-strength"><span class="strengh-text"></span></div>
                                </div>
                            </div>*@
                        <!-- Password strenght -->

                        <div class="row form-group reg-field hidden">
                            <div class="col-md-4 text-right">
                                <label class="form-label" for="ReTypePassword">@Html.Resource("ReTypePassword", "RegistrationResources")*</label>
                            </div>
                            <div class="col-md-8">
                                <input id="ReTypePassword" type="password" name="ReTypePassword" class="form-control" placeholder="Retype your password" />
                                <div class='alert alert-danger error-message hidden'>@Html.Resource("ConfirmPasswordErrorMsg", "ErrorMessages")</div>
                            </div>
                        </div>

                    </div>

                </div>
                <div class="alert alert-info hidden" id="already-applied-info">@Html.Resource("JobAlreadyAppliedMsg", "Labels")</div>
            }
            <!-- Upload section -->
            <div class="upload-section">

                @if (Model.ApplicationStatus == JobApplicationStatus.Available)
                {

                    var loginElemHide = "";

                    <div id="upload-files-container" hidden>


                        @if (ViewBag.IsUserLoggedIn)
                        {
                            loginElemHide = "hidden";

                            <div class="form-group row">
                                <label class="form-label col-xs-12 col-md-4 text-right"></label>
                                <div class="col-xs-12 col-md-8">
                                    <div class="list-group">
                                        <label for="selectresume" class="radiobutton">
                                            <input id="selectresume" type="radio" name="resume" class="checked" checked />
                                            <span class="radiobutton-icon fas fa-circle"></span>
                                            <span class="text-right">Select a resume stored on PCN</span>
                                        </label>
                                        <label for="uploadresume" class="radiobutton">
                                            <input id="uploadresume" type="radio" name="resume" />
                                            <span class="radiobutton-icon fas fa-circle"></span>
                                            <span class="text-right">Upload a resume</span>
                                        </label>
                                    </div>

                                </div>
                            </div>


                            <div class="form-group row">
                                <label class="form-label col-xs-12 col-md-4 text-right"></label>
                                <div class="col-xs-12 col-md-8">
                                    <div class="list-group select">
                                        @Html.DropDownList("MySavedResumes", (IEnumerable<SelectListItem>)ViewBag.ResumeList, new { @onchange = "ProcessSavedResume(this.value)" })
                                    </div><!-- end box -->

                                </div>
                            </div>
                        }
                        @*Comment because duplicate id "selectresume"*@
                        @*<div class="form-group row" id="user-profile-resume" hidden>
                                <label class="form-label col-xs-12 col-md-4 text-right"></label>
                                <div class="col-xs-12 col-md-8">
                                    <div class="list-group">
                                        <label for="selectresume" class="radiobutton">
                                            <input id="selectresume" type="radio" name="resume" checked />
                                            <span class="radiobutton-icon fas fa-circle"></span>
                                            <span class="text-right">Select a resume stored on PCN</span>
                                        </label>
                                        <label for="uploadresume" class="radiobutton">
                                            <input id="uploadresume" type="radio" name="resume" />
                                            <span class="radiobutton-icon fas fa-circle"></span>
                                            <span class="text-right">Upload a resume</span>
                                        </label>
                                    </div>

                                </div>
                                <label class="form-label col-xs-12 col-md-4 text-right"></label>
                                <div class="col-xs-12 col-md-8">
                                    <div class="list-group select">
                                        <select id="user-profile-resume-list"></select>
                                    </div>

                                </div>
                            </div>*@


                        <!-- Resume -->
                        <div class="form-group row" id="uploadresumeblock" @loginElemHide>
                            <label class="form-label col-xs-12 col-md-4 text-right">upload your resume*</label>
                            <div class="col-xs-12 col-md-8">
                                <div class="box clearfix text-center">
                                    <small class="note">MS Word, PDF, HTML and text formats accepted.</small>
                                    <div class="uploadfield-wrap">
                                        <input type="file" id="@Model.ApplicationAttachments[0].AttachementFileUploadKey" name="@Model.ApplicationAttachments[0].AttachementFileUploadKey" accept=".pdf,.doc,.docx,.txt,.rtf,.html,.htm,.xhtml" />


                                        <small class="lbl">Browse</small>
                                    </div>
                                    <div class="uploadfield-wrap dropbox-upload">
                                        <button type="button" id="dropbox-resume-btn">Dropbox Resume</button>
                                        <small class="lbl">Dropbox</small>
                                    </div>
                                    <div class="uploadfield-wrap google-drive-upload">
                                        <button type="button" id="resume-google-drive-btn">Google Drive Resume</button>
                                        <small class="lbl">Google Drive</small>
                                    </div>
                                    <span class="note resume-name"></span>
                                </div><!-- end box -->

                            </div>
                        </div>

                        <!-- Coverletter -->
                        <div class="form-group row">
                            <label class="form-label col-xs-12 col-md-4 text-right">upload Cover Letter</label>
                            <div class="col-xs-12 col-md-8">
                                <div class="box clearfix text-center">
                                    <small class="note">MS Word, PDF, HTML and text formats accepted.</small>
                                    <div class="uploadfield-wrap">
                                        <input type="file" id="@Model.ApplicationAttachments[1].AttachementFileUploadKey" name="@Model.ApplicationAttachments[1].AttachementFileUploadKey" accept=".pdf,.doc,.docx,.txt,.rtf,.html,.htm,.xhtml" />
                                        <small class="lbl">Browse</small>
                                    </div>
                                    <div class="uploadfield-wrap dropbox-upload">
                                        <button type="button" id="dropbox-coverletter-btn">Dropbox Cover Letter</button>
                                        <small class="lbl">Dropbox</small>
                                    </div>
                                    <div class="uploadfield-wrap google-drive-upload">
                                        <button type="button" id="coverletter-google-drive-btn">Google Drive CoverLetter</button>
                                        <small class="lbl">Google Drive</small>
                                    </div>
                                    <span class="note coverletter-name"></span>
                                </div><!-- end box -->
                            </div>
                        </div>

                        <!-- Documents -->
                        <div class="form-group row">
                            <label class="form-label col-xs-12 col-md-4 text-right">upload documents</label>
                            <div class="col-xs-12 col-md-8">
                                <div class="box clearfix text-center">
                                    <small class="note">MS Word, PDF, HTML and text formats accepted.</small>
                                    <div class="uploadfield-wrap">
                                        <input type="file" multiple id="@Model.ApplicationAttachments[2].AttachementFileUploadKey" name="@Model.ApplicationAttachments[2].AttachementFileUploadKey" accept=".pdf,.doc,.docx,.txt,.rtf,.html,.htm,.xhtml" />
                                        <small class="lbl">Browse</small>
                                    </div>
                                    <div class="uploadfield-wrap dropbox-upload">
                                        <button type="button" id="dropbox-documents-btn">Dropbox Documents</button>
                                        <small class="lbl">Dropbox</small>
                                    </div>
                                    <div class="uploadfield-wrap google-drive-upload">
                                        <button type="button" id="documents-google-drive-btn">Google Drive Documents</button>
                                        <small class="lbl">Google Drive</small>
                                    </div>
                                    <span class="note documents-name"></span>
                                </div><!-- end box -->
                            </div>
                        </div>


                        <input type="hidden" id="uploadResumeJson" name="UploadFilesResume" />
                        <input type="hidden" id="uploadCoverLetterJson" name="UploadFilesCoverLetter" />
                        <input type="hidden" id="uploadDocumentsJson" name="UploadFilesDocuments" />
                        <input type="hidden" id="resume-selected-type" name="ResumeSelectedType" />
                        <input type="hidden" id="coverletter-selected-type" name="CoverLetterSelectedType" />
                        <input type="hidden" id="documents-selected-type" name="DocumentsSelectedType" />
                        <input type="hidden" id="email-selected" name="Email" />
                        <input type="hidden" id="jobid" name="JobId" value="@Model.JobId" />
                        <input type="hidden" id="applicationemail" name="ApplicationEmail" value="@Model.ApplicationEmail" />
                        <input type="hidden" id="contactdetails" name="ContactDetails" value="@Model.ContactDetails" />
                        <input type="hidden" id="companyname" name="CompanyName" value="@ViewBag.CompanyName" />
                        <input type="hidden" id="urlReferral" name="UrlReferral" value="@Model.UrlReferral" />



                        <div class="form-group button-wrapper row">
                            <label class="col-xs-12 col-md-4"></label>
                            <div class="col-xs-12 col-md-8">
                                <div class="checkbox clearfix">

                                    <input name="privacypolicy" title="Please agree to PCN's privacy policy" class="valid" id="privacypolicy" required="" onclick="this.setCustomValidity('');" oninput="this.setCustomValidity('');" oninvalid="this.setCustomValidity('Please agree to PCN\'s privacy policy');" type="checkbox" value="agree">
                                    <span class="checkbox-icon fas fa-check"></span>
                                    I agree to PCN's <a href="/privacy-policy" target="_blank">Privacy Policy</a>
                                </div>
                                <div class="btn-style-corner">
                                    <button id="apply" class="btn btn-primary" type="submit" disabled><span>Apply Now</span></button>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <label class="col-xs-12 col-md-4"></label>
                            <div class="col-xs-12 col-md-8">
                                <div class="hidden alert alert-danger error-message resume-message">
                                    @Html.Resource("UploadResumeErrorMsg", "ErrorMessages")
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <label class="col-xs-12 col-md-4"></label>
                            <div class="col-xs-12 col-md-8">
                                <div class="hidden alert alert-danger error-message resume-select-message">
                                    @Html.Resource("SelectResumeErrorMsg", "ErrorMessages")
                                </div>
                            </div>
                        </div>


                    </div>
                }
                else
                {
                    if (Model.ApplicationStatus == JobApplicationStatus.Applied_Successful)
                    {
                        <div class="alert alert-success">@Model.ApplicationTitle</div>
                    }
                    else
                    {
                        <div class="alert alert-danger">
                            @Model.ApplicationTitle

                            @if (Model.ApplicationStatus == JobApplicationStatus.NotAbleToCreateUser)
                            {
                                //@ViewBag.RegisterPageUrl
                                <a href="/register" title="@Model.ApplicationTitle"> here</a>
                            }
                        </div>
                    }

                }
            </div>

        </div>

    </form>
</div>
@{
    string googleClientId = new SiteSettingsHelper().GetCurrentSiteGoogleClientId();
    string googleAPIKey = new SiteSettingsHelper().GetCurrentSiteGoogleClientAPIKey();
    string dbAPIKey = new SiteSettingsHelper().GetCurrentSiteDropboxClientAPIKey();
}

<script>

    var appStatus = '@Model.ApplicationStatus';
    var isUserLoggedIn = '@ViewBag.IsUserLoggedIn';
    var registerForm = false;
    var userLoggedInParamFromViewbag = '@ViewBag.IsUserLoggedIn';


    function validateEmail(elementValue) {
        var emailPattern = /^[a-zA-Z0-9._-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
        return emailPattern.test(elementValue);
    };


    var uploadResumeModel = { UrlPath: '', FileName: '', Field: '', MIMEType: '', AuthToken: '' };
    var uploadCoverModel = { UrlPath: '', FileName: '', Field: '', MIMEType: '', AuthToken: '' };
    var uploadDocumentsModel = { UrlPath: '', FileName: '', Field: '', MIMEType: '', AuthToken: '' };
    var isGoogleResume = false;
    var isDropboxResume = false;
    var isGoogleCoverLetter = false;
    var isDropboxCoverLetter = false;
    var resumeSelectedType = '';
    var coverLetterSelectedType = 'Local';
    var documentsLetterSelectedType = 'Local';

    $("#coverletter-selected-type").val(coverLetterSelectedType);
    $("#documents-selected-type").val(documentsLetterSelectedType);
    $("#resume-selected-type").val(resumeSelectedType);

    // Password Strength
    var m_strUpperCase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var m_strLowerCase = "abcdefghijklmnopqrstuvwxyz";
    var m_strNumber = "0123456789";
    var m_strCharacters = "!@@#$%^&*?_~";

    $("#selectresume").change(function () {
        $("#uploadresumeblock").hide();
        $("#selectresume").addClass("checked");
        if (userLoggedInParamFromViewbag == 'True') {
            $("#MySavedResumes").parent('div').show();
        } else {
            $("#user-profile-resume-list").parent('div').show();
        }

    });

    $("#uploadresume").change(function () {
        $("#uploadresumeblock").show();
        $("#selectresume").removeClass("checked");
        if (userLoggedInParamFromViewbag == 'True') {
            $("#MySavedResumes").parent('div').hide();
        } else {
            $("#user-profile-resume-list").parent('div').hide();
        }

    });


    $(document).ready(function () {


        $('form').submit(function (e) {
            e.preventDefault();
            var self = this;
            var fileUploadFlag = false;
            //checking the resume file upload
            if (resumeSelectedType == "" || resumeSelectedType.length == 0) {
                fileUploadFlag = false;
                $(".resume-message, .resume-select-message").addClass('hidden');
                if ($("#uploadresume:checked").length) {
                    $(".resume-message").removeClass('hidden');
                } else {
                    $(".resume-select-message").removeClass('hidden');
                }

                return false;
            } else {
                fileUploadFlag = true;
            }

            if (appStatus == 'Available' && (fileUploadFlag || registerForm)) {
                //if (registerForm) {
                self.submit();
                //}

            }
        });

        if (appStatus == 'Available' && isUserLoggedIn == 'True') {
            $('#login-register-container').hide();
            $('#apply').removeAttr('disabled');
            $('#userid').removeAttr('required');
            $('#upload-files-container').show();
            $('#appFormState').text('Upload your files');
        }

        if (appStatus == 'Available' && isUserLoggedIn != 'True') {
            $('#upload-files-container').hide();
            $('#apply').removeAttr('disabled');
        }

        if (appStatus != 'Available') {
            $('#check-login').hide();
        }

        $('#application-resume').change(function () {
            resumeSelectedType = 'Local';
            $("#resume-selected-type").val(resumeSelectedType);
            var resumeBrowseName = document.getElementById("application-resume").files[0].name;
            $(".resume-name").text(resumeBrowseName);

            if (userLoggedInParamFromViewbag == 'True') {
                $("#MySavedResumes").val('0');
            } else {
                $("#user-profile-resume-list").val('0');
            }
            $(".resume-message").addClass('hidden');
        });

        $('#application-coverletter').change(function () {
            coverLetterSelectedType = 'Local';
            $("#coverletter-selected-type").val(coverLetterSelectedType);
            var coverletterBrowseName = document.getElementById("application-coverletter").files[0].name;
            $(".coverletter-name").text(coverletterBrowseName);
        });

        $('#application-documents').change(function () {
            documentsSelectedType = 'Local';
            $("#documents-selected-type").val(documentsSelectedType);
            var files = document.getElementById("application-documents").files;
            var documentsBrowseName = "";
            for (var i = 0; i < files.length; i++) {
                if (documentsBrowseName != "")
                    documentsBrowseName += "<br/>";
                documentsBrowseName += files[i].name;
            }
            $(".documents-name").html(documentsBrowseName);
        });

        //on enter key on password field triggering sign in button click
        $('#password-reg').on('keydown', function (event) {
            if (event.which == 13) { //enter key
                $('#sign-in-btn').trigger('click');
            }
        });

        function processProfileResumeJsonData(data) {
            resumes = data;
            var rows = '';

            $.each(JSON.parse(resumes), function (i, item) {

                rows += '<option value="' + item.Value + '">' + item.Text + '</option>';

            });
            if (rows.length) {
                $('#user-profile-resume-list').html(rows);
            } else {
                $('#user-profile-resume-list').html('<option val="0">SELECT YOUR RESUME</option>');
            }
        }

        //member sign in continue
        $('#sign-in-btn').click(function () {
            $('#password-reg').parent().find('.error-message.emptyPassword-message').addClass('hidden');
            $('#password-reg').parent().find('.error-message.wrongPassword-message').addClass('hidden');
            if ($('#password-reg').val() == '' || $('#password-reg').val() == null || $('#password-reg').val() == 'undefined') {
                $('#password-reg').parent().find('.error-message.emptyPassword-message').removeClass('hidden');
                return true;
            }


            var jobId = $(this).data("jobid");
            var staySignedinFlag = $('#RememberMe').is(':checked') ? true : false;
            //for login email address & password check & submit login form
            var parm = { email: $('#userid').val(), password: $('#password-reg').val(), staySignedIn: staySignedinFlag, isUserLoggedIn: false };
            var urlPath = $(location).attr('pathname') + "/ValidateUser";
            $.ajax({
                type: 'POST',
                cache: false,
                url: urlPath,
                data: parm,
                dataType: 'Json',
                success: function (response) {
                    $('#password-reg').parent().find('.error-message.wrongPassword-message').addClass('hidden');
                    // Once the user signed in , we need to know that the user is already applied for this job.
                    if (response.IsUserSignedIn == true) {
                        isUserLoggedIn = 'True';
                        $('.header-top-links[data-sf-role="sf-logged-in-view"]').show();
                        $('.header-top-links[data-sf-role="sf-logged-out-view"]').hide();
                        $('.header-top-links [data-sf-role="sf-logged-in-name"]').text(response.FirstName);
                        processProfileResumeJsonData(response.myResumes);
                        $.ajax({
                            type: 'POST',
                            cache: false,
                            url: $(location).attr('pathname') + "/IsJobApplied",
                            data: { jobId: jobId },
                            dataType: 'Json',
                            success: function (response) {
                                if (response == true) {
                                    $('#login-register-container').hide();
                                    $('#appFormState').hide();
                                    $('#already-applied-info').removeClass('hidden');
                                    $('.ext-provider-form, .loginwith_socialmedia').hide();
                                }
                                else {
                                    //Show upload files section
                                    $('#register').hide();
                                    $('#userid').attr('disabled', true);
                                    $('#apply').removeAttr('disabled');
                                    $('#userid').removeAttr('required');
                                    $('#upload-files-container').show();
                                    $('#appFormState').text('Upload your files');
                                    $("#upload-files-container").show();
                                    $('#user-profile-resume').removeAttr('hidden');
                                    $('#uploadresumeblock').hide();
                                    $('#email-selected').val($('#userid').val());

                                }
                            },
                            error: function (response) {
                            }
                        });

                    }
                    else {
                        if (response.IsUserVerified == true) { // User exists
                            if (response.IsUserMember == true) { // Member user
                                $("#upload-files-container").show();
                            }
                            else {
                                alert("You should be a Member to apply for the job.")
                            }
                        } else {
                            //if password wrong
                            $('#password-reg').parent().find('.error-message.wrongPassword-message').removeClass('hidden');
                        }

                    }
                },
                error: function (response) {
                }
            });

        });

        $('#userid').keyup(function () {
            var emailId = $(this).val();
            var valid = validateEmail(emailId);
            var parm = { email: emailId };
            var urlPath = $(location).attr('pathname') + "/CheckUser";

            if (valid) {
                $(this).css('color', '#000');
                $.ajax({
                    type: 'POST',
                    cache: false,
                    url: urlPath,
                    data: parm,
                    dataType: 'Json',
                    success: function (response) {
                        //get the registration form
                        if (response == false) {
                            $('#register').show();

                            $('#firstname-lastname').removeAttr('hidden');
                            $('#upload-files-container').show();
                            registerForm = true;
                            $('#password-reg').prop('required', true);
                            $('#firstname-reg').prop('required', true);
                            $('#lastname-reg').prop('required', true);

                            $('#password-reg').prop('pattern', "(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}");
                            $('#password-reg').prop('title', "Your password must contain at least one number, one uppercase and lowercase letter, and 8 or more characters.");
                            $('#password-guide').removeClass('hidden');
                            $('#strength-wrap').show();
                            $('#password-reg').attr('placeholder', "Choose your password").val('');
                            $('#forgot-password').addClass('hidden');
                            $('#rememberme-block').addClass('hidden');
                            $('.reg-field').removeClass('hidden');
                            $('.loginwith_socialmedia').hide();
                            $('.welcome-message').addClass('hidden');
                            $('#ReTypePassword').prop('required', true);
                            $('#sign-in-btn').addClass('hidden');
                        }
                        //this is to show the password field
                        //only sign in form
                        else {
                            $('#register').show();
                            $('#upload-files-container').hide();
                            $('#firstname-lastname').attr('hidden', 'true');
                            registerForm = false;
                            $('#firstname-reg').prop('required', false);
                            $('#lastname-reg').prop('required', false);
                            $('#password-reg').removeAttr('pattern');
                            $('#password-reg').removeAttr('title');
                            $('#password-reg').prop('required', true);
                            $('#forgot-password').removeClass('hidden');
                            $('#rememberme-block').removeClass('hidden');
                            $('.reg-field').addClass('hidden');
                            $('#password-guide').addClass('hidden');
                            $('#password-reg').attr('placeholder', "Enter your password");
                            $('.loginwith_socialmedia').show();
                            $('.welcome-message').removeClass('hidden');
                            $('#ReTypePassword').prop('required', false);
                            $('#sign-in-btn').removeClass('hidden');

                        }

                        $('#apply').removeAttr('disabled');
                    },
                    error: function (response) {
                    }
                });
            } else {
                $('.welcome-message').addClass('hidden');
                $('.loginwith_socialmedia').show();
                $('#upload-files-container').hide();
                $('#register').hide();
                $(this).css('color', 'red');
                $('#password-reg').prop('required', false);
                $('#firstname-reg').prop('required', false);
                $('#password-reg').removeAttr('pattern');
                $('#password-reg').removeAttr('title');
                $('#password-reg').parent().find('.error-message.emptyPassword-message').addClass('hidden');
                $('#password-reg').parent().find('.error-message.wrongPassword-message').addClass('hidden');
                $('#rememberme-block').addClass('hidden');
            }
        });

        $('#password-reg').keyup(function () {
            if (registerForm) {
                //runPassword($(this).val());
            }
        });
        $('#ReTypePassword').keydown(function () {
            $(this).next('.alert').addClass('hidden');
        });

        $('#ReTypePassword').blur(function () {
            var pwVal = $('#password-reg').val();

            if (pwVal != "") {
                if (pwVal != $(this).val()) {
                    $(this).next(".alert").removeClass('hidden');
                    $(this).addClass('error-field');
                    registerForm = false;
                } else {
                    $(this).next('.alert').addClass('hidden');
                    $(this).removeClass('error-field');
                    registerForm = true;
                }
            }
        });




        $("#user-profile-resume-list").on("change", function () {

            if ($(this).val() == '0') {
                resumeSelectedType = '';
                $("#resume-selected-type").val(resumeSelectedType);
                $('#uploadResumeJson').val('');
            } else {
                resumeSelectedType = 'Saved';
                $("#resume-selected-type").val(resumeSelectedType);
                $('#uploadResumeJson').val($(this).val());
                $(".resume-name").text('');
                $("#application-resume").val("");
                $(".resume-select-message").addClass('hidden');
            }

        });

        function checkPassword(strPassword) {
            // Reset combination count
            var nScore = 0;

            // Password length
            // -- Less than 4 characters
            if (strPassword.length < 5) {
                nScore += 5;
            }
            // -- 5 to 7 characters
            else if (strPassword.length > 4 && strPassword.length < 8) {
                nScore += 10;
            }
            // -- 8 or more
            else if (strPassword.length > 7) {
                nScore += 25;
            }

            // Letters
            var nUpperCount = countContain(strPassword, m_strUpperCase);
            var nLowerCount = countContain(strPassword, m_strLowerCase);
            var nLowerUpperCount = nUpperCount + nLowerCount;
            // -- Letters are all lower case
            if (nUpperCount == 0 && nLowerCount != 0) {
                nScore += 10;
            }
            // -- Letters are upper case and lower case
            else if (nUpperCount != 0 && nLowerCount != 0) {
                nScore += 20;
            }

            // Numbers
            var nNumberCount = countContain(strPassword, m_strNumber);
            // -- 1 number
            if (nNumberCount == 1) {
                nScore += 10;
            }
            // -- 3 or more numbers
            if (nNumberCount >= 3) {
                nScore += 20;
            }

            // Characters
            var nCharacterCount = countContain(strPassword, m_strCharacters);
            // -- 1 character
            if (nCharacterCount == 1) {
                nScore += 10;
            }
            // -- More than 1 character
            if (nCharacterCount > 1) {
                nScore += 25;
            }

            // Bonus
            // -- Letters and numbers
            if (nNumberCount != 0 && nLowerUpperCount != 0) {
                nScore += 2;
            }
            // -- Letters, numbers, and characters
            if (nNumberCount != 0 && nLowerUpperCount != 0 && nCharacterCount != 0) {
                nScore += 3;
            }
            // -- Mixed case letters, numbers, and characters
            if (nNumberCount != 0 && nUpperCount != 0 && nLowerCount != 0 && nCharacterCount != 0) {
                nScore += 5;
            }


            return nScore;
        };

        // Runs password through check and then updates GUI


        function runPassword(strPassword) {
            // Check password
            var nScore = checkPassword(strPassword);


            // Get controls
            var ctlBar = document.getElementById("password-strength");

            // Set new width
            var nScoreWth = nScore; //*1.25
            var nScoreLen = '0';
            if (nScoreWth >= 100) {
                nScoreLen = '100%';
            }
            else {
                nScoreLen = nScoreWth + '%';
            }
            ctlBar.style.width = nScoreLen;

            // Color and text
            // -- Very Secure
            if (nScore == 100) {
                var strText = "Very Secure";
                var strColor = "#0ca908";
            }
            // -- Secure
            else if (nScore >= 90) {
                var strText = "Secure";
                vstrColor = "#197e84";
            }
            // -- Very Strong
            else if (nScore >= 80) {
                var strText = "Very Strong";
                var strColor = "#008000";
            }
            // -- Strong
            else if (nScore >= 60) {
                var strText = "Strong";
                var strColor = "#006000";
            }
            // -- Average
            else if (nScore >= 40) {
                var strText = "Average";
                var strColor = "#e78300";
            }
            // -- Weak
            else if (nScore >= 20) {
                var strText = "Weak";
                var strColor = "#Fe3d1a";
            }
            // -- Very Weak
            else {
                var strText = "Very Weak";
                var strColor = "#e71a1a";
            }

            if (strPassword.length == 0) {
                ctlBar.style.backgroundColor = "";
                ctlBar.querySelector('.strengh-text').innerHTML = "";
            }
            else {
                ctlBar.style.backgroundColor = strColor;
                ctlBar.querySelector('.strengh-text').innerHTML = strText;
            }
        };

        // Checks a string for a list of characters
        function countContain(strPassword, strCheck) {
            // Declare variables
            var nCount = 0;

            for (i = 0; i < strPassword.length; i++) {
                if (strCheck.indexOf(strPassword.charAt(i)) > -1) {
                    nCount++;
                }
            }

            return nCount;
        };

        dropboxResumeOptions = {
            // Required. Called when a user selects an item in the Chooser.
            success: function (files) {

                uploadResumeModel.UrlPath = files[0].link;
                uploadResumeModel.FileName = files[0].name;

                var stringyModel = JSON.stringify(uploadResumeModel);

                if (isDropboxResume) {
                    resumeSelectedType = 'Dropbox';
                    $('#uploadResumeJson').val(stringyModel);
                    $('#application-resume').val('');
                    $("#resume-selected-type").val(resumeSelectedType);
                    $('.resume-name').text(files[0].name);
                    if (userLoggedInParamFromViewbag == 'True') {
                        $("#MySavedResumes").val('0');
                    } else {
                        $("#user-profile-resume-list").val('0');
                    }

                }
                else {
                    if (isDropboxCoverLetter) {
                        coverLetterSelectedType = 'Dropbox';
                        $('#uploadCoverLetterJson').val(stringyModel);
                        $('#application-coverletter').val('');
                        $("#coverletter-selected-type").val(coverLetterSelectedType);
                        $('.coverletter-name').text(files[0].name);
                    }
                    else {
                        documentsSelectedType = 'Dropbox';
                        $('#uploadDocumentsJson').val(stringyModel);
                        $('#application-documents').val('');
                        $("#documents-selected-type").val(documentsSelectedType);
                        var Filenames = "";
                        for (var i = 0; i < files.length; i++) {
                            if (Filenames != "")
                                Filenames += "<br/>";
                            Filenames += files[i].name;
                        }
                        $('.documents-name').html(Filenames);
                    }
                }


                $('#dburl').text(files[0].link);
                $('#dbname').text(files[0].name);
            },

            // Optional. Called when the user closes the dialog without selecting a file
            // and does not include any parameters.
            cancel: function () { },

            // Optional. "preview" (default) is a preview link to the document for sharing,
            // "direct" is an expiring link to download the contents of the file. For more
            // information about link types, see Link types below.
            linkType: "direct", // or "direct"

            // Optional. A value of false (default) limits selection to a single file, while
            // true enables multiple file selection.
            multiselect: false, // or true

            // Optional. This is a list of file extensions. If specified, the user will
            // only be able to select files with these extensions. You may also specify
            // file types, such as "video" or "images" in the list. For more information,
            // see File types below. By default, all extensions are allowed.
            extensions: ['.pdf', '.doc', '.docx', '.txt', '.rtf', '.html'],

            // Optional. A value of false (default) limits selection to files,
            // while true allows the user to select both folders and files.
            // You cannot specify `linkType: "direct"` when using `folderselect: true`.
            folderselect: false, // or true
        };

        dropboxDocumentsOptions = {
            // Required. Called when a user selects an item in the Chooser.
            success: function (files) {

                var stringyModel = "[";

                for (var i = 0; i < files.length; i++) {
                    uploadResumeModel.UrlPath = files[i].link;
                    uploadResumeModel.FileName = files[i].name;
                    if (stringyModel != "[")
                        stringyModel += ",";
                    stringyModel += JSON.stringify(uploadResumeModel);
                }
                stringyModel += "]";

                documentsSelectedType = 'Dropbox';
                $('#uploadDocumentsJson').val(stringyModel);
                $('#application-documents').val('');
                $("#documents-selected-type").val(documentsSelectedType);
                var Filenames = "";
                for (var i = 0; i < files.length; i++) {
                    if (Filenames != "")
                        Filenames += "<br/>";
                    Filenames += files[i].name;
                }
                $('.documents-name').html(Filenames);


                $('#dburl').text(files[0].link);
                $('#dbname').text(files[0].name);
            },

            // Optional. Called when the user closes the dialog without selecting a file
            // and does not include any parameters.
            cancel: function () { },

            // Optional. "preview" (default) is a preview link to the document for sharing,
            // "direct" is an expiring link to download the contents of the file. For more
            // information about link types, see Link types below.
            linkType: "direct", // or "direct"

            // Optional. A value of false (default) limits selection to a single file, while
            // true enables multiple file selection.
            multiselect: true, // or true

            // Optional. This is a list of file extensions. If specified, the user will
            // only be able to select files with these extensions. You may also specify
            // file types, such as "video" or "images" in the list. For more information,
            // see File types below. By default, all extensions are allowed.
            extensions: ['.pdf', '.doc', '.docx', '.txt', '.rtf', '.html'],

            // Optional. A value of false (default) limits selection to files,
            // while true allows the user to select both folders and files.
            // You cannot specify `linkType: "direct"` when using `folderselect: true`.
            folderselect: false, // or true
        };


        $('#dropbox-resume-btn').click(function () {
            isDropboxResume = true;
            isDropboxCoverLetter = false;
            Dropbox.choose(dropboxResumeOptions);
        });

        $('#dropbox-coverletter-btn').click(function () {
            isDropboxResume = false;
            isDropboxCoverLetter = true;
            Dropbox.choose(dropboxResumeOptions);
        });

        $('#dropbox-documents-btn').click(function () {
            isDropboxResume = false;
            isDropboxCoverLetter = false;
            Dropbox.choose(dropboxDocumentsOptions);
        });
    });


    // Googler Drive

    // The Browser API key obtained from the Google API Console.
    var developerKey = "@googleAPIKey";

    // The Client ID obtained from the Google API Console. Replace with your own Client ID.
    var clientId = "@googleClientId";

    // Scope to use to access user's photos.
    var scope = 'https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file';

    var pickerApiLoaded = false;
    var oauthToken;


    // Use the API Loader script to load google.picker and gapi.auth.
    function onApiLoad() {
        gapi.load('auth2', onAuthApiLoad);
        gapi.load('picker', onPickerApiLoad);
    }

    function onAuthApiLoad() {
        $('#resume-google-drive-btn').click(function () {
            isGoogleResume = true;
            isGoogleCoverLetter = false;
            gapi.auth2.authorize({
                client_id: clientId,
                scope: scope
            }, handleAuthResult);
        });

        $('#coverletter-google-drive-btn').click(function () {
            isGoogleResume = false;
            isGoogleCoverLetter = true;
            gapi.auth2.authorize({
                client_id: clientId,
                scope: scope
            }, handleAuthResult);
        });

        $('#documents-google-drive-btn').click(function () {
            isGoogleResume = false;
            isGoogleCoverLetter = false;
            gapi.auth2.authorize({
                client_id: clientId,
                scope: scope
            }, handleAuthResultMulti);
        });
    }

    function onPickerApiLoad() {
        pickerApiLoaded = true;
        createPicker();
    }

    function handleAuthResult(authResult) {
        if (authResult && !authResult.error) {
            oauthToken = authResult.access_token;
            createPicker();
        }
    }

    function handleAuthResultMulti(authResult) {
        if (authResult && !authResult.error) {
            oauthToken = authResult.access_token;
            createPickerMulti();
        }
    }

    // Create and render a Picker object for picking user Photos.
    function createPicker() {
        if (pickerApiLoaded && oauthToken) {
            var picker = new google.picker.PickerBuilder().
                addView(new google.picker.View(google.picker.ViewId.DOCS).setMimeTypes("application/pdf,text/plain,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/rtf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")).
                setOAuthToken(oauthToken).
                setDeveloperKey(developerKey).
                setCallback(pickerCallback).
                build();
            picker.setVisible(true);
        }
    }

    function ProcessSavedResume(resumeId) {

        if (resumeId == '0') {
            resumeSelectedType = '';
            $("#resume-selected-type").val(resumeSelectedType);
            $('#uploadResumeJson').val('');
        } else {
            resumeSelectedType = 'Saved';
            $("#resume-selected-type").val(resumeSelectedType);
            $('#uploadResumeJson').val(resumeId);
            $(".resume-name").text('');
            $("#application-resume").val("");
            $(".resume-message").addClass('hidden');
        }

    }

    function createPickerMulti() {
        if (pickerApiLoaded && oauthToken) {
            var picker = new google.picker.PickerBuilder().
                addView(new google.picker.View(google.picker.ViewId.DOCS).setMimeTypes("application/pdf,text/plain,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/rtf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")).
                enableFeature(google.picker.Feature.MULTISELECT_ENABLED).
                setOAuthToken(oauthToken).
                setDeveloperKey(developerKey).
                setCallback(pickerCallback).
                build();
            picker.setVisible(true);
        }
    }

    // A simple callback implementation.
    function pickerCallback(data) {
        var url = 'nothing';
        var name = "";
        var fileId = "";
        var mime = "";


        if (data[google.picker.Response.ACTION] == google.picker.Action.PICKED) {
            var doc = data[google.picker.Response.DOCUMENTS][0];
            fileId = doc[google.picker.Document.ID];
            url = doc[google.picker.Document.URL];
            name = doc[google.picker.Document.NAME]
            mime = doc[google.picker.Document.MIME_TYPE];

            uploadResumeModel.UrlPath = url;
            uploadResumeModel.FileName = name;
            uploadResumeModel.Field = fileId;
            uploadResumeModel.MIMEType = mime;
            uploadResumeModel.AuthToken = oauthToken;

            var stringyModel = JSON.stringify(uploadResumeModel);

            var docs = data[google.picker.Response.DOCUMENTS];
            var stringyModels = "[";
            var Filenames = "";

            for (var i = 0; i < docs.length; i++) {
                doc = docs[i];
                fileId = doc[google.picker.Document.ID];
                url = doc[google.picker.Document.URL];
                name = doc[google.picker.Document.NAME]
                mime = doc[google.picker.Document.MIME_TYPE];

                uploadResumeModel.UrlPath = url;
                uploadResumeModel.FileName = name;
                uploadResumeModel.Field = fileId;
                uploadResumeModel.MIMEType = mime;
                uploadResumeModel.AuthToken = oauthToken;

                if (stringyModels != "[") {
                    stringyModels += ",";
                    Filenames += "<br/>";
                }
                stringyModels += JSON.stringify(uploadResumeModel);
                Filenames += doc[google.picker.Document.NAME];
            }
            stringyModels += "]";

            if (isGoogleResume) {
                resumeSelectedType = 'GoogleDrive';
                $('#uploadResumeJson').val(stringyModel);
                $('#application-resume').val('');
                $("#resume-selected-type").val(resumeSelectedType);
                $('.resume-name').text(name);
                if (userLoggedInParamFromViewbag == 'True') {
                    $("#MySavedResumes").val('0');
                } else {
                    $("#user-profile-resume-list").val('0');
                }

            }
            else {
                if (isGoogleCoverLetter) {
                    coverLetterSelectedType = 'GoogleDrive';
                    $('#uploadCoverLetterJson').val(stringyModel);
                    $('#application-coverletter').val('');
                    $("#coverletter-selected-type").val(coverLetterSelectedType);
                    $('.coverletter-name').text(name);
                }
                else {
                    documentsSelectedType = 'GoogleDrive';
                    $('#uploadDocumentsJson').val(stringyModels);
                    $('#application-documents').val('');
                    $("#documents-selected-type").val(documentsSelectedType);
                    $('.documents-name').html(Filenames);
                }
            }

        }

        var message = url;
    }
</script>

<script type="text/javascript" src="https://www.dropbox.com/static/api/2/dropins.js" id="dropboxjs" data-app-key="@dbAPIKey"></script>
<script type="text/javascript" src="https://apis.google.com/js/api.js?onload=onApiLoad"></script>
@using JXTNext.Sitefinity.Widgets.Job.Mvc.Models
@model JobDetailsViewModel
@using Telerik.Sitefinity.Frontend.SocialShare.SocialShareHelpers
@using System.Collections.Specialized;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Web;
@using JXTNext.Sitefinity.Common.Helpers
@using System.Web;

@{
    var isUserLoggedIn = JXTNext.Sitefinity.Common.Helpers.SitefinityHelper.IsUserLoggedIn();
    var defaultLogo = "/ResourcePackages/PCN/assets/dist/images/defaultLogo.png";
    var isMemberUser = false;
    if (isUserLoggedIn)
    {
        isMemberUser = JXTNext.Sitefinity.Common.Helpers.SitefinityHelper.IsUserLoggedIn("Member");
    }
    var mapsAPIKey = new SiteSettingsHelper().GetCurrentSiteGoogleMapsAPIKey();
    var srcMap = "https://maps.googleapis.com/maps/api/js?key=" + mapsAPIKey;
    string domainName = HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority);
    var srcPlugin = domainName + "/Frontend-Assembly/JXTNext.Sitefinity.Widgets.Content/Mvc/Scripts/Maps/jquery.googlemap.js";

}

@if (Model != null)
{

    List<string> classificationsDisplay = new List<string>();
    foreach (var item in @Model.Classifications.Keys)
    {
        string hrefLink = string.Format("{0}?Filters[0].rootId={1}&Filters[0].values={2}", @ViewBag.JobResultsPageUrl, @Model.ClassificationsRootName, @item.ToString());

        classificationsDisplay.Add(@"<a href=""" + hrefLink + @""" title=""" + Model.Classifications[item] + @""">" + Model.Classifications[item] + @"</a>");
    }


    <div class="col-md-8">
        <div class="backtoresult">
            @Html.Raw(String.Join("&nbsp;<span>&gt;</span>&nbsp;", classificationsDisplay))<span class="spt">|</span><a href="#" id="back-to-results" role="button" title="Back to Results"><span class="prev-btn"></span>Back To Results</a>
        </div>
        <div class="job-offer-details">
            <div class="row job-offer-title">
                <div class="col-md-10">
                    <h1>@Model.JobDetails.Title</h1>
                </div>
                <div class="col-md-2">
                    <img alt="westpac-small" src="@defaultLogo" title="PCN">
                </div>
            </div><div class="row job-offer-summary">
                <div class="col-md-12">
                    <table>
                        <tbody>
                            <tr>
                                <td width="160">
                                    <strong>Location</strong><strong>:</strong>
                                </td>
                                <td>
                                    @{
                                        List<string> locationsDisplay = new List<string>();
                                        foreach (var item in @Model.Locations.Keys)
                                        {
                                            string locHREFLink = string.Format("{0}?Filters[0].rootId={1}&Filters[0].values={2}", @ViewBag.JobResultsPageUrl, @Model.LocationsRootName, @item.ToString());
                                            locationsDisplay.Add(@"<a href=""" + locHREFLink + @""" title=""" + Model.Locations[item] + @""">" + Model.Locations[item] + @"</a>");
                                        }
                                    }
                                    <span>@Html.Raw(String.Join("&nbsp;<span>&gt;</span>&nbsp;", locationsDisplay))</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <strong>Work type:</strong>
                                </td>
                                <td>@Model.JobDetails.CustomData["WorkType.Filters[0].Value"]</td>
                            </tr>

                            @{
                                var minSal = int.Parse(Model.JobDetails.CustomData["Salary.Filters[0].Min"]);
                                var maxSal = int.Parse(Model.JobDetails.CustomData["Salary.Filters[0].Max"]);
                            }

                            @if (minSal > 0 || maxSal > 0)
                            {
                                <tr>
                                    <td>
                                        <strong>Salary:</strong>
                                    </td>
                                    <td>
                                        @if (minSal == maxSal)
                                        {

                                            <span class="max-sal">$@maxSal</span>
                                        }
                                        else
                                        {
                                            if (minSal > 0)
                                            {
                                                <span class="min-sal">$@minSal</span>
                                            }
                                            if (maxSal > 0)
                                            {
                                                <span class="range-sep">to</span>
                                                <span class="max-sal">$@maxSal</span>
                                            }
                                        }
                                    </td>
                                </tr>
                            }

                        </tbody>
                    </table>
                </div>
            </div>
            <div class="row job-offer-advantages">
                <div class="col-md-12">
                    <ul>

                        @if (!string.IsNullOrEmpty(Model.JobDetails.CustomData["Bulletpoints.BulletPoint1"]))
                        {
                            <li>@Model.JobDetails.CustomData["Bulletpoints.BulletPoint1"]</li>
                        }
                        @if (!string.IsNullOrEmpty(Model.JobDetails.CustomData["Bulletpoints.BulletPoint2"]))
                        {
                            <li>@Model.JobDetails.CustomData["Bulletpoints.BulletPoint2"]</li>
                        }
                        @if (!string.IsNullOrEmpty(Model.JobDetails.CustomData["Bulletpoints.BulletPoint3"]))
                        {
                            <li>@Model.JobDetails.CustomData["Bulletpoints.BulletPoint3"]</li>
                        }
                    </ul>
                </div>
            </div>
            <div class="row job-offer-summary">
                <div class="col-md-12">
                    @{
                        string cleanContent = GeneralHelper.RemoveInlineStyling((string)Model.JobDetails.Description);
                    }
                    @Html.HtmlSanitize((string)cleanContent)
                </div>
            </div><div class="row job-offer-contacts">
                <div class="col-md-12">
                    <table>
                        <tbody>
                            <tr>
                                <td width="160"><strong>Reference Number:</strong></td>
                                <td>
                                    @Model.JobDetails.ReferenceNo
                                </td>
                            </tr>
                            <tr><td><strong>Contact Details:</strong></td><td>@Model.JobDetails.CustomData["ApplicationMethod.ApplicationEmail"]</td></tr>
                            <tr>
                                <td><strong>Profession:&nbsp; </strong></td>
                                <td>

                                    @Html.Raw(String.Join("&nbsp;<span>&gt;</span>&nbsp;", classificationsDisplay))
                                </td>
                            </tr>
                            <tr><td><strong>Company:</strong></td><td>@Model.JobDetails.CustomData["CompanyName"]</td></tr>
                            @*<tr><td><strong>Date:</strong></td><td>18/09/2016&nbsp; -&nbsp; 5:34pm</td></tr>*@
                        </tbody>
                    </table>
                </div>
            </div>
            @if (ViewBag.IsJobApplied)
            {
                <div class="alert alert-info">You have already applied</div>
            }
            else
            {
                <div class="row job-offer-apply">
                    <div class="col-md-12">
                        <a id="job-application-lnk" class="read_btn" href="@ViewBag.JobApplicationPageUrl/@Model.ClassificationsSEORouteName/@Model.JobDetails.JobID"><span>APPLY NOW</span></a>
                    </div>
                </div>
            }

        </div>
        @Html.Raw(ViewBag.GoogleForJobs)
    </div>

    <div class="col-md-4 mb-30 jobdetail-sidebar">
        <div class="row job-offer-apply">
            <div class="col-md-12">
                <a id="job-application-lnk" class="read_btn" href="@ViewBag.JobApplicationPageUrl/@Model.ClassificationsSEORouteName/@Model.JobDetails.JobID"><span>APPLY NOW</span></a>
            </div>
        </div>
        <br />
        @if (!mapsAPIKey.IsNullOrEmpty())
        {
            @Html.Script(Url.Content(srcMap), "bottom")
            @Html.Script(Url.Content(srcPlugin), "bottom")
            <div class="map-placeholder hidden" style="width: 100%; height: 250px;">
                <span data-address="@Model.JobDetails.Address" data-addresslat="@Model.JobDetails.AddressLatitude" data-addresslng="@Model.JobDetails.AddressLongtitude"></span>
            </div>
        }
        else
        {
            <div class="alert alert-danger">Google Maps API key is not set. Please set at "Administration->Settings->Custom Site Settings"</div>
        }



        @{
            var shareUrl = SocialShareButtons.ShareUrl;

            var unencodedPageTitle = Model.JobDetails.Title;
            var pageTitle = HttpUtility.UrlEncode(unencodedPageTitle);
        }
        <h3>Interested in this job?</h3>
        <ul class="list-unstyled job-offer-actions">
            @if (isUserLoggedIn)
            {
                <li><a href="#" class="save-job" data-jobid="@Model.JobDetails.JobID"><em class="far fa-save"></em><span class="save-status-txt">Save this job</span></a></li>
            }

            <li><a href="javascript:window.print();"><em class="fas fa-print"></em>Print this job</a></li>
            <li>
                <a href="@ViewBag.EmailJobPageUrl?JobId=@Model.JobDetails.JobID" title="Tell a friend">
                    <em class="fas fa-envelope"></em>Email this job
                </a>
            </li>
            @*<li><span class="save-job" data-jobid="@Model.JobDetails.JobID"><em class="fas fa-save"></em>Save this job</span></li>*@
        </ul>

    </div>
}
<script type="text/javascript">

    function initMap() {

        // Iterate throgh all the elemetns having class map-placeholder in the page
        // And it will place the map inside it
        $(".map-placeholder").each(function (index) {

            if ($(this).children().length > 0) {
                var markers = [];
                var zoom = $(this).data('zoom');
                var zoomLevel = 10;
                if (zoom != 'undefined' && typeof zoom != 'undefined' && zoom != '')
                    zoomLevel = Number(zoom);

                $(this).children().each(function (index) {
                    var addresslat = $(this).data('addresslat');
                    var addresslng = $(this).data('addresslng');
                    var address = $(this).data('address');
                    var icon = $(this).data('icon');
                    // Pop up information
                    var popupTitle = 'Hudson Office';
                    if ($(this).data('popuptitle') != undefined && $(this).data('popuptitle').length) {
                        popupTitle = $(this).data('popuptitle');
                    }
                    var popupText = '<p class="info-text">' + $(this).data('popuptext') + '</p>';
                    var popupAdditionalInfo = '';

                    if ($(this).data('popupadditionalinfo') != "") {
                        popupAdditionalInfo = '</span><span class="map-field"><a href="tel: ' + $(this).data('popupadditionalinfo') + '"><span class="fa fa-phone"></span>' + $(this).data('popupadditionalinfo') + '</a></span>';
                    }

                    var infoWindowContent = '<div class="info-box"><span class="map-field"><span class="fas fa-map-marker-alt"></span>' + address + '</span>' + popupAdditionalInfo + popupText + '</div>';

                    var iconPath = '';
                    if (icon != 'undefined' && typeof icon != 'undefined' && icon != '')
                        iconPath = icon;

                    if (addresslat != 'undefined' && addresslng != 'undefined' && typeof addresslat != 'undefined' && typeof addresslng != 'undefined' && addresslat != '' && addresslng != '') {
                        markers.push({ isLatLng: true, lat: Number(addresslat), lng: Number(addresslng), icon: iconPath, popupTitle: popupTitle, popupText: infoWindowContent });
                    }
                    else if (address != null && typeof address != 'undefined' && address != 'undefined' && address.length > 0) {
                        markers.push({ isLatLng: false, address: address, icon: iconPath, popupTitle: popupTitle, popupText: infoWindowContent });
                    }
                });
                console.log(markers.length);
                if (markers.length > 0) {
                    $(this).removeClass('hidden');
                    $(this).googleMap({
                        zoom: zoomLevel // Initial zoom level (optional)
                    });
                    var showMarker = true;
                    if (markers.length > 1) {
                        showMarker = false;
                    }

                    for (var item of markers) {
                        if (item.isLatLng) {
                            $(this).addMarker({
                                coords: [item.lat, item.lng],
                                icon: item.icon,
                                title: item.popupTitle,
                                text: item.popupText,
                                showInfoWindow: showMarker
                            });
                        }
                        else {
                            $(this).addMarker({
                                address: item.address,
                                icon: item.icon,
                                title: item.popupTitle,
                                showInfoWindow: showMarker
                            });
                        }
                    }
                }
            }
        });
    }

    $(window).on('load', function () {
        var isLoaded = false;
        $(".map-placeholder").each(function (index) {
            console.log($(this).data("called"));
            var isCalled = $(this).data("called");
            if (isCalled == false || typeof isCalled == 'undefined') {
                $(this).data("called", true);
            }
            else {
                isLoaded = true;
                return false;
            }
        });
        console.log(isLoaded);
        if (!isLoaded) {
            initMap();
        }
    });

    $(document).ready(function () {
        document.title = '@Model.JobDetails.Title';
        var isLoggedIn = '@isUserLoggedIn';

        //checking user logged in is member role
        $('#job-application-lnk').click(function (e) {
            if (isLoggedIn.toLocaleLowerCase() == "true") {
                var isMember = '@isMemberUser';

                if (isMember.toLocaleLowerCase() != "true") {
                e.preventDefault();
                alert('Please login as Member to apply for this job.');
                }
            }
        });

        if (isLoggedIn.toLocaleLowerCase() == "true") {
            processSavedJobs();
        }

        function processSavedJobs() {
            var parm = {};
            var urlPath = $(location).attr('pathname') + "/GetAllSavedJobs";
            var self = $(this);
            $.ajax({
                type: 'POST',
                cache: false,
                url: urlPath,
                data: parm,
                dataType: 'Json',
                success: function (response) {

                    if (response.Success == true) { // Getting the all saved jobs
                        $('.save-job').each(function () {
                            var jobid = $(this).data('jobid');
                            var selfJob = $(this);

                            $.each(response.SavedJobs, function (index, saveJobInfo) {

                                if (saveJobInfo.JobId == jobid) {

                                    $(selfJob).addClass("saved");
                                    $(selfJob).find('.save-status-txt').text("Job saved");
                                    $(selfJob).attr('data-savedjobid', saveJobInfo.SavedJobId);
                                }
                            });
                        });
                    }
                    else { // Job failed to save

                    }
                },
                error: function (response) { // Error
                }
            });


        };


        $(document).on('click', '.save-job', function (e) {
            e.preventDefault();
            var unSaveJob = false;
            var ajaxActionName = "/SaveJob";
            var jobid = $(this).data('jobid');
            if ($(this).hasClass('saved')) {
                unSaveJob = true;
                ajaxActionName = "/RemoveSavedJob";
                jobid = $(this).data('savedjobid');
            }

            var parm = { JobId: jobid };
            var urlPath = $(location).attr('pathname') + ajaxActionName;
            var self = $(this);
            $.ajax({
                type: 'POST',
                cache: false,
                url: urlPath,
                data: parm,
                dataType: 'Json',
                success: function (response) {

                    if (response.Success == true) { // Job Saved or unsaved
                        if (unSaveJob) { // Unsave job
                            self.removeClass("saved");
                            self.find('.save-status-txt').text("Save job");
                        }
                        else { // Save job
                            self.addClass("saved");
                            self.find('.save-status-txt').text("Job saved");
                        }
                    }
                    else { // Job failed to save or unsave
                        if ((response.Errors[0].indexOf("(401)") > -1) || (response.Errors[0].indexOf("(403)") > -1))
                            alert("Please login as a member to save a job.");
                        else
                            alert(response.Errors[0]);
                    }
                },
                error: function (response) { // Error
                }
            });
        });

        var previousUrl = new URL(document.referrer);
        var urlPath = previousUrl.pathname + previousUrl.search;
        $("#back-to-results").attr("href", urlPath);
    });
</script>


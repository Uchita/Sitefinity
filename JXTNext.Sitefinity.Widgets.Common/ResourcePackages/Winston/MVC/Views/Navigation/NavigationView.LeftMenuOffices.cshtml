@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Services;
@using Telerik.Sitefinity.DynamicModules;
@using Telerik.Sitefinity.Utilities.TypeConverters;
@using Telerik.Sitefinity.Model;


<div class="@Model.CssClass left-sidebar">
    <nav class="navbar ">
        <div class="container-fluid">
            @foreach (var node in Model.Nodes)
            {
                @RenderRootLevelNode(node);
            }
        </div>
    </nav>
</div>

@helper RenderRootLevelNode(NodeViewModel node)
{
    if (node.ChildNodes.Count > 0)
    {
        <a href="@node.Url" target="@node.LinkTarget">@node.Title</a>

        <ul class="nav navbar-nav">
            @RenderSubLevelsRecursive(node)
        </ul>
    }
    else
    {
        <a href="@node.Url" target="@node.LinkTarget">@node.Title</a>
    }
}

@helper RenderOffices(NodeViewModel node)
{
    if (SystemManager.CurrentContext.IsMultisiteMode)
    {
        var officesLink = SystemManager.CurrentContext.MultisiteContext.CurrentSiteContext.Site.SiteDataSourceLinks.Where(s => s.DataSourceName == "Offices").FirstOrDefault();

        if (officesLink != null)
        {
            var manager = DynamicModuleManager.GetManager(officesLink.ProviderName);
            Type officeType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.Offices.Office");
            var offices = manager.GetDataItems(officeType).Where(p => p.Status == Telerik.Sitefinity.GenericContent.Model.ContentLifecycleStatus.Live && p.Visible == true)
                .OrderBy(a => a.GetValue<string>("Name")).ToList();

            foreach (var office in offices)
            {
                <li class="@GetClass(node, office)">
                    <a href="@node.Url@office.ItemDefaultUrl" target="@node.LinkTarget">@office.GetString("Name").ToString()</a>
                </li>
            }
        }
    }
}

@helper RenderSubLevelsRecursive(NodeViewModel node)
{
    foreach (var childNode in node.ChildNodes)
    {
        var shouldRenderOffices = childNode.Title.Equals("Find a Hudson Office", StringComparison.CurrentCultureIgnoreCase);
        if (childNode.ChildNodes.Count > 0 || shouldRenderOffices)
        {
            <li class="dropdown dropdown-@GetClass(childNode)">
                <a href="#" data-toggle="dropdown" class="dropdown-toggle">
                    @childNode.Title
                    <span class="fas fa-caret-down"></span>
                </a>
                <ul class="dropdown-menu">
                    @if (shouldRenderOffices)
                    {
                        @RenderOffices(childNode)
                    }
                    else
                    {
                        @RenderSubLevelsRecursive(childNode)
                    }
                </ul>
            </li>
        }
        else
        {
            <li class="@GetClass(childNode)">
                <a href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
            </li>
        }
    }
}
@*Resolves the class that will be added for each node depending whether it is selected*@
@helper GetClass(NodeViewModel node)
{

    if (node.IsCurrentlyOpened)
    {
        @Html.Raw("active");
    }
    else if (node.HasChildOpen)
    {
        @Html.Raw("active");
    }
}

@helper GetClass(NodeViewModel node, IDataItem item)
{
    var locationsService = SystemManager.GetContentLocationService();
    var locations = locationsService.GetItemLocations(item);
    var itemUrl = SystemManager.CurrentHttpContext.Request.Url.AbsoluteUri;

    if (locations.Any(location => location.ItemAbsoluteUrl == itemUrl))
    {
        @Html.Raw("active");
    }
}
<script>

    if ($('.left-sidebar').find('.dropdown-menu .active')) {
        $('.left-sidebar').find('.dropdown-menu .active').parents('.dropdown-active').addClass('open');
    }
</script>

@model List<JobAlertViewModel>
    @using JXTNext.Sitefinity.Widgets.JobAlert.Mvc.Models

    <br />
    <br />

    @if (ViewBag.CreateMessage != null)
    {
        <div class="alert alert-success">@ViewBag.CreateMessage</div>
    }

    @if (ViewBag.DeleteMessage != null)
    {
        <div class="alert alert-danger">@ViewBag.DeleteMessage</div>
    }

    @Html.ActionLink("Create Job Alert", "Create", "JobAlert")

    <br />
    <br />
    @if (Model != null && Model.Count > 0)
    {

        <table class="table table-bordered">
            <tr>
                <th>Name</th>
                <th>Send Email Alerts</th>
                <th>Last Modified</th>
                <th>Action</th>
            </tr>

            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @item.Name
                    </td>

                    <td>

                        @if (item.EmailAlerts == true)
                        {
                            @Html.Raw("Yes")
                        }
                        else
                        {
                            @Html.Raw("No")
                        }

                    </td>
                    <td id="@item.Id"></td>
                    <td>
                        @Html.ActionLink("Edit", "Edit", "JobAlert", new { id = item.Id }, null)
                        @Html.ActionLink("Search", "ViewResults", "JobAlert", new { id = item.Id }, null)
                        @Html.ActionLink("Delete", "Delete", "JobAlert", new { id = item.Id }, new { onclick = "return confirmDelete();" })
                    </td>
                </tr>
            }

        </table>
    }

    else
    {
        <div>You currently don't have any job alerts.</div>
    }

    <script type="text/javascript">

    function confirmDelete() {
          if (confirm("Are you sure you want to delete this record?")) {
            return true;
        }
        else {
            return false;
        }
    };

    $(document).ready(function () {
         @{
                var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
                var json = serializer.Serialize(Model);
          }

        var model = @Html.Raw(json);
        if (model != null && model != "undefined") {
            for (var item of model) {
                var dateTime = EpochToDate(item.LastModifiedTime);
                var formattedTime = formattedDate(dateTime);
                $('#' + item.Id).html(formattedTime);
            }
        }

        // Epoch To Date
        function EpochToDate(epoch) {
            // why we are not converting it to Milliseconds?
            // Here we are getting the time in Milliseconds from backend
            // We are storing epoch time in Milliseconds to our database
            var epoch = epoch + (new Date().getTimezoneOffset() * -1); //for timeZone
            return new Date(epoch);
        };

        // Form date to DD/MM/YYYY
        function formattedDate(date) {
            var month = String(date.getMonth() + 1);
            var day = String(date.getDate());
            var year = String(date.getFullYear());

            if (month.length < 2) month = '0' + month;
            if (day.length < 2) day = '0' + day;

            return `${day}/${month}/${year}`;
        };
    });

    </script>


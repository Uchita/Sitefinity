
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlGlobalSettingsProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using JXTPortal.Entities;
using JXTPortal.Data;
using JXTPortal.Data.Bases;

#endregion

namespace JXTPortal.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="GlobalSettings"/> entity.
	///</summary>
	public abstract partial class SqlGlobalSettingsProviderBase : GlobalSettingsProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlGlobalSettingsProviderBase"/> instance.
		/// </summary>
		public SqlGlobalSettingsProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlGlobalSettingsProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlGlobalSettingsProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_globalSettingId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _globalSettingId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@GlobalSettingId", DbType.Int32, _globalSettingId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(GlobalSettings)
					,_globalSettingId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.GlobalSettings objects.</returns>
		public override TList<GlobalSettings> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<GlobalSettings>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@GlobalSettingId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DefaultLanguageId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DefaultDynamicPageId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PublicJobsSearch", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PublicMembersSearch", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PublicCompaniesSearch", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PublicSponsoredAdverts", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrivateJobs", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrivateMembers", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrivateCompanies", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PageTitlePrefix", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PageTitleSuffix", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DefaultTitle", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HomeTitle", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DefaultDescription", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HomeDescription", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DefaultKeywords", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HomeKeywords", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShowFaceBookButton", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UseAdvertiserFilter", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MerchantId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShowTwitterButton", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShowJobAlertButton", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShowLinkedInButton", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SiteFavIconId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SiteDocType", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CurrencySymbol", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FtpFolderLocation", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MetaTags", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SystemMetaTags", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MemberRegistrationNotification", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LinkedInApi", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LinkedInLogo", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LinkedInCompanyId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LinkedInEmail", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrivacySettings", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WwwRedirect", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AllowAdvertiser", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LinkedInApiSecret", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GoogleClientId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GoogleClientSecret", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FacebookAppId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FacebookAppSecret", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LinkedInButtonSize", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DefaultCountryId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PayPalUsername", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PayPalPassword", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PayPalSignature", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SecurePayMerchantId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SecurePayPassword", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UsingSsl", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UseCustomProfessionRole", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GenerateJobXml", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsPrivateSite", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrivateRedirectUrl", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EnableJobCustomQuestionnaire", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobApplicationTypeId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobScreeningProcess", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdvertiserApprovalProcess", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SiteType", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EnableSsl", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Gst", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GstLabel", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NumberOfPremiumJobs", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PremiumJobDays", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DisplayPremiumJobsOnResults", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobExpiryNotification", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PayPalClientId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PayPalClientSecret", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PaypalUser", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PaypalProPassword", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PaypalVendor", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PaypalPartner", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@InvoiceSiteInfo", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@InvoiceSiteFooter", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EnableTermsAndConditions", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DefaultEmailLanguageId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GoogleTagManager", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GoogleAnalytics", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GoogleWebMaster", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EnablePeopleSearch", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GlobalDateFormat", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TimeZone", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GlobalFolder", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EnableScreeningQuestions", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EnableExpiryDate", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MemberRegisterPageId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobApplicationPageId", DbType.Int32, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("globalsettingid ") || clause.Trim().StartsWith("globalsettingid="))
				{
					database.SetParameterValue(commandWrapper, "@GlobalSettingId", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("siteid ") || clause.Trim().StartsWith("siteid="))
				{
					database.SetParameterValue(commandWrapper, "@SiteId", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("defaultlanguageid ") || clause.Trim().StartsWith("defaultlanguageid="))
				{
					database.SetParameterValue(commandWrapper, "@DefaultLanguageId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("defaultdynamicpageid ") || clause.Trim().StartsWith("defaultdynamicpageid="))
				{
					database.SetParameterValue(commandWrapper, "@DefaultDynamicPageId", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("publicjobssearch ") || clause.Trim().StartsWith("publicjobssearch="))
				{
					database.SetParameterValue(commandWrapper, "@PublicJobsSearch", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("publicmemberssearch ") || clause.Trim().StartsWith("publicmemberssearch="))
				{
					database.SetParameterValue(commandWrapper, "@PublicMembersSearch", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("publiccompaniessearch ") || clause.Trim().StartsWith("publiccompaniessearch="))
				{
					database.SetParameterValue(commandWrapper, "@PublicCompaniesSearch", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("publicsponsoredadverts ") || clause.Trim().StartsWith("publicsponsoredadverts="))
				{
					database.SetParameterValue(commandWrapper, "@PublicSponsoredAdverts", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("privatejobs ") || clause.Trim().StartsWith("privatejobs="))
				{
					database.SetParameterValue(commandWrapper, "@PrivateJobs", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("privatemembers ") || clause.Trim().StartsWith("privatemembers="))
				{
					database.SetParameterValue(commandWrapper, "@PrivateMembers", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("privatecompanies ") || clause.Trim().StartsWith("privatecompanies="))
				{
					database.SetParameterValue(commandWrapper, "@PrivateCompanies", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastmodifiedby ") || clause.Trim().StartsWith("lastmodifiedby="))
				{
					database.SetParameterValue(commandWrapper, "@LastModifiedBy", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastmodified ") || clause.Trim().StartsWith("lastmodified="))
				{
					database.SetParameterValue(commandWrapper, "@LastModified", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pagetitleprefix ") || clause.Trim().StartsWith("pagetitleprefix="))
				{
					database.SetParameterValue(commandWrapper, "@PageTitlePrefix", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pagetitlesuffix ") || clause.Trim().StartsWith("pagetitlesuffix="))
				{
					database.SetParameterValue(commandWrapper, "@PageTitleSuffix", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("defaulttitle ") || clause.Trim().StartsWith("defaulttitle="))
				{
					database.SetParameterValue(commandWrapper, "@DefaultTitle", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hometitle ") || clause.Trim().StartsWith("hometitle="))
				{
					database.SetParameterValue(commandWrapper, "@HomeTitle", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("defaultdescription ") || clause.Trim().StartsWith("defaultdescription="))
				{
					database.SetParameterValue(commandWrapper, "@DefaultDescription", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("homedescription ") || clause.Trim().StartsWith("homedescription="))
				{
					database.SetParameterValue(commandWrapper, "@HomeDescription", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("defaultkeywords ") || clause.Trim().StartsWith("defaultkeywords="))
				{
					database.SetParameterValue(commandWrapper, "@DefaultKeywords", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("homekeywords ") || clause.Trim().StartsWith("homekeywords="))
				{
					database.SetParameterValue(commandWrapper, "@HomeKeywords", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("showfacebookbutton ") || clause.Trim().StartsWith("showfacebookbutton="))
				{
					database.SetParameterValue(commandWrapper, "@ShowFaceBookButton", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("useadvertiserfilter ") || clause.Trim().StartsWith("useadvertiserfilter="))
				{
					database.SetParameterValue(commandWrapper, "@UseAdvertiserFilter", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("merchantid ") || clause.Trim().StartsWith("merchantid="))
				{
					database.SetParameterValue(commandWrapper, "@MerchantId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("showtwitterbutton ") || clause.Trim().StartsWith("showtwitterbutton="))
				{
					database.SetParameterValue(commandWrapper, "@ShowTwitterButton", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("showjobalertbutton ") || clause.Trim().StartsWith("showjobalertbutton="))
				{
					database.SetParameterValue(commandWrapper, "@ShowJobAlertButton", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("showlinkedinbutton ") || clause.Trim().StartsWith("showlinkedinbutton="))
				{
					database.SetParameterValue(commandWrapper, "@ShowLinkedInButton", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sitefaviconid ") || clause.Trim().StartsWith("sitefaviconid="))
				{
					database.SetParameterValue(commandWrapper, "@SiteFavIconId", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sitedoctype ") || clause.Trim().StartsWith("sitedoctype="))
				{
					database.SetParameterValue(commandWrapper, "@SiteDocType", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("currencysymbol ") || clause.Trim().StartsWith("currencysymbol="))
				{
					database.SetParameterValue(commandWrapper, "@CurrencySymbol", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ftpfolderlocation ") || clause.Trim().StartsWith("ftpfolderlocation="))
				{
					database.SetParameterValue(commandWrapper, "@FtpFolderLocation", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("metatags ") || clause.Trim().StartsWith("metatags="))
				{
					database.SetParameterValue(commandWrapper, "@MetaTags", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("systemmetatags ") || clause.Trim().StartsWith("systemmetatags="))
				{
					database.SetParameterValue(commandWrapper, "@SystemMetaTags", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("memberregistrationnotification ") || clause.Trim().StartsWith("memberregistrationnotification="))
				{
					database.SetParameterValue(commandWrapper, "@MemberRegistrationNotification", 
						clause.Trim().Remove(0,30).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("linkedinapi ") || clause.Trim().StartsWith("linkedinapi="))
				{
					database.SetParameterValue(commandWrapper, "@LinkedInApi", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("linkedinlogo ") || clause.Trim().StartsWith("linkedinlogo="))
				{
					database.SetParameterValue(commandWrapper, "@LinkedInLogo", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("linkedincompanyid ") || clause.Trim().StartsWith("linkedincompanyid="))
				{
					database.SetParameterValue(commandWrapper, "@LinkedInCompanyId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("linkedinemail ") || clause.Trim().StartsWith("linkedinemail="))
				{
					database.SetParameterValue(commandWrapper, "@LinkedInEmail", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("privacysettings ") || clause.Trim().StartsWith("privacysettings="))
				{
					database.SetParameterValue(commandWrapper, "@PrivacySettings", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wwwredirect ") || clause.Trim().StartsWith("wwwredirect="))
				{
					database.SetParameterValue(commandWrapper, "@WwwRedirect", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("allowadvertiser ") || clause.Trim().StartsWith("allowadvertiser="))
				{
					database.SetParameterValue(commandWrapper, "@AllowAdvertiser", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("linkedinapisecret ") || clause.Trim().StartsWith("linkedinapisecret="))
				{
					database.SetParameterValue(commandWrapper, "@LinkedInApiSecret", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("googleclientid ") || clause.Trim().StartsWith("googleclientid="))
				{
					database.SetParameterValue(commandWrapper, "@GoogleClientId", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("googleclientsecret ") || clause.Trim().StartsWith("googleclientsecret="))
				{
					database.SetParameterValue(commandWrapper, "@GoogleClientSecret", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("facebookappid ") || clause.Trim().StartsWith("facebookappid="))
				{
					database.SetParameterValue(commandWrapper, "@FacebookAppId", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("facebookappsecret ") || clause.Trim().StartsWith("facebookappsecret="))
				{
					database.SetParameterValue(commandWrapper, "@FacebookAppSecret", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("linkedinbuttonsize ") || clause.Trim().StartsWith("linkedinbuttonsize="))
				{
					database.SetParameterValue(commandWrapper, "@LinkedInButtonSize", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("defaultcountryid ") || clause.Trim().StartsWith("defaultcountryid="))
				{
					database.SetParameterValue(commandWrapper, "@DefaultCountryId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("paypalusername ") || clause.Trim().StartsWith("paypalusername="))
				{
					database.SetParameterValue(commandWrapper, "@PayPalUsername", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("paypalpassword ") || clause.Trim().StartsWith("paypalpassword="))
				{
					database.SetParameterValue(commandWrapper, "@PayPalPassword", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("paypalsignature ") || clause.Trim().StartsWith("paypalsignature="))
				{
					database.SetParameterValue(commandWrapper, "@PayPalSignature", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("securepaymerchantid ") || clause.Trim().StartsWith("securepaymerchantid="))
				{
					database.SetParameterValue(commandWrapper, "@SecurePayMerchantId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("securepaypassword ") || clause.Trim().StartsWith("securepaypassword="))
				{
					database.SetParameterValue(commandWrapper, "@SecurePayPassword", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("usingssl ") || clause.Trim().StartsWith("usingssl="))
				{
					database.SetParameterValue(commandWrapper, "@UsingSsl", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("usecustomprofessionrole ") || clause.Trim().StartsWith("usecustomprofessionrole="))
				{
					database.SetParameterValue(commandWrapper, "@UseCustomProfessionRole", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("generatejobxml ") || clause.Trim().StartsWith("generatejobxml="))
				{
					database.SetParameterValue(commandWrapper, "@GenerateJobXml", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("isprivatesite ") || clause.Trim().StartsWith("isprivatesite="))
				{
					database.SetParameterValue(commandWrapper, "@IsPrivateSite", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("privateredirecturl ") || clause.Trim().StartsWith("privateredirecturl="))
				{
					database.SetParameterValue(commandWrapper, "@PrivateRedirectUrl", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("enablejobcustomquestionnaire ") || clause.Trim().StartsWith("enablejobcustomquestionnaire="))
				{
					database.SetParameterValue(commandWrapper, "@EnableJobCustomQuestionnaire", 
						clause.Trim().Remove(0,28).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobapplicationtypeid ") || clause.Trim().StartsWith("jobapplicationtypeid="))
				{
					database.SetParameterValue(commandWrapper, "@JobApplicationTypeId", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobscreeningprocess ") || clause.Trim().StartsWith("jobscreeningprocess="))
				{
					database.SetParameterValue(commandWrapper, "@JobScreeningProcess", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("advertiserapprovalprocess ") || clause.Trim().StartsWith("advertiserapprovalprocess="))
				{
					database.SetParameterValue(commandWrapper, "@AdvertiserApprovalProcess", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sitetype ") || clause.Trim().StartsWith("sitetype="))
				{
					database.SetParameterValue(commandWrapper, "@SiteType", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("enablessl ") || clause.Trim().StartsWith("enablessl="))
				{
					database.SetParameterValue(commandWrapper, "@EnableSsl", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gst ") || clause.Trim().StartsWith("gst="))
				{
					database.SetParameterValue(commandWrapper, "@Gst", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gstlabel ") || clause.Trim().StartsWith("gstlabel="))
				{
					database.SetParameterValue(commandWrapper, "@GstLabel", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("numberofpremiumjobs ") || clause.Trim().StartsWith("numberofpremiumjobs="))
				{
					database.SetParameterValue(commandWrapper, "@NumberOfPremiumJobs", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("premiumjobdays ") || clause.Trim().StartsWith("premiumjobdays="))
				{
					database.SetParameterValue(commandWrapper, "@PremiumJobDays", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("displaypremiumjobsonresults ") || clause.Trim().StartsWith("displaypremiumjobsonresults="))
				{
					database.SetParameterValue(commandWrapper, "@DisplayPremiumJobsOnResults", 
						clause.Trim().Remove(0,27).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobexpirynotification ") || clause.Trim().StartsWith("jobexpirynotification="))
				{
					database.SetParameterValue(commandWrapper, "@JobExpiryNotification", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("currencyid ") || clause.Trim().StartsWith("currencyid="))
				{
					database.SetParameterValue(commandWrapper, "@CurrencyId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("paypalclientid ") || clause.Trim().StartsWith("paypalclientid="))
				{
					database.SetParameterValue(commandWrapper, "@PayPalClientId", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("paypalclientsecret ") || clause.Trim().StartsWith("paypalclientsecret="))
				{
					database.SetParameterValue(commandWrapper, "@PayPalClientSecret", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("paypaluser ") || clause.Trim().StartsWith("paypaluser="))
				{
					database.SetParameterValue(commandWrapper, "@PaypalUser", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("paypalpropassword ") || clause.Trim().StartsWith("paypalpropassword="))
				{
					database.SetParameterValue(commandWrapper, "@PaypalProPassword", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("paypalvendor ") || clause.Trim().StartsWith("paypalvendor="))
				{
					database.SetParameterValue(commandWrapper, "@PaypalVendor", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("paypalpartner ") || clause.Trim().StartsWith("paypalpartner="))
				{
					database.SetParameterValue(commandWrapper, "@PaypalPartner", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("invoicesiteinfo ") || clause.Trim().StartsWith("invoicesiteinfo="))
				{
					database.SetParameterValue(commandWrapper, "@InvoiceSiteInfo", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("invoicesitefooter ") || clause.Trim().StartsWith("invoicesitefooter="))
				{
					database.SetParameterValue(commandWrapper, "@InvoiceSiteFooter", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("enabletermsandconditions ") || clause.Trim().StartsWith("enabletermsandconditions="))
				{
					database.SetParameterValue(commandWrapper, "@EnableTermsAndConditions", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("defaultemaillanguageid ") || clause.Trim().StartsWith("defaultemaillanguageid="))
				{
					database.SetParameterValue(commandWrapper, "@DefaultEmailLanguageId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("googletagmanager ") || clause.Trim().StartsWith("googletagmanager="))
				{
					database.SetParameterValue(commandWrapper, "@GoogleTagManager", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("googleanalytics ") || clause.Trim().StartsWith("googleanalytics="))
				{
					database.SetParameterValue(commandWrapper, "@GoogleAnalytics", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("googlewebmaster ") || clause.Trim().StartsWith("googlewebmaster="))
				{
					database.SetParameterValue(commandWrapper, "@GoogleWebMaster", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("enablepeoplesearch ") || clause.Trim().StartsWith("enablepeoplesearch="))
				{
					database.SetParameterValue(commandWrapper, "@EnablePeopleSearch", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("globaldateformat ") || clause.Trim().StartsWith("globaldateformat="))
				{
					database.SetParameterValue(commandWrapper, "@GlobalDateFormat", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("timezone ") || clause.Trim().StartsWith("timezone="))
				{
					database.SetParameterValue(commandWrapper, "@TimeZone", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("globalfolder ") || clause.Trim().StartsWith("globalfolder="))
				{
					database.SetParameterValue(commandWrapper, "@GlobalFolder", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("enablescreeningquestions ") || clause.Trim().StartsWith("enablescreeningquestions="))
				{
					database.SetParameterValue(commandWrapper, "@EnableScreeningQuestions", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("enableexpirydate ") || clause.Trim().StartsWith("enableexpirydate="))
				{
					database.SetParameterValue(commandWrapper, "@EnableExpiryDate", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("memberregisterpageid ") || clause.Trim().StartsWith("memberregisterpageid="))
				{
					database.SetParameterValue(commandWrapper, "@MemberRegisterPageId", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobapplicationpageid ") || clause.Trim().StartsWith("jobapplicationpageid="))
				{
					database.SetParameterValue(commandWrapper, "@JobApplicationPageId", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<GlobalSettings> rows = new TList<GlobalSettings>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of JXTPortal.Entities.GlobalSettings objects.</returns>
		public override TList<GlobalSettings> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_Find_Dynamic", typeof(GlobalSettingsColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<GlobalSettings> rows = new TList<GlobalSettings>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.GlobalSettings objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GlobalSettings> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<GlobalSettings> rows = new TList<GlobalSettings>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.GlobalSettings objects.</returns>
		public override TList<GlobalSettings> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<GlobalSettings> rows = new TList<GlobalSettings>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByDefaultCountryId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__GlobalSet__Defau__0445F0DF key.
		///		FK__GlobalSet__Defau__0445F0DF Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_defaultCountryId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.GlobalSettings objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GlobalSettings> GetByDefaultCountryId(TransactionManager transactionManager, System.Int32? _defaultCountryId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetByDefaultCountryId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@DefaultCountryId", DbType.Int32, _defaultCountryId);
			
			IDataReader reader = null;
			TList<GlobalSettings> rows = new TList<GlobalSettings>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByDefaultCountryId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByDefaultCountryId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByDefaultLanguageId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__GlobalSet__Defau__5772F790 key.
		///		FK__GlobalSet__Defau__5772F790 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_defaultLanguageId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.GlobalSettings objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GlobalSettings> GetByDefaultLanguageId(TransactionManager transactionManager, System.Int32 _defaultLanguageId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetByDefaultLanguageId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@DefaultLanguageId", DbType.Int32, _defaultLanguageId);
			
			IDataReader reader = null;
			TList<GlobalSettings> rows = new TList<GlobalSettings>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByDefaultLanguageId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByDefaultLanguageId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByDefaultDynamicPageId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__GlobalSet__Defau__58671BC9 key.
		///		FK__GlobalSet__Defau__58671BC9 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_defaultDynamicPageId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.GlobalSettings objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GlobalSettings> GetByDefaultDynamicPageId(TransactionManager transactionManager, System.Int32? _defaultDynamicPageId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetByDefaultDynamicPageId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@DefaultDynamicPageId", DbType.Int32, _defaultDynamicPageId);
			
			IDataReader reader = null;
			TList<GlobalSettings> rows = new TList<GlobalSettings>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByDefaultDynamicPageId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByDefaultDynamicPageId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByJobApplicationPageId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__GlobalSet__JobAp__355AB93A key.
		///		FK__GlobalSet__JobAp__355AB93A Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_jobApplicationPageId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.GlobalSettings objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GlobalSettings> GetByJobApplicationPageId(TransactionManager transactionManager, System.Int32? _jobApplicationPageId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetByJobApplicationPageId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@JobApplicationPageId", DbType.Int32, _jobApplicationPageId);
			
			IDataReader reader = null;
			TList<GlobalSettings> rows = new TList<GlobalSettings>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByJobApplicationPageId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByJobApplicationPageId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByLastModifiedBy
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__GlobalSet__LastM__5A4F643B key.
		///		FK__GlobalSet__LastM__5A4F643B Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_lastModifiedBy"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.GlobalSettings objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GlobalSettings> GetByLastModifiedBy(TransactionManager transactionManager, System.Int32 _lastModifiedBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetByLastModifiedBy", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32, _lastModifiedBy);
			
			IDataReader reader = null;
			TList<GlobalSettings> rows = new TList<GlobalSettings>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByLastModifiedBy", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByLastModifiedBy", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMemberRegisterPageId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__GlobalSet__Membe__1A26D4BA key.
		///		FK__GlobalSet__Membe__1A26D4BA Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_memberRegisterPageId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.GlobalSettings objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GlobalSettings> GetByMemberRegisterPageId(TransactionManager transactionManager, System.Int32? _memberRegisterPageId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetByMemberRegisterPageId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MemberRegisterPageId", DbType.Int32, _memberRegisterPageId);
			
			IDataReader reader = null;
			TList<GlobalSettings> rows = new TList<GlobalSettings>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMemberRegisterPageId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMemberRegisterPageId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySiteFavIconId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__GlobalSet__SiteF__5C37ACAD key.
		///		FK__GlobalSet__SiteF__5C37ACAD Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_siteFavIconId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.GlobalSettings objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GlobalSettings> GetBySiteFavIconId(TransactionManager transactionManager, System.Int32? _siteFavIconId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetBySiteFavIconId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SiteFavIconId", DbType.Int32, _siteFavIconId);
			
			IDataReader reader = null;
			TList<GlobalSettings> rows = new TList<GlobalSettings>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteFavIconId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteFavIconId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySiteId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__GlobalSet__SiteI__125EB334 key.
		///		FK__GlobalSet__SiteI__125EB334 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_siteId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.GlobalSettings objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GlobalSettings> GetBySiteId(TransactionManager transactionManager, System.Int32 _siteId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetBySiteId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, _siteId);
			
			IDataReader reader = null;
			TList<GlobalSettings> rows = new TList<GlobalSettings>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetBySiteIdGlobalSettingId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the _dta_index_GlobalSettings_7_408245105__K2_K1_55 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_siteId"></param>
		/// <param name="_globalSettingId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;GlobalSettings&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GlobalSettings> GetBySiteIdGlobalSettingId(TransactionManager transactionManager, System.Int32 _siteId, System.Int32 _globalSettingId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetBySiteIdGlobalSettingId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, _siteId);
				database.AddInParameter(commandWrapper, "@GlobalSettingId", DbType.Int32, _globalSettingId);
			
			IDataReader reader = null;
			TList<GlobalSettings> tmp = new TList<GlobalSettings>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteIdGlobalSettingId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteIdGlobalSettingId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetBySiteIdPublicJobsSearch
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_GlobalSettings_SiteID_PublicJobsSearch index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_siteId"></param>
		/// <param name="_publicJobsSearch"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;GlobalSettings&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GlobalSettings> GetBySiteIdPublicJobsSearch(TransactionManager transactionManager, System.Int32 _siteId, System.Boolean _publicJobsSearch, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetBySiteIdPublicJobsSearch", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, _siteId);
				database.AddInParameter(commandWrapper, "@PublicJobsSearch", DbType.Boolean, _publicJobsSearch);
			
			IDataReader reader = null;
			TList<GlobalSettings> tmp = new TList<GlobalSettings>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteIdPublicJobsSearch", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteIdPublicJobsSearch", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetBySiteIdUseAdvertiserFilter
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_GlobalSettings_SiteID_UseAdvertiserFilter index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_siteId"></param>
		/// <param name="_useAdvertiserFilter"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;GlobalSettings&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GlobalSettings> GetBySiteIdUseAdvertiserFilter(TransactionManager transactionManager, System.Int32 _siteId, System.Int32 _useAdvertiserFilter, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetBySiteIdUseAdvertiserFilter", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, _siteId);
				database.AddInParameter(commandWrapper, "@UseAdvertiserFilter", DbType.Int32, _useAdvertiserFilter);
			
			IDataReader reader = null;
			TList<GlobalSettings> tmp = new TList<GlobalSettings>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteIdUseAdvertiserFilter", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteIdUseAdvertiserFilter", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByPublicJobsSearchPrivateJobsSiteId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_GlobalSettins_PublicJobsSearch_PrivateJobs_SiteID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_publicJobsSearch"></param>
		/// <param name="_privateJobs"></param>
		/// <param name="_siteId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;GlobalSettings&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GlobalSettings> GetByPublicJobsSearchPrivateJobsSiteId(TransactionManager transactionManager, System.Boolean _publicJobsSearch, System.Boolean _privateJobs, System.Int32 _siteId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetByPublicJobsSearchPrivateJobsSiteId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@PublicJobsSearch", DbType.Boolean, _publicJobsSearch);
				database.AddInParameter(commandWrapper, "@PrivateJobs", DbType.Boolean, _privateJobs);
				database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, _siteId);
			
			IDataReader reader = null;
			TList<GlobalSettings> tmp = new TList<GlobalSettings>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByPublicJobsSearchPrivateJobsSiteId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByPublicJobsSearchPrivateJobsSiteId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByGlobalSettingId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK__tmp_ms_xx_Global__408F9238 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_globalSettingId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="JXTPortal.Entities.GlobalSettings"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override JXTPortal.Entities.GlobalSettings GetByGlobalSettingId(TransactionManager transactionManager, System.Int32 _globalSettingId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetByGlobalSettingId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GlobalSettingId", DbType.Int32, _globalSettingId);
			
			IDataReader reader = null;
			TList<GlobalSettings> tmp = new TList<GlobalSettings>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGlobalSettingId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGlobalSettingId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the JXTPortal.Entities.GlobalSettings object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<JXTPortal.Entities.GlobalSettings> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "GlobalSettings";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("GlobalSettingID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("SiteID", typeof(System.Int32));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("DefaultLanguageID", typeof(System.Int32));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("DefaultDynamicPageID", typeof(System.Int32));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("PublicJobsSearch", typeof(System.Boolean));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("PublicMembersSearch", typeof(System.Boolean));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("PublicCompaniesSearch", typeof(System.Boolean));
			col6.AllowDBNull = false;		
			DataColumn col7 = dataTable.Columns.Add("PublicSponsoredAdverts", typeof(System.Boolean));
			col7.AllowDBNull = false;		
			DataColumn col8 = dataTable.Columns.Add("PrivateJobs", typeof(System.Boolean));
			col8.AllowDBNull = false;		
			DataColumn col9 = dataTable.Columns.Add("PrivateMembers", typeof(System.Boolean));
			col9.AllowDBNull = false;		
			DataColumn col10 = dataTable.Columns.Add("PrivateCompanies", typeof(System.Boolean));
			col10.AllowDBNull = false;		
			DataColumn col11 = dataTable.Columns.Add("LastModifiedBy", typeof(System.Int32));
			col11.AllowDBNull = false;		
			DataColumn col12 = dataTable.Columns.Add("LastModified", typeof(System.DateTime));
			col12.AllowDBNull = false;		
			DataColumn col13 = dataTable.Columns.Add("PageTitlePrefix", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("PageTitleSuffix", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("DefaultTitle", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("HomeTitle", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("DefaultDescription", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("HomeDescription", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("DefaultKeywords", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("HomeKeywords", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("ShowFaceBookButton", typeof(System.Boolean));
			col21.AllowDBNull = false;		
			DataColumn col22 = dataTable.Columns.Add("UseAdvertiserFilter", typeof(System.Int32));
			col22.AllowDBNull = false;		
			DataColumn col23 = dataTable.Columns.Add("MerchantID", typeof(System.Int32));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("ShowTwitterButton", typeof(System.Boolean));
			col24.AllowDBNull = false;		
			DataColumn col25 = dataTable.Columns.Add("ShowJobAlertButton", typeof(System.Boolean));
			col25.AllowDBNull = false;		
			DataColumn col26 = dataTable.Columns.Add("ShowLinkedInButton", typeof(System.Boolean));
			col26.AllowDBNull = false;		
			DataColumn col27 = dataTable.Columns.Add("SiteFavIconID", typeof(System.Int32));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("SiteDocType", typeof(System.String));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("CurrencySymbol", typeof(System.String));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("FtpFolderLocation", typeof(System.String));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("MetaTags", typeof(System.String));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("SystemMetaTags", typeof(System.String));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("MemberRegistrationNotification", typeof(System.String));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("LinkedInAPI", typeof(System.String));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("LinkedInLogo", typeof(System.String));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("LinkedInCompanyID", typeof(System.Int32));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("LinkedInEmail", typeof(System.String));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("PrivacySettings", typeof(System.String));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("WWWRedirect", typeof(System.Boolean));
			col39.AllowDBNull = false;		
			DataColumn col40 = dataTable.Columns.Add("AllowAdvertiser", typeof(System.Boolean));
			col40.AllowDBNull = false;		
			DataColumn col41 = dataTable.Columns.Add("LinkedInAPISecret", typeof(System.String));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("GoogleClientID", typeof(System.String));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("GoogleClientSecret", typeof(System.String));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("FacebookAppID", typeof(System.String));
			col44.AllowDBNull = true;		
			DataColumn col45 = dataTable.Columns.Add("FacebookAppSecret", typeof(System.String));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("LinkedInButtonSize", typeof(System.Int32));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("DefaultCountryID", typeof(System.Int32));
			col47.AllowDBNull = true;		
			DataColumn col48 = dataTable.Columns.Add("PayPalUsername", typeof(System.String));
			col48.AllowDBNull = true;		
			DataColumn col49 = dataTable.Columns.Add("PayPalPassword", typeof(System.String));
			col49.AllowDBNull = true;		
			DataColumn col50 = dataTable.Columns.Add("PayPalSignature", typeof(System.String));
			col50.AllowDBNull = true;		
			DataColumn col51 = dataTable.Columns.Add("SecurePayMerchantID", typeof(System.String));
			col51.AllowDBNull = true;		
			DataColumn col52 = dataTable.Columns.Add("SecurePayPassword", typeof(System.String));
			col52.AllowDBNull = true;		
			DataColumn col53 = dataTable.Columns.Add("UsingSSL", typeof(System.Boolean));
			col53.AllowDBNull = false;		
			DataColumn col54 = dataTable.Columns.Add("UseCustomProfessionRole", typeof(System.Boolean));
			col54.AllowDBNull = false;		
			DataColumn col55 = dataTable.Columns.Add("GenerateJobXML", typeof(System.Boolean));
			col55.AllowDBNull = false;		
			DataColumn col56 = dataTable.Columns.Add("IsPrivateSite", typeof(System.Boolean));
			col56.AllowDBNull = true;		
			DataColumn col57 = dataTable.Columns.Add("PrivateRedirectUrl", typeof(System.String));
			col57.AllowDBNull = true;		
			DataColumn col58 = dataTable.Columns.Add("EnableJobCustomQuestionnaire", typeof(System.Boolean));
			col58.AllowDBNull = true;		
			DataColumn col59 = dataTable.Columns.Add("JobApplicationTypeID", typeof(System.Int32));
			col59.AllowDBNull = true;		
			DataColumn col60 = dataTable.Columns.Add("JobScreeningProcess", typeof(System.Boolean));
			col60.AllowDBNull = true;		
			DataColumn col61 = dataTable.Columns.Add("AdvertiserApprovalProcess", typeof(System.Int32));
			col61.AllowDBNull = true;		
			DataColumn col62 = dataTable.Columns.Add("SiteType", typeof(System.Int32));
			col62.AllowDBNull = false;		
			DataColumn col63 = dataTable.Columns.Add("EnableSSL", typeof(System.Boolean));
			col63.AllowDBNull = false;		
			DataColumn col64 = dataTable.Columns.Add("GST", typeof(System.Decimal));
			col64.AllowDBNull = false;		
			DataColumn col65 = dataTable.Columns.Add("GSTLabel", typeof(System.String));
			col65.AllowDBNull = true;		
			DataColumn col66 = dataTable.Columns.Add("NumberOfPremiumJobs", typeof(System.Int32));
			col66.AllowDBNull = false;		
			DataColumn col67 = dataTable.Columns.Add("PremiumJobDays", typeof(System.Int32));
			col67.AllowDBNull = false;		
			DataColumn col68 = dataTable.Columns.Add("DisplayPremiumJobsOnResults", typeof(System.Boolean));
			col68.AllowDBNull = false;		
			DataColumn col69 = dataTable.Columns.Add("JobExpiryNotification", typeof(System.Boolean));
			col69.AllowDBNull = false;		
			DataColumn col70 = dataTable.Columns.Add("CurrencyID", typeof(System.Int32));
			col70.AllowDBNull = false;		
			DataColumn col71 = dataTable.Columns.Add("PayPalClientID", typeof(System.String));
			col71.AllowDBNull = true;		
			DataColumn col72 = dataTable.Columns.Add("PayPalClientSecret", typeof(System.String));
			col72.AllowDBNull = true;		
			DataColumn col73 = dataTable.Columns.Add("PaypalUser", typeof(System.String));
			col73.AllowDBNull = true;		
			DataColumn col74 = dataTable.Columns.Add("PaypalProPassword", typeof(System.String));
			col74.AllowDBNull = true;		
			DataColumn col75 = dataTable.Columns.Add("PaypalVendor", typeof(System.String));
			col75.AllowDBNull = true;		
			DataColumn col76 = dataTable.Columns.Add("PaypalPartner", typeof(System.String));
			col76.AllowDBNull = true;		
			DataColumn col77 = dataTable.Columns.Add("InvoiceSiteInfo", typeof(System.String));
			col77.AllowDBNull = true;		
			DataColumn col78 = dataTable.Columns.Add("InvoiceSiteFooter", typeof(System.String));
			col78.AllowDBNull = true;		
			DataColumn col79 = dataTable.Columns.Add("EnableTermsAndConditions", typeof(System.Boolean));
			col79.AllowDBNull = false;		
			DataColumn col80 = dataTable.Columns.Add("DefaultEmailLanguageId", typeof(System.Int32));
			col80.AllowDBNull = true;		
			DataColumn col81 = dataTable.Columns.Add("GoogleTagManager", typeof(System.String));
			col81.AllowDBNull = true;		
			DataColumn col82 = dataTable.Columns.Add("GoogleAnalytics", typeof(System.String));
			col82.AllowDBNull = true;		
			DataColumn col83 = dataTable.Columns.Add("GoogleWebMaster", typeof(System.String));
			col83.AllowDBNull = true;		
			DataColumn col84 = dataTable.Columns.Add("EnablePeopleSearch", typeof(System.Boolean));
			col84.AllowDBNull = false;		
			DataColumn col85 = dataTable.Columns.Add("GlobalDateFormat", typeof(System.String));
			col85.AllowDBNull = false;		
			DataColumn col86 = dataTable.Columns.Add("TimeZone", typeof(System.String));
			col86.AllowDBNull = false;		
			DataColumn col87 = dataTable.Columns.Add("GlobalFolder", typeof(System.String));
			col87.AllowDBNull = true;		
			DataColumn col88 = dataTable.Columns.Add("EnableScreeningQuestions", typeof(System.Boolean));
			col88.AllowDBNull = false;		
			DataColumn col89 = dataTable.Columns.Add("EnableExpiryDate", typeof(System.Boolean));
			col89.AllowDBNull = false;		
			DataColumn col90 = dataTable.Columns.Add("MemberRegisterPageID", typeof(System.Int32));
			col90.AllowDBNull = true;		
			DataColumn col91 = dataTable.Columns.Add("JobApplicationPageID", typeof(System.Int32));
			col91.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("GlobalSettingID", "GlobalSettingID");
			bulkCopy.ColumnMappings.Add("SiteID", "SiteID");
			bulkCopy.ColumnMappings.Add("DefaultLanguageID", "DefaultLanguageID");
			bulkCopy.ColumnMappings.Add("DefaultDynamicPageID", "DefaultDynamicPageID");
			bulkCopy.ColumnMappings.Add("PublicJobsSearch", "PublicJobsSearch");
			bulkCopy.ColumnMappings.Add("PublicMembersSearch", "PublicMembersSearch");
			bulkCopy.ColumnMappings.Add("PublicCompaniesSearch", "PublicCompaniesSearch");
			bulkCopy.ColumnMappings.Add("PublicSponsoredAdverts", "PublicSponsoredAdverts");
			bulkCopy.ColumnMappings.Add("PrivateJobs", "PrivateJobs");
			bulkCopy.ColumnMappings.Add("PrivateMembers", "PrivateMembers");
			bulkCopy.ColumnMappings.Add("PrivateCompanies", "PrivateCompanies");
			bulkCopy.ColumnMappings.Add("LastModifiedBy", "LastModifiedBy");
			bulkCopy.ColumnMappings.Add("LastModified", "LastModified");
			bulkCopy.ColumnMappings.Add("PageTitlePrefix", "PageTitlePrefix");
			bulkCopy.ColumnMappings.Add("PageTitleSuffix", "PageTitleSuffix");
			bulkCopy.ColumnMappings.Add("DefaultTitle", "DefaultTitle");
			bulkCopy.ColumnMappings.Add("HomeTitle", "HomeTitle");
			bulkCopy.ColumnMappings.Add("DefaultDescription", "DefaultDescription");
			bulkCopy.ColumnMappings.Add("HomeDescription", "HomeDescription");
			bulkCopy.ColumnMappings.Add("DefaultKeywords", "DefaultKeywords");
			bulkCopy.ColumnMappings.Add("HomeKeywords", "HomeKeywords");
			bulkCopy.ColumnMappings.Add("ShowFaceBookButton", "ShowFaceBookButton");
			bulkCopy.ColumnMappings.Add("UseAdvertiserFilter", "UseAdvertiserFilter");
			bulkCopy.ColumnMappings.Add("MerchantID", "MerchantID");
			bulkCopy.ColumnMappings.Add("ShowTwitterButton", "ShowTwitterButton");
			bulkCopy.ColumnMappings.Add("ShowJobAlertButton", "ShowJobAlertButton");
			bulkCopy.ColumnMappings.Add("ShowLinkedInButton", "ShowLinkedInButton");
			bulkCopy.ColumnMappings.Add("SiteFavIconID", "SiteFavIconID");
			bulkCopy.ColumnMappings.Add("SiteDocType", "SiteDocType");
			bulkCopy.ColumnMappings.Add("CurrencySymbol", "CurrencySymbol");
			bulkCopy.ColumnMappings.Add("FtpFolderLocation", "FtpFolderLocation");
			bulkCopy.ColumnMappings.Add("MetaTags", "MetaTags");
			bulkCopy.ColumnMappings.Add("SystemMetaTags", "SystemMetaTags");
			bulkCopy.ColumnMappings.Add("MemberRegistrationNotification", "MemberRegistrationNotification");
			bulkCopy.ColumnMappings.Add("LinkedInAPI", "LinkedInAPI");
			bulkCopy.ColumnMappings.Add("LinkedInLogo", "LinkedInLogo");
			bulkCopy.ColumnMappings.Add("LinkedInCompanyID", "LinkedInCompanyID");
			bulkCopy.ColumnMappings.Add("LinkedInEmail", "LinkedInEmail");
			bulkCopy.ColumnMappings.Add("PrivacySettings", "PrivacySettings");
			bulkCopy.ColumnMappings.Add("WWWRedirect", "WWWRedirect");
			bulkCopy.ColumnMappings.Add("AllowAdvertiser", "AllowAdvertiser");
			bulkCopy.ColumnMappings.Add("LinkedInAPISecret", "LinkedInAPISecret");
			bulkCopy.ColumnMappings.Add("GoogleClientID", "GoogleClientID");
			bulkCopy.ColumnMappings.Add("GoogleClientSecret", "GoogleClientSecret");
			bulkCopy.ColumnMappings.Add("FacebookAppID", "FacebookAppID");
			bulkCopy.ColumnMappings.Add("FacebookAppSecret", "FacebookAppSecret");
			bulkCopy.ColumnMappings.Add("LinkedInButtonSize", "LinkedInButtonSize");
			bulkCopy.ColumnMappings.Add("DefaultCountryID", "DefaultCountryID");
			bulkCopy.ColumnMappings.Add("PayPalUsername", "PayPalUsername");
			bulkCopy.ColumnMappings.Add("PayPalPassword", "PayPalPassword");
			bulkCopy.ColumnMappings.Add("PayPalSignature", "PayPalSignature");
			bulkCopy.ColumnMappings.Add("SecurePayMerchantID", "SecurePayMerchantID");
			bulkCopy.ColumnMappings.Add("SecurePayPassword", "SecurePayPassword");
			bulkCopy.ColumnMappings.Add("UsingSSL", "UsingSSL");
			bulkCopy.ColumnMappings.Add("UseCustomProfessionRole", "UseCustomProfessionRole");
			bulkCopy.ColumnMappings.Add("GenerateJobXML", "GenerateJobXML");
			bulkCopy.ColumnMappings.Add("IsPrivateSite", "IsPrivateSite");
			bulkCopy.ColumnMappings.Add("PrivateRedirectUrl", "PrivateRedirectUrl");
			bulkCopy.ColumnMappings.Add("EnableJobCustomQuestionnaire", "EnableJobCustomQuestionnaire");
			bulkCopy.ColumnMappings.Add("JobApplicationTypeID", "JobApplicationTypeID");
			bulkCopy.ColumnMappings.Add("JobScreeningProcess", "JobScreeningProcess");
			bulkCopy.ColumnMappings.Add("AdvertiserApprovalProcess", "AdvertiserApprovalProcess");
			bulkCopy.ColumnMappings.Add("SiteType", "SiteType");
			bulkCopy.ColumnMappings.Add("EnableSSL", "EnableSSL");
			bulkCopy.ColumnMappings.Add("GST", "GST");
			bulkCopy.ColumnMappings.Add("GSTLabel", "GSTLabel");
			bulkCopy.ColumnMappings.Add("NumberOfPremiumJobs", "NumberOfPremiumJobs");
			bulkCopy.ColumnMappings.Add("PremiumJobDays", "PremiumJobDays");
			bulkCopy.ColumnMappings.Add("DisplayPremiumJobsOnResults", "DisplayPremiumJobsOnResults");
			bulkCopy.ColumnMappings.Add("JobExpiryNotification", "JobExpiryNotification");
			bulkCopy.ColumnMappings.Add("CurrencyID", "CurrencyID");
			bulkCopy.ColumnMappings.Add("PayPalClientID", "PayPalClientID");
			bulkCopy.ColumnMappings.Add("PayPalClientSecret", "PayPalClientSecret");
			bulkCopy.ColumnMappings.Add("PaypalUser", "PaypalUser");
			bulkCopy.ColumnMappings.Add("PaypalProPassword", "PaypalProPassword");
			bulkCopy.ColumnMappings.Add("PaypalVendor", "PaypalVendor");
			bulkCopy.ColumnMappings.Add("PaypalPartner", "PaypalPartner");
			bulkCopy.ColumnMappings.Add("InvoiceSiteInfo", "InvoiceSiteInfo");
			bulkCopy.ColumnMappings.Add("InvoiceSiteFooter", "InvoiceSiteFooter");
			bulkCopy.ColumnMappings.Add("EnableTermsAndConditions", "EnableTermsAndConditions");
			bulkCopy.ColumnMappings.Add("DefaultEmailLanguageId", "DefaultEmailLanguageId");
			bulkCopy.ColumnMappings.Add("GoogleTagManager", "GoogleTagManager");
			bulkCopy.ColumnMappings.Add("GoogleAnalytics", "GoogleAnalytics");
			bulkCopy.ColumnMappings.Add("GoogleWebMaster", "GoogleWebMaster");
			bulkCopy.ColumnMappings.Add("EnablePeopleSearch", "EnablePeopleSearch");
			bulkCopy.ColumnMappings.Add("GlobalDateFormat", "GlobalDateFormat");
			bulkCopy.ColumnMappings.Add("TimeZone", "TimeZone");
			bulkCopy.ColumnMappings.Add("GlobalFolder", "GlobalFolder");
			bulkCopy.ColumnMappings.Add("EnableScreeningQuestions", "EnableScreeningQuestions");
			bulkCopy.ColumnMappings.Add("EnableExpiryDate", "EnableExpiryDate");
			bulkCopy.ColumnMappings.Add("MemberRegisterPageID", "MemberRegisterPageID");
			bulkCopy.ColumnMappings.Add("JobApplicationPageID", "JobApplicationPageID");
			
			foreach(JXTPortal.Entities.GlobalSettings entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["GlobalSettingID"] = entity.GlobalSettingId;
							
				
					row["SiteID"] = entity.SiteId;
							
				
					row["DefaultLanguageID"] = entity.DefaultLanguageId;
							
				
					row["DefaultDynamicPageID"] = entity.DefaultDynamicPageId.HasValue ? (object) entity.DefaultDynamicPageId  : System.DBNull.Value;
							
				
					row["PublicJobsSearch"] = entity.PublicJobsSearch;
							
				
					row["PublicMembersSearch"] = entity.PublicMembersSearch;
							
				
					row["PublicCompaniesSearch"] = entity.PublicCompaniesSearch;
							
				
					row["PublicSponsoredAdverts"] = entity.PublicSponsoredAdverts;
							
				
					row["PrivateJobs"] = entity.PrivateJobs;
							
				
					row["PrivateMembers"] = entity.PrivateMembers;
							
				
					row["PrivateCompanies"] = entity.PrivateCompanies;
							
				
					row["LastModifiedBy"] = entity.LastModifiedBy;
							
				
					row["LastModified"] = entity.LastModified;
							
				
					row["PageTitlePrefix"] = entity.PageTitlePrefix;
							
				
					row["PageTitleSuffix"] = entity.PageTitleSuffix;
							
				
					row["DefaultTitle"] = entity.DefaultTitle;
							
				
					row["HomeTitle"] = entity.HomeTitle;
							
				
					row["DefaultDescription"] = entity.DefaultDescription;
							
				
					row["HomeDescription"] = entity.HomeDescription;
							
				
					row["DefaultKeywords"] = entity.DefaultKeywords;
							
				
					row["HomeKeywords"] = entity.HomeKeywords;
							
				
					row["ShowFaceBookButton"] = entity.ShowFaceBookButton;
							
				
					row["UseAdvertiserFilter"] = entity.UseAdvertiserFilter;
							
				
					row["MerchantID"] = entity.MerchantId.HasValue ? (object) entity.MerchantId  : System.DBNull.Value;
							
				
					row["ShowTwitterButton"] = entity.ShowTwitterButton;
							
				
					row["ShowJobAlertButton"] = entity.ShowJobAlertButton;
							
				
					row["ShowLinkedInButton"] = entity.ShowLinkedInButton;
							
				
					row["SiteFavIconID"] = entity.SiteFavIconId.HasValue ? (object) entity.SiteFavIconId  : System.DBNull.Value;
							
				
					row["SiteDocType"] = entity.SiteDocType;
							
				
					row["CurrencySymbol"] = entity.CurrencySymbol;
							
				
					row["FtpFolderLocation"] = entity.FtpFolderLocation;
							
				
					row["MetaTags"] = entity.MetaTags;
							
				
					row["SystemMetaTags"] = entity.SystemMetaTags;
							
				
					row["MemberRegistrationNotification"] = entity.MemberRegistrationNotification;
							
				
					row["LinkedInAPI"] = entity.LinkedInApi;
							
				
					row["LinkedInLogo"] = entity.LinkedInLogo;
							
				
					row["LinkedInCompanyID"] = entity.LinkedInCompanyId.HasValue ? (object) entity.LinkedInCompanyId  : System.DBNull.Value;
							
				
					row["LinkedInEmail"] = entity.LinkedInEmail;
							
				
					row["PrivacySettings"] = entity.PrivacySettings;
							
				
					row["WWWRedirect"] = entity.WwwRedirect;
							
				
					row["AllowAdvertiser"] = entity.AllowAdvertiser;
							
				
					row["LinkedInAPISecret"] = entity.LinkedInApiSecret;
							
				
					row["GoogleClientID"] = entity.GoogleClientId;
							
				
					row["GoogleClientSecret"] = entity.GoogleClientSecret;
							
				
					row["FacebookAppID"] = entity.FacebookAppId;
							
				
					row["FacebookAppSecret"] = entity.FacebookAppSecret;
							
				
					row["LinkedInButtonSize"] = entity.LinkedInButtonSize.HasValue ? (object) entity.LinkedInButtonSize  : System.DBNull.Value;
							
				
					row["DefaultCountryID"] = entity.DefaultCountryId.HasValue ? (object) entity.DefaultCountryId  : System.DBNull.Value;
							
				
					row["PayPalUsername"] = entity.PayPalUsername;
							
				
					row["PayPalPassword"] = entity.PayPalPassword;
							
				
					row["PayPalSignature"] = entity.PayPalSignature;
							
				
					row["SecurePayMerchantID"] = entity.SecurePayMerchantId;
							
				
					row["SecurePayPassword"] = entity.SecurePayPassword;
							
				
					row["UsingSSL"] = entity.UsingSsl;
							
				
					row["UseCustomProfessionRole"] = entity.UseCustomProfessionRole;
							
				
					row["GenerateJobXML"] = entity.GenerateJobXml;
							
				
					row["IsPrivateSite"] = entity.IsPrivateSite.HasValue ? (object) entity.IsPrivateSite  : System.DBNull.Value;
							
				
					row["PrivateRedirectUrl"] = entity.PrivateRedirectUrl;
							
				
					row["EnableJobCustomQuestionnaire"] = entity.EnableJobCustomQuestionnaire.HasValue ? (object) entity.EnableJobCustomQuestionnaire  : System.DBNull.Value;
							
				
					row["JobApplicationTypeID"] = entity.JobApplicationTypeId.HasValue ? (object) entity.JobApplicationTypeId  : System.DBNull.Value;
							
				
					row["JobScreeningProcess"] = entity.JobScreeningProcess.HasValue ? (object) entity.JobScreeningProcess  : System.DBNull.Value;
							
				
					row["AdvertiserApprovalProcess"] = entity.AdvertiserApprovalProcess.HasValue ? (object) entity.AdvertiserApprovalProcess  : System.DBNull.Value;
							
				
					row["SiteType"] = entity.SiteType;
							
				
					row["EnableSSL"] = entity.EnableSsl;
							
				
					row["GST"] = entity.Gst;
							
				
					row["GSTLabel"] = entity.GstLabel;
							
				
					row["NumberOfPremiumJobs"] = entity.NumberOfPremiumJobs;
							
				
					row["PremiumJobDays"] = entity.PremiumJobDays;
							
				
					row["DisplayPremiumJobsOnResults"] = entity.DisplayPremiumJobsOnResults;
							
				
					row["JobExpiryNotification"] = entity.JobExpiryNotification;
							
				
					row["CurrencyID"] = entity.CurrencyId;
							
				
					row["PayPalClientID"] = entity.PayPalClientId;
							
				
					row["PayPalClientSecret"] = entity.PayPalClientSecret;
							
				
					row["PaypalUser"] = entity.PaypalUser;
							
				
					row["PaypalProPassword"] = entity.PaypalProPassword;
							
				
					row["PaypalVendor"] = entity.PaypalVendor;
							
				
					row["PaypalPartner"] = entity.PaypalPartner;
							
				
					row["InvoiceSiteInfo"] = entity.InvoiceSiteInfo;
							
				
					row["InvoiceSiteFooter"] = entity.InvoiceSiteFooter;
							
				
					row["EnableTermsAndConditions"] = entity.EnableTermsAndConditions;
							
				
					row["DefaultEmailLanguageId"] = entity.DefaultEmailLanguageId.HasValue ? (object) entity.DefaultEmailLanguageId  : System.DBNull.Value;
							
				
					row["GoogleTagManager"] = entity.GoogleTagManager;
							
				
					row["GoogleAnalytics"] = entity.GoogleAnalytics;
							
				
					row["GoogleWebMaster"] = entity.GoogleWebMaster;
							
				
					row["EnablePeopleSearch"] = entity.EnablePeopleSearch;
							
				
					row["GlobalDateFormat"] = entity.GlobalDateFormat;
							
				
					row["TimeZone"] = entity.TimeZone;
							
				
					row["GlobalFolder"] = entity.GlobalFolder;
							
				
					row["EnableScreeningQuestions"] = entity.EnableScreeningQuestions;
							
				
					row["EnableExpiryDate"] = entity.EnableExpiryDate;
							
				
					row["MemberRegisterPageID"] = entity.MemberRegisterPageId.HasValue ? (object) entity.MemberRegisterPageId  : System.DBNull.Value;
							
				
					row["JobApplicationPageID"] = entity.JobApplicationPageId.HasValue ? (object) entity.JobApplicationPageId  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(JXTPortal.Entities.GlobalSettings entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a JXTPortal.Entities.GlobalSettings object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">JXTPortal.Entities.GlobalSettings object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the JXTPortal.Entities.GlobalSettings object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, JXTPortal.Entities.GlobalSettings entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@GlobalSettingId", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, entity.SiteId );
			database.AddInParameter(commandWrapper, "@DefaultLanguageId", DbType.Int32, entity.DefaultLanguageId );
			database.AddInParameter(commandWrapper, "@DefaultDynamicPageId", DbType.Int32, (entity.DefaultDynamicPageId.HasValue ? (object) entity.DefaultDynamicPageId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PublicJobsSearch", DbType.Boolean, entity.PublicJobsSearch );
			database.AddInParameter(commandWrapper, "@PublicMembersSearch", DbType.Boolean, entity.PublicMembersSearch );
			database.AddInParameter(commandWrapper, "@PublicCompaniesSearch", DbType.Boolean, entity.PublicCompaniesSearch );
			database.AddInParameter(commandWrapper, "@PublicSponsoredAdverts", DbType.Boolean, entity.PublicSponsoredAdverts );
			database.AddInParameter(commandWrapper, "@PrivateJobs", DbType.Boolean, entity.PrivateJobs );
			database.AddInParameter(commandWrapper, "@PrivateMembers", DbType.Boolean, entity.PrivateMembers );
			database.AddInParameter(commandWrapper, "@PrivateCompanies", DbType.Boolean, entity.PrivateCompanies );
			database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32, entity.LastModifiedBy );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, entity.LastModified );
			database.AddInParameter(commandWrapper, "@PageTitlePrefix", DbType.String, entity.PageTitlePrefix );
			database.AddInParameter(commandWrapper, "@PageTitleSuffix", DbType.String, entity.PageTitleSuffix );
			database.AddInParameter(commandWrapper, "@DefaultTitle", DbType.String, entity.DefaultTitle );
			database.AddInParameter(commandWrapper, "@HomeTitle", DbType.String, entity.HomeTitle );
			database.AddInParameter(commandWrapper, "@DefaultDescription", DbType.String, entity.DefaultDescription );
			database.AddInParameter(commandWrapper, "@HomeDescription", DbType.String, entity.HomeDescription );
			database.AddInParameter(commandWrapper, "@DefaultKeywords", DbType.String, entity.DefaultKeywords );
			database.AddInParameter(commandWrapper, "@HomeKeywords", DbType.String, entity.HomeKeywords );
			database.AddInParameter(commandWrapper, "@ShowFaceBookButton", DbType.Boolean, entity.ShowFaceBookButton );
			database.AddInParameter(commandWrapper, "@UseAdvertiserFilter", DbType.Int32, entity.UseAdvertiserFilter );
			database.AddInParameter(commandWrapper, "@MerchantId", DbType.Int32, (entity.MerchantId.HasValue ? (object) entity.MerchantId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ShowTwitterButton", DbType.Boolean, entity.ShowTwitterButton );
			database.AddInParameter(commandWrapper, "@ShowJobAlertButton", DbType.Boolean, entity.ShowJobAlertButton );
			database.AddInParameter(commandWrapper, "@ShowLinkedInButton", DbType.Boolean, entity.ShowLinkedInButton );
			database.AddInParameter(commandWrapper, "@SiteFavIconId", DbType.Int32, (entity.SiteFavIconId.HasValue ? (object) entity.SiteFavIconId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SiteDocType", DbType.AnsiString, entity.SiteDocType );
			database.AddInParameter(commandWrapper, "@CurrencySymbol", DbType.AnsiString, entity.CurrencySymbol );
			database.AddInParameter(commandWrapper, "@FtpFolderLocation", DbType.AnsiString, entity.FtpFolderLocation );
			database.AddInParameter(commandWrapper, "@MetaTags", DbType.String, entity.MetaTags );
			database.AddInParameter(commandWrapper, "@SystemMetaTags", DbType.String, entity.SystemMetaTags );
			database.AddInParameter(commandWrapper, "@MemberRegistrationNotification", DbType.AnsiString, entity.MemberRegistrationNotification );
			database.AddInParameter(commandWrapper, "@LinkedInApi", DbType.AnsiString, entity.LinkedInApi );
			database.AddInParameter(commandWrapper, "@LinkedInLogo", DbType.AnsiString, entity.LinkedInLogo );
			database.AddInParameter(commandWrapper, "@LinkedInCompanyId", DbType.Int32, (entity.LinkedInCompanyId.HasValue ? (object) entity.LinkedInCompanyId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LinkedInEmail", DbType.AnsiString, entity.LinkedInEmail );
			database.AddInParameter(commandWrapper, "@PrivacySettings", DbType.String, entity.PrivacySettings );
			database.AddInParameter(commandWrapper, "@WwwRedirect", DbType.Boolean, entity.WwwRedirect );
			database.AddInParameter(commandWrapper, "@AllowAdvertiser", DbType.Boolean, entity.AllowAdvertiser );
			database.AddInParameter(commandWrapper, "@LinkedInApiSecret", DbType.AnsiString, entity.LinkedInApiSecret );
			database.AddInParameter(commandWrapper, "@GoogleClientId", DbType.AnsiString, entity.GoogleClientId );
			database.AddInParameter(commandWrapper, "@GoogleClientSecret", DbType.AnsiString, entity.GoogleClientSecret );
			database.AddInParameter(commandWrapper, "@FacebookAppId", DbType.AnsiString, entity.FacebookAppId );
			database.AddInParameter(commandWrapper, "@FacebookAppSecret", DbType.AnsiString, entity.FacebookAppSecret );
			database.AddInParameter(commandWrapper, "@LinkedInButtonSize", DbType.Int32, (entity.LinkedInButtonSize.HasValue ? (object) entity.LinkedInButtonSize  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DefaultCountryId", DbType.Int32, (entity.DefaultCountryId.HasValue ? (object) entity.DefaultCountryId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PayPalUsername", DbType.AnsiString, entity.PayPalUsername );
			database.AddInParameter(commandWrapper, "@PayPalPassword", DbType.AnsiString, entity.PayPalPassword );
			database.AddInParameter(commandWrapper, "@PayPalSignature", DbType.AnsiString, entity.PayPalSignature );
			database.AddInParameter(commandWrapper, "@SecurePayMerchantId", DbType.AnsiString, entity.SecurePayMerchantId );
			database.AddInParameter(commandWrapper, "@SecurePayPassword", DbType.AnsiString, entity.SecurePayPassword );
			database.AddInParameter(commandWrapper, "@UsingSsl", DbType.Boolean, entity.UsingSsl );
			database.AddInParameter(commandWrapper, "@UseCustomProfessionRole", DbType.Boolean, entity.UseCustomProfessionRole );
			database.AddInParameter(commandWrapper, "@GenerateJobXml", DbType.Boolean, entity.GenerateJobXml );
			database.AddInParameter(commandWrapper, "@IsPrivateSite", DbType.Boolean, (entity.IsPrivateSite.HasValue ? (object) entity.IsPrivateSite  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PrivateRedirectUrl", DbType.AnsiString, entity.PrivateRedirectUrl );
			database.AddInParameter(commandWrapper, "@EnableJobCustomQuestionnaire", DbType.Boolean, (entity.EnableJobCustomQuestionnaire.HasValue ? (object) entity.EnableJobCustomQuestionnaire  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@JobApplicationTypeId", DbType.Int32, (entity.JobApplicationTypeId.HasValue ? (object) entity.JobApplicationTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@JobScreeningProcess", DbType.Boolean, (entity.JobScreeningProcess.HasValue ? (object) entity.JobScreeningProcess  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdvertiserApprovalProcess", DbType.Int32, (entity.AdvertiserApprovalProcess.HasValue ? (object) entity.AdvertiserApprovalProcess  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SiteType", DbType.Int32, entity.SiteType );
			database.AddInParameter(commandWrapper, "@EnableSsl", DbType.Boolean, entity.EnableSsl );
			database.AddInParameter(commandWrapper, "@Gst", DbType.Decimal, entity.Gst );
			database.AddInParameter(commandWrapper, "@GstLabel", DbType.String, entity.GstLabel );
			database.AddInParameter(commandWrapper, "@NumberOfPremiumJobs", DbType.Int32, entity.NumberOfPremiumJobs );
			database.AddInParameter(commandWrapper, "@PremiumJobDays", DbType.Int32, entity.PremiumJobDays );
			database.AddInParameter(commandWrapper, "@DisplayPremiumJobsOnResults", DbType.Boolean, entity.DisplayPremiumJobsOnResults );
			database.AddInParameter(commandWrapper, "@JobExpiryNotification", DbType.Boolean, entity.JobExpiryNotification );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32, entity.CurrencyId );
			database.AddInParameter(commandWrapper, "@PayPalClientId", DbType.AnsiString, entity.PayPalClientId );
			database.AddInParameter(commandWrapper, "@PayPalClientSecret", DbType.AnsiString, entity.PayPalClientSecret );
			database.AddInParameter(commandWrapper, "@PaypalUser", DbType.AnsiString, entity.PaypalUser );
			database.AddInParameter(commandWrapper, "@PaypalProPassword", DbType.AnsiString, entity.PaypalProPassword );
			database.AddInParameter(commandWrapper, "@PaypalVendor", DbType.AnsiString, entity.PaypalVendor );
			database.AddInParameter(commandWrapper, "@PaypalPartner", DbType.AnsiString, entity.PaypalPartner );
			database.AddInParameter(commandWrapper, "@InvoiceSiteInfo", DbType.String, entity.InvoiceSiteInfo );
			database.AddInParameter(commandWrapper, "@InvoiceSiteFooter", DbType.String, entity.InvoiceSiteFooter );
			database.AddInParameter(commandWrapper, "@EnableTermsAndConditions", DbType.Boolean, entity.EnableTermsAndConditions );
			database.AddInParameter(commandWrapper, "@DefaultEmailLanguageId", DbType.Int32, (entity.DefaultEmailLanguageId.HasValue ? (object) entity.DefaultEmailLanguageId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GoogleTagManager", DbType.AnsiString, entity.GoogleTagManager );
			database.AddInParameter(commandWrapper, "@GoogleAnalytics", DbType.AnsiString, entity.GoogleAnalytics );
			database.AddInParameter(commandWrapper, "@GoogleWebMaster", DbType.AnsiString, entity.GoogleWebMaster );
			database.AddInParameter(commandWrapper, "@EnablePeopleSearch", DbType.Boolean, entity.EnablePeopleSearch );
			database.AddInParameter(commandWrapper, "@GlobalDateFormat", DbType.AnsiString, entity.GlobalDateFormat );
			database.AddInParameter(commandWrapper, "@TimeZone", DbType.AnsiString, entity.TimeZone );
			database.AddInParameter(commandWrapper, "@GlobalFolder", DbType.AnsiString, entity.GlobalFolder );
			database.AddInParameter(commandWrapper, "@EnableScreeningQuestions", DbType.Boolean, entity.EnableScreeningQuestions );
			database.AddInParameter(commandWrapper, "@EnableExpiryDate", DbType.Boolean, entity.EnableExpiryDate );
			database.AddInParameter(commandWrapper, "@MemberRegisterPageId", DbType.Int32, (entity.MemberRegisterPageId.HasValue ? (object) entity.MemberRegisterPageId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@JobApplicationPageId", DbType.Int32, (entity.JobApplicationPageId.HasValue ? (object) entity.JobApplicationPageId  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _globalSettingId = database.GetParameterValue(commandWrapper, "@GlobalSettingId");
			entity.GlobalSettingId = (System.Int32)_globalSettingId;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">JXTPortal.Entities.GlobalSettings object to update.</param>
		/// <remarks>
		///		After updating the datasource, the JXTPortal.Entities.GlobalSettings object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, JXTPortal.Entities.GlobalSettings entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@GlobalSettingId", DbType.Int32, entity.GlobalSettingId );
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, entity.SiteId );
			database.AddInParameter(commandWrapper, "@DefaultLanguageId", DbType.Int32, entity.DefaultLanguageId );
			database.AddInParameter(commandWrapper, "@DefaultDynamicPageId", DbType.Int32, (entity.DefaultDynamicPageId.HasValue ? (object) entity.DefaultDynamicPageId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PublicJobsSearch", DbType.Boolean, entity.PublicJobsSearch );
			database.AddInParameter(commandWrapper, "@PublicMembersSearch", DbType.Boolean, entity.PublicMembersSearch );
			database.AddInParameter(commandWrapper, "@PublicCompaniesSearch", DbType.Boolean, entity.PublicCompaniesSearch );
			database.AddInParameter(commandWrapper, "@PublicSponsoredAdverts", DbType.Boolean, entity.PublicSponsoredAdverts );
			database.AddInParameter(commandWrapper, "@PrivateJobs", DbType.Boolean, entity.PrivateJobs );
			database.AddInParameter(commandWrapper, "@PrivateMembers", DbType.Boolean, entity.PrivateMembers );
			database.AddInParameter(commandWrapper, "@PrivateCompanies", DbType.Boolean, entity.PrivateCompanies );
			database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32, entity.LastModifiedBy );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, entity.LastModified );
			database.AddInParameter(commandWrapper, "@PageTitlePrefix", DbType.String, entity.PageTitlePrefix );
			database.AddInParameter(commandWrapper, "@PageTitleSuffix", DbType.String, entity.PageTitleSuffix );
			database.AddInParameter(commandWrapper, "@DefaultTitle", DbType.String, entity.DefaultTitle );
			database.AddInParameter(commandWrapper, "@HomeTitle", DbType.String, entity.HomeTitle );
			database.AddInParameter(commandWrapper, "@DefaultDescription", DbType.String, entity.DefaultDescription );
			database.AddInParameter(commandWrapper, "@HomeDescription", DbType.String, entity.HomeDescription );
			database.AddInParameter(commandWrapper, "@DefaultKeywords", DbType.String, entity.DefaultKeywords );
			database.AddInParameter(commandWrapper, "@HomeKeywords", DbType.String, entity.HomeKeywords );
			database.AddInParameter(commandWrapper, "@ShowFaceBookButton", DbType.Boolean, entity.ShowFaceBookButton );
			database.AddInParameter(commandWrapper, "@UseAdvertiserFilter", DbType.Int32, entity.UseAdvertiserFilter );
			database.AddInParameter(commandWrapper, "@MerchantId", DbType.Int32, (entity.MerchantId.HasValue ? (object) entity.MerchantId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ShowTwitterButton", DbType.Boolean, entity.ShowTwitterButton );
			database.AddInParameter(commandWrapper, "@ShowJobAlertButton", DbType.Boolean, entity.ShowJobAlertButton );
			database.AddInParameter(commandWrapper, "@ShowLinkedInButton", DbType.Boolean, entity.ShowLinkedInButton );
			database.AddInParameter(commandWrapper, "@SiteFavIconId", DbType.Int32, (entity.SiteFavIconId.HasValue ? (object) entity.SiteFavIconId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SiteDocType", DbType.AnsiString, entity.SiteDocType );
			database.AddInParameter(commandWrapper, "@CurrencySymbol", DbType.AnsiString, entity.CurrencySymbol );
			database.AddInParameter(commandWrapper, "@FtpFolderLocation", DbType.AnsiString, entity.FtpFolderLocation );
			database.AddInParameter(commandWrapper, "@MetaTags", DbType.String, entity.MetaTags );
			database.AddInParameter(commandWrapper, "@SystemMetaTags", DbType.String, entity.SystemMetaTags );
			database.AddInParameter(commandWrapper, "@MemberRegistrationNotification", DbType.AnsiString, entity.MemberRegistrationNotification );
			database.AddInParameter(commandWrapper, "@LinkedInApi", DbType.AnsiString, entity.LinkedInApi );
			database.AddInParameter(commandWrapper, "@LinkedInLogo", DbType.AnsiString, entity.LinkedInLogo );
			database.AddInParameter(commandWrapper, "@LinkedInCompanyId", DbType.Int32, (entity.LinkedInCompanyId.HasValue ? (object) entity.LinkedInCompanyId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LinkedInEmail", DbType.AnsiString, entity.LinkedInEmail );
			database.AddInParameter(commandWrapper, "@PrivacySettings", DbType.String, entity.PrivacySettings );
			database.AddInParameter(commandWrapper, "@WwwRedirect", DbType.Boolean, entity.WwwRedirect );
			database.AddInParameter(commandWrapper, "@AllowAdvertiser", DbType.Boolean, entity.AllowAdvertiser );
			database.AddInParameter(commandWrapper, "@LinkedInApiSecret", DbType.AnsiString, entity.LinkedInApiSecret );
			database.AddInParameter(commandWrapper, "@GoogleClientId", DbType.AnsiString, entity.GoogleClientId );
			database.AddInParameter(commandWrapper, "@GoogleClientSecret", DbType.AnsiString, entity.GoogleClientSecret );
			database.AddInParameter(commandWrapper, "@FacebookAppId", DbType.AnsiString, entity.FacebookAppId );
			database.AddInParameter(commandWrapper, "@FacebookAppSecret", DbType.AnsiString, entity.FacebookAppSecret );
			database.AddInParameter(commandWrapper, "@LinkedInButtonSize", DbType.Int32, (entity.LinkedInButtonSize.HasValue ? (object) entity.LinkedInButtonSize : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DefaultCountryId", DbType.Int32, (entity.DefaultCountryId.HasValue ? (object) entity.DefaultCountryId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PayPalUsername", DbType.AnsiString, entity.PayPalUsername );
			database.AddInParameter(commandWrapper, "@PayPalPassword", DbType.AnsiString, entity.PayPalPassword );
			database.AddInParameter(commandWrapper, "@PayPalSignature", DbType.AnsiString, entity.PayPalSignature );
			database.AddInParameter(commandWrapper, "@SecurePayMerchantId", DbType.AnsiString, entity.SecurePayMerchantId );
			database.AddInParameter(commandWrapper, "@SecurePayPassword", DbType.AnsiString, entity.SecurePayPassword );
			database.AddInParameter(commandWrapper, "@UsingSsl", DbType.Boolean, entity.UsingSsl );
			database.AddInParameter(commandWrapper, "@UseCustomProfessionRole", DbType.Boolean, entity.UseCustomProfessionRole );
			database.AddInParameter(commandWrapper, "@GenerateJobXml", DbType.Boolean, entity.GenerateJobXml );
			database.AddInParameter(commandWrapper, "@IsPrivateSite", DbType.Boolean, (entity.IsPrivateSite.HasValue ? (object) entity.IsPrivateSite : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PrivateRedirectUrl", DbType.AnsiString, entity.PrivateRedirectUrl );
			database.AddInParameter(commandWrapper, "@EnableJobCustomQuestionnaire", DbType.Boolean, (entity.EnableJobCustomQuestionnaire.HasValue ? (object) entity.EnableJobCustomQuestionnaire : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@JobApplicationTypeId", DbType.Int32, (entity.JobApplicationTypeId.HasValue ? (object) entity.JobApplicationTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@JobScreeningProcess", DbType.Boolean, (entity.JobScreeningProcess.HasValue ? (object) entity.JobScreeningProcess : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdvertiserApprovalProcess", DbType.Int32, (entity.AdvertiserApprovalProcess.HasValue ? (object) entity.AdvertiserApprovalProcess : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SiteType", DbType.Int32, entity.SiteType );
			database.AddInParameter(commandWrapper, "@EnableSsl", DbType.Boolean, entity.EnableSsl );
			database.AddInParameter(commandWrapper, "@Gst", DbType.Decimal, entity.Gst );
			database.AddInParameter(commandWrapper, "@GstLabel", DbType.String, entity.GstLabel );
			database.AddInParameter(commandWrapper, "@NumberOfPremiumJobs", DbType.Int32, entity.NumberOfPremiumJobs );
			database.AddInParameter(commandWrapper, "@PremiumJobDays", DbType.Int32, entity.PremiumJobDays );
			database.AddInParameter(commandWrapper, "@DisplayPremiumJobsOnResults", DbType.Boolean, entity.DisplayPremiumJobsOnResults );
			database.AddInParameter(commandWrapper, "@JobExpiryNotification", DbType.Boolean, entity.JobExpiryNotification );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32, entity.CurrencyId );
			database.AddInParameter(commandWrapper, "@PayPalClientId", DbType.AnsiString, entity.PayPalClientId );
			database.AddInParameter(commandWrapper, "@PayPalClientSecret", DbType.AnsiString, entity.PayPalClientSecret );
			database.AddInParameter(commandWrapper, "@PaypalUser", DbType.AnsiString, entity.PaypalUser );
			database.AddInParameter(commandWrapper, "@PaypalProPassword", DbType.AnsiString, entity.PaypalProPassword );
			database.AddInParameter(commandWrapper, "@PaypalVendor", DbType.AnsiString, entity.PaypalVendor );
			database.AddInParameter(commandWrapper, "@PaypalPartner", DbType.AnsiString, entity.PaypalPartner );
			database.AddInParameter(commandWrapper, "@InvoiceSiteInfo", DbType.String, entity.InvoiceSiteInfo );
			database.AddInParameter(commandWrapper, "@InvoiceSiteFooter", DbType.String, entity.InvoiceSiteFooter );
			database.AddInParameter(commandWrapper, "@EnableTermsAndConditions", DbType.Boolean, entity.EnableTermsAndConditions );
			database.AddInParameter(commandWrapper, "@DefaultEmailLanguageId", DbType.Int32, (entity.DefaultEmailLanguageId.HasValue ? (object) entity.DefaultEmailLanguageId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GoogleTagManager", DbType.AnsiString, entity.GoogleTagManager );
			database.AddInParameter(commandWrapper, "@GoogleAnalytics", DbType.AnsiString, entity.GoogleAnalytics );
			database.AddInParameter(commandWrapper, "@GoogleWebMaster", DbType.AnsiString, entity.GoogleWebMaster );
			database.AddInParameter(commandWrapper, "@EnablePeopleSearch", DbType.Boolean, entity.EnablePeopleSearch );
			database.AddInParameter(commandWrapper, "@GlobalDateFormat", DbType.AnsiString, entity.GlobalDateFormat );
			database.AddInParameter(commandWrapper, "@TimeZone", DbType.AnsiString, entity.TimeZone );
			database.AddInParameter(commandWrapper, "@GlobalFolder", DbType.AnsiString, entity.GlobalFolder );
			database.AddInParameter(commandWrapper, "@EnableScreeningQuestions", DbType.Boolean, entity.EnableScreeningQuestions );
			database.AddInParameter(commandWrapper, "@EnableExpiryDate", DbType.Boolean, entity.EnableExpiryDate );
			database.AddInParameter(commandWrapper, "@MemberRegisterPageId", DbType.Int32, (entity.MemberRegisterPageId.HasValue ? (object) entity.MemberRegisterPageId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@JobApplicationPageId", DbType.Int32, (entity.JobApplicationPageId.HasValue ? (object) entity.JobApplicationPageId : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region GlobalSettings_GetPaged
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_GetPaged' stored procedure. 
		/// </summary>	
		/// <param name="whereClause"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetPaged(TransactionManager transactionManager, int start, int pageLength , System.String whereClause, System.String orderBy, System.Int32? pageIndex, System.Int32? pageSize)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetPaged", true);
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.AnsiString,  whereClause );
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.AnsiString,  orderBy );
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32,  pageIndex );
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32,  pageSize );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region GlobalSettings_GetByPublicJobsSearchPrivateJobsSiteId
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_GetByPublicJobsSearchPrivateJobsSiteId' stored procedure. 
		/// </summary>	
		/// <param name="publicJobsSearch"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="privateJobs"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByPublicJobsSearchPrivateJobsSiteId(TransactionManager transactionManager, int start, int pageLength , System.Boolean? publicJobsSearch, System.Boolean? privateJobs, System.Int32? siteId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetByPublicJobsSearchPrivateJobsSiteId", true);
			
			database.AddInParameter(commandWrapper, "@PublicJobsSearch", DbType.Boolean,  publicJobsSearch );
			database.AddInParameter(commandWrapper, "@PrivateJobs", DbType.Boolean,  privateJobs );
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByPublicJobsSearchPrivateJobsSiteId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByPublicJobsSearchPrivateJobsSiteId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region GlobalSettings_Find
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_Find' stored procedure. 
		/// </summary>	
		/// <param name="searchUsingOr"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="globalSettingId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="defaultLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="defaultDynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="publicJobsSearch"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicMembersSearch"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicCompaniesSearch"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicSponsoredAdverts"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="privateJobs"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="privateMembers"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="privateCompanies"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="pageTitlePrefix"> A <c>System.String</c> instance.</param>
		/// <param name="pageTitleSuffix"> A <c>System.String</c> instance.</param>
		/// <param name="defaultTitle"> A <c>System.String</c> instance.</param>
		/// <param name="homeTitle"> A <c>System.String</c> instance.</param>
		/// <param name="defaultDescription"> A <c>System.String</c> instance.</param>
		/// <param name="homeDescription"> A <c>System.String</c> instance.</param>
		/// <param name="defaultKeywords"> A <c>System.String</c> instance.</param>
		/// <param name="homeKeywords"> A <c>System.String</c> instance.</param>
		/// <param name="showFaceBookButton"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="useAdvertiserFilter"> A <c>System.Int32?</c> instance.</param>
		/// <param name="merchantId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="showTwitterButton"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showJobAlertButton"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showLinkedInButton"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="siteFavIconId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteDocType"> A <c>System.String</c> instance.</param>
		/// <param name="currencySymbol"> A <c>System.String</c> instance.</param>
		/// <param name="ftpFolderLocation"> A <c>System.String</c> instance.</param>
		/// <param name="metaTags"> A <c>System.String</c> instance.</param>
		/// <param name="systemMetaTags"> A <c>System.String</c> instance.</param>
		/// <param name="memberRegistrationNotification"> A <c>System.String</c> instance.</param>
		/// <param name="linkedInApi"> A <c>System.String</c> instance.</param>
		/// <param name="linkedInLogo"> A <c>System.String</c> instance.</param>
		/// <param name="linkedInCompanyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="linkedInEmail"> A <c>System.String</c> instance.</param>
		/// <param name="privacySettings"> A <c>System.String</c> instance.</param>
		/// <param name="wwwRedirect"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="allowAdvertiser"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="linkedInApiSecret"> A <c>System.String</c> instance.</param>
		/// <param name="googleClientId"> A <c>System.String</c> instance.</param>
		/// <param name="googleClientSecret"> A <c>System.String</c> instance.</param>
		/// <param name="facebookAppId"> A <c>System.String</c> instance.</param>
		/// <param name="facebookAppSecret"> A <c>System.String</c> instance.</param>
		/// <param name="linkedInButtonSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="defaultCountryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="payPalUsername"> A <c>System.String</c> instance.</param>
		/// <param name="payPalPassword"> A <c>System.String</c> instance.</param>
		/// <param name="payPalSignature"> A <c>System.String</c> instance.</param>
		/// <param name="securePayMerchantId"> A <c>System.String</c> instance.</param>
		/// <param name="securePayPassword"> A <c>System.String</c> instance.</param>
		/// <param name="usingSsl"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="useCustomProfessionRole"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="generateJobXml"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="isPrivateSite"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="privateRedirectUrl"> A <c>System.String</c> instance.</param>
		/// <param name="enableJobCustomQuestionnaire"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobApplicationTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobScreeningProcess"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="advertiserApprovalProcess"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteType"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enableSsl"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="gst"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="gstLabel"> A <c>System.String</c> instance.</param>
		/// <param name="numberOfPremiumJobs"> A <c>System.Int32?</c> instance.</param>
		/// <param name="premiumJobDays"> A <c>System.Int32?</c> instance.</param>
		/// <param name="displayPremiumJobsOnResults"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobExpiryNotification"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="payPalClientId"> A <c>System.String</c> instance.</param>
		/// <param name="payPalClientSecret"> A <c>System.String</c> instance.</param>
		/// <param name="paypalUser"> A <c>System.String</c> instance.</param>
		/// <param name="paypalProPassword"> A <c>System.String</c> instance.</param>
		/// <param name="paypalVendor"> A <c>System.String</c> instance.</param>
		/// <param name="paypalPartner"> A <c>System.String</c> instance.</param>
		/// <param name="invoiceSiteInfo"> A <c>System.String</c> instance.</param>
		/// <param name="invoiceSiteFooter"> A <c>System.String</c> instance.</param>
		/// <param name="enableTermsAndConditions"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="defaultEmailLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="googleTagManager"> A <c>System.String</c> instance.</param>
		/// <param name="googleAnalytics"> A <c>System.String</c> instance.</param>
		/// <param name="googleWebMaster"> A <c>System.String</c> instance.</param>
		/// <param name="enablePeopleSearch"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="globalDateFormat"> A <c>System.String</c> instance.</param>
		/// <param name="timeZone"> A <c>System.String</c> instance.</param>
		/// <param name="globalFolder"> A <c>System.String</c> instance.</param>
		/// <param name="enableScreeningQuestions"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="enableExpiryDate"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="memberRegisterPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobApplicationPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Find(TransactionManager transactionManager, int start, int pageLength , System.Boolean? searchUsingOr, System.Int32? globalSettingId, System.Int32? siteId, System.Int32? defaultLanguageId, System.Int32? defaultDynamicPageId, System.Boolean? publicJobsSearch, System.Boolean? publicMembersSearch, System.Boolean? publicCompaniesSearch, System.Boolean? publicSponsoredAdverts, System.Boolean? privateJobs, System.Boolean? privateMembers, System.Boolean? privateCompanies, System.Int32? lastModifiedBy, System.DateTime? lastModified, System.String pageTitlePrefix, System.String pageTitleSuffix, System.String defaultTitle, System.String homeTitle, System.String defaultDescription, System.String homeDescription, System.String defaultKeywords, System.String homeKeywords, System.Boolean? showFaceBookButton, System.Int32? useAdvertiserFilter, System.Int32? merchantId, System.Boolean? showTwitterButton, System.Boolean? showJobAlertButton, System.Boolean? showLinkedInButton, System.Int32? siteFavIconId, System.String siteDocType, System.String currencySymbol, System.String ftpFolderLocation, System.String metaTags, System.String systemMetaTags, System.String memberRegistrationNotification, System.String linkedInApi, System.String linkedInLogo, System.Int32? linkedInCompanyId, System.String linkedInEmail, System.String privacySettings, System.Boolean? wwwRedirect, System.Boolean? allowAdvertiser, System.String linkedInApiSecret, System.String googleClientId, System.String googleClientSecret, System.String facebookAppId, System.String facebookAppSecret, System.Int32? linkedInButtonSize, System.Int32? defaultCountryId, System.String payPalUsername, System.String payPalPassword, System.String payPalSignature, System.String securePayMerchantId, System.String securePayPassword, System.Boolean? usingSsl, System.Boolean? useCustomProfessionRole, System.Boolean? generateJobXml, System.Boolean? isPrivateSite, System.String privateRedirectUrl, System.Boolean? enableJobCustomQuestionnaire, System.Int32? jobApplicationTypeId, System.Boolean? jobScreeningProcess, System.Int32? advertiserApprovalProcess, System.Int32? siteType, System.Boolean? enableSsl, System.Decimal? gst, System.String gstLabel, System.Int32? numberOfPremiumJobs, System.Int32? premiumJobDays, System.Boolean? displayPremiumJobsOnResults, System.Boolean? jobExpiryNotification, System.Int32? currencyId, System.String payPalClientId, System.String payPalClientSecret, System.String paypalUser, System.String paypalProPassword, System.String paypalVendor, System.String paypalPartner, System.String invoiceSiteInfo, System.String invoiceSiteFooter, System.Boolean? enableTermsAndConditions, System.Int32? defaultEmailLanguageId, System.String googleTagManager, System.String googleAnalytics, System.String googleWebMaster, System.Boolean? enablePeopleSearch, System.String globalDateFormat, System.String timeZone, System.String globalFolder, System.Boolean? enableScreeningQuestions, System.Boolean? enableExpiryDate, System.Int32? memberRegisterPageId, System.Int32? jobApplicationPageId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_Find", true);
			
			database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean,  searchUsingOr );
			database.AddInParameter(commandWrapper, "@GlobalSettingId", DbType.Int32,  globalSettingId );
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@DefaultLanguageId", DbType.Int32,  defaultLanguageId );
			database.AddInParameter(commandWrapper, "@DefaultDynamicPageId", DbType.Int32,  defaultDynamicPageId );
			database.AddInParameter(commandWrapper, "@PublicJobsSearch", DbType.Boolean,  publicJobsSearch );
			database.AddInParameter(commandWrapper, "@PublicMembersSearch", DbType.Boolean,  publicMembersSearch );
			database.AddInParameter(commandWrapper, "@PublicCompaniesSearch", DbType.Boolean,  publicCompaniesSearch );
			database.AddInParameter(commandWrapper, "@PublicSponsoredAdverts", DbType.Boolean,  publicSponsoredAdverts );
			database.AddInParameter(commandWrapper, "@PrivateJobs", DbType.Boolean,  privateJobs );
			database.AddInParameter(commandWrapper, "@PrivateMembers", DbType.Boolean,  privateMembers );
			database.AddInParameter(commandWrapper, "@PrivateCompanies", DbType.Boolean,  privateCompanies );
			database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32,  lastModifiedBy );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime,  lastModified );
			database.AddInParameter(commandWrapper, "@PageTitlePrefix", DbType.String,  pageTitlePrefix );
			database.AddInParameter(commandWrapper, "@PageTitleSuffix", DbType.String,  pageTitleSuffix );
			database.AddInParameter(commandWrapper, "@DefaultTitle", DbType.String,  defaultTitle );
			database.AddInParameter(commandWrapper, "@HomeTitle", DbType.String,  homeTitle );
			database.AddInParameter(commandWrapper, "@DefaultDescription", DbType.String,  defaultDescription );
			database.AddInParameter(commandWrapper, "@HomeDescription", DbType.String,  homeDescription );
			database.AddInParameter(commandWrapper, "@DefaultKeywords", DbType.String,  defaultKeywords );
			database.AddInParameter(commandWrapper, "@HomeKeywords", DbType.String,  homeKeywords );
			database.AddInParameter(commandWrapper, "@ShowFaceBookButton", DbType.Boolean,  showFaceBookButton );
			database.AddInParameter(commandWrapper, "@UseAdvertiserFilter", DbType.Int32,  useAdvertiserFilter );
			database.AddInParameter(commandWrapper, "@MerchantId", DbType.Int32,  merchantId );
			database.AddInParameter(commandWrapper, "@ShowTwitterButton", DbType.Boolean,  showTwitterButton );
			database.AddInParameter(commandWrapper, "@ShowJobAlertButton", DbType.Boolean,  showJobAlertButton );
			database.AddInParameter(commandWrapper, "@ShowLinkedInButton", DbType.Boolean,  showLinkedInButton );
			database.AddInParameter(commandWrapper, "@SiteFavIconId", DbType.Int32,  siteFavIconId );
			database.AddInParameter(commandWrapper, "@SiteDocType", DbType.AnsiString,  siteDocType );
			database.AddInParameter(commandWrapper, "@CurrencySymbol", DbType.AnsiString,  currencySymbol );
			database.AddInParameter(commandWrapper, "@FtpFolderLocation", DbType.AnsiString,  ftpFolderLocation );
			database.AddInParameter(commandWrapper, "@MetaTags", DbType.String,  metaTags );
			database.AddInParameter(commandWrapper, "@SystemMetaTags", DbType.String,  systemMetaTags );
			database.AddInParameter(commandWrapper, "@MemberRegistrationNotification", DbType.AnsiString,  memberRegistrationNotification );
			database.AddInParameter(commandWrapper, "@LinkedInApi", DbType.AnsiString,  linkedInApi );
			database.AddInParameter(commandWrapper, "@LinkedInLogo", DbType.AnsiString,  linkedInLogo );
			database.AddInParameter(commandWrapper, "@LinkedInCompanyId", DbType.Int32,  linkedInCompanyId );
			database.AddInParameter(commandWrapper, "@LinkedInEmail", DbType.AnsiString,  linkedInEmail );
			database.AddInParameter(commandWrapper, "@PrivacySettings", DbType.String,  privacySettings );
			database.AddInParameter(commandWrapper, "@WwwRedirect", DbType.Boolean,  wwwRedirect );
			database.AddInParameter(commandWrapper, "@AllowAdvertiser", DbType.Boolean,  allowAdvertiser );
			database.AddInParameter(commandWrapper, "@LinkedInApiSecret", DbType.AnsiString,  linkedInApiSecret );
			database.AddInParameter(commandWrapper, "@GoogleClientId", DbType.AnsiString,  googleClientId );
			database.AddInParameter(commandWrapper, "@GoogleClientSecret", DbType.AnsiString,  googleClientSecret );
			database.AddInParameter(commandWrapper, "@FacebookAppId", DbType.AnsiString,  facebookAppId );
			database.AddInParameter(commandWrapper, "@FacebookAppSecret", DbType.AnsiString,  facebookAppSecret );
			database.AddInParameter(commandWrapper, "@LinkedInButtonSize", DbType.Int32,  linkedInButtonSize );
			database.AddInParameter(commandWrapper, "@DefaultCountryId", DbType.Int32,  defaultCountryId );
			database.AddInParameter(commandWrapper, "@PayPalUsername", DbType.AnsiString,  payPalUsername );
			database.AddInParameter(commandWrapper, "@PayPalPassword", DbType.AnsiString,  payPalPassword );
			database.AddInParameter(commandWrapper, "@PayPalSignature", DbType.AnsiString,  payPalSignature );
			database.AddInParameter(commandWrapper, "@SecurePayMerchantId", DbType.AnsiString,  securePayMerchantId );
			database.AddInParameter(commandWrapper, "@SecurePayPassword", DbType.AnsiString,  securePayPassword );
			database.AddInParameter(commandWrapper, "@UsingSsl", DbType.Boolean,  usingSsl );
			database.AddInParameter(commandWrapper, "@UseCustomProfessionRole", DbType.Boolean,  useCustomProfessionRole );
			database.AddInParameter(commandWrapper, "@GenerateJobXml", DbType.Boolean,  generateJobXml );
			database.AddInParameter(commandWrapper, "@IsPrivateSite", DbType.Boolean,  isPrivateSite );
			database.AddInParameter(commandWrapper, "@PrivateRedirectUrl", DbType.AnsiString,  privateRedirectUrl );
			database.AddInParameter(commandWrapper, "@EnableJobCustomQuestionnaire", DbType.Boolean,  enableJobCustomQuestionnaire );
			database.AddInParameter(commandWrapper, "@JobApplicationTypeId", DbType.Int32,  jobApplicationTypeId );
			database.AddInParameter(commandWrapper, "@JobScreeningProcess", DbType.Boolean,  jobScreeningProcess );
			database.AddInParameter(commandWrapper, "@AdvertiserApprovalProcess", DbType.Int32,  advertiserApprovalProcess );
			database.AddInParameter(commandWrapper, "@SiteType", DbType.Int32,  siteType );
			database.AddInParameter(commandWrapper, "@EnableSsl", DbType.Boolean,  enableSsl );
			database.AddInParameter(commandWrapper, "@Gst", DbType.Decimal,  gst );
			database.AddInParameter(commandWrapper, "@GstLabel", DbType.String,  gstLabel );
			database.AddInParameter(commandWrapper, "@NumberOfPremiumJobs", DbType.Int32,  numberOfPremiumJobs );
			database.AddInParameter(commandWrapper, "@PremiumJobDays", DbType.Int32,  premiumJobDays );
			database.AddInParameter(commandWrapper, "@DisplayPremiumJobsOnResults", DbType.Boolean,  displayPremiumJobsOnResults );
			database.AddInParameter(commandWrapper, "@JobExpiryNotification", DbType.Boolean,  jobExpiryNotification );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
			database.AddInParameter(commandWrapper, "@PayPalClientId", DbType.AnsiString,  payPalClientId );
			database.AddInParameter(commandWrapper, "@PayPalClientSecret", DbType.AnsiString,  payPalClientSecret );
			database.AddInParameter(commandWrapper, "@PaypalUser", DbType.AnsiString,  paypalUser );
			database.AddInParameter(commandWrapper, "@PaypalProPassword", DbType.AnsiString,  paypalProPassword );
			database.AddInParameter(commandWrapper, "@PaypalVendor", DbType.AnsiString,  paypalVendor );
			database.AddInParameter(commandWrapper, "@PaypalPartner", DbType.AnsiString,  paypalPartner );
			database.AddInParameter(commandWrapper, "@InvoiceSiteInfo", DbType.String,  invoiceSiteInfo );
			database.AddInParameter(commandWrapper, "@InvoiceSiteFooter", DbType.String,  invoiceSiteFooter );
			database.AddInParameter(commandWrapper, "@EnableTermsAndConditions", DbType.Boolean,  enableTermsAndConditions );
			database.AddInParameter(commandWrapper, "@DefaultEmailLanguageId", DbType.Int32,  defaultEmailLanguageId );
			database.AddInParameter(commandWrapper, "@GoogleTagManager", DbType.AnsiString,  googleTagManager );
			database.AddInParameter(commandWrapper, "@GoogleAnalytics", DbType.AnsiString,  googleAnalytics );
			database.AddInParameter(commandWrapper, "@GoogleWebMaster", DbType.AnsiString,  googleWebMaster );
			database.AddInParameter(commandWrapper, "@EnablePeopleSearch", DbType.Boolean,  enablePeopleSearch );
			database.AddInParameter(commandWrapper, "@GlobalDateFormat", DbType.AnsiString,  globalDateFormat );
			database.AddInParameter(commandWrapper, "@TimeZone", DbType.AnsiString,  timeZone );
			database.AddInParameter(commandWrapper, "@GlobalFolder", DbType.AnsiString,  globalFolder );
			database.AddInParameter(commandWrapper, "@EnableScreeningQuestions", DbType.Boolean,  enableScreeningQuestions );
			database.AddInParameter(commandWrapper, "@EnableExpiryDate", DbType.Boolean,  enableExpiryDate );
			database.AddInParameter(commandWrapper, "@MemberRegisterPageId", DbType.Int32,  memberRegisterPageId );
			database.AddInParameter(commandWrapper, "@JobApplicationPageId", DbType.Int32,  jobApplicationPageId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Find", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region GlobalSettings_GetByGlobalSettingId
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_GetByGlobalSettingId' stored procedure. 
		/// </summary>	
		/// <param name="globalSettingId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByGlobalSettingId(TransactionManager transactionManager, int start, int pageLength , System.Int32? globalSettingId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetByGlobalSettingId", true);
			
			database.AddInParameter(commandWrapper, "@GlobalSettingId", DbType.Int32,  globalSettingId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGlobalSettingId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGlobalSettingId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region GlobalSettings_Update
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_Update' stored procedure. 
		/// </summary>	
		/// <param name="globalSettingId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="defaultLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="defaultDynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="publicJobsSearch"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicMembersSearch"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicCompaniesSearch"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicSponsoredAdverts"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="privateJobs"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="privateMembers"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="privateCompanies"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="pageTitlePrefix"> A <c>System.String</c> instance.</param>
		/// <param name="pageTitleSuffix"> A <c>System.String</c> instance.</param>
		/// <param name="defaultTitle"> A <c>System.String</c> instance.</param>
		/// <param name="homeTitle"> A <c>System.String</c> instance.</param>
		/// <param name="defaultDescription"> A <c>System.String</c> instance.</param>
		/// <param name="homeDescription"> A <c>System.String</c> instance.</param>
		/// <param name="defaultKeywords"> A <c>System.String</c> instance.</param>
		/// <param name="homeKeywords"> A <c>System.String</c> instance.</param>
		/// <param name="showFaceBookButton"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="useAdvertiserFilter"> A <c>System.Int32?</c> instance.</param>
		/// <param name="merchantId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="showTwitterButton"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showJobAlertButton"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showLinkedInButton"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="siteFavIconId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteDocType"> A <c>System.String</c> instance.</param>
		/// <param name="currencySymbol"> A <c>System.String</c> instance.</param>
		/// <param name="ftpFolderLocation"> A <c>System.String</c> instance.</param>
		/// <param name="metaTags"> A <c>System.String</c> instance.</param>
		/// <param name="systemMetaTags"> A <c>System.String</c> instance.</param>
		/// <param name="memberRegistrationNotification"> A <c>System.String</c> instance.</param>
		/// <param name="linkedInApi"> A <c>System.String</c> instance.</param>
		/// <param name="linkedInLogo"> A <c>System.String</c> instance.</param>
		/// <param name="linkedInCompanyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="linkedInEmail"> A <c>System.String</c> instance.</param>
		/// <param name="privacySettings"> A <c>System.String</c> instance.</param>
		/// <param name="wwwRedirect"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="allowAdvertiser"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="linkedInApiSecret"> A <c>System.String</c> instance.</param>
		/// <param name="googleClientId"> A <c>System.String</c> instance.</param>
		/// <param name="googleClientSecret"> A <c>System.String</c> instance.</param>
		/// <param name="facebookAppId"> A <c>System.String</c> instance.</param>
		/// <param name="facebookAppSecret"> A <c>System.String</c> instance.</param>
		/// <param name="linkedInButtonSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="defaultCountryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="payPalUsername"> A <c>System.String</c> instance.</param>
		/// <param name="payPalPassword"> A <c>System.String</c> instance.</param>
		/// <param name="payPalSignature"> A <c>System.String</c> instance.</param>
		/// <param name="securePayMerchantId"> A <c>System.String</c> instance.</param>
		/// <param name="securePayPassword"> A <c>System.String</c> instance.</param>
		/// <param name="usingSsl"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="useCustomProfessionRole"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="generateJobXml"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="isPrivateSite"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="privateRedirectUrl"> A <c>System.String</c> instance.</param>
		/// <param name="enableJobCustomQuestionnaire"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobApplicationTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobScreeningProcess"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="advertiserApprovalProcess"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteType"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enableSsl"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="gst"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="gstLabel"> A <c>System.String</c> instance.</param>
		/// <param name="numberOfPremiumJobs"> A <c>System.Int32?</c> instance.</param>
		/// <param name="premiumJobDays"> A <c>System.Int32?</c> instance.</param>
		/// <param name="displayPremiumJobsOnResults"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobExpiryNotification"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="payPalClientId"> A <c>System.String</c> instance.</param>
		/// <param name="payPalClientSecret"> A <c>System.String</c> instance.</param>
		/// <param name="paypalUser"> A <c>System.String</c> instance.</param>
		/// <param name="paypalProPassword"> A <c>System.String</c> instance.</param>
		/// <param name="paypalVendor"> A <c>System.String</c> instance.</param>
		/// <param name="paypalPartner"> A <c>System.String</c> instance.</param>
		/// <param name="invoiceSiteInfo"> A <c>System.String</c> instance.</param>
		/// <param name="invoiceSiteFooter"> A <c>System.String</c> instance.</param>
		/// <param name="enableTermsAndConditions"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="defaultEmailLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="googleTagManager"> A <c>System.String</c> instance.</param>
		/// <param name="googleAnalytics"> A <c>System.String</c> instance.</param>
		/// <param name="googleWebMaster"> A <c>System.String</c> instance.</param>
		/// <param name="enablePeopleSearch"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="globalDateFormat"> A <c>System.String</c> instance.</param>
		/// <param name="timeZone"> A <c>System.String</c> instance.</param>
		/// <param name="globalFolder"> A <c>System.String</c> instance.</param>
		/// <param name="enableScreeningQuestions"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="enableExpiryDate"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="memberRegisterPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobApplicationPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Update(TransactionManager transactionManager, int start, int pageLength , System.Int32? globalSettingId, System.Int32? siteId, System.Int32? defaultLanguageId, System.Int32? defaultDynamicPageId, System.Boolean? publicJobsSearch, System.Boolean? publicMembersSearch, System.Boolean? publicCompaniesSearch, System.Boolean? publicSponsoredAdverts, System.Boolean? privateJobs, System.Boolean? privateMembers, System.Boolean? privateCompanies, System.Int32? lastModifiedBy, System.DateTime? lastModified, System.String pageTitlePrefix, System.String pageTitleSuffix, System.String defaultTitle, System.String homeTitle, System.String defaultDescription, System.String homeDescription, System.String defaultKeywords, System.String homeKeywords, System.Boolean? showFaceBookButton, System.Int32? useAdvertiserFilter, System.Int32? merchantId, System.Boolean? showTwitterButton, System.Boolean? showJobAlertButton, System.Boolean? showLinkedInButton, System.Int32? siteFavIconId, System.String siteDocType, System.String currencySymbol, System.String ftpFolderLocation, System.String metaTags, System.String systemMetaTags, System.String memberRegistrationNotification, System.String linkedInApi, System.String linkedInLogo, System.Int32? linkedInCompanyId, System.String linkedInEmail, System.String privacySettings, System.Boolean? wwwRedirect, System.Boolean? allowAdvertiser, System.String linkedInApiSecret, System.String googleClientId, System.String googleClientSecret, System.String facebookAppId, System.String facebookAppSecret, System.Int32? linkedInButtonSize, System.Int32? defaultCountryId, System.String payPalUsername, System.String payPalPassword, System.String payPalSignature, System.String securePayMerchantId, System.String securePayPassword, System.Boolean? usingSsl, System.Boolean? useCustomProfessionRole, System.Boolean? generateJobXml, System.Boolean? isPrivateSite, System.String privateRedirectUrl, System.Boolean? enableJobCustomQuestionnaire, System.Int32? jobApplicationTypeId, System.Boolean? jobScreeningProcess, System.Int32? advertiserApprovalProcess, System.Int32? siteType, System.Boolean? enableSsl, System.Decimal? gst, System.String gstLabel, System.Int32? numberOfPremiumJobs, System.Int32? premiumJobDays, System.Boolean? displayPremiumJobsOnResults, System.Boolean? jobExpiryNotification, System.Int32? currencyId, System.String payPalClientId, System.String payPalClientSecret, System.String paypalUser, System.String paypalProPassword, System.String paypalVendor, System.String paypalPartner, System.String invoiceSiteInfo, System.String invoiceSiteFooter, System.Boolean? enableTermsAndConditions, System.Int32? defaultEmailLanguageId, System.String googleTagManager, System.String googleAnalytics, System.String googleWebMaster, System.Boolean? enablePeopleSearch, System.String globalDateFormat, System.String timeZone, System.String globalFolder, System.Boolean? enableScreeningQuestions, System.Boolean? enableExpiryDate, System.Int32? memberRegisterPageId, System.Int32? jobApplicationPageId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_Update", true);
			
			database.AddInParameter(commandWrapper, "@GlobalSettingId", DbType.Int32,  globalSettingId );
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@DefaultLanguageId", DbType.Int32,  defaultLanguageId );
			database.AddInParameter(commandWrapper, "@DefaultDynamicPageId", DbType.Int32,  defaultDynamicPageId );
			database.AddInParameter(commandWrapper, "@PublicJobsSearch", DbType.Boolean,  publicJobsSearch );
			database.AddInParameter(commandWrapper, "@PublicMembersSearch", DbType.Boolean,  publicMembersSearch );
			database.AddInParameter(commandWrapper, "@PublicCompaniesSearch", DbType.Boolean,  publicCompaniesSearch );
			database.AddInParameter(commandWrapper, "@PublicSponsoredAdverts", DbType.Boolean,  publicSponsoredAdverts );
			database.AddInParameter(commandWrapper, "@PrivateJobs", DbType.Boolean,  privateJobs );
			database.AddInParameter(commandWrapper, "@PrivateMembers", DbType.Boolean,  privateMembers );
			database.AddInParameter(commandWrapper, "@PrivateCompanies", DbType.Boolean,  privateCompanies );
			database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32,  lastModifiedBy );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime,  lastModified );
			database.AddInParameter(commandWrapper, "@PageTitlePrefix", DbType.String,  pageTitlePrefix );
			database.AddInParameter(commandWrapper, "@PageTitleSuffix", DbType.String,  pageTitleSuffix );
			database.AddInParameter(commandWrapper, "@DefaultTitle", DbType.String,  defaultTitle );
			database.AddInParameter(commandWrapper, "@HomeTitle", DbType.String,  homeTitle );
			database.AddInParameter(commandWrapper, "@DefaultDescription", DbType.String,  defaultDescription );
			database.AddInParameter(commandWrapper, "@HomeDescription", DbType.String,  homeDescription );
			database.AddInParameter(commandWrapper, "@DefaultKeywords", DbType.String,  defaultKeywords );
			database.AddInParameter(commandWrapper, "@HomeKeywords", DbType.String,  homeKeywords );
			database.AddInParameter(commandWrapper, "@ShowFaceBookButton", DbType.Boolean,  showFaceBookButton );
			database.AddInParameter(commandWrapper, "@UseAdvertiserFilter", DbType.Int32,  useAdvertiserFilter );
			database.AddInParameter(commandWrapper, "@MerchantId", DbType.Int32,  merchantId );
			database.AddInParameter(commandWrapper, "@ShowTwitterButton", DbType.Boolean,  showTwitterButton );
			database.AddInParameter(commandWrapper, "@ShowJobAlertButton", DbType.Boolean,  showJobAlertButton );
			database.AddInParameter(commandWrapper, "@ShowLinkedInButton", DbType.Boolean,  showLinkedInButton );
			database.AddInParameter(commandWrapper, "@SiteFavIconId", DbType.Int32,  siteFavIconId );
			database.AddInParameter(commandWrapper, "@SiteDocType", DbType.AnsiString,  siteDocType );
			database.AddInParameter(commandWrapper, "@CurrencySymbol", DbType.AnsiString,  currencySymbol );
			database.AddInParameter(commandWrapper, "@FtpFolderLocation", DbType.AnsiString,  ftpFolderLocation );
			database.AddInParameter(commandWrapper, "@MetaTags", DbType.String,  metaTags );
			database.AddInParameter(commandWrapper, "@SystemMetaTags", DbType.String,  systemMetaTags );
			database.AddInParameter(commandWrapper, "@MemberRegistrationNotification", DbType.AnsiString,  memberRegistrationNotification );
			database.AddInParameter(commandWrapper, "@LinkedInApi", DbType.AnsiString,  linkedInApi );
			database.AddInParameter(commandWrapper, "@LinkedInLogo", DbType.AnsiString,  linkedInLogo );
			database.AddInParameter(commandWrapper, "@LinkedInCompanyId", DbType.Int32,  linkedInCompanyId );
			database.AddInParameter(commandWrapper, "@LinkedInEmail", DbType.AnsiString,  linkedInEmail );
			database.AddInParameter(commandWrapper, "@PrivacySettings", DbType.String,  privacySettings );
			database.AddInParameter(commandWrapper, "@WwwRedirect", DbType.Boolean,  wwwRedirect );
			database.AddInParameter(commandWrapper, "@AllowAdvertiser", DbType.Boolean,  allowAdvertiser );
			database.AddInParameter(commandWrapper, "@LinkedInApiSecret", DbType.AnsiString,  linkedInApiSecret );
			database.AddInParameter(commandWrapper, "@GoogleClientId", DbType.AnsiString,  googleClientId );
			database.AddInParameter(commandWrapper, "@GoogleClientSecret", DbType.AnsiString,  googleClientSecret );
			database.AddInParameter(commandWrapper, "@FacebookAppId", DbType.AnsiString,  facebookAppId );
			database.AddInParameter(commandWrapper, "@FacebookAppSecret", DbType.AnsiString,  facebookAppSecret );
			database.AddInParameter(commandWrapper, "@LinkedInButtonSize", DbType.Int32,  linkedInButtonSize );
			database.AddInParameter(commandWrapper, "@DefaultCountryId", DbType.Int32,  defaultCountryId );
			database.AddInParameter(commandWrapper, "@PayPalUsername", DbType.AnsiString,  payPalUsername );
			database.AddInParameter(commandWrapper, "@PayPalPassword", DbType.AnsiString,  payPalPassword );
			database.AddInParameter(commandWrapper, "@PayPalSignature", DbType.AnsiString,  payPalSignature );
			database.AddInParameter(commandWrapper, "@SecurePayMerchantId", DbType.AnsiString,  securePayMerchantId );
			database.AddInParameter(commandWrapper, "@SecurePayPassword", DbType.AnsiString,  securePayPassword );
			database.AddInParameter(commandWrapper, "@UsingSsl", DbType.Boolean,  usingSsl );
			database.AddInParameter(commandWrapper, "@UseCustomProfessionRole", DbType.Boolean,  useCustomProfessionRole );
			database.AddInParameter(commandWrapper, "@GenerateJobXml", DbType.Boolean,  generateJobXml );
			database.AddInParameter(commandWrapper, "@IsPrivateSite", DbType.Boolean,  isPrivateSite );
			database.AddInParameter(commandWrapper, "@PrivateRedirectUrl", DbType.AnsiString,  privateRedirectUrl );
			database.AddInParameter(commandWrapper, "@EnableJobCustomQuestionnaire", DbType.Boolean,  enableJobCustomQuestionnaire );
			database.AddInParameter(commandWrapper, "@JobApplicationTypeId", DbType.Int32,  jobApplicationTypeId );
			database.AddInParameter(commandWrapper, "@JobScreeningProcess", DbType.Boolean,  jobScreeningProcess );
			database.AddInParameter(commandWrapper, "@AdvertiserApprovalProcess", DbType.Int32,  advertiserApprovalProcess );
			database.AddInParameter(commandWrapper, "@SiteType", DbType.Int32,  siteType );
			database.AddInParameter(commandWrapper, "@EnableSsl", DbType.Boolean,  enableSsl );
			database.AddInParameter(commandWrapper, "@Gst", DbType.Decimal,  gst );
			database.AddInParameter(commandWrapper, "@GstLabel", DbType.String,  gstLabel );
			database.AddInParameter(commandWrapper, "@NumberOfPremiumJobs", DbType.Int32,  numberOfPremiumJobs );
			database.AddInParameter(commandWrapper, "@PremiumJobDays", DbType.Int32,  premiumJobDays );
			database.AddInParameter(commandWrapper, "@DisplayPremiumJobsOnResults", DbType.Boolean,  displayPremiumJobsOnResults );
			database.AddInParameter(commandWrapper, "@JobExpiryNotification", DbType.Boolean,  jobExpiryNotification );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
			database.AddInParameter(commandWrapper, "@PayPalClientId", DbType.AnsiString,  payPalClientId );
			database.AddInParameter(commandWrapper, "@PayPalClientSecret", DbType.AnsiString,  payPalClientSecret );
			database.AddInParameter(commandWrapper, "@PaypalUser", DbType.AnsiString,  paypalUser );
			database.AddInParameter(commandWrapper, "@PaypalProPassword", DbType.AnsiString,  paypalProPassword );
			database.AddInParameter(commandWrapper, "@PaypalVendor", DbType.AnsiString,  paypalVendor );
			database.AddInParameter(commandWrapper, "@PaypalPartner", DbType.AnsiString,  paypalPartner );
			database.AddInParameter(commandWrapper, "@InvoiceSiteInfo", DbType.String,  invoiceSiteInfo );
			database.AddInParameter(commandWrapper, "@InvoiceSiteFooter", DbType.String,  invoiceSiteFooter );
			database.AddInParameter(commandWrapper, "@EnableTermsAndConditions", DbType.Boolean,  enableTermsAndConditions );
			database.AddInParameter(commandWrapper, "@DefaultEmailLanguageId", DbType.Int32,  defaultEmailLanguageId );
			database.AddInParameter(commandWrapper, "@GoogleTagManager", DbType.AnsiString,  googleTagManager );
			database.AddInParameter(commandWrapper, "@GoogleAnalytics", DbType.AnsiString,  googleAnalytics );
			database.AddInParameter(commandWrapper, "@GoogleWebMaster", DbType.AnsiString,  googleWebMaster );
			database.AddInParameter(commandWrapper, "@EnablePeopleSearch", DbType.Boolean,  enablePeopleSearch );
			database.AddInParameter(commandWrapper, "@GlobalDateFormat", DbType.AnsiString,  globalDateFormat );
			database.AddInParameter(commandWrapper, "@TimeZone", DbType.AnsiString,  timeZone );
			database.AddInParameter(commandWrapper, "@GlobalFolder", DbType.AnsiString,  globalFolder );
			database.AddInParameter(commandWrapper, "@EnableScreeningQuestions", DbType.Boolean,  enableScreeningQuestions );
			database.AddInParameter(commandWrapper, "@EnableExpiryDate", DbType.Boolean,  enableExpiryDate );
			database.AddInParameter(commandWrapper, "@MemberRegisterPageId", DbType.Int32,  memberRegisterPageId );
			database.AddInParameter(commandWrapper, "@JobApplicationPageId", DbType.Int32,  jobApplicationPageId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", (IEntity)null));


				
				return;
		}
		#endregion

		#region GlobalSettings_GetByDefaultCountryId
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_GetByDefaultCountryId' stored procedure. 
		/// </summary>	
		/// <param name="defaultCountryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByDefaultCountryId(TransactionManager transactionManager, int start, int pageLength , System.Int32? defaultCountryId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetByDefaultCountryId", true);
			
			database.AddInParameter(commandWrapper, "@DefaultCountryId", DbType.Int32,  defaultCountryId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByDefaultCountryId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByDefaultCountryId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region GlobalSettings_GetByMemberRegisterPageId
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_GetByMemberRegisterPageId' stored procedure. 
		/// </summary>	
		/// <param name="memberRegisterPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByMemberRegisterPageId(TransactionManager transactionManager, int start, int pageLength , System.Int32? memberRegisterPageId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetByMemberRegisterPageId", true);
			
			database.AddInParameter(commandWrapper, "@MemberRegisterPageId", DbType.Int32,  memberRegisterPageId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMemberRegisterPageId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMemberRegisterPageId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region GlobalSettings_GetByDefaultLanguageId
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_GetByDefaultLanguageId' stored procedure. 
		/// </summary>	
		/// <param name="defaultLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByDefaultLanguageId(TransactionManager transactionManager, int start, int pageLength , System.Int32? defaultLanguageId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetByDefaultLanguageId", true);
			
			database.AddInParameter(commandWrapper, "@DefaultLanguageId", DbType.Int32,  defaultLanguageId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByDefaultLanguageId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByDefaultLanguageId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region GlobalSettings_Insert
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_Insert' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="defaultLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="defaultDynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="publicJobsSearch"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicMembersSearch"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicCompaniesSearch"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicSponsoredAdverts"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="privateJobs"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="privateMembers"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="privateCompanies"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="pageTitlePrefix"> A <c>System.String</c> instance.</param>
		/// <param name="pageTitleSuffix"> A <c>System.String</c> instance.</param>
		/// <param name="defaultTitle"> A <c>System.String</c> instance.</param>
		/// <param name="homeTitle"> A <c>System.String</c> instance.</param>
		/// <param name="defaultDescription"> A <c>System.String</c> instance.</param>
		/// <param name="homeDescription"> A <c>System.String</c> instance.</param>
		/// <param name="defaultKeywords"> A <c>System.String</c> instance.</param>
		/// <param name="homeKeywords"> A <c>System.String</c> instance.</param>
		/// <param name="showFaceBookButton"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="useAdvertiserFilter"> A <c>System.Int32?</c> instance.</param>
		/// <param name="merchantId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="showTwitterButton"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showJobAlertButton"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showLinkedInButton"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="siteFavIconId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteDocType"> A <c>System.String</c> instance.</param>
		/// <param name="currencySymbol"> A <c>System.String</c> instance.</param>
		/// <param name="ftpFolderLocation"> A <c>System.String</c> instance.</param>
		/// <param name="metaTags"> A <c>System.String</c> instance.</param>
		/// <param name="systemMetaTags"> A <c>System.String</c> instance.</param>
		/// <param name="memberRegistrationNotification"> A <c>System.String</c> instance.</param>
		/// <param name="linkedInApi"> A <c>System.String</c> instance.</param>
		/// <param name="linkedInLogo"> A <c>System.String</c> instance.</param>
		/// <param name="linkedInCompanyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="linkedInEmail"> A <c>System.String</c> instance.</param>
		/// <param name="privacySettings"> A <c>System.String</c> instance.</param>
		/// <param name="wwwRedirect"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="allowAdvertiser"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="linkedInApiSecret"> A <c>System.String</c> instance.</param>
		/// <param name="googleClientId"> A <c>System.String</c> instance.</param>
		/// <param name="googleClientSecret"> A <c>System.String</c> instance.</param>
		/// <param name="facebookAppId"> A <c>System.String</c> instance.</param>
		/// <param name="facebookAppSecret"> A <c>System.String</c> instance.</param>
		/// <param name="linkedInButtonSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="defaultCountryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="payPalUsername"> A <c>System.String</c> instance.</param>
		/// <param name="payPalPassword"> A <c>System.String</c> instance.</param>
		/// <param name="payPalSignature"> A <c>System.String</c> instance.</param>
		/// <param name="securePayMerchantId"> A <c>System.String</c> instance.</param>
		/// <param name="securePayPassword"> A <c>System.String</c> instance.</param>
		/// <param name="usingSsl"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="useCustomProfessionRole"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="generateJobXml"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="isPrivateSite"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="privateRedirectUrl"> A <c>System.String</c> instance.</param>
		/// <param name="enableJobCustomQuestionnaire"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobApplicationTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobScreeningProcess"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="advertiserApprovalProcess"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteType"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enableSsl"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="gst"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="gstLabel"> A <c>System.String</c> instance.</param>
		/// <param name="numberOfPremiumJobs"> A <c>System.Int32?</c> instance.</param>
		/// <param name="premiumJobDays"> A <c>System.Int32?</c> instance.</param>
		/// <param name="displayPremiumJobsOnResults"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobExpiryNotification"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="payPalClientId"> A <c>System.String</c> instance.</param>
		/// <param name="payPalClientSecret"> A <c>System.String</c> instance.</param>
		/// <param name="paypalUser"> A <c>System.String</c> instance.</param>
		/// <param name="paypalProPassword"> A <c>System.String</c> instance.</param>
		/// <param name="paypalVendor"> A <c>System.String</c> instance.</param>
		/// <param name="paypalPartner"> A <c>System.String</c> instance.</param>
		/// <param name="invoiceSiteInfo"> A <c>System.String</c> instance.</param>
		/// <param name="invoiceSiteFooter"> A <c>System.String</c> instance.</param>
		/// <param name="enableTermsAndConditions"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="defaultEmailLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="googleTagManager"> A <c>System.String</c> instance.</param>
		/// <param name="googleAnalytics"> A <c>System.String</c> instance.</param>
		/// <param name="googleWebMaster"> A <c>System.String</c> instance.</param>
		/// <param name="enablePeopleSearch"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="globalDateFormat"> A <c>System.String</c> instance.</param>
		/// <param name="timeZone"> A <c>System.String</c> instance.</param>
		/// <param name="globalFolder"> A <c>System.String</c> instance.</param>
		/// <param name="enableScreeningQuestions"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="enableExpiryDate"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="memberRegisterPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobApplicationPageId"> A <c>System.Int32?</c> instance.</param>
			/// <param name="globalSettingId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Insert(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.Int32? defaultLanguageId, System.Int32? defaultDynamicPageId, System.Boolean? publicJobsSearch, System.Boolean? publicMembersSearch, System.Boolean? publicCompaniesSearch, System.Boolean? publicSponsoredAdverts, System.Boolean? privateJobs, System.Boolean? privateMembers, System.Boolean? privateCompanies, System.Int32? lastModifiedBy, System.DateTime? lastModified, System.String pageTitlePrefix, System.String pageTitleSuffix, System.String defaultTitle, System.String homeTitle, System.String defaultDescription, System.String homeDescription, System.String defaultKeywords, System.String homeKeywords, System.Boolean? showFaceBookButton, System.Int32? useAdvertiserFilter, System.Int32? merchantId, System.Boolean? showTwitterButton, System.Boolean? showJobAlertButton, System.Boolean? showLinkedInButton, System.Int32? siteFavIconId, System.String siteDocType, System.String currencySymbol, System.String ftpFolderLocation, System.String metaTags, System.String systemMetaTags, System.String memberRegistrationNotification, System.String linkedInApi, System.String linkedInLogo, System.Int32? linkedInCompanyId, System.String linkedInEmail, System.String privacySettings, System.Boolean? wwwRedirect, System.Boolean? allowAdvertiser, System.String linkedInApiSecret, System.String googleClientId, System.String googleClientSecret, System.String facebookAppId, System.String facebookAppSecret, System.Int32? linkedInButtonSize, System.Int32? defaultCountryId, System.String payPalUsername, System.String payPalPassword, System.String payPalSignature, System.String securePayMerchantId, System.String securePayPassword, System.Boolean? usingSsl, System.Boolean? useCustomProfessionRole, System.Boolean? generateJobXml, System.Boolean? isPrivateSite, System.String privateRedirectUrl, System.Boolean? enableJobCustomQuestionnaire, System.Int32? jobApplicationTypeId, System.Boolean? jobScreeningProcess, System.Int32? advertiserApprovalProcess, System.Int32? siteType, System.Boolean? enableSsl, System.Decimal? gst, System.String gstLabel, System.Int32? numberOfPremiumJobs, System.Int32? premiumJobDays, System.Boolean? displayPremiumJobsOnResults, System.Boolean? jobExpiryNotification, System.Int32? currencyId, System.String payPalClientId, System.String payPalClientSecret, System.String paypalUser, System.String paypalProPassword, System.String paypalVendor, System.String paypalPartner, System.String invoiceSiteInfo, System.String invoiceSiteFooter, System.Boolean? enableTermsAndConditions, System.Int32? defaultEmailLanguageId, System.String googleTagManager, System.String googleAnalytics, System.String googleWebMaster, System.Boolean? enablePeopleSearch, System.String globalDateFormat, System.String timeZone, System.String globalFolder, System.Boolean? enableScreeningQuestions, System.Boolean? enableExpiryDate, System.Int32? memberRegisterPageId, System.Int32? jobApplicationPageId, ref System.Int32? globalSettingId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_Insert", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@DefaultLanguageId", DbType.Int32,  defaultLanguageId );
			database.AddInParameter(commandWrapper, "@DefaultDynamicPageId", DbType.Int32,  defaultDynamicPageId );
			database.AddInParameter(commandWrapper, "@PublicJobsSearch", DbType.Boolean,  publicJobsSearch );
			database.AddInParameter(commandWrapper, "@PublicMembersSearch", DbType.Boolean,  publicMembersSearch );
			database.AddInParameter(commandWrapper, "@PublicCompaniesSearch", DbType.Boolean,  publicCompaniesSearch );
			database.AddInParameter(commandWrapper, "@PublicSponsoredAdverts", DbType.Boolean,  publicSponsoredAdverts );
			database.AddInParameter(commandWrapper, "@PrivateJobs", DbType.Boolean,  privateJobs );
			database.AddInParameter(commandWrapper, "@PrivateMembers", DbType.Boolean,  privateMembers );
			database.AddInParameter(commandWrapper, "@PrivateCompanies", DbType.Boolean,  privateCompanies );
			database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32,  lastModifiedBy );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime,  lastModified );
			database.AddInParameter(commandWrapper, "@PageTitlePrefix", DbType.String,  pageTitlePrefix );
			database.AddInParameter(commandWrapper, "@PageTitleSuffix", DbType.String,  pageTitleSuffix );
			database.AddInParameter(commandWrapper, "@DefaultTitle", DbType.String,  defaultTitle );
			database.AddInParameter(commandWrapper, "@HomeTitle", DbType.String,  homeTitle );
			database.AddInParameter(commandWrapper, "@DefaultDescription", DbType.String,  defaultDescription );
			database.AddInParameter(commandWrapper, "@HomeDescription", DbType.String,  homeDescription );
			database.AddInParameter(commandWrapper, "@DefaultKeywords", DbType.String,  defaultKeywords );
			database.AddInParameter(commandWrapper, "@HomeKeywords", DbType.String,  homeKeywords );
			database.AddInParameter(commandWrapper, "@ShowFaceBookButton", DbType.Boolean,  showFaceBookButton );
			database.AddInParameter(commandWrapper, "@UseAdvertiserFilter", DbType.Int32,  useAdvertiserFilter );
			database.AddInParameter(commandWrapper, "@MerchantId", DbType.Int32,  merchantId );
			database.AddInParameter(commandWrapper, "@ShowTwitterButton", DbType.Boolean,  showTwitterButton );
			database.AddInParameter(commandWrapper, "@ShowJobAlertButton", DbType.Boolean,  showJobAlertButton );
			database.AddInParameter(commandWrapper, "@ShowLinkedInButton", DbType.Boolean,  showLinkedInButton );
			database.AddInParameter(commandWrapper, "@SiteFavIconId", DbType.Int32,  siteFavIconId );
			database.AddInParameter(commandWrapper, "@SiteDocType", DbType.AnsiString,  siteDocType );
			database.AddInParameter(commandWrapper, "@CurrencySymbol", DbType.AnsiString,  currencySymbol );
			database.AddInParameter(commandWrapper, "@FtpFolderLocation", DbType.AnsiString,  ftpFolderLocation );
			database.AddInParameter(commandWrapper, "@MetaTags", DbType.String,  metaTags );
			database.AddInParameter(commandWrapper, "@SystemMetaTags", DbType.String,  systemMetaTags );
			database.AddInParameter(commandWrapper, "@MemberRegistrationNotification", DbType.AnsiString,  memberRegistrationNotification );
			database.AddInParameter(commandWrapper, "@LinkedInApi", DbType.AnsiString,  linkedInApi );
			database.AddInParameter(commandWrapper, "@LinkedInLogo", DbType.AnsiString,  linkedInLogo );
			database.AddInParameter(commandWrapper, "@LinkedInCompanyId", DbType.Int32,  linkedInCompanyId );
			database.AddInParameter(commandWrapper, "@LinkedInEmail", DbType.AnsiString,  linkedInEmail );
			database.AddInParameter(commandWrapper, "@PrivacySettings", DbType.String,  privacySettings );
			database.AddInParameter(commandWrapper, "@WwwRedirect", DbType.Boolean,  wwwRedirect );
			database.AddInParameter(commandWrapper, "@AllowAdvertiser", DbType.Boolean,  allowAdvertiser );
			database.AddInParameter(commandWrapper, "@LinkedInApiSecret", DbType.AnsiString,  linkedInApiSecret );
			database.AddInParameter(commandWrapper, "@GoogleClientId", DbType.AnsiString,  googleClientId );
			database.AddInParameter(commandWrapper, "@GoogleClientSecret", DbType.AnsiString,  googleClientSecret );
			database.AddInParameter(commandWrapper, "@FacebookAppId", DbType.AnsiString,  facebookAppId );
			database.AddInParameter(commandWrapper, "@FacebookAppSecret", DbType.AnsiString,  facebookAppSecret );
			database.AddInParameter(commandWrapper, "@LinkedInButtonSize", DbType.Int32,  linkedInButtonSize );
			database.AddInParameter(commandWrapper, "@DefaultCountryId", DbType.Int32,  defaultCountryId );
			database.AddInParameter(commandWrapper, "@PayPalUsername", DbType.AnsiString,  payPalUsername );
			database.AddInParameter(commandWrapper, "@PayPalPassword", DbType.AnsiString,  payPalPassword );
			database.AddInParameter(commandWrapper, "@PayPalSignature", DbType.AnsiString,  payPalSignature );
			database.AddInParameter(commandWrapper, "@SecurePayMerchantId", DbType.AnsiString,  securePayMerchantId );
			database.AddInParameter(commandWrapper, "@SecurePayPassword", DbType.AnsiString,  securePayPassword );
			database.AddInParameter(commandWrapper, "@UsingSsl", DbType.Boolean,  usingSsl );
			database.AddInParameter(commandWrapper, "@UseCustomProfessionRole", DbType.Boolean,  useCustomProfessionRole );
			database.AddInParameter(commandWrapper, "@GenerateJobXml", DbType.Boolean,  generateJobXml );
			database.AddInParameter(commandWrapper, "@IsPrivateSite", DbType.Boolean,  isPrivateSite );
			database.AddInParameter(commandWrapper, "@PrivateRedirectUrl", DbType.AnsiString,  privateRedirectUrl );
			database.AddInParameter(commandWrapper, "@EnableJobCustomQuestionnaire", DbType.Boolean,  enableJobCustomQuestionnaire );
			database.AddInParameter(commandWrapper, "@JobApplicationTypeId", DbType.Int32,  jobApplicationTypeId );
			database.AddInParameter(commandWrapper, "@JobScreeningProcess", DbType.Boolean,  jobScreeningProcess );
			database.AddInParameter(commandWrapper, "@AdvertiserApprovalProcess", DbType.Int32,  advertiserApprovalProcess );
			database.AddInParameter(commandWrapper, "@SiteType", DbType.Int32,  siteType );
			database.AddInParameter(commandWrapper, "@EnableSsl", DbType.Boolean,  enableSsl );
			database.AddInParameter(commandWrapper, "@Gst", DbType.Decimal,  gst );
			database.AddInParameter(commandWrapper, "@GstLabel", DbType.String,  gstLabel );
			database.AddInParameter(commandWrapper, "@NumberOfPremiumJobs", DbType.Int32,  numberOfPremiumJobs );
			database.AddInParameter(commandWrapper, "@PremiumJobDays", DbType.Int32,  premiumJobDays );
			database.AddInParameter(commandWrapper, "@DisplayPremiumJobsOnResults", DbType.Boolean,  displayPremiumJobsOnResults );
			database.AddInParameter(commandWrapper, "@JobExpiryNotification", DbType.Boolean,  jobExpiryNotification );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
			database.AddInParameter(commandWrapper, "@PayPalClientId", DbType.AnsiString,  payPalClientId );
			database.AddInParameter(commandWrapper, "@PayPalClientSecret", DbType.AnsiString,  payPalClientSecret );
			database.AddInParameter(commandWrapper, "@PaypalUser", DbType.AnsiString,  paypalUser );
			database.AddInParameter(commandWrapper, "@PaypalProPassword", DbType.AnsiString,  paypalProPassword );
			database.AddInParameter(commandWrapper, "@PaypalVendor", DbType.AnsiString,  paypalVendor );
			database.AddInParameter(commandWrapper, "@PaypalPartner", DbType.AnsiString,  paypalPartner );
			database.AddInParameter(commandWrapper, "@InvoiceSiteInfo", DbType.String,  invoiceSiteInfo );
			database.AddInParameter(commandWrapper, "@InvoiceSiteFooter", DbType.String,  invoiceSiteFooter );
			database.AddInParameter(commandWrapper, "@EnableTermsAndConditions", DbType.Boolean,  enableTermsAndConditions );
			database.AddInParameter(commandWrapper, "@DefaultEmailLanguageId", DbType.Int32,  defaultEmailLanguageId );
			database.AddInParameter(commandWrapper, "@GoogleTagManager", DbType.AnsiString,  googleTagManager );
			database.AddInParameter(commandWrapper, "@GoogleAnalytics", DbType.AnsiString,  googleAnalytics );
			database.AddInParameter(commandWrapper, "@GoogleWebMaster", DbType.AnsiString,  googleWebMaster );
			database.AddInParameter(commandWrapper, "@EnablePeopleSearch", DbType.Boolean,  enablePeopleSearch );
			database.AddInParameter(commandWrapper, "@GlobalDateFormat", DbType.AnsiString,  globalDateFormat );
			database.AddInParameter(commandWrapper, "@TimeZone", DbType.AnsiString,  timeZone );
			database.AddInParameter(commandWrapper, "@GlobalFolder", DbType.AnsiString,  globalFolder );
			database.AddInParameter(commandWrapper, "@EnableScreeningQuestions", DbType.Boolean,  enableScreeningQuestions );
			database.AddInParameter(commandWrapper, "@EnableExpiryDate", DbType.Boolean,  enableExpiryDate );
			database.AddInParameter(commandWrapper, "@MemberRegisterPageId", DbType.Int32,  memberRegisterPageId );
			database.AddInParameter(commandWrapper, "@JobApplicationPageId", DbType.Int32,  jobApplicationPageId );
	
			database.AddParameter(commandWrapper, "@GlobalSettingId", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, globalSettingId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", (IEntity)null));

			globalSettingId =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@GlobalSettingId"]);

				
				return;
		}
		#endregion

		#region GlobalSettings_GetByLastModifiedBy
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_GetByLastModifiedBy' stored procedure. 
		/// </summary>	
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByLastModifiedBy(TransactionManager transactionManager, int start, int pageLength , System.Int32? lastModifiedBy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetByLastModifiedBy", true);
			
			database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32,  lastModifiedBy );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByLastModifiedBy", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByLastModifiedBy", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region GlobalSettings_Get_List
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_Get_List' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Get_List(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_Get_List", true);
			
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Get_List", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Get_List", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region GlobalSettings_GetBySiteFavIconId
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_GetBySiteFavIconId' stored procedure. 
		/// </summary>	
		/// <param name="siteFavIconId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBySiteFavIconId(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteFavIconId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetBySiteFavIconId", true);
			
			database.AddInParameter(commandWrapper, "@SiteFavIconId", DbType.Int32,  siteFavIconId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteFavIconId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteFavIconId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region GlobalSettings_CustomGetPaymentDetail
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_CustomGetPaymentDetail' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet CustomGetPaymentDetail(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_CustomGetPaymentDetail", true);
			
			database.AddInParameter(commandWrapper, "@SiteID", DbType.Int32,  siteId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomGetPaymentDetail", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomGetPaymentDetail", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region GlobalSettings_GetBySiteIdPublicJobsSearch
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_GetBySiteIdPublicJobsSearch' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="publicJobsSearch"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBySiteIdPublicJobsSearch(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.Boolean? publicJobsSearch)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetBySiteIdPublicJobsSearch", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@PublicJobsSearch", DbType.Boolean,  publicJobsSearch );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteIdPublicJobsSearch", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteIdPublicJobsSearch", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region GlobalSettings_GetBySiteId
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_GetBySiteId' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBySiteId(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetBySiteId", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region GlobalSettings_Delete
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_Delete' stored procedure. 
		/// </summary>	
		/// <param name="globalSettingId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Delete(TransactionManager transactionManager, int start, int pageLength , System.Int32? globalSettingId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_Delete", true);
			
			database.AddInParameter(commandWrapper, "@GlobalSettingId", DbType.Int32,  globalSettingId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete", (IEntity)null));


				
				return;
		}
		#endregion

		#region GlobalSettings_GetBySiteIdGlobalSettingId
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_GetBySiteIdGlobalSettingId' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="globalSettingId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBySiteIdGlobalSettingId(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.Int32? globalSettingId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetBySiteIdGlobalSettingId", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@GlobalSettingId", DbType.Int32,  globalSettingId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteIdGlobalSettingId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteIdGlobalSettingId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region GlobalSettings_GetBySiteIdUseAdvertiserFilter
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_GetBySiteIdUseAdvertiserFilter' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="useAdvertiserFilter"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBySiteIdUseAdvertiserFilter(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.Int32? useAdvertiserFilter)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetBySiteIdUseAdvertiserFilter", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@UseAdvertiserFilter", DbType.Int32,  useAdvertiserFilter );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteIdUseAdvertiserFilter", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteIdUseAdvertiserFilter", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region GlobalSettings_GetByDefaultDynamicPageId
					
		/// <summary>
		///	This method wraps the 'GlobalSettings_GetByDefaultDynamicPageId' stored procedure. 
		/// </summary>	
		/// <param name="defaultDynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByDefaultDynamicPageId(TransactionManager transactionManager, int start, int pageLength , System.Int32? defaultDynamicPageId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GlobalSettings_GetByDefaultDynamicPageId", true);
			
			database.AddInParameter(commandWrapper, "@DefaultDynamicPageId", DbType.Int32,  defaultDynamicPageId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByDefaultDynamicPageId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByDefaultDynamicPageId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion
		#endregion
	}//end class
} // end namespace

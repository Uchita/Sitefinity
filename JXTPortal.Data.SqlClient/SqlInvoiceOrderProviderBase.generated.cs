
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlInvoiceOrderProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using JXTPortal.Entities;
using JXTPortal.Data;
using JXTPortal.Data.Bases;

#endregion

namespace JXTPortal.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="InvoiceOrder"/> entity.
	///</summary>
	public abstract partial class SqlInvoiceOrderProviderBase : InvoiceOrderProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlInvoiceOrderProviderBase"/> instance.
		/// </summary>
		public SqlInvoiceOrderProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlInvoiceOrderProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlInvoiceOrderProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_orderId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _orderId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@OrderId", DbType.Int32, _orderId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(InvoiceOrder)
					,_orderId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.InvoiceOrder objects.</returns>
		public override TList<InvoiceOrder> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<InvoiceOrder>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@OrderId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdvertiserUserId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PaymentTypeId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsPayable", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsPaid", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DatePaid", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PaidByAdvertiserUserId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TotalAmount", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Gst", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DiscountAmount", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DiscountGst", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ResponseCode", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ResponseText", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BankTransactionId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ResponseXml", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Success", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CardName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CardNumber", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExpiryMonth", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExpiryYear", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Cvv", DbType.AnsiString, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("orderid ") || clause.Trim().StartsWith("orderid="))
				{
					database.SetParameterValue(commandWrapper, "@OrderId", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("advertiseruserid ") || clause.Trim().StartsWith("advertiseruserid="))
				{
					database.SetParameterValue(commandWrapper, "@AdvertiserUserId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("createddate ") || clause.Trim().StartsWith("createddate="))
				{
					database.SetParameterValue(commandWrapper, "@CreatedDate", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("paymenttypeid ") || clause.Trim().StartsWith("paymenttypeid="))
				{
					database.SetParameterValue(commandWrapper, "@PaymentTypeId", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ispayable ") || clause.Trim().StartsWith("ispayable="))
				{
					database.SetParameterValue(commandWrapper, "@IsPayable", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ispaid ") || clause.Trim().StartsWith("ispaid="))
				{
					database.SetParameterValue(commandWrapper, "@IsPaid", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("datepaid ") || clause.Trim().StartsWith("datepaid="))
				{
					database.SetParameterValue(commandWrapper, "@DatePaid", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("paidbyadvertiseruserid ") || clause.Trim().StartsWith("paidbyadvertiseruserid="))
				{
					database.SetParameterValue(commandWrapper, "@PaidByAdvertiserUserId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("totalamount ") || clause.Trim().StartsWith("totalamount="))
				{
					database.SetParameterValue(commandWrapper, "@TotalAmount", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gst ") || clause.Trim().StartsWith("gst="))
				{
					database.SetParameterValue(commandWrapper, "@Gst", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("currencyid ") || clause.Trim().StartsWith("currencyid="))
				{
					database.SetParameterValue(commandWrapper, "@CurrencyId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("discountamount ") || clause.Trim().StartsWith("discountamount="))
				{
					database.SetParameterValue(commandWrapper, "@DiscountAmount", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("discountgst ") || clause.Trim().StartsWith("discountgst="))
				{
					database.SetParameterValue(commandWrapper, "@DiscountGst", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("responsecode ") || clause.Trim().StartsWith("responsecode="))
				{
					database.SetParameterValue(commandWrapper, "@ResponseCode", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("responsetext ") || clause.Trim().StartsWith("responsetext="))
				{
					database.SetParameterValue(commandWrapper, "@ResponseText", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("banktransactionid ") || clause.Trim().StartsWith("banktransactionid="))
				{
					database.SetParameterValue(commandWrapper, "@BankTransactionId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("responsexml ") || clause.Trim().StartsWith("responsexml="))
				{
					database.SetParameterValue(commandWrapper, "@ResponseXml", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("success ") || clause.Trim().StartsWith("success="))
				{
					database.SetParameterValue(commandWrapper, "@Success", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cardname ") || clause.Trim().StartsWith("cardname="))
				{
					database.SetParameterValue(commandWrapper, "@CardName", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cardnumber ") || clause.Trim().StartsWith("cardnumber="))
				{
					database.SetParameterValue(commandWrapper, "@CardNumber", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("expirymonth ") || clause.Trim().StartsWith("expirymonth="))
				{
					database.SetParameterValue(commandWrapper, "@ExpiryMonth", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("expiryyear ") || clause.Trim().StartsWith("expiryyear="))
				{
					database.SetParameterValue(commandWrapper, "@ExpiryYear", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cvv ") || clause.Trim().StartsWith("cvv="))
				{
					database.SetParameterValue(commandWrapper, "@Cvv", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<InvoiceOrder> rows = new TList<InvoiceOrder>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of JXTPortal.Entities.InvoiceOrder objects.</returns>
		public override TList<InvoiceOrder> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_Find_Dynamic", typeof(InvoiceOrderColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<InvoiceOrder> rows = new TList<InvoiceOrder>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.InvoiceOrder objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<InvoiceOrder> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<InvoiceOrder> rows = new TList<InvoiceOrder>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.InvoiceOrder objects.</returns>
		public override TList<InvoiceOrder> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<InvoiceOrder> rows = new TList<InvoiceOrder>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByAdvertiserUserId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__InvoiceOr__Adver__16DB3CD9 key.
		///		FK__InvoiceOr__Adver__16DB3CD9 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_advertiserUserId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.InvoiceOrder objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<InvoiceOrder> GetByAdvertiserUserId(TransactionManager transactionManager, System.Int32 _advertiserUserId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_GetByAdvertiserUserId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdvertiserUserId", DbType.Int32, _advertiserUserId);
			
			IDataReader reader = null;
			TList<InvoiceOrder> rows = new TList<InvoiceOrder>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdvertiserUserId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdvertiserUserId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByOrderId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK__InvoiceO__C3905BAF14F2F467 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_orderId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="JXTPortal.Entities.InvoiceOrder"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override JXTPortal.Entities.InvoiceOrder GetByOrderId(TransactionManager transactionManager, System.Int32 _orderId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_GetByOrderId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@OrderId", DbType.Int32, _orderId);
			
			IDataReader reader = null;
			TList<InvoiceOrder> tmp = new TList<InvoiceOrder>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByOrderId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByOrderId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the JXTPortal.Entities.InvoiceOrder object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<JXTPortal.Entities.InvoiceOrder> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "InvoiceOrder";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("OrderID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("AdvertiserUserID", typeof(System.Int32));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("CreatedDate", typeof(System.DateTime));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("PaymentTypeID", typeof(System.Int32));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("IsPayable", typeof(System.Boolean));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("IsPaid", typeof(System.Boolean));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("DatePaid", typeof(System.DateTime));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("PaidByAdvertiserUserID", typeof(System.Int32));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("TotalAmount", typeof(System.Decimal));
			col8.AllowDBNull = false;		
			DataColumn col9 = dataTable.Columns.Add("GST", typeof(System.Decimal));
			col9.AllowDBNull = false;		
			DataColumn col10 = dataTable.Columns.Add("CurrencyID", typeof(System.Int32));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("DiscountAmount", typeof(System.Decimal));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("DiscountGST", typeof(System.Decimal));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("responseCode", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("responseText", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("bankTransactionID", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("ResponseXML", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("Success", typeof(System.Int32));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("CardName", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("CardNumber", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("ExpiryMonth", typeof(System.Int32));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("ExpiryYear", typeof(System.Int32));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("CVV", typeof(System.String));
			col22.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("OrderID", "OrderID");
			bulkCopy.ColumnMappings.Add("AdvertiserUserID", "AdvertiserUserID");
			bulkCopy.ColumnMappings.Add("CreatedDate", "CreatedDate");
			bulkCopy.ColumnMappings.Add("PaymentTypeID", "PaymentTypeID");
			bulkCopy.ColumnMappings.Add("IsPayable", "IsPayable");
			bulkCopy.ColumnMappings.Add("IsPaid", "IsPaid");
			bulkCopy.ColumnMappings.Add("DatePaid", "DatePaid");
			bulkCopy.ColumnMappings.Add("PaidByAdvertiserUserID", "PaidByAdvertiserUserID");
			bulkCopy.ColumnMappings.Add("TotalAmount", "TotalAmount");
			bulkCopy.ColumnMappings.Add("GST", "GST");
			bulkCopy.ColumnMappings.Add("CurrencyID", "CurrencyID");
			bulkCopy.ColumnMappings.Add("DiscountAmount", "DiscountAmount");
			bulkCopy.ColumnMappings.Add("DiscountGST", "DiscountGST");
			bulkCopy.ColumnMappings.Add("responseCode", "responseCode");
			bulkCopy.ColumnMappings.Add("responseText", "responseText");
			bulkCopy.ColumnMappings.Add("bankTransactionID", "bankTransactionID");
			bulkCopy.ColumnMappings.Add("ResponseXML", "ResponseXML");
			bulkCopy.ColumnMappings.Add("Success", "Success");
			bulkCopy.ColumnMappings.Add("CardName", "CardName");
			bulkCopy.ColumnMappings.Add("CardNumber", "CardNumber");
			bulkCopy.ColumnMappings.Add("ExpiryMonth", "ExpiryMonth");
			bulkCopy.ColumnMappings.Add("ExpiryYear", "ExpiryYear");
			bulkCopy.ColumnMappings.Add("CVV", "CVV");
			
			foreach(JXTPortal.Entities.InvoiceOrder entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["OrderID"] = entity.OrderId;
							
				
					row["AdvertiserUserID"] = entity.AdvertiserUserId;
							
				
					row["CreatedDate"] = entity.CreatedDate;
							
				
					row["PaymentTypeID"] = entity.PaymentTypeId.HasValue ? (object) entity.PaymentTypeId  : System.DBNull.Value;
							
				
					row["IsPayable"] = entity.IsPayable;
							
				
					row["IsPaid"] = entity.IsPaid;
							
				
					row["DatePaid"] = entity.DatePaid.HasValue ? (object) entity.DatePaid  : System.DBNull.Value;
							
				
					row["PaidByAdvertiserUserID"] = entity.PaidByAdvertiserUserId.HasValue ? (object) entity.PaidByAdvertiserUserId  : System.DBNull.Value;
							
				
					row["TotalAmount"] = entity.TotalAmount;
							
				
					row["GST"] = entity.Gst;
							
				
					row["CurrencyID"] = entity.CurrencyId.HasValue ? (object) entity.CurrencyId  : System.DBNull.Value;
							
				
					row["DiscountAmount"] = entity.DiscountAmount.HasValue ? (object) entity.DiscountAmount  : System.DBNull.Value;
							
				
					row["DiscountGST"] = entity.DiscountGst.HasValue ? (object) entity.DiscountGst  : System.DBNull.Value;
							
				
					row["responseCode"] = entity.ResponseCode;
							
				
					row["responseText"] = entity.ResponseText;
							
				
					row["bankTransactionID"] = entity.BankTransactionId;
							
				
					row["ResponseXML"] = entity.ResponseXml;
							
				
					row["Success"] = entity.Success.HasValue ? (object) entity.Success  : System.DBNull.Value;
							
				
					row["CardName"] = entity.CardName;
							
				
					row["CardNumber"] = entity.CardNumber;
							
				
					row["ExpiryMonth"] = entity.ExpiryMonth.HasValue ? (object) entity.ExpiryMonth  : System.DBNull.Value;
							
				
					row["ExpiryYear"] = entity.ExpiryYear.HasValue ? (object) entity.ExpiryYear  : System.DBNull.Value;
							
				
					row["CVV"] = entity.Cvv;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(JXTPortal.Entities.InvoiceOrder entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a JXTPortal.Entities.InvoiceOrder object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">JXTPortal.Entities.InvoiceOrder object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the JXTPortal.Entities.InvoiceOrder object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, JXTPortal.Entities.InvoiceOrder entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@OrderId", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@AdvertiserUserId", DbType.Int32, entity.AdvertiserUserId );
			database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime, entity.CreatedDate );
			database.AddInParameter(commandWrapper, "@PaymentTypeId", DbType.Int32, (entity.PaymentTypeId.HasValue ? (object) entity.PaymentTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IsPayable", DbType.Boolean, entity.IsPayable );
			database.AddInParameter(commandWrapper, "@IsPaid", DbType.Boolean, entity.IsPaid );
			database.AddInParameter(commandWrapper, "@DatePaid", DbType.DateTime, (entity.DatePaid.HasValue ? (object) entity.DatePaid  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PaidByAdvertiserUserId", DbType.Int32, (entity.PaidByAdvertiserUserId.HasValue ? (object) entity.PaidByAdvertiserUserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TotalAmount", DbType.Decimal, entity.TotalAmount );
			database.AddInParameter(commandWrapper, "@Gst", DbType.Decimal, entity.Gst );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32, (entity.CurrencyId.HasValue ? (object) entity.CurrencyId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DiscountAmount", DbType.Decimal, (entity.DiscountAmount.HasValue ? (object) entity.DiscountAmount  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DiscountGst", DbType.Decimal, (entity.DiscountGst.HasValue ? (object) entity.DiscountGst  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ResponseCode", DbType.AnsiString, entity.ResponseCode );
			database.AddInParameter(commandWrapper, "@ResponseText", DbType.AnsiString, entity.ResponseText );
			database.AddInParameter(commandWrapper, "@BankTransactionId", DbType.AnsiString, entity.BankTransactionId );
			database.AddInParameter(commandWrapper, "@ResponseXml", DbType.AnsiString, entity.ResponseXml );
			database.AddInParameter(commandWrapper, "@Success", DbType.Int32, (entity.Success.HasValue ? (object) entity.Success  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CardName", DbType.String, entity.CardName );
			database.AddInParameter(commandWrapper, "@CardNumber", DbType.String, entity.CardNumber );
			database.AddInParameter(commandWrapper, "@ExpiryMonth", DbType.Int32, (entity.ExpiryMonth.HasValue ? (object) entity.ExpiryMonth  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ExpiryYear", DbType.Int32, (entity.ExpiryYear.HasValue ? (object) entity.ExpiryYear  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Cvv", DbType.AnsiString, entity.Cvv );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _orderId = database.GetParameterValue(commandWrapper, "@OrderId");
			entity.OrderId = (System.Int32)_orderId;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">JXTPortal.Entities.InvoiceOrder object to update.</param>
		/// <remarks>
		///		After updating the datasource, the JXTPortal.Entities.InvoiceOrder object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, JXTPortal.Entities.InvoiceOrder entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@OrderId", DbType.Int32, entity.OrderId );
			database.AddInParameter(commandWrapper, "@AdvertiserUserId", DbType.Int32, entity.AdvertiserUserId );
			database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime, entity.CreatedDate );
			database.AddInParameter(commandWrapper, "@PaymentTypeId", DbType.Int32, (entity.PaymentTypeId.HasValue ? (object) entity.PaymentTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IsPayable", DbType.Boolean, entity.IsPayable );
			database.AddInParameter(commandWrapper, "@IsPaid", DbType.Boolean, entity.IsPaid );
			database.AddInParameter(commandWrapper, "@DatePaid", DbType.DateTime, (entity.DatePaid.HasValue ? (object) entity.DatePaid : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PaidByAdvertiserUserId", DbType.Int32, (entity.PaidByAdvertiserUserId.HasValue ? (object) entity.PaidByAdvertiserUserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TotalAmount", DbType.Decimal, entity.TotalAmount );
			database.AddInParameter(commandWrapper, "@Gst", DbType.Decimal, entity.Gst );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32, (entity.CurrencyId.HasValue ? (object) entity.CurrencyId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DiscountAmount", DbType.Decimal, (entity.DiscountAmount.HasValue ? (object) entity.DiscountAmount : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DiscountGst", DbType.Decimal, (entity.DiscountGst.HasValue ? (object) entity.DiscountGst : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ResponseCode", DbType.AnsiString, entity.ResponseCode );
			database.AddInParameter(commandWrapper, "@ResponseText", DbType.AnsiString, entity.ResponseText );
			database.AddInParameter(commandWrapper, "@BankTransactionId", DbType.AnsiString, entity.BankTransactionId );
			database.AddInParameter(commandWrapper, "@ResponseXml", DbType.AnsiString, entity.ResponseXml );
			database.AddInParameter(commandWrapper, "@Success", DbType.Int32, (entity.Success.HasValue ? (object) entity.Success : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CardName", DbType.String, entity.CardName );
			database.AddInParameter(commandWrapper, "@CardNumber", DbType.String, entity.CardNumber );
			database.AddInParameter(commandWrapper, "@ExpiryMonth", DbType.Int32, (entity.ExpiryMonth.HasValue ? (object) entity.ExpiryMonth : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ExpiryYear", DbType.Int32, (entity.ExpiryYear.HasValue ? (object) entity.ExpiryYear : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Cvv", DbType.AnsiString, entity.Cvv );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region InvoiceOrder_Insert
					
		/// <summary>
		///	This method wraps the 'InvoiceOrder_Insert' stored procedure. 
		/// </summary>	
		/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="createdDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="paymentTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="isPayable"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="isPaid"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="datePaid"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="paidByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="totalAmount"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="gst"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="discountAmount"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="discountGst"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="responseCode"> A <c>System.String</c> instance.</param>
		/// <param name="responseText"> A <c>System.String</c> instance.</param>
		/// <param name="bankTransactionId"> A <c>System.String</c> instance.</param>
		/// <param name="responseXml"> A <c>System.String</c> instance.</param>
		/// <param name="success"> A <c>System.Int32?</c> instance.</param>
			/// <param name="orderId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Insert(TransactionManager transactionManager, int start, int pageLength , System.Int32? advertiserUserId, System.DateTime? createdDate, System.Int32? paymentTypeId, System.Boolean? isPayable, System.Boolean? isPaid, System.DateTime? datePaid, System.Int32? paidByAdvertiserUserId, System.Decimal? totalAmount, System.Decimal? gst, System.Int32? currencyId, System.Decimal? discountAmount, System.Decimal? discountGst, System.String responseCode, System.String responseText, System.String bankTransactionId, System.String responseXml, System.Int32? success, ref System.Int32? orderId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_Insert", true);
			
			database.AddInParameter(commandWrapper, "@AdvertiserUserId", DbType.Int32,  advertiserUserId );
			database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime,  createdDate );
			database.AddInParameter(commandWrapper, "@PaymentTypeId", DbType.Int32,  paymentTypeId );
			database.AddInParameter(commandWrapper, "@IsPayable", DbType.Boolean,  isPayable );
			database.AddInParameter(commandWrapper, "@IsPaid", DbType.Boolean,  isPaid );
			database.AddInParameter(commandWrapper, "@DatePaid", DbType.DateTime,  datePaid );
			database.AddInParameter(commandWrapper, "@PaidByAdvertiserUserId", DbType.Int32,  paidByAdvertiserUserId );
			database.AddInParameter(commandWrapper, "@TotalAmount", DbType.Decimal,  totalAmount );
			database.AddInParameter(commandWrapper, "@Gst", DbType.Decimal,  gst );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
			database.AddInParameter(commandWrapper, "@DiscountAmount", DbType.Decimal,  discountAmount );
			database.AddInParameter(commandWrapper, "@DiscountGst", DbType.Decimal,  discountGst );
			database.AddInParameter(commandWrapper, "@ResponseCode", DbType.AnsiString,  responseCode );
			database.AddInParameter(commandWrapper, "@ResponseText", DbType.AnsiString,  responseText );
			database.AddInParameter(commandWrapper, "@BankTransactionId", DbType.AnsiString,  bankTransactionId );
			database.AddInParameter(commandWrapper, "@ResponseXml", DbType.AnsiString,  responseXml );
			database.AddInParameter(commandWrapper, "@Success", DbType.Int32,  success );
	
			database.AddParameter(commandWrapper, "@OrderId", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, orderId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", (IEntity)null));

			orderId =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@OrderId"]);

				
				return;
		}
		#endregion

		#region InvoiceOrder_GetByAdvertiserUserId
					
		/// <summary>
		///	This method wraps the 'InvoiceOrder_GetByAdvertiserUserId' stored procedure. 
		/// </summary>	
		/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByAdvertiserUserId(TransactionManager transactionManager, int start, int pageLength , System.Int32? advertiserUserId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_GetByAdvertiserUserId", true);
			
			database.AddInParameter(commandWrapper, "@AdvertiserUserId", DbType.Int32,  advertiserUserId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdvertiserUserId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdvertiserUserId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region InvoiceOrder_GetByJobItemTypeId
					
		/// <summary>
		///	This method wraps the 'InvoiceOrder_GetByJobItemTypeId' stored procedure. 
		/// </summary>	
		/// <param name="jobItemTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetByJobItemTypeId(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobItemTypeId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_GetByJobItemTypeId", true);
			
			database.AddInParameter(commandWrapper, "@JobItemTypeId", DbType.Int32,  jobItemTypeId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByJobItemTypeId", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByJobItemTypeId", (IEntity)null));


				
				return;
		}
		#endregion

		#region InvoiceOrder_Get_List
					
		/// <summary>
		///	This method wraps the 'InvoiceOrder_Get_List' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Get_List(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_Get_List", true);
			
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Get_List", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Get_List", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region InvoiceOrder_GetPaged
					
		/// <summary>
		///	This method wraps the 'InvoiceOrder_GetPaged' stored procedure. 
		/// </summary>	
		/// <param name="whereClause"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetPaged(TransactionManager transactionManager, int start, int pageLength , System.String whereClause, System.String orderBy, System.Int32? pageIndex, System.Int32? pageSize)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_GetPaged", true);
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.AnsiString,  whereClause );
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.AnsiString,  orderBy );
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32,  pageIndex );
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32,  pageSize );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region InvoiceOrder_Find
					
		/// <summary>
		///	This method wraps the 'InvoiceOrder_Find' stored procedure. 
		/// </summary>	
		/// <param name="searchUsingOr"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="orderId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="createdDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="paymentTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="isPayable"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="isPaid"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="datePaid"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="paidByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="totalAmount"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="gst"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="discountAmount"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="discountGst"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="responseCode"> A <c>System.String</c> instance.</param>
		/// <param name="responseText"> A <c>System.String</c> instance.</param>
		/// <param name="bankTransactionId"> A <c>System.String</c> instance.</param>
		/// <param name="responseXml"> A <c>System.String</c> instance.</param>
		/// <param name="success"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Find(TransactionManager transactionManager, int start, int pageLength , System.Boolean? searchUsingOr, System.Int32? orderId, System.Int32? advertiserUserId, System.DateTime? createdDate, System.Int32? paymentTypeId, System.Boolean? isPayable, System.Boolean? isPaid, System.DateTime? datePaid, System.Int32? paidByAdvertiserUserId, System.Decimal? totalAmount, System.Decimal? gst, System.Int32? currencyId, System.Decimal? discountAmount, System.Decimal? discountGst, System.String responseCode, System.String responseText, System.String bankTransactionId, System.String responseXml, System.Int32? success)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_Find", true);
			
			database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean,  searchUsingOr );
			database.AddInParameter(commandWrapper, "@OrderId", DbType.Int32,  orderId );
			database.AddInParameter(commandWrapper, "@AdvertiserUserId", DbType.Int32,  advertiserUserId );
			database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime,  createdDate );
			database.AddInParameter(commandWrapper, "@PaymentTypeId", DbType.Int32,  paymentTypeId );
			database.AddInParameter(commandWrapper, "@IsPayable", DbType.Boolean,  isPayable );
			database.AddInParameter(commandWrapper, "@IsPaid", DbType.Boolean,  isPaid );
			database.AddInParameter(commandWrapper, "@DatePaid", DbType.DateTime,  datePaid );
			database.AddInParameter(commandWrapper, "@PaidByAdvertiserUserId", DbType.Int32,  paidByAdvertiserUserId );
			database.AddInParameter(commandWrapper, "@TotalAmount", DbType.Decimal,  totalAmount );
			database.AddInParameter(commandWrapper, "@Gst", DbType.Decimal,  gst );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
			database.AddInParameter(commandWrapper, "@DiscountAmount", DbType.Decimal,  discountAmount );
			database.AddInParameter(commandWrapper, "@DiscountGst", DbType.Decimal,  discountGst );
			database.AddInParameter(commandWrapper, "@ResponseCode", DbType.AnsiString,  responseCode );
			database.AddInParameter(commandWrapper, "@ResponseText", DbType.AnsiString,  responseText );
			database.AddInParameter(commandWrapper, "@BankTransactionId", DbType.AnsiString,  bankTransactionId );
			database.AddInParameter(commandWrapper, "@ResponseXml", DbType.AnsiString,  responseXml );
			database.AddInParameter(commandWrapper, "@Success", DbType.Int32,  success );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Find", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region InvoiceOrder_Delete
					
		/// <summary>
		///	This method wraps the 'InvoiceOrder_Delete' stored procedure. 
		/// </summary>	
		/// <param name="orderId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Delete(TransactionManager transactionManager, int start, int pageLength , System.Int32? orderId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_Delete", true);
			
			database.AddInParameter(commandWrapper, "@OrderId", DbType.Int32,  orderId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete", (IEntity)null));


				
				return;
		}
		#endregion

		#region InvoiceOrder_Update
					
		/// <summary>
		///	This method wraps the 'InvoiceOrder_Update' stored procedure. 
		/// </summary>	
		/// <param name="orderId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="createdDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="paymentTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="isPayable"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="isPaid"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="datePaid"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="paidByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="totalAmount"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="gst"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="discountAmount"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="discountGst"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="responseCode"> A <c>System.String</c> instance.</param>
		/// <param name="responseText"> A <c>System.String</c> instance.</param>
		/// <param name="bankTransactionId"> A <c>System.String</c> instance.</param>
		/// <param name="responseXml"> A <c>System.String</c> instance.</param>
		/// <param name="success"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Update(TransactionManager transactionManager, int start, int pageLength , System.Int32? orderId, System.Int32? advertiserUserId, System.DateTime? createdDate, System.Int32? paymentTypeId, System.Boolean? isPayable, System.Boolean? isPaid, System.DateTime? datePaid, System.Int32? paidByAdvertiserUserId, System.Decimal? totalAmount, System.Decimal? gst, System.Int32? currencyId, System.Decimal? discountAmount, System.Decimal? discountGst, System.String responseCode, System.String responseText, System.String bankTransactionId, System.String responseXml, System.Int32? success)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_Update", true);
			
			database.AddInParameter(commandWrapper, "@OrderId", DbType.Int32,  orderId );
			database.AddInParameter(commandWrapper, "@AdvertiserUserId", DbType.Int32,  advertiserUserId );
			database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime,  createdDate );
			database.AddInParameter(commandWrapper, "@PaymentTypeId", DbType.Int32,  paymentTypeId );
			database.AddInParameter(commandWrapper, "@IsPayable", DbType.Boolean,  isPayable );
			database.AddInParameter(commandWrapper, "@IsPaid", DbType.Boolean,  isPaid );
			database.AddInParameter(commandWrapper, "@DatePaid", DbType.DateTime,  datePaid );
			database.AddInParameter(commandWrapper, "@PaidByAdvertiserUserId", DbType.Int32,  paidByAdvertiserUserId );
			database.AddInParameter(commandWrapper, "@TotalAmount", DbType.Decimal,  totalAmount );
			database.AddInParameter(commandWrapper, "@Gst", DbType.Decimal,  gst );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
			database.AddInParameter(commandWrapper, "@DiscountAmount", DbType.Decimal,  discountAmount );
			database.AddInParameter(commandWrapper, "@DiscountGst", DbType.Decimal,  discountGst );
			database.AddInParameter(commandWrapper, "@ResponseCode", DbType.AnsiString,  responseCode );
			database.AddInParameter(commandWrapper, "@ResponseText", DbType.AnsiString,  responseText );
			database.AddInParameter(commandWrapper, "@BankTransactionId", DbType.AnsiString,  bankTransactionId );
			database.AddInParameter(commandWrapper, "@ResponseXml", DbType.AnsiString,  responseXml );
			database.AddInParameter(commandWrapper, "@Success", DbType.Int32,  success );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", (IEntity)null));


				
				return;
		}
		#endregion

		#region InvoiceOrder_GetByOrderId
					
		/// <summary>
		///	This method wraps the 'InvoiceOrder_GetByOrderId' stored procedure. 
		/// </summary>	
		/// <param name="orderId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByOrderId(TransactionManager transactionManager, int start, int pageLength , System.Int32? orderId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.InvoiceOrder_GetByOrderId", true);
			
			database.AddInParameter(commandWrapper, "@OrderId", DbType.Int32,  orderId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByOrderId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByOrderId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion
		#endregion
	}//end class
} // end namespace

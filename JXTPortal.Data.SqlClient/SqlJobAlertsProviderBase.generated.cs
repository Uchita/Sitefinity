
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlJobAlertsProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using JXTPortal.Entities;
using JXTPortal.Data;
using JXTPortal.Data.Bases;

#endregion

namespace JXTPortal.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="JobAlerts"/> entity.
	///</summary>
	public abstract partial class SqlJobAlertsProviderBase : JobAlertsProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlJobAlertsProviderBase"/> instance.
		/// </summary>
		public SqlJobAlertsProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlJobAlertsProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlJobAlertsProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_jobAlertId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _jobAlertId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@JobAlertId", DbType.Int32, _jobAlertId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(JobAlerts)
					,_jobAlertId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.JobAlerts objects.</returns>
		public override TList<JobAlerts> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<JobAlerts>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@JobAlertId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobAlertName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SearchKeywords", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RecurrenceType", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DailyFrequency", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WeeklyFrequency", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WeeklyDayOccurence", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DateLastRun", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DateNextRun", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AlertActive", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EmailFormat", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CustomRecurrenceType", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastResultCount", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrimaryAlert", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UnsubscribeValidateId", DbType.Guid, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EditValidateId", DbType.Guid, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ViewValidateId", DbType.Guid, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LocationId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AreaIds", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProfessionId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SearchRoleIds", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WorkTypeIds", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SalaryIds", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DaysPosted", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GeneratedSql", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CountryId", DbType.AnsiString, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("jobalertid ") || clause.Trim().StartsWith("jobalertid="))
				{
					database.SetParameterValue(commandWrapper, "@JobAlertId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobalertname ") || clause.Trim().StartsWith("jobalertname="))
				{
					database.SetParameterValue(commandWrapper, "@JobAlertName", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastmodified ") || clause.Trim().StartsWith("lastmodified="))
				{
					database.SetParameterValue(commandWrapper, "@LastModified", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("searchkeywords ") || clause.Trim().StartsWith("searchkeywords="))
				{
					database.SetParameterValue(commandWrapper, "@SearchKeywords", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("recurrencetype ") || clause.Trim().StartsWith("recurrencetype="))
				{
					database.SetParameterValue(commandWrapper, "@RecurrenceType", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dailyfrequency ") || clause.Trim().StartsWith("dailyfrequency="))
				{
					database.SetParameterValue(commandWrapper, "@DailyFrequency", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("weeklyfrequency ") || clause.Trim().StartsWith("weeklyfrequency="))
				{
					database.SetParameterValue(commandWrapper, "@WeeklyFrequency", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("weeklydayoccurence ") || clause.Trim().StartsWith("weeklydayoccurence="))
				{
					database.SetParameterValue(commandWrapper, "@WeeklyDayOccurence", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("datelastrun ") || clause.Trim().StartsWith("datelastrun="))
				{
					database.SetParameterValue(commandWrapper, "@DateLastRun", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("datenextrun ") || clause.Trim().StartsWith("datenextrun="))
				{
					database.SetParameterValue(commandWrapper, "@DateNextRun", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("memberid ") || clause.Trim().StartsWith("memberid="))
				{
					database.SetParameterValue(commandWrapper, "@MemberId", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("alertactive ") || clause.Trim().StartsWith("alertactive="))
				{
					database.SetParameterValue(commandWrapper, "@AlertActive", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("emailformat ") || clause.Trim().StartsWith("emailformat="))
				{
					database.SetParameterValue(commandWrapper, "@EmailFormat", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("customrecurrencetype ") || clause.Trim().StartsWith("customrecurrencetype="))
				{
					database.SetParameterValue(commandWrapper, "@CustomRecurrenceType", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastresultcount ") || clause.Trim().StartsWith("lastresultcount="))
				{
					database.SetParameterValue(commandWrapper, "@LastResultCount", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("primaryalert ") || clause.Trim().StartsWith("primaryalert="))
				{
					database.SetParameterValue(commandWrapper, "@PrimaryAlert", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("unsubscribevalidateid ") || clause.Trim().StartsWith("unsubscribevalidateid="))
				{
					database.SetParameterValue(commandWrapper, "@UnsubscribeValidateId", new Guid(
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
				if (clause.Trim().StartsWith("editvalidateid ") || clause.Trim().StartsWith("editvalidateid="))
				{
					database.SetParameterValue(commandWrapper, "@EditValidateId", new Guid(
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
				if (clause.Trim().StartsWith("viewvalidateid ") || clause.Trim().StartsWith("viewvalidateid="))
				{
					database.SetParameterValue(commandWrapper, "@ViewValidateId", new Guid(
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
				if (clause.Trim().StartsWith("siteid ") || clause.Trim().StartsWith("siteid="))
				{
					database.SetParameterValue(commandWrapper, "@SiteId", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("locationid ") || clause.Trim().StartsWith("locationid="))
				{
					database.SetParameterValue(commandWrapper, "@LocationId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("areaids ") || clause.Trim().StartsWith("areaids="))
				{
					database.SetParameterValue(commandWrapper, "@AreaIds", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("professionid ") || clause.Trim().StartsWith("professionid="))
				{
					database.SetParameterValue(commandWrapper, "@ProfessionId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("searchroleids ") || clause.Trim().StartsWith("searchroleids="))
				{
					database.SetParameterValue(commandWrapper, "@SearchRoleIds", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("worktypeids ") || clause.Trim().StartsWith("worktypeids="))
				{
					database.SetParameterValue(commandWrapper, "@WorkTypeIds", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("salaryids ") || clause.Trim().StartsWith("salaryids="))
				{
					database.SetParameterValue(commandWrapper, "@SalaryIds", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("daysposted ") || clause.Trim().StartsWith("daysposted="))
				{
					database.SetParameterValue(commandWrapper, "@DaysPosted", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("generatedsql ") || clause.Trim().StartsWith("generatedsql="))
				{
					database.SetParameterValue(commandWrapper, "@GeneratedSql", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("salarylowerband ") || clause.Trim().StartsWith("salarylowerband="))
				{
					database.SetParameterValue(commandWrapper, "@SalaryLowerBand", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("salaryupperband ") || clause.Trim().StartsWith("salaryupperband="))
				{
					database.SetParameterValue(commandWrapper, "@SalaryUpperBand", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("currencyid ") || clause.Trim().StartsWith("currencyid="))
				{
					database.SetParameterValue(commandWrapper, "@CurrencyId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("salarytypeid ") || clause.Trim().StartsWith("salarytypeid="))
				{
					database.SetParameterValue(commandWrapper, "@SalaryTypeId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("countryid ") || clause.Trim().StartsWith("countryid="))
				{
					database.SetParameterValue(commandWrapper, "@CountryId", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<JobAlerts> rows = new TList<JobAlerts>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of JXTPortal.Entities.JobAlerts objects.</returns>
		public override TList<JobAlerts> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_Find_Dynamic", typeof(JobAlertsColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<JobAlerts> rows = new TList<JobAlerts>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.JobAlerts objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<JobAlerts> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<JobAlerts> rows = new TList<JobAlerts>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.JobAlerts objects.</returns>
		public override TList<JobAlerts> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<JobAlerts> rows = new TList<JobAlerts>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByCurrencyId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__JobAlerts__Curre__4FD2D2E9 key.
		///		FK__JobAlerts__Curre__4FD2D2E9 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_currencyId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.JobAlerts objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<JobAlerts> GetByCurrencyId(TransactionManager transactionManager, System.Int32? _currencyId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_GetByCurrencyId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32, _currencyId);
			
			IDataReader reader = null;
			TList<JobAlerts> rows = new TList<JobAlerts>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCurrencyId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCurrencyId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMemberId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__JobAlerts__Membe__1D07F587 key.
		///		FK__JobAlerts__Membe__1D07F587 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_memberId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.JobAlerts objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<JobAlerts> GetByMemberId(TransactionManager transactionManager, System.Int32 _memberId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_GetByMemberId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32, _memberId);
			
			IDataReader reader = null;
			TList<JobAlerts> rows = new TList<JobAlerts>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMemberId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMemberId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySalaryTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__JobAlerts__Salar__50C6F722 key.
		///		FK__JobAlerts__Salar__50C6F722 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_salaryTypeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.JobAlerts objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<JobAlerts> GetBySalaryTypeId(TransactionManager transactionManager, System.Int32? _salaryTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_GetBySalaryTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32, _salaryTypeId);
			
			IDataReader reader = null;
			TList<JobAlerts> rows = new TList<JobAlerts>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySalaryTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySalaryTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySiteId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__JobAlerts__SiteI__1EF03DF9 key.
		///		FK__JobAlerts__SiteI__1EF03DF9 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_siteId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.JobAlerts objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<JobAlerts> GetBySiteId(TransactionManager transactionManager, System.Int32 _siteId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_GetBySiteId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, _siteId);
			
			IDataReader reader = null;
			TList<JobAlerts> rows = new TList<JobAlerts>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByJobAlertId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK__JobAlerts__1B1FAD15 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_jobAlertId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="JXTPortal.Entities.JobAlerts"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override JXTPortal.Entities.JobAlerts GetByJobAlertId(TransactionManager transactionManager, System.Int32 _jobAlertId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_GetByJobAlertId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@JobAlertId", DbType.Int32, _jobAlertId);
			
			IDataReader reader = null;
			TList<JobAlerts> tmp = new TList<JobAlerts>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByJobAlertId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByJobAlertId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the JXTPortal.Entities.JobAlerts object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<JXTPortal.Entities.JobAlerts> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "JobAlerts";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("JobAlertID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("JobAlertName", typeof(System.String));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("LastModified", typeof(System.DateTime));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("SearchKeywords", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("RecurrenceType", typeof(System.Int32));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("DailyFrequency", typeof(System.Int32));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("WeeklyFrequency", typeof(System.Int32));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("WeeklyDayOccurence", typeof(System.Int32));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("DateLastRun", typeof(System.DateTime));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("DateNextRun", typeof(System.DateTime));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("MemberID", typeof(System.Int32));
			col10.AllowDBNull = false;		
			DataColumn col11 = dataTable.Columns.Add("AlertActive", typeof(System.Boolean));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("EmailFormat", typeof(System.Int32));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("CustomRecurrenceType", typeof(System.Int32));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("LastResultCount", typeof(System.Int32));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("PrimaryAlert", typeof(System.Boolean));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("UnsubscribeValidateID", typeof(System.Guid));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("EditValidateID", typeof(System.Guid));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("ViewValidateID", typeof(System.Guid));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("SiteID", typeof(System.Int32));
			col19.AllowDBNull = false;		
			DataColumn col20 = dataTable.Columns.Add("LocationID", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("AreaIDs", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("ProfessionID", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("SearchRoleIDs", typeof(System.String));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("WorkTypeIDs", typeof(System.String));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("SalaryIDs", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("DaysPosted", typeof(System.Int32));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("GeneratedSQL", typeof(System.String));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("SalaryLowerBand", typeof(System.Decimal));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("SalaryUpperBand", typeof(System.Decimal));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("CurrencyID", typeof(System.Int32));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("SalaryTypeID", typeof(System.Int32));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("CountryID", typeof(System.String));
			col32.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("JobAlertID", "JobAlertID");
			bulkCopy.ColumnMappings.Add("JobAlertName", "JobAlertName");
			bulkCopy.ColumnMappings.Add("LastModified", "LastModified");
			bulkCopy.ColumnMappings.Add("SearchKeywords", "SearchKeywords");
			bulkCopy.ColumnMappings.Add("RecurrenceType", "RecurrenceType");
			bulkCopy.ColumnMappings.Add("DailyFrequency", "DailyFrequency");
			bulkCopy.ColumnMappings.Add("WeeklyFrequency", "WeeklyFrequency");
			bulkCopy.ColumnMappings.Add("WeeklyDayOccurence", "WeeklyDayOccurence");
			bulkCopy.ColumnMappings.Add("DateLastRun", "DateLastRun");
			bulkCopy.ColumnMappings.Add("DateNextRun", "DateNextRun");
			bulkCopy.ColumnMappings.Add("MemberID", "MemberID");
			bulkCopy.ColumnMappings.Add("AlertActive", "AlertActive");
			bulkCopy.ColumnMappings.Add("EmailFormat", "EmailFormat");
			bulkCopy.ColumnMappings.Add("CustomRecurrenceType", "CustomRecurrenceType");
			bulkCopy.ColumnMappings.Add("LastResultCount", "LastResultCount");
			bulkCopy.ColumnMappings.Add("PrimaryAlert", "PrimaryAlert");
			bulkCopy.ColumnMappings.Add("UnsubscribeValidateID", "UnsubscribeValidateID");
			bulkCopy.ColumnMappings.Add("EditValidateID", "EditValidateID");
			bulkCopy.ColumnMappings.Add("ViewValidateID", "ViewValidateID");
			bulkCopy.ColumnMappings.Add("SiteID", "SiteID");
			bulkCopy.ColumnMappings.Add("LocationID", "LocationID");
			bulkCopy.ColumnMappings.Add("AreaIDs", "AreaIDs");
			bulkCopy.ColumnMappings.Add("ProfessionID", "ProfessionID");
			bulkCopy.ColumnMappings.Add("SearchRoleIDs", "SearchRoleIDs");
			bulkCopy.ColumnMappings.Add("WorkTypeIDs", "WorkTypeIDs");
			bulkCopy.ColumnMappings.Add("SalaryIDs", "SalaryIDs");
			bulkCopy.ColumnMappings.Add("DaysPosted", "DaysPosted");
			bulkCopy.ColumnMappings.Add("GeneratedSQL", "GeneratedSQL");
			bulkCopy.ColumnMappings.Add("SalaryLowerBand", "SalaryLowerBand");
			bulkCopy.ColumnMappings.Add("SalaryUpperBand", "SalaryUpperBand");
			bulkCopy.ColumnMappings.Add("CurrencyID", "CurrencyID");
			bulkCopy.ColumnMappings.Add("SalaryTypeID", "SalaryTypeID");
			bulkCopy.ColumnMappings.Add("CountryID", "CountryID");
			
			foreach(JXTPortal.Entities.JobAlerts entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["JobAlertID"] = entity.JobAlertId;
							
				
					row["JobAlertName"] = entity.JobAlertName;
							
				
					row["LastModified"] = entity.LastModified;
							
				
					row["SearchKeywords"] = entity.SearchKeywords;
							
				
					row["RecurrenceType"] = entity.RecurrenceType.HasValue ? (object) entity.RecurrenceType  : System.DBNull.Value;
							
				
					row["DailyFrequency"] = entity.DailyFrequency.HasValue ? (object) entity.DailyFrequency  : System.DBNull.Value;
							
				
					row["WeeklyFrequency"] = entity.WeeklyFrequency.HasValue ? (object) entity.WeeklyFrequency  : System.DBNull.Value;
							
				
					row["WeeklyDayOccurence"] = entity.WeeklyDayOccurence.HasValue ? (object) entity.WeeklyDayOccurence  : System.DBNull.Value;
							
				
					row["DateLastRun"] = entity.DateLastRun.HasValue ? (object) entity.DateLastRun  : System.DBNull.Value;
							
				
					row["DateNextRun"] = entity.DateNextRun.HasValue ? (object) entity.DateNextRun  : System.DBNull.Value;
							
				
					row["MemberID"] = entity.MemberId;
							
				
					row["AlertActive"] = entity.AlertActive.HasValue ? (object) entity.AlertActive  : System.DBNull.Value;
							
				
					row["EmailFormat"] = entity.EmailFormat.HasValue ? (object) entity.EmailFormat  : System.DBNull.Value;
							
				
					row["CustomRecurrenceType"] = entity.CustomRecurrenceType.HasValue ? (object) entity.CustomRecurrenceType  : System.DBNull.Value;
							
				
					row["LastResultCount"] = entity.LastResultCount.HasValue ? (object) entity.LastResultCount  : System.DBNull.Value;
							
				
					row["PrimaryAlert"] = entity.PrimaryAlert.HasValue ? (object) entity.PrimaryAlert  : System.DBNull.Value;
							
				
					row["UnsubscribeValidateID"] = entity.UnsubscribeValidateId.HasValue ? (object) entity.UnsubscribeValidateId  : System.DBNull.Value;
							
				
					row["EditValidateID"] = entity.EditValidateId.HasValue ? (object) entity.EditValidateId  : System.DBNull.Value;
							
				
					row["ViewValidateID"] = entity.ViewValidateId.HasValue ? (object) entity.ViewValidateId  : System.DBNull.Value;
							
				
					row["SiteID"] = entity.SiteId;
							
				
					row["LocationID"] = entity.LocationId;
							
				
					row["AreaIDs"] = entity.AreaIds;
							
				
					row["ProfessionID"] = entity.ProfessionId;
							
				
					row["SearchRoleIDs"] = entity.SearchRoleIds;
							
				
					row["WorkTypeIDs"] = entity.WorkTypeIds;
							
				
					row["SalaryIDs"] = entity.SalaryIds;
							
				
					row["DaysPosted"] = entity.DaysPosted.HasValue ? (object) entity.DaysPosted  : System.DBNull.Value;
							
				
					row["GeneratedSQL"] = entity.GeneratedSql;
							
				
					row["SalaryLowerBand"] = entity.SalaryLowerBand.HasValue ? (object) entity.SalaryLowerBand  : System.DBNull.Value;
							
				
					row["SalaryUpperBand"] = entity.SalaryUpperBand.HasValue ? (object) entity.SalaryUpperBand  : System.DBNull.Value;
							
				
					row["CurrencyID"] = entity.CurrencyId.HasValue ? (object) entity.CurrencyId  : System.DBNull.Value;
							
				
					row["SalaryTypeID"] = entity.SalaryTypeId.HasValue ? (object) entity.SalaryTypeId  : System.DBNull.Value;
							
				
					row["CountryID"] = entity.CountryId;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(JXTPortal.Entities.JobAlerts entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a JXTPortal.Entities.JobAlerts object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">JXTPortal.Entities.JobAlerts object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the JXTPortal.Entities.JobAlerts object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, JXTPortal.Entities.JobAlerts entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@JobAlertId", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@JobAlertName", DbType.String, entity.JobAlertName );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, entity.LastModified );
			database.AddInParameter(commandWrapper, "@SearchKeywords", DbType.AnsiString, entity.SearchKeywords );
			database.AddInParameter(commandWrapper, "@RecurrenceType", DbType.Int32, (entity.RecurrenceType.HasValue ? (object) entity.RecurrenceType  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DailyFrequency", DbType.Int32, (entity.DailyFrequency.HasValue ? (object) entity.DailyFrequency  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WeeklyFrequency", DbType.Int32, (entity.WeeklyFrequency.HasValue ? (object) entity.WeeklyFrequency  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WeeklyDayOccurence", DbType.Int32, (entity.WeeklyDayOccurence.HasValue ? (object) entity.WeeklyDayOccurence  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DateLastRun", DbType.DateTime, (entity.DateLastRun.HasValue ? (object) entity.DateLastRun  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DateNextRun", DbType.DateTime, (entity.DateNextRun.HasValue ? (object) entity.DateNextRun  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32, entity.MemberId );
			database.AddInParameter(commandWrapper, "@AlertActive", DbType.Boolean, (entity.AlertActive.HasValue ? (object) entity.AlertActive  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EmailFormat", DbType.Int32, (entity.EmailFormat.HasValue ? (object) entity.EmailFormat  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CustomRecurrenceType", DbType.Int32, (entity.CustomRecurrenceType.HasValue ? (object) entity.CustomRecurrenceType  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastResultCount", DbType.Int32, (entity.LastResultCount.HasValue ? (object) entity.LastResultCount  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PrimaryAlert", DbType.Boolean, (entity.PrimaryAlert.HasValue ? (object) entity.PrimaryAlert  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@UnsubscribeValidateId", DbType.Guid, (entity.UnsubscribeValidateId.HasValue ? (object) entity.UnsubscribeValidateId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EditValidateId", DbType.Guid, (entity.EditValidateId.HasValue ? (object) entity.EditValidateId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ViewValidateId", DbType.Guid, (entity.ViewValidateId.HasValue ? (object) entity.ViewValidateId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, entity.SiteId );
			database.AddInParameter(commandWrapper, "@LocationId", DbType.AnsiString, entity.LocationId );
			database.AddInParameter(commandWrapper, "@AreaIds", DbType.AnsiString, entity.AreaIds );
			database.AddInParameter(commandWrapper, "@ProfessionId", DbType.AnsiString, entity.ProfessionId );
			database.AddInParameter(commandWrapper, "@SearchRoleIds", DbType.AnsiString, entity.SearchRoleIds );
			database.AddInParameter(commandWrapper, "@WorkTypeIds", DbType.AnsiString, entity.WorkTypeIds );
			database.AddInParameter(commandWrapper, "@SalaryIds", DbType.AnsiString, entity.SalaryIds );
			database.AddInParameter(commandWrapper, "@DaysPosted", DbType.Int32, (entity.DaysPosted.HasValue ? (object) entity.DaysPosted  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GeneratedSql", DbType.AnsiString, entity.GeneratedSql );
			database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal, (entity.SalaryLowerBand.HasValue ? (object) entity.SalaryLowerBand  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal, (entity.SalaryUpperBand.HasValue ? (object) entity.SalaryUpperBand  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32, (entity.CurrencyId.HasValue ? (object) entity.CurrencyId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32, (entity.SalaryTypeId.HasValue ? (object) entity.SalaryTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CountryId", DbType.AnsiString, entity.CountryId );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _jobAlertId = database.GetParameterValue(commandWrapper, "@JobAlertId");
			entity.JobAlertId = (System.Int32)_jobAlertId;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">JXTPortal.Entities.JobAlerts object to update.</param>
		/// <remarks>
		///		After updating the datasource, the JXTPortal.Entities.JobAlerts object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, JXTPortal.Entities.JobAlerts entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@JobAlertId", DbType.Int32, entity.JobAlertId );
			database.AddInParameter(commandWrapper, "@JobAlertName", DbType.String, entity.JobAlertName );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, entity.LastModified );
			database.AddInParameter(commandWrapper, "@SearchKeywords", DbType.AnsiString, entity.SearchKeywords );
			database.AddInParameter(commandWrapper, "@RecurrenceType", DbType.Int32, (entity.RecurrenceType.HasValue ? (object) entity.RecurrenceType : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DailyFrequency", DbType.Int32, (entity.DailyFrequency.HasValue ? (object) entity.DailyFrequency : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WeeklyFrequency", DbType.Int32, (entity.WeeklyFrequency.HasValue ? (object) entity.WeeklyFrequency : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WeeklyDayOccurence", DbType.Int32, (entity.WeeklyDayOccurence.HasValue ? (object) entity.WeeklyDayOccurence : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DateLastRun", DbType.DateTime, (entity.DateLastRun.HasValue ? (object) entity.DateLastRun : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DateNextRun", DbType.DateTime, (entity.DateNextRun.HasValue ? (object) entity.DateNextRun : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32, entity.MemberId );
			database.AddInParameter(commandWrapper, "@AlertActive", DbType.Boolean, (entity.AlertActive.HasValue ? (object) entity.AlertActive : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EmailFormat", DbType.Int32, (entity.EmailFormat.HasValue ? (object) entity.EmailFormat : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CustomRecurrenceType", DbType.Int32, (entity.CustomRecurrenceType.HasValue ? (object) entity.CustomRecurrenceType : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastResultCount", DbType.Int32, (entity.LastResultCount.HasValue ? (object) entity.LastResultCount : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PrimaryAlert", DbType.Boolean, (entity.PrimaryAlert.HasValue ? (object) entity.PrimaryAlert : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@UnsubscribeValidateId", DbType.Guid, (entity.UnsubscribeValidateId.HasValue ? (object) entity.UnsubscribeValidateId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EditValidateId", DbType.Guid, (entity.EditValidateId.HasValue ? (object) entity.EditValidateId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ViewValidateId", DbType.Guid, (entity.ViewValidateId.HasValue ? (object) entity.ViewValidateId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, entity.SiteId );
			database.AddInParameter(commandWrapper, "@LocationId", DbType.AnsiString, entity.LocationId );
			database.AddInParameter(commandWrapper, "@AreaIds", DbType.AnsiString, entity.AreaIds );
			database.AddInParameter(commandWrapper, "@ProfessionId", DbType.AnsiString, entity.ProfessionId );
			database.AddInParameter(commandWrapper, "@SearchRoleIds", DbType.AnsiString, entity.SearchRoleIds );
			database.AddInParameter(commandWrapper, "@WorkTypeIds", DbType.AnsiString, entity.WorkTypeIds );
			database.AddInParameter(commandWrapper, "@SalaryIds", DbType.AnsiString, entity.SalaryIds );
			database.AddInParameter(commandWrapper, "@DaysPosted", DbType.Int32, (entity.DaysPosted.HasValue ? (object) entity.DaysPosted : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GeneratedSql", DbType.AnsiString, entity.GeneratedSql );
			database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal, (entity.SalaryLowerBand.HasValue ? (object) entity.SalaryLowerBand : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal, (entity.SalaryUpperBand.HasValue ? (object) entity.SalaryUpperBand : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32, (entity.CurrencyId.HasValue ? (object) entity.CurrencyId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32, (entity.SalaryTypeId.HasValue ? (object) entity.SalaryTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CountryId", DbType.AnsiString, entity.CountryId );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region JobAlerts_GetByProfessionId
					
		/// <summary>
		///	This method wraps the 'JobAlerts_GetByProfessionId' stored procedure. 
		/// </summary>	
		/// <param name="professionId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByProfessionId(TransactionManager transactionManager, int start, int pageLength , System.String professionId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_GetByProfessionId", true);
			
			database.AddInParameter(commandWrapper, "@ProfessionId", DbType.AnsiString,  professionId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByProfessionId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByProfessionId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobAlerts_GetByJobAlertId
					
		/// <summary>
		///	This method wraps the 'JobAlerts_GetByJobAlertId' stored procedure. 
		/// </summary>	
		/// <param name="jobAlertId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByJobAlertId(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobAlertId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_GetByJobAlertId", true);
			
			database.AddInParameter(commandWrapper, "@JobAlertId", DbType.Int32,  jobAlertId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByJobAlertId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByJobAlertId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobAlerts_Insert
					
		/// <summary>
		///	This method wraps the 'JobAlerts_Insert' stored procedure. 
		/// </summary>	
		/// <param name="jobAlertName"> A <c>System.String</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="searchKeywords"> A <c>System.String</c> instance.</param>
		/// <param name="recurrenceType"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dailyFrequency"> A <c>System.Int32?</c> instance.</param>
		/// <param name="weeklyFrequency"> A <c>System.Int32?</c> instance.</param>
		/// <param name="weeklyDayOccurence"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dateLastRun"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="dateNextRun"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="alertActive"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="emailFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="customRecurrenceType"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastResultCount"> A <c>System.Int32?</c> instance.</param>
		/// <param name="primaryAlert"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="unsubscribeValidateId"> A <c>System.Guid?</c> instance.</param>
		/// <param name="editValidateId"> A <c>System.Guid?</c> instance.</param>
		/// <param name="viewValidateId"> A <c>System.Guid?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="locationId"> A <c>System.String</c> instance.</param>
		/// <param name="areaIds"> A <c>System.String</c> instance.</param>
		/// <param name="professionId"> A <c>System.String</c> instance.</param>
		/// <param name="searchRoleIds"> A <c>System.String</c> instance.</param>
		/// <param name="workTypeIds"> A <c>System.String</c> instance.</param>
		/// <param name="salaryIds"> A <c>System.String</c> instance.</param>
		/// <param name="daysPosted"> A <c>System.Int32?</c> instance.</param>
		/// <param name="generatedSql"> A <c>System.String</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="countryId"> A <c>System.String</c> instance.</param>
			/// <param name="jobAlertId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Insert(TransactionManager transactionManager, int start, int pageLength , System.String jobAlertName, System.DateTime? lastModified, System.String searchKeywords, System.Int32? recurrenceType, System.Int32? dailyFrequency, System.Int32? weeklyFrequency, System.Int32? weeklyDayOccurence, System.DateTime? dateLastRun, System.DateTime? dateNextRun, System.Int32? memberId, System.Boolean? alertActive, System.Int32? emailFormat, System.Int32? customRecurrenceType, System.Int32? lastResultCount, System.Boolean? primaryAlert, System.Guid? unsubscribeValidateId, System.Guid? editValidateId, System.Guid? viewValidateId, System.Int32? siteId, System.String locationId, System.String areaIds, System.String professionId, System.String searchRoleIds, System.String workTypeIds, System.String salaryIds, System.Int32? daysPosted, System.String generatedSql, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? currencyId, System.Int32? salaryTypeId, System.String countryId, ref System.Int32? jobAlertId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_Insert", true);
			
			database.AddInParameter(commandWrapper, "@JobAlertName", DbType.String,  jobAlertName );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime,  lastModified );
			database.AddInParameter(commandWrapper, "@SearchKeywords", DbType.AnsiString,  searchKeywords );
			database.AddInParameter(commandWrapper, "@RecurrenceType", DbType.Int32,  recurrenceType );
			database.AddInParameter(commandWrapper, "@DailyFrequency", DbType.Int32,  dailyFrequency );
			database.AddInParameter(commandWrapper, "@WeeklyFrequency", DbType.Int32,  weeklyFrequency );
			database.AddInParameter(commandWrapper, "@WeeklyDayOccurence", DbType.Int32,  weeklyDayOccurence );
			database.AddInParameter(commandWrapper, "@DateLastRun", DbType.DateTime,  dateLastRun );
			database.AddInParameter(commandWrapper, "@DateNextRun", DbType.DateTime,  dateNextRun );
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32,  memberId );
			database.AddInParameter(commandWrapper, "@AlertActive", DbType.Boolean,  alertActive );
			database.AddInParameter(commandWrapper, "@EmailFormat", DbType.Int32,  emailFormat );
			database.AddInParameter(commandWrapper, "@CustomRecurrenceType", DbType.Int32,  customRecurrenceType );
			database.AddInParameter(commandWrapper, "@LastResultCount", DbType.Int32,  lastResultCount );
			database.AddInParameter(commandWrapper, "@PrimaryAlert", DbType.Boolean,  primaryAlert );
			database.AddInParameter(commandWrapper, "@UnsubscribeValidateId", DbType.Guid,  unsubscribeValidateId );
			database.AddInParameter(commandWrapper, "@EditValidateId", DbType.Guid,  editValidateId );
			database.AddInParameter(commandWrapper, "@ViewValidateId", DbType.Guid,  viewValidateId );
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@LocationId", DbType.AnsiString,  locationId );
			database.AddInParameter(commandWrapper, "@AreaIds", DbType.AnsiString,  areaIds );
			database.AddInParameter(commandWrapper, "@ProfessionId", DbType.AnsiString,  professionId );
			database.AddInParameter(commandWrapper, "@SearchRoleIds", DbType.AnsiString,  searchRoleIds );
			database.AddInParameter(commandWrapper, "@WorkTypeIds", DbType.AnsiString,  workTypeIds );
			database.AddInParameter(commandWrapper, "@SalaryIds", DbType.AnsiString,  salaryIds );
			database.AddInParameter(commandWrapper, "@DaysPosted", DbType.Int32,  daysPosted );
			database.AddInParameter(commandWrapper, "@GeneratedSql", DbType.AnsiString,  generatedSql );
			database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal,  salaryLowerBand );
			database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal,  salaryUpperBand );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
			database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32,  salaryTypeId );
			database.AddInParameter(commandWrapper, "@CountryId", DbType.AnsiString,  countryId );
	
			database.AddParameter(commandWrapper, "@JobAlertId", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, jobAlertId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", (IEntity)null));

			jobAlertId =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@JobAlertId"]);

				
				return;
		}
		#endregion

		#region JobAlerts_GetByMemberId
					
		/// <summary>
		///	This method wraps the 'JobAlerts_GetByMemberId' stored procedure. 
		/// </summary>	
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByMemberId(TransactionManager transactionManager, int start, int pageLength , System.Int32? memberId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_GetByMemberId", true);
			
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32,  memberId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMemberId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMemberId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobAlerts_GetByLocationId
					
		/// <summary>
		///	This method wraps the 'JobAlerts_GetByLocationId' stored procedure. 
		/// </summary>	
		/// <param name="locationId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByLocationId(TransactionManager transactionManager, int start, int pageLength , System.String locationId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_GetByLocationId", true);
			
			database.AddInParameter(commandWrapper, "@LocationId", DbType.AnsiString,  locationId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByLocationId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByLocationId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobAlerts_Get_List
					
		/// <summary>
		///	This method wraps the 'JobAlerts_Get_List' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Get_List(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_Get_List", true);
			
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Get_List", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Get_List", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobAlerts_GetPaged
					
		/// <summary>
		///	This method wraps the 'JobAlerts_GetPaged' stored procedure. 
		/// </summary>	
		/// <param name="whereClause"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetPaged(TransactionManager transactionManager, int start, int pageLength , System.String whereClause, System.String orderBy, System.Int32? pageIndex, System.Int32? pageSize)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_GetPaged", true);
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.AnsiString,  whereClause );
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.AnsiString,  orderBy );
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32,  pageIndex );
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32,  pageSize );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobAlerts_GetBySiteId
					
		/// <summary>
		///	This method wraps the 'JobAlerts_GetBySiteId' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBySiteId(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_GetBySiteId", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobAlerts_GetByCountryId
					
		/// <summary>
		///	This method wraps the 'JobAlerts_GetByCountryId' stored procedure. 
		/// </summary>	
		/// <param name="countryId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByCountryId(TransactionManager transactionManager, int start, int pageLength , System.String countryId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_GetByCountryId", true);
			
			database.AddInParameter(commandWrapper, "@CountryId", DbType.AnsiString,  countryId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCountryId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCountryId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobAlerts_GetAllAlertsToRunToday
					
		/// <summary>
		///	This method wraps the 'JobAlerts_GetAllAlertsToRunToday' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetAllAlertsToRunToday(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_GetAllAlertsToRunToday", true);
			
			database.AddInParameter(commandWrapper, "@SiteID", DbType.Int32,  siteId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAllAlertsToRunToday", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetAllAlertsToRunToday", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobAlerts_Find
					
		/// <summary>
		///	This method wraps the 'JobAlerts_Find' stored procedure. 
		/// </summary>	
		/// <param name="searchUsingOr"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobAlertId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobAlertName"> A <c>System.String</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="searchKeywords"> A <c>System.String</c> instance.</param>
		/// <param name="recurrenceType"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dailyFrequency"> A <c>System.Int32?</c> instance.</param>
		/// <param name="weeklyFrequency"> A <c>System.Int32?</c> instance.</param>
		/// <param name="weeklyDayOccurence"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dateLastRun"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="dateNextRun"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="alertActive"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="emailFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="customRecurrenceType"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastResultCount"> A <c>System.Int32?</c> instance.</param>
		/// <param name="primaryAlert"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="unsubscribeValidateId"> A <c>System.Guid?</c> instance.</param>
		/// <param name="editValidateId"> A <c>System.Guid?</c> instance.</param>
		/// <param name="viewValidateId"> A <c>System.Guid?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="locationId"> A <c>System.String</c> instance.</param>
		/// <param name="areaIds"> A <c>System.String</c> instance.</param>
		/// <param name="professionId"> A <c>System.String</c> instance.</param>
		/// <param name="searchRoleIds"> A <c>System.String</c> instance.</param>
		/// <param name="workTypeIds"> A <c>System.String</c> instance.</param>
		/// <param name="salaryIds"> A <c>System.String</c> instance.</param>
		/// <param name="daysPosted"> A <c>System.Int32?</c> instance.</param>
		/// <param name="generatedSql"> A <c>System.String</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="countryId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Find(TransactionManager transactionManager, int start, int pageLength , System.Boolean? searchUsingOr, System.Int32? jobAlertId, System.String jobAlertName, System.DateTime? lastModified, System.String searchKeywords, System.Int32? recurrenceType, System.Int32? dailyFrequency, System.Int32? weeklyFrequency, System.Int32? weeklyDayOccurence, System.DateTime? dateLastRun, System.DateTime? dateNextRun, System.Int32? memberId, System.Boolean? alertActive, System.Int32? emailFormat, System.Int32? customRecurrenceType, System.Int32? lastResultCount, System.Boolean? primaryAlert, System.Guid? unsubscribeValidateId, System.Guid? editValidateId, System.Guid? viewValidateId, System.Int32? siteId, System.String locationId, System.String areaIds, System.String professionId, System.String searchRoleIds, System.String workTypeIds, System.String salaryIds, System.Int32? daysPosted, System.String generatedSql, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? currencyId, System.Int32? salaryTypeId, System.String countryId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_Find", true);
			
			database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean,  searchUsingOr );
			database.AddInParameter(commandWrapper, "@JobAlertId", DbType.Int32,  jobAlertId );
			database.AddInParameter(commandWrapper, "@JobAlertName", DbType.String,  jobAlertName );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime,  lastModified );
			database.AddInParameter(commandWrapper, "@SearchKeywords", DbType.AnsiString,  searchKeywords );
			database.AddInParameter(commandWrapper, "@RecurrenceType", DbType.Int32,  recurrenceType );
			database.AddInParameter(commandWrapper, "@DailyFrequency", DbType.Int32,  dailyFrequency );
			database.AddInParameter(commandWrapper, "@WeeklyFrequency", DbType.Int32,  weeklyFrequency );
			database.AddInParameter(commandWrapper, "@WeeklyDayOccurence", DbType.Int32,  weeklyDayOccurence );
			database.AddInParameter(commandWrapper, "@DateLastRun", DbType.DateTime,  dateLastRun );
			database.AddInParameter(commandWrapper, "@DateNextRun", DbType.DateTime,  dateNextRun );
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32,  memberId );
			database.AddInParameter(commandWrapper, "@AlertActive", DbType.Boolean,  alertActive );
			database.AddInParameter(commandWrapper, "@EmailFormat", DbType.Int32,  emailFormat );
			database.AddInParameter(commandWrapper, "@CustomRecurrenceType", DbType.Int32,  customRecurrenceType );
			database.AddInParameter(commandWrapper, "@LastResultCount", DbType.Int32,  lastResultCount );
			database.AddInParameter(commandWrapper, "@PrimaryAlert", DbType.Boolean,  primaryAlert );
			database.AddInParameter(commandWrapper, "@UnsubscribeValidateId", DbType.Guid,  unsubscribeValidateId );
			database.AddInParameter(commandWrapper, "@EditValidateId", DbType.Guid,  editValidateId );
			database.AddInParameter(commandWrapper, "@ViewValidateId", DbType.Guid,  viewValidateId );
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@LocationId", DbType.AnsiString,  locationId );
			database.AddInParameter(commandWrapper, "@AreaIds", DbType.AnsiString,  areaIds );
			database.AddInParameter(commandWrapper, "@ProfessionId", DbType.AnsiString,  professionId );
			database.AddInParameter(commandWrapper, "@SearchRoleIds", DbType.AnsiString,  searchRoleIds );
			database.AddInParameter(commandWrapper, "@WorkTypeIds", DbType.AnsiString,  workTypeIds );
			database.AddInParameter(commandWrapper, "@SalaryIds", DbType.AnsiString,  salaryIds );
			database.AddInParameter(commandWrapper, "@DaysPosted", DbType.Int32,  daysPosted );
			database.AddInParameter(commandWrapper, "@GeneratedSql", DbType.AnsiString,  generatedSql );
			database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal,  salaryLowerBand );
			database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal,  salaryUpperBand );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
			database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32,  salaryTypeId );
			database.AddInParameter(commandWrapper, "@CountryId", DbType.AnsiString,  countryId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Find", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobAlerts_Delete
					
		/// <summary>
		///	This method wraps the 'JobAlerts_Delete' stored procedure. 
		/// </summary>	
		/// <param name="jobAlertId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Delete(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobAlertId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_Delete", true);
			
			database.AddInParameter(commandWrapper, "@JobAlertId", DbType.Int32,  jobAlertId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete", (IEntity)null));


				
				return;
		}
		#endregion

		#region JobAlerts_GetBySalaryTypeId
					
		/// <summary>
		///	This method wraps the 'JobAlerts_GetBySalaryTypeId' stored procedure. 
		/// </summary>	
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBySalaryTypeId(TransactionManager transactionManager, int start, int pageLength , System.Int32? salaryTypeId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_GetBySalaryTypeId", true);
			
			database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32,  salaryTypeId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySalaryTypeId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySalaryTypeId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobAlerts_Update
					
		/// <summary>
		///	This method wraps the 'JobAlerts_Update' stored procedure. 
		/// </summary>	
		/// <param name="jobAlertId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobAlertName"> A <c>System.String</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="searchKeywords"> A <c>System.String</c> instance.</param>
		/// <param name="recurrenceType"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dailyFrequency"> A <c>System.Int32?</c> instance.</param>
		/// <param name="weeklyFrequency"> A <c>System.Int32?</c> instance.</param>
		/// <param name="weeklyDayOccurence"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dateLastRun"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="dateNextRun"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="alertActive"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="emailFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="customRecurrenceType"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastResultCount"> A <c>System.Int32?</c> instance.</param>
		/// <param name="primaryAlert"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="unsubscribeValidateId"> A <c>System.Guid?</c> instance.</param>
		/// <param name="editValidateId"> A <c>System.Guid?</c> instance.</param>
		/// <param name="viewValidateId"> A <c>System.Guid?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="locationId"> A <c>System.String</c> instance.</param>
		/// <param name="areaIds"> A <c>System.String</c> instance.</param>
		/// <param name="professionId"> A <c>System.String</c> instance.</param>
		/// <param name="searchRoleIds"> A <c>System.String</c> instance.</param>
		/// <param name="workTypeIds"> A <c>System.String</c> instance.</param>
		/// <param name="salaryIds"> A <c>System.String</c> instance.</param>
		/// <param name="daysPosted"> A <c>System.Int32?</c> instance.</param>
		/// <param name="generatedSql"> A <c>System.String</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="countryId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Update(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobAlertId, System.String jobAlertName, System.DateTime? lastModified, System.String searchKeywords, System.Int32? recurrenceType, System.Int32? dailyFrequency, System.Int32? weeklyFrequency, System.Int32? weeklyDayOccurence, System.DateTime? dateLastRun, System.DateTime? dateNextRun, System.Int32? memberId, System.Boolean? alertActive, System.Int32? emailFormat, System.Int32? customRecurrenceType, System.Int32? lastResultCount, System.Boolean? primaryAlert, System.Guid? unsubscribeValidateId, System.Guid? editValidateId, System.Guid? viewValidateId, System.Int32? siteId, System.String locationId, System.String areaIds, System.String professionId, System.String searchRoleIds, System.String workTypeIds, System.String salaryIds, System.Int32? daysPosted, System.String generatedSql, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? currencyId, System.Int32? salaryTypeId, System.String countryId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_Update", true);
			
			database.AddInParameter(commandWrapper, "@JobAlertId", DbType.Int32,  jobAlertId );
			database.AddInParameter(commandWrapper, "@JobAlertName", DbType.String,  jobAlertName );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime,  lastModified );
			database.AddInParameter(commandWrapper, "@SearchKeywords", DbType.AnsiString,  searchKeywords );
			database.AddInParameter(commandWrapper, "@RecurrenceType", DbType.Int32,  recurrenceType );
			database.AddInParameter(commandWrapper, "@DailyFrequency", DbType.Int32,  dailyFrequency );
			database.AddInParameter(commandWrapper, "@WeeklyFrequency", DbType.Int32,  weeklyFrequency );
			database.AddInParameter(commandWrapper, "@WeeklyDayOccurence", DbType.Int32,  weeklyDayOccurence );
			database.AddInParameter(commandWrapper, "@DateLastRun", DbType.DateTime,  dateLastRun );
			database.AddInParameter(commandWrapper, "@DateNextRun", DbType.DateTime,  dateNextRun );
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32,  memberId );
			database.AddInParameter(commandWrapper, "@AlertActive", DbType.Boolean,  alertActive );
			database.AddInParameter(commandWrapper, "@EmailFormat", DbType.Int32,  emailFormat );
			database.AddInParameter(commandWrapper, "@CustomRecurrenceType", DbType.Int32,  customRecurrenceType );
			database.AddInParameter(commandWrapper, "@LastResultCount", DbType.Int32,  lastResultCount );
			database.AddInParameter(commandWrapper, "@PrimaryAlert", DbType.Boolean,  primaryAlert );
			database.AddInParameter(commandWrapper, "@UnsubscribeValidateId", DbType.Guid,  unsubscribeValidateId );
			database.AddInParameter(commandWrapper, "@EditValidateId", DbType.Guid,  editValidateId );
			database.AddInParameter(commandWrapper, "@ViewValidateId", DbType.Guid,  viewValidateId );
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@LocationId", DbType.AnsiString,  locationId );
			database.AddInParameter(commandWrapper, "@AreaIds", DbType.AnsiString,  areaIds );
			database.AddInParameter(commandWrapper, "@ProfessionId", DbType.AnsiString,  professionId );
			database.AddInParameter(commandWrapper, "@SearchRoleIds", DbType.AnsiString,  searchRoleIds );
			database.AddInParameter(commandWrapper, "@WorkTypeIds", DbType.AnsiString,  workTypeIds );
			database.AddInParameter(commandWrapper, "@SalaryIds", DbType.AnsiString,  salaryIds );
			database.AddInParameter(commandWrapper, "@DaysPosted", DbType.Int32,  daysPosted );
			database.AddInParameter(commandWrapper, "@GeneratedSql", DbType.AnsiString,  generatedSql );
			database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal,  salaryLowerBand );
			database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal,  salaryUpperBand );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
			database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32,  salaryTypeId );
			database.AddInParameter(commandWrapper, "@CountryId", DbType.AnsiString,  countryId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", (IEntity)null));


				
				return;
		}
		#endregion

		#region JobAlerts_CustomGetMemberReport
					
		/// <summary>
		///	This method wraps the 'JobAlerts_CustomGetMemberReport' stored procedure. 
		/// </summary>	
		/// <param name="siteid"> A <c>System.Int32?</c> instance.</param>
		/// <param name="datefrom"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="dateto"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet CustomGetMemberReport(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteid, System.DateTime? datefrom, System.DateTime? dateto)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_CustomGetMemberReport", true);
			
			database.AddInParameter(commandWrapper, "@siteid", DbType.Int32,  siteid );
			database.AddInParameter(commandWrapper, "@datefrom", DbType.Date,  datefrom );
			database.AddInParameter(commandWrapper, "@dateto", DbType.Date,  dateto );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomGetMemberReport", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomGetMemberReport", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobAlerts_GetByCurrencyId
					
		/// <summary>
		///	This method wraps the 'JobAlerts_GetByCurrencyId' stored procedure. 
		/// </summary>	
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByCurrencyId(TransactionManager transactionManager, int start, int pageLength , System.Int32? currencyId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobAlerts_GetByCurrencyId", true);
			
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCurrencyId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCurrencyId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion
		#endregion
	}//end class
} // end namespace

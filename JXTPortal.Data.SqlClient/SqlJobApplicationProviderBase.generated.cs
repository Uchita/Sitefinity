
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlJobApplicationProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using JXTPortal.Entities;
using JXTPortal.Data;
using JXTPortal.Data.Bases;

#endregion

namespace JXTPortal.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="JobApplication"/> entity.
	///</summary>
	public abstract partial class SqlJobApplicationProviderBase : JobApplicationProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlJobApplicationProviderBase"/> instance.
		/// </summary>
		public SqlJobApplicationProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlJobApplicationProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlJobApplicationProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_jobApplicationId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _jobApplicationId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@JobApplicationId", DbType.Int32, _jobApplicationId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(JobApplication)
					,_jobApplicationId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.JobApplication objects.</returns>
		public override TList<JobApplication> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<JobApplication>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@JobApplicationId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ApplicationDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MemberResumeFile", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MemberCoverLetterFile", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ApplicationStatus", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobAppValidateId", DbType.Guid, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SiteIdReferral", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UrlReferral", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ApplicantGrade", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastViewedDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FirstName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Surname", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EmailAddress", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MobilePhone", DbType.AnsiStringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MemberNote", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdvertiserNote", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobArchiveId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Draft", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobApplicationTypeId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExternalXmlFilename", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CustomQuestionnaireXml", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExternalPdfFilename", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FileDownloaded", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AppliedWith", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ScreeningQuestionaireXml", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ScreeningQuestionsGuid", DbType.Guid, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProcessDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProcessException", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExternalId", DbType.AnsiString, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("jobapplicationid ") || clause.Trim().StartsWith("jobapplicationid="))
				{
					database.SetParameterValue(commandWrapper, "@JobApplicationId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("applicationdate ") || clause.Trim().StartsWith("applicationdate="))
				{
					database.SetParameterValue(commandWrapper, "@ApplicationDate", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobid ") || clause.Trim().StartsWith("jobid="))
				{
					database.SetParameterValue(commandWrapper, "@JobId", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("memberid ") || clause.Trim().StartsWith("memberid="))
				{
					database.SetParameterValue(commandWrapper, "@MemberId", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("memberresumefile ") || clause.Trim().StartsWith("memberresumefile="))
				{
					database.SetParameterValue(commandWrapper, "@MemberResumeFile", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("membercoverletterfile ") || clause.Trim().StartsWith("membercoverletterfile="))
				{
					database.SetParameterValue(commandWrapper, "@MemberCoverLetterFile", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("applicationstatus ") || clause.Trim().StartsWith("applicationstatus="))
				{
					database.SetParameterValue(commandWrapper, "@ApplicationStatus", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobappvalidateid ") || clause.Trim().StartsWith("jobappvalidateid="))
				{
					database.SetParameterValue(commandWrapper, "@JobAppValidateId", new Guid(
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
				if (clause.Trim().StartsWith("siteid_referral ") || clause.Trim().StartsWith("siteid_referral="))
				{
					database.SetParameterValue(commandWrapper, "@SiteIdReferral", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("url_referral ") || clause.Trim().StartsWith("url_referral="))
				{
					database.SetParameterValue(commandWrapper, "@UrlReferral", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("applicantgrade ") || clause.Trim().StartsWith("applicantgrade="))
				{
					database.SetParameterValue(commandWrapper, "@ApplicantGrade", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastvieweddate ") || clause.Trim().StartsWith("lastvieweddate="))
				{
					database.SetParameterValue(commandWrapper, "@LastViewedDate", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("firstname ") || clause.Trim().StartsWith("firstname="))
				{
					database.SetParameterValue(commandWrapper, "@FirstName", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("surname ") || clause.Trim().StartsWith("surname="))
				{
					database.SetParameterValue(commandWrapper, "@Surname", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("emailaddress ") || clause.Trim().StartsWith("emailaddress="))
				{
					database.SetParameterValue(commandWrapper, "@EmailAddress", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mobilephone ") || clause.Trim().StartsWith("mobilephone="))
				{
					database.SetParameterValue(commandWrapper, "@MobilePhone", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("membernote ") || clause.Trim().StartsWith("membernote="))
				{
					database.SetParameterValue(commandWrapper, "@MemberNote", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("advertisernote ") || clause.Trim().StartsWith("advertisernote="))
				{
					database.SetParameterValue(commandWrapper, "@AdvertiserNote", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobarchiveid ") || clause.Trim().StartsWith("jobarchiveid="))
				{
					database.SetParameterValue(commandWrapper, "@JobArchiveId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("draft ") || clause.Trim().StartsWith("draft="))
				{
					database.SetParameterValue(commandWrapper, "@Draft", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobapplicationtypeid ") || clause.Trim().StartsWith("jobapplicationtypeid="))
				{
					database.SetParameterValue(commandWrapper, "@JobApplicationTypeId", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("externalxmlfilename ") || clause.Trim().StartsWith("externalxmlfilename="))
				{
					database.SetParameterValue(commandWrapper, "@ExternalXmlFilename", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("customquestionnairexml ") || clause.Trim().StartsWith("customquestionnairexml="))
				{
					database.SetParameterValue(commandWrapper, "@CustomQuestionnaireXml", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("externalpdffilename ") || clause.Trim().StartsWith("externalpdffilename="))
				{
					database.SetParameterValue(commandWrapper, "@ExternalPdfFilename", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("filedownloaded ") || clause.Trim().StartsWith("filedownloaded="))
				{
					database.SetParameterValue(commandWrapper, "@FileDownloaded", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("appliedwith ") || clause.Trim().StartsWith("appliedwith="))
				{
					database.SetParameterValue(commandWrapper, "@AppliedWith", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("screeningquestionairexml ") || clause.Trim().StartsWith("screeningquestionairexml="))
				{
					database.SetParameterValue(commandWrapper, "@ScreeningQuestionaireXml", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("screeningquestionsguid ") || clause.Trim().StartsWith("screeningquestionsguid="))
				{
					database.SetParameterValue(commandWrapper, "@ScreeningQuestionsGuid", new Guid(
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
				if (clause.Trim().StartsWith("processdate ") || clause.Trim().StartsWith("processdate="))
				{
					database.SetParameterValue(commandWrapper, "@ProcessDate", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("processexception ") || clause.Trim().StartsWith("processexception="))
				{
					database.SetParameterValue(commandWrapper, "@ProcessException", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("externalid ") || clause.Trim().StartsWith("externalid="))
				{
					database.SetParameterValue(commandWrapper, "@ExternalId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<JobApplication> rows = new TList<JobApplication>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of JXTPortal.Entities.JobApplication objects.</returns>
		public override TList<JobApplication> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_Find_Dynamic", typeof(JobApplicationColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<JobApplication> rows = new TList<JobApplication>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.JobApplication objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<JobApplication> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<JobApplication> rows = new TList<JobApplication>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.JobApplication objects.</returns>
		public override TList<JobApplication> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<JobApplication> rows = new TList<JobApplication>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetBySiteIdReferral
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__JobApplic__SiteI__09D52582 key.
		///		FK__JobApplic__SiteI__09D52582 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_siteIdReferral"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.JobApplication objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<JobApplication> GetBySiteIdReferral(TransactionManager transactionManager, System.Int32? _siteIdReferral, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_GetBySiteIdReferral", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SiteIdReferral", DbType.Int32, _siteIdReferral);
			
			IDataReader reader = null;
			TList<JobApplication> rows = new TList<JobApplication>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteIdReferral", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteIdReferral", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByJobArchiveId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_JobApplication_JobArchiveID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_jobArchiveId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;JobApplication&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<JobApplication> GetByJobArchiveId(TransactionManager transactionManager, System.Int32? _jobArchiveId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_GetByJobArchiveId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@JobArchiveId", DbType.Int32, _jobArchiveId);
			
			IDataReader reader = null;
			TList<JobApplication> tmp = new TList<JobApplication>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByJobArchiveId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByJobArchiveId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByJobId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_JobApplication_JobID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_jobId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;JobApplication&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<JobApplication> GetByJobId(TransactionManager transactionManager, System.Int32? _jobId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_GetByJobId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@JobId", DbType.Int32, _jobId);
			
			IDataReader reader = null;
			TList<JobApplication> tmp = new TList<JobApplication>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByJobId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByJobId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByMemberId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the JobApplication_MemberID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_memberId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;JobApplication&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<JobApplication> GetByMemberId(TransactionManager transactionManager, System.Int32? _memberId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_GetByMemberId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32, _memberId);
			
			IDataReader reader = null;
			TList<JobApplication> tmp = new TList<JobApplication>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMemberId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMemberId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByJobApplicationId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK__JobApplication__05107065 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_jobApplicationId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="JXTPortal.Entities.JobApplication"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override JXTPortal.Entities.JobApplication GetByJobApplicationId(TransactionManager transactionManager, System.Int32 _jobApplicationId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_GetByJobApplicationId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@JobApplicationId", DbType.Int32, _jobApplicationId);
			
			IDataReader reader = null;
			TList<JobApplication> tmp = new TList<JobApplication>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByJobApplicationId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByJobApplicationId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the JXTPortal.Entities.JobApplication object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<JXTPortal.Entities.JobApplication> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "JobApplication";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("JobApplicationID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("ApplicationDate", typeof(System.DateTime));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("JobID", typeof(System.Int32));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("MemberID", typeof(System.Int32));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("MemberResumeFile", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("MemberCoverLetterFile", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("ApplicationStatus", typeof(System.Int32));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("JobAppValidateID", typeof(System.Guid));
			col7.AllowDBNull = false;		
			DataColumn col8 = dataTable.Columns.Add("SiteID_Referral", typeof(System.Int32));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("URL_Referral", typeof(System.String));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("ApplicantGrade", typeof(System.Int32));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("LastViewedDate", typeof(System.DateTime));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("FirstName", typeof(System.String));
			col12.AllowDBNull = false;		
			DataColumn col13 = dataTable.Columns.Add("Surname", typeof(System.String));
			col13.AllowDBNull = false;		
			DataColumn col14 = dataTable.Columns.Add("EmailAddress", typeof(System.String));
			col14.AllowDBNull = false;		
			DataColumn col15 = dataTable.Columns.Add("MobilePhone", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("MemberNote", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("AdvertiserNote", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("JobArchiveID", typeof(System.Int32));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("Draft", typeof(System.Boolean));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("JobApplicationTypeID", typeof(System.Int32));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("ExternalXMLFilename", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("CustomQuestionnaireXML", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("ExternalPDFFilename", typeof(System.String));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("FileDownloaded", typeof(System.Boolean));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("AppliedWith", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("ScreeningQuestionaireXML", typeof(System.String));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("ScreeningQuestionsGuid", typeof(System.Guid));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("ProcessDate", typeof(System.DateTime));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("ProcessException", typeof(System.String));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("ExternalID", typeof(System.String));
			col30.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("JobApplicationID", "JobApplicationID");
			bulkCopy.ColumnMappings.Add("ApplicationDate", "ApplicationDate");
			bulkCopy.ColumnMappings.Add("JobID", "JobID");
			bulkCopy.ColumnMappings.Add("MemberID", "MemberID");
			bulkCopy.ColumnMappings.Add("MemberResumeFile", "MemberResumeFile");
			bulkCopy.ColumnMappings.Add("MemberCoverLetterFile", "MemberCoverLetterFile");
			bulkCopy.ColumnMappings.Add("ApplicationStatus", "ApplicationStatus");
			bulkCopy.ColumnMappings.Add("JobAppValidateID", "JobAppValidateID");
			bulkCopy.ColumnMappings.Add("SiteID_Referral", "SiteID_Referral");
			bulkCopy.ColumnMappings.Add("URL_Referral", "URL_Referral");
			bulkCopy.ColumnMappings.Add("ApplicantGrade", "ApplicantGrade");
			bulkCopy.ColumnMappings.Add("LastViewedDate", "LastViewedDate");
			bulkCopy.ColumnMappings.Add("FirstName", "FirstName");
			bulkCopy.ColumnMappings.Add("Surname", "Surname");
			bulkCopy.ColumnMappings.Add("EmailAddress", "EmailAddress");
			bulkCopy.ColumnMappings.Add("MobilePhone", "MobilePhone");
			bulkCopy.ColumnMappings.Add("MemberNote", "MemberNote");
			bulkCopy.ColumnMappings.Add("AdvertiserNote", "AdvertiserNote");
			bulkCopy.ColumnMappings.Add("JobArchiveID", "JobArchiveID");
			bulkCopy.ColumnMappings.Add("Draft", "Draft");
			bulkCopy.ColumnMappings.Add("JobApplicationTypeID", "JobApplicationTypeID");
			bulkCopy.ColumnMappings.Add("ExternalXMLFilename", "ExternalXMLFilename");
			bulkCopy.ColumnMappings.Add("CustomQuestionnaireXML", "CustomQuestionnaireXML");
			bulkCopy.ColumnMappings.Add("ExternalPDFFilename", "ExternalPDFFilename");
			bulkCopy.ColumnMappings.Add("FileDownloaded", "FileDownloaded");
			bulkCopy.ColumnMappings.Add("AppliedWith", "AppliedWith");
			bulkCopy.ColumnMappings.Add("ScreeningQuestionaireXML", "ScreeningQuestionaireXML");
			bulkCopy.ColumnMappings.Add("ScreeningQuestionsGuid", "ScreeningQuestionsGuid");
			bulkCopy.ColumnMappings.Add("ProcessDate", "ProcessDate");
			bulkCopy.ColumnMappings.Add("ProcessException", "ProcessException");
			bulkCopy.ColumnMappings.Add("ExternalID", "ExternalID");
			
			foreach(JXTPortal.Entities.JobApplication entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["JobApplicationID"] = entity.JobApplicationId;
							
				
					row["ApplicationDate"] = entity.ApplicationDate.HasValue ? (object) entity.ApplicationDate  : System.DBNull.Value;
							
				
					row["JobID"] = entity.JobId.HasValue ? (object) entity.JobId  : System.DBNull.Value;
							
				
					row["MemberID"] = entity.MemberId.HasValue ? (object) entity.MemberId  : System.DBNull.Value;
							
				
					row["MemberResumeFile"] = entity.MemberResumeFile;
							
				
					row["MemberCoverLetterFile"] = entity.MemberCoverLetterFile;
							
				
					row["ApplicationStatus"] = entity.ApplicationStatus.HasValue ? (object) entity.ApplicationStatus  : System.DBNull.Value;
							
				
					row["JobAppValidateID"] = entity.JobAppValidateId;
							
				
					row["SiteID_Referral"] = entity.SiteIdReferral.HasValue ? (object) entity.SiteIdReferral  : System.DBNull.Value;
							
				
					row["URL_Referral"] = entity.UrlReferral;
							
				
					row["ApplicantGrade"] = entity.ApplicantGrade.HasValue ? (object) entity.ApplicantGrade  : System.DBNull.Value;
							
				
					row["LastViewedDate"] = entity.LastViewedDate.HasValue ? (object) entity.LastViewedDate  : System.DBNull.Value;
							
				
					row["FirstName"] = entity.FirstName;
							
				
					row["Surname"] = entity.Surname;
							
				
					row["EmailAddress"] = entity.EmailAddress;
							
				
					row["MobilePhone"] = entity.MobilePhone;
							
				
					row["MemberNote"] = entity.MemberNote;
							
				
					row["AdvertiserNote"] = entity.AdvertiserNote;
							
				
					row["JobArchiveID"] = entity.JobArchiveId.HasValue ? (object) entity.JobArchiveId  : System.DBNull.Value;
							
				
					row["Draft"] = entity.Draft.HasValue ? (object) entity.Draft  : System.DBNull.Value;
							
				
					row["JobApplicationTypeID"] = entity.JobApplicationTypeId.HasValue ? (object) entity.JobApplicationTypeId  : System.DBNull.Value;
							
				
					row["ExternalXMLFilename"] = entity.ExternalXmlFilename;
							
				
					row["CustomQuestionnaireXML"] = entity.CustomQuestionnaireXml;
							
				
					row["ExternalPDFFilename"] = entity.ExternalPdfFilename;
							
				
					row["FileDownloaded"] = entity.FileDownloaded.HasValue ? (object) entity.FileDownloaded  : System.DBNull.Value;
							
				
					row["AppliedWith"] = entity.AppliedWith;
							
				
					row["ScreeningQuestionaireXML"] = entity.ScreeningQuestionaireXml;
							
				
					row["ScreeningQuestionsGuid"] = entity.ScreeningQuestionsGuid.HasValue ? (object) entity.ScreeningQuestionsGuid  : System.DBNull.Value;
							
				
					row["ProcessDate"] = entity.ProcessDate.HasValue ? (object) entity.ProcessDate  : System.DBNull.Value;
							
				
					row["ProcessException"] = entity.ProcessException;
							
				
					row["ExternalID"] = entity.ExternalId;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(JXTPortal.Entities.JobApplication entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a JXTPortal.Entities.JobApplication object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">JXTPortal.Entities.JobApplication object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the JXTPortal.Entities.JobApplication object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, JXTPortal.Entities.JobApplication entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@JobApplicationId", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@ApplicationDate", DbType.DateTime, (entity.ApplicationDate.HasValue ? (object) entity.ApplicationDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@JobId", DbType.Int32, (entity.JobId.HasValue ? (object) entity.JobId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32, (entity.MemberId.HasValue ? (object) entity.MemberId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MemberResumeFile", DbType.AnsiString, entity.MemberResumeFile );
			database.AddInParameter(commandWrapper, "@MemberCoverLetterFile", DbType.AnsiString, entity.MemberCoverLetterFile );
			database.AddInParameter(commandWrapper, "@ApplicationStatus", DbType.Int32, (entity.ApplicationStatus.HasValue ? (object) entity.ApplicationStatus  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@JobAppValidateId", DbType.Guid, entity.JobAppValidateId );
			database.AddInParameter(commandWrapper, "@SiteIdReferral", DbType.Int32, (entity.SiteIdReferral.HasValue ? (object) entity.SiteIdReferral  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@UrlReferral", DbType.AnsiString, entity.UrlReferral );
			database.AddInParameter(commandWrapper, "@ApplicantGrade", DbType.Int32, (entity.ApplicantGrade.HasValue ? (object) entity.ApplicantGrade  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastViewedDate", DbType.DateTime, (entity.LastViewedDate.HasValue ? (object) entity.LastViewedDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FirstName", DbType.String, entity.FirstName );
			database.AddInParameter(commandWrapper, "@Surname", DbType.String, entity.Surname );
			database.AddInParameter(commandWrapper, "@EmailAddress", DbType.AnsiString, entity.EmailAddress );
			database.AddInParameter(commandWrapper, "@MobilePhone", DbType.AnsiStringFixedLength, entity.MobilePhone );
			database.AddInParameter(commandWrapper, "@MemberNote", DbType.String, entity.MemberNote );
			database.AddInParameter(commandWrapper, "@AdvertiserNote", DbType.String, entity.AdvertiserNote );
			database.AddInParameter(commandWrapper, "@JobArchiveId", DbType.Int32, (entity.JobArchiveId.HasValue ? (object) entity.JobArchiveId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Draft", DbType.Boolean, (entity.Draft.HasValue ? (object) entity.Draft  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@JobApplicationTypeId", DbType.Int32, (entity.JobApplicationTypeId.HasValue ? (object) entity.JobApplicationTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ExternalXmlFilename", DbType.AnsiString, entity.ExternalXmlFilename );
			database.AddInParameter(commandWrapper, "@CustomQuestionnaireXml", DbType.String, entity.CustomQuestionnaireXml );
			database.AddInParameter(commandWrapper, "@ExternalPdfFilename", DbType.AnsiString, entity.ExternalPdfFilename );
			database.AddInParameter(commandWrapper, "@FileDownloaded", DbType.Boolean, (entity.FileDownloaded.HasValue ? (object) entity.FileDownloaded  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AppliedWith", DbType.AnsiString, entity.AppliedWith );
			database.AddInParameter(commandWrapper, "@ScreeningQuestionaireXml", DbType.String, entity.ScreeningQuestionaireXml );
			database.AddInParameter(commandWrapper, "@ScreeningQuestionsGuid", DbType.Guid, (entity.ScreeningQuestionsGuid.HasValue ? (object) entity.ScreeningQuestionsGuid  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ProcessDate", DbType.DateTime, (entity.ProcessDate.HasValue ? (object) entity.ProcessDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ProcessException", DbType.AnsiString, entity.ProcessException );
			database.AddInParameter(commandWrapper, "@ExternalId", DbType.AnsiString, entity.ExternalId );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _jobApplicationId = database.GetParameterValue(commandWrapper, "@JobApplicationId");
			entity.JobApplicationId = (System.Int32)_jobApplicationId;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">JXTPortal.Entities.JobApplication object to update.</param>
		/// <remarks>
		///		After updating the datasource, the JXTPortal.Entities.JobApplication object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, JXTPortal.Entities.JobApplication entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@JobApplicationId", DbType.Int32, entity.JobApplicationId );
			database.AddInParameter(commandWrapper, "@ApplicationDate", DbType.DateTime, (entity.ApplicationDate.HasValue ? (object) entity.ApplicationDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@JobId", DbType.Int32, (entity.JobId.HasValue ? (object) entity.JobId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32, (entity.MemberId.HasValue ? (object) entity.MemberId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MemberResumeFile", DbType.AnsiString, entity.MemberResumeFile );
			database.AddInParameter(commandWrapper, "@MemberCoverLetterFile", DbType.AnsiString, entity.MemberCoverLetterFile );
			database.AddInParameter(commandWrapper, "@ApplicationStatus", DbType.Int32, (entity.ApplicationStatus.HasValue ? (object) entity.ApplicationStatus : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@JobAppValidateId", DbType.Guid, entity.JobAppValidateId );
			database.AddInParameter(commandWrapper, "@SiteIdReferral", DbType.Int32, (entity.SiteIdReferral.HasValue ? (object) entity.SiteIdReferral : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@UrlReferral", DbType.AnsiString, entity.UrlReferral );
			database.AddInParameter(commandWrapper, "@ApplicantGrade", DbType.Int32, (entity.ApplicantGrade.HasValue ? (object) entity.ApplicantGrade : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastViewedDate", DbType.DateTime, (entity.LastViewedDate.HasValue ? (object) entity.LastViewedDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FirstName", DbType.String, entity.FirstName );
			database.AddInParameter(commandWrapper, "@Surname", DbType.String, entity.Surname );
			database.AddInParameter(commandWrapper, "@EmailAddress", DbType.AnsiString, entity.EmailAddress );
			database.AddInParameter(commandWrapper, "@MobilePhone", DbType.AnsiStringFixedLength, entity.MobilePhone );
			database.AddInParameter(commandWrapper, "@MemberNote", DbType.String, entity.MemberNote );
			database.AddInParameter(commandWrapper, "@AdvertiserNote", DbType.String, entity.AdvertiserNote );
			database.AddInParameter(commandWrapper, "@JobArchiveId", DbType.Int32, (entity.JobArchiveId.HasValue ? (object) entity.JobArchiveId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Draft", DbType.Boolean, (entity.Draft.HasValue ? (object) entity.Draft : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@JobApplicationTypeId", DbType.Int32, (entity.JobApplicationTypeId.HasValue ? (object) entity.JobApplicationTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ExternalXmlFilename", DbType.AnsiString, entity.ExternalXmlFilename );
			database.AddInParameter(commandWrapper, "@CustomQuestionnaireXml", DbType.String, entity.CustomQuestionnaireXml );
			database.AddInParameter(commandWrapper, "@ExternalPdfFilename", DbType.AnsiString, entity.ExternalPdfFilename );
			database.AddInParameter(commandWrapper, "@FileDownloaded", DbType.Boolean, (entity.FileDownloaded.HasValue ? (object) entity.FileDownloaded : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AppliedWith", DbType.AnsiString, entity.AppliedWith );
			database.AddInParameter(commandWrapper, "@ScreeningQuestionaireXml", DbType.String, entity.ScreeningQuestionaireXml );
			database.AddInParameter(commandWrapper, "@ScreeningQuestionsGuid", DbType.Guid, (entity.ScreeningQuestionsGuid.HasValue ? (object) entity.ScreeningQuestionsGuid : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ProcessDate", DbType.DateTime, (entity.ProcessDate.HasValue ? (object) entity.ProcessDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ProcessException", DbType.AnsiString, entity.ProcessException );
			database.AddInParameter(commandWrapper, "@ExternalId", DbType.AnsiString, entity.ExternalId );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region JobApplication_GetByAdvertiserIdJobId
					
		/// <summary>
		///	This method wraps the 'JobApplication_GetByAdvertiserIdJobId' stored procedure. 
		/// </summary>	
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageNumber"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByAdvertiserIdJobId(TransactionManager transactionManager, int start, int pageLength , System.Int32? advertiserId, System.Int32? jobId, System.Int32? pageNumber, System.Int32? pageSize)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_GetByAdvertiserIdJobId", true);
			
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@JobId", DbType.Int32,  jobId );
			database.AddInParameter(commandWrapper, "@PageNumber", DbType.Int32,  pageNumber );
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32,  pageSize );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdvertiserIdJobId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdvertiserIdJobId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobApplication_GetByMemberId
					
		/// <summary>
		///	This method wraps the 'JobApplication_GetByMemberId' stored procedure. 
		/// </summary>	
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByMemberId(TransactionManager transactionManager, int start, int pageLength , System.Int32? memberId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_GetByMemberId", true);
			
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32,  memberId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMemberId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMemberId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobApplication_CustomGetByJobIdMemberId
					
		/// <summary>
		///	This method wraps the 'JobApplication_CustomGetByJobIdMemberId' stored procedure. 
		/// </summary>	
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;JobApplication&gt;"/> instance.</returns>
		public override TList<JobApplication> CustomGetByJobIdMemberId(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobId, System.Int32? memberId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_CustomGetByJobIdMemberId", true);
			
			database.AddInParameter(commandWrapper, "@JobID", DbType.Int32,  jobId );
			database.AddInParameter(commandWrapper, "@MemberID", DbType.Int32,  memberId );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<JobApplication> rows = new TList<JobApplication>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomGetByJobIdMemberId", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "CustomGetByJobIdMemberId", rows));


				return rows;
		}
		#endregion

		#region JobApplication_Find
					
		/// <summary>
		///	This method wraps the 'JobApplication_Find' stored procedure. 
		/// </summary>	
		/// <param name="searchUsingOr"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobApplicationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="memberResumeFile"> A <c>System.String</c> instance.</param>
		/// <param name="memberCoverLetterFile"> A <c>System.String</c> instance.</param>
		/// <param name="applicationStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobAppValidateId"> A <c>System.Guid?</c> instance.</param>
		/// <param name="siteIdReferral"> A <c>System.Int32?</c> instance.</param>
		/// <param name="urlReferral"> A <c>System.String</c> instance.</param>
		/// <param name="applicantGrade"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastViewedDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="surname"> A <c>System.String</c> instance.</param>
		/// <param name="emailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="mobilePhone"> A <c>System.String</c> instance.</param>
		/// <param name="memberNote"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserNote"> A <c>System.String</c> instance.</param>
		/// <param name="jobArchiveId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="draft"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobApplicationTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="externalXmlFilename"> A <c>System.String</c> instance.</param>
		/// <param name="customQuestionnaireXml"> A <c>System.String</c> instance.</param>
		/// <param name="externalPdfFilename"> A <c>System.String</c> instance.</param>
		/// <param name="fileDownloaded"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="appliedWith"> A <c>System.String</c> instance.</param>
		/// <param name="screeningQuestionaireXml"> A <c>System.String</c> instance.</param>
		/// <param name="screeningQuestionsGuid"> A <c>System.Guid?</c> instance.</param>
		/// <param name="processDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="processException"> A <c>System.String</c> instance.</param>
		/// <param name="externalId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Find(TransactionManager transactionManager, int start, int pageLength , System.Boolean? searchUsingOr, System.Int32? jobApplicationId, System.DateTime? applicationDate, System.Int32? jobId, System.Int32? memberId, System.String memberResumeFile, System.String memberCoverLetterFile, System.Int32? applicationStatus, System.Guid? jobAppValidateId, System.Int32? siteIdReferral, System.String urlReferral, System.Int32? applicantGrade, System.DateTime? lastViewedDate, System.String firstName, System.String surname, System.String emailAddress, System.String mobilePhone, System.String memberNote, System.String advertiserNote, System.Int32? jobArchiveId, System.Boolean? draft, System.Int32? jobApplicationTypeId, System.String externalXmlFilename, System.String customQuestionnaireXml, System.String externalPdfFilename, System.Boolean? fileDownloaded, System.String appliedWith, System.String screeningQuestionaireXml, System.Guid? screeningQuestionsGuid, System.DateTime? processDate, System.String processException, System.String externalId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_Find", true);
			
			database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean,  searchUsingOr );
			database.AddInParameter(commandWrapper, "@JobApplicationId", DbType.Int32,  jobApplicationId );
			database.AddInParameter(commandWrapper, "@ApplicationDate", DbType.DateTime,  applicationDate );
			database.AddInParameter(commandWrapper, "@JobId", DbType.Int32,  jobId );
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32,  memberId );
			database.AddInParameter(commandWrapper, "@MemberResumeFile", DbType.AnsiString,  memberResumeFile );
			database.AddInParameter(commandWrapper, "@MemberCoverLetterFile", DbType.AnsiString,  memberCoverLetterFile );
			database.AddInParameter(commandWrapper, "@ApplicationStatus", DbType.Int32,  applicationStatus );
			database.AddInParameter(commandWrapper, "@JobAppValidateId", DbType.Guid,  jobAppValidateId );
			database.AddInParameter(commandWrapper, "@SiteIdReferral", DbType.Int32,  siteIdReferral );
			database.AddInParameter(commandWrapper, "@UrlReferral", DbType.AnsiString,  urlReferral );
			database.AddInParameter(commandWrapper, "@ApplicantGrade", DbType.Int32,  applicantGrade );
			database.AddInParameter(commandWrapper, "@LastViewedDate", DbType.DateTime,  lastViewedDate );
			database.AddInParameter(commandWrapper, "@FirstName", DbType.String,  firstName );
			database.AddInParameter(commandWrapper, "@Surname", DbType.String,  surname );
			database.AddInParameter(commandWrapper, "@EmailAddress", DbType.AnsiString,  emailAddress );
			database.AddInParameter(commandWrapper, "@MobilePhone", DbType.AnsiStringFixedLength,  mobilePhone );
			database.AddInParameter(commandWrapper, "@MemberNote", DbType.String,  memberNote );
			database.AddInParameter(commandWrapper, "@AdvertiserNote", DbType.String,  advertiserNote );
			database.AddInParameter(commandWrapper, "@JobArchiveId", DbType.Int32,  jobArchiveId );
			database.AddInParameter(commandWrapper, "@Draft", DbType.Boolean,  draft );
			database.AddInParameter(commandWrapper, "@JobApplicationTypeId", DbType.Int32,  jobApplicationTypeId );
			database.AddInParameter(commandWrapper, "@ExternalXmlFilename", DbType.AnsiString,  externalXmlFilename );
			database.AddInParameter(commandWrapper, "@CustomQuestionnaireXml", DbType.String,  customQuestionnaireXml );
			database.AddInParameter(commandWrapper, "@ExternalPdfFilename", DbType.AnsiString,  externalPdfFilename );
			database.AddInParameter(commandWrapper, "@FileDownloaded", DbType.Boolean,  fileDownloaded );
			database.AddInParameter(commandWrapper, "@AppliedWith", DbType.AnsiString,  appliedWith );
			database.AddInParameter(commandWrapper, "@ScreeningQuestionaireXml", DbType.String,  screeningQuestionaireXml );
			database.AddInParameter(commandWrapper, "@ScreeningQuestionsGuid", DbType.Guid,  screeningQuestionsGuid );
			database.AddInParameter(commandWrapper, "@ProcessDate", DbType.DateTime,  processDate );
			database.AddInParameter(commandWrapper, "@ProcessException", DbType.AnsiString,  processException );
			database.AddInParameter(commandWrapper, "@ExternalId", DbType.AnsiString,  externalId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Find", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobApplication_Update
					
		/// <summary>
		///	This method wraps the 'JobApplication_Update' stored procedure. 
		/// </summary>	
		/// <param name="jobApplicationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="memberResumeFile"> A <c>System.String</c> instance.</param>
		/// <param name="memberCoverLetterFile"> A <c>System.String</c> instance.</param>
		/// <param name="applicationStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobAppValidateId"> A <c>System.Guid?</c> instance.</param>
		/// <param name="siteIdReferral"> A <c>System.Int32?</c> instance.</param>
		/// <param name="urlReferral"> A <c>System.String</c> instance.</param>
		/// <param name="applicantGrade"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastViewedDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="surname"> A <c>System.String</c> instance.</param>
		/// <param name="emailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="mobilePhone"> A <c>System.String</c> instance.</param>
		/// <param name="memberNote"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserNote"> A <c>System.String</c> instance.</param>
		/// <param name="jobArchiveId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="draft"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobApplicationTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="externalXmlFilename"> A <c>System.String</c> instance.</param>
		/// <param name="customQuestionnaireXml"> A <c>System.String</c> instance.</param>
		/// <param name="externalPdfFilename"> A <c>System.String</c> instance.</param>
		/// <param name="fileDownloaded"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="appliedWith"> A <c>System.String</c> instance.</param>
		/// <param name="screeningQuestionaireXml"> A <c>System.String</c> instance.</param>
		/// <param name="screeningQuestionsGuid"> A <c>System.Guid?</c> instance.</param>
		/// <param name="processDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="processException"> A <c>System.String</c> instance.</param>
		/// <param name="externalId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Update(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobApplicationId, System.DateTime? applicationDate, System.Int32? jobId, System.Int32? memberId, System.String memberResumeFile, System.String memberCoverLetterFile, System.Int32? applicationStatus, System.Guid? jobAppValidateId, System.Int32? siteIdReferral, System.String urlReferral, System.Int32? applicantGrade, System.DateTime? lastViewedDate, System.String firstName, System.String surname, System.String emailAddress, System.String mobilePhone, System.String memberNote, System.String advertiserNote, System.Int32? jobArchiveId, System.Boolean? draft, System.Int32? jobApplicationTypeId, System.String externalXmlFilename, System.String customQuestionnaireXml, System.String externalPdfFilename, System.Boolean? fileDownloaded, System.String appliedWith, System.String screeningQuestionaireXml, System.Guid? screeningQuestionsGuid, System.DateTime? processDate, System.String processException, System.String externalId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_Update", true);
			
			database.AddInParameter(commandWrapper, "@JobApplicationId", DbType.Int32,  jobApplicationId );
			database.AddInParameter(commandWrapper, "@ApplicationDate", DbType.DateTime,  applicationDate );
			database.AddInParameter(commandWrapper, "@JobId", DbType.Int32,  jobId );
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32,  memberId );
			database.AddInParameter(commandWrapper, "@MemberResumeFile", DbType.AnsiString,  memberResumeFile );
			database.AddInParameter(commandWrapper, "@MemberCoverLetterFile", DbType.AnsiString,  memberCoverLetterFile );
			database.AddInParameter(commandWrapper, "@ApplicationStatus", DbType.Int32,  applicationStatus );
			database.AddInParameter(commandWrapper, "@JobAppValidateId", DbType.Guid,  jobAppValidateId );
			database.AddInParameter(commandWrapper, "@SiteIdReferral", DbType.Int32,  siteIdReferral );
			database.AddInParameter(commandWrapper, "@UrlReferral", DbType.AnsiString,  urlReferral );
			database.AddInParameter(commandWrapper, "@ApplicantGrade", DbType.Int32,  applicantGrade );
			database.AddInParameter(commandWrapper, "@LastViewedDate", DbType.DateTime,  lastViewedDate );
			database.AddInParameter(commandWrapper, "@FirstName", DbType.String,  firstName );
			database.AddInParameter(commandWrapper, "@Surname", DbType.String,  surname );
			database.AddInParameter(commandWrapper, "@EmailAddress", DbType.AnsiString,  emailAddress );
			database.AddInParameter(commandWrapper, "@MobilePhone", DbType.AnsiStringFixedLength,  mobilePhone );
			database.AddInParameter(commandWrapper, "@MemberNote", DbType.String,  memberNote );
			database.AddInParameter(commandWrapper, "@AdvertiserNote", DbType.String,  advertiserNote );
			database.AddInParameter(commandWrapper, "@JobArchiveId", DbType.Int32,  jobArchiveId );
			database.AddInParameter(commandWrapper, "@Draft", DbType.Boolean,  draft );
			database.AddInParameter(commandWrapper, "@JobApplicationTypeId", DbType.Int32,  jobApplicationTypeId );
			database.AddInParameter(commandWrapper, "@ExternalXmlFilename", DbType.AnsiString,  externalXmlFilename );
			database.AddInParameter(commandWrapper, "@CustomQuestionnaireXml", DbType.String,  customQuestionnaireXml );
			database.AddInParameter(commandWrapper, "@ExternalPdfFilename", DbType.AnsiString,  externalPdfFilename );
			database.AddInParameter(commandWrapper, "@FileDownloaded", DbType.Boolean,  fileDownloaded );
			database.AddInParameter(commandWrapper, "@AppliedWith", DbType.AnsiString,  appliedWith );
			database.AddInParameter(commandWrapper, "@ScreeningQuestionaireXml", DbType.String,  screeningQuestionaireXml );
			database.AddInParameter(commandWrapper, "@ScreeningQuestionsGuid", DbType.Guid,  screeningQuestionsGuid );
			database.AddInParameter(commandWrapper, "@ProcessDate", DbType.DateTime,  processDate );
			database.AddInParameter(commandWrapper, "@ProcessException", DbType.AnsiString,  processException );
			database.AddInParameter(commandWrapper, "@ExternalId", DbType.AnsiString,  externalId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", (IEntity)null));


				
				return;
		}
		#endregion

		#region JobApplication_GetByJobId
					
		/// <summary>
		///	This method wraps the 'JobApplication_GetByJobId' stored procedure. 
		/// </summary>	
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByJobId(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_GetByJobId", true);
			
			database.AddInParameter(commandWrapper, "@JobId", DbType.Int32,  jobId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByJobId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByJobId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobApplication_GetByJobApplicationId
					
		/// <summary>
		///	This method wraps the 'JobApplication_GetByJobApplicationId' stored procedure. 
		/// </summary>	
		/// <param name="jobApplicationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByJobApplicationId(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobApplicationId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_GetByJobApplicationId", true);
			
			database.AddInParameter(commandWrapper, "@JobApplicationId", DbType.Int32,  jobApplicationId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByJobApplicationId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByJobApplicationId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobApplication_CustomGetJobApplicationDetails
					
		/// <summary>
		///	This method wraps the 'JobApplication_CustomGetJobApplicationDetails' stored procedure. 
		/// </summary>	
		/// <param name="applicationDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet CustomGetJobApplicationDetails(TransactionManager transactionManager, int start, int pageLength , System.DateTime? applicationDate, System.Int32? siteId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_CustomGetJobApplicationDetails", true);
			
			database.AddInParameter(commandWrapper, "@ApplicationDate", DbType.DateTime,  applicationDate );
			database.AddInParameter(commandWrapper, "@SiteID", DbType.Int32,  siteId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomGetJobApplicationDetails", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomGetJobApplicationDetails", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobApplication_Delete
					
		/// <summary>
		///	This method wraps the 'JobApplication_Delete' stored procedure. 
		/// </summary>	
		/// <param name="jobApplicationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Delete(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobApplicationId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_Delete", true);
			
			database.AddInParameter(commandWrapper, "@JobApplicationId", DbType.Int32,  jobApplicationId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete", (IEntity)null));


				
				return;
		}
		#endregion

		#region JobApplication_GetByAdvertiserIdJobArchiveId
					
		/// <summary>
		///	This method wraps the 'JobApplication_GetByAdvertiserIdJobArchiveId' stored procedure. 
		/// </summary>	
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobArchiveId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageNumber"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByAdvertiserIdJobArchiveId(TransactionManager transactionManager, int start, int pageLength , System.Int32? advertiserId, System.Int32? jobArchiveId, System.Int32? pageNumber, System.Int32? pageSize)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_GetByAdvertiserIdJobArchiveId", true);
			
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@JobArchiveId", DbType.Int32,  jobArchiveId );
			database.AddInParameter(commandWrapper, "@PageNumber", DbType.Int32,  pageNumber );
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32,  pageSize );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdvertiserIdJobArchiveId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdvertiserIdJobArchiveId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobApplication_GetJobsNameByMemberId
					
		/// <summary>
		///	This method wraps the 'JobApplication_GetJobsNameByMemberId' stored procedure. 
		/// </summary>	
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageNumber"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetJobsNameByMemberId(TransactionManager transactionManager, int start, int pageLength , System.Int32? memberId, System.Int32? pageSize, System.Int32? pageNumber)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_GetJobsNameByMemberId", true);
			
			database.AddInParameter(commandWrapper, "@MemberID", DbType.Int32,  memberId );
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32,  pageSize );
			database.AddInParameter(commandWrapper, "@PageNumber", DbType.Int32,  pageNumber );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetJobsNameByMemberId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetJobsNameByMemberId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobApplication_Insert
					
		/// <summary>
		///	This method wraps the 'JobApplication_Insert' stored procedure. 
		/// </summary>	
		/// <param name="applicationDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="memberResumeFile"> A <c>System.String</c> instance.</param>
		/// <param name="memberCoverLetterFile"> A <c>System.String</c> instance.</param>
		/// <param name="applicationStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteIdReferral"> A <c>System.Int32?</c> instance.</param>
		/// <param name="urlReferral"> A <c>System.String</c> instance.</param>
		/// <param name="applicantGrade"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastViewedDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="surname"> A <c>System.String</c> instance.</param>
		/// <param name="emailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="mobilePhone"> A <c>System.String</c> instance.</param>
		/// <param name="memberNote"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserNote"> A <c>System.String</c> instance.</param>
		/// <param name="jobArchiveId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="draft"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobApplicationTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="externalXmlFilename"> A <c>System.String</c> instance.</param>
		/// <param name="customQuestionnaireXml"> A <c>System.String</c> instance.</param>
		/// <param name="externalPdfFilename"> A <c>System.String</c> instance.</param>
		/// <param name="fileDownloaded"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="appliedWith"> A <c>System.String</c> instance.</param>
		/// <param name="screeningQuestionaireXml"> A <c>System.String</c> instance.</param>
		/// <param name="screeningQuestionsGuid"> A <c>System.Guid?</c> instance.</param>
		/// <param name="processDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="processException"> A <c>System.String</c> instance.</param>
		/// <param name="externalId"> A <c>System.String</c> instance.</param>
			/// <param name="jobApplicationId"> A <c>System.Int32?</c> instance.</param>
			/// <param name="jobAppValidateId"> A <c>System.Guid?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Insert(TransactionManager transactionManager, int start, int pageLength , System.DateTime? applicationDate, System.Int32? jobId, System.Int32? memberId, System.String memberResumeFile, System.String memberCoverLetterFile, System.Int32? applicationStatus, System.Int32? siteIdReferral, System.String urlReferral, System.Int32? applicantGrade, System.DateTime? lastViewedDate, System.String firstName, System.String surname, System.String emailAddress, System.String mobilePhone, System.String memberNote, System.String advertiserNote, System.Int32? jobArchiveId, System.Boolean? draft, System.Int32? jobApplicationTypeId, System.String externalXmlFilename, System.String customQuestionnaireXml, System.String externalPdfFilename, System.Boolean? fileDownloaded, System.String appliedWith, System.String screeningQuestionaireXml, System.Guid? screeningQuestionsGuid, System.DateTime? processDate, System.String processException, System.String externalId, ref System.Int32? jobApplicationId, ref System.Guid? jobAppValidateId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_Insert", true);
			
			database.AddInParameter(commandWrapper, "@ApplicationDate", DbType.DateTime,  applicationDate );
			database.AddInParameter(commandWrapper, "@JobId", DbType.Int32,  jobId );
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32,  memberId );
			database.AddInParameter(commandWrapper, "@MemberResumeFile", DbType.AnsiString,  memberResumeFile );
			database.AddInParameter(commandWrapper, "@MemberCoverLetterFile", DbType.AnsiString,  memberCoverLetterFile );
			database.AddInParameter(commandWrapper, "@ApplicationStatus", DbType.Int32,  applicationStatus );
			database.AddInParameter(commandWrapper, "@SiteIdReferral", DbType.Int32,  siteIdReferral );
			database.AddInParameter(commandWrapper, "@UrlReferral", DbType.AnsiString,  urlReferral );
			database.AddInParameter(commandWrapper, "@ApplicantGrade", DbType.Int32,  applicantGrade );
			database.AddInParameter(commandWrapper, "@LastViewedDate", DbType.DateTime,  lastViewedDate );
			database.AddInParameter(commandWrapper, "@FirstName", DbType.String,  firstName );
			database.AddInParameter(commandWrapper, "@Surname", DbType.String,  surname );
			database.AddInParameter(commandWrapper, "@EmailAddress", DbType.AnsiString,  emailAddress );
			database.AddInParameter(commandWrapper, "@MobilePhone", DbType.AnsiStringFixedLength,  mobilePhone );
			database.AddInParameter(commandWrapper, "@MemberNote", DbType.String,  memberNote );
			database.AddInParameter(commandWrapper, "@AdvertiserNote", DbType.String,  advertiserNote );
			database.AddInParameter(commandWrapper, "@JobArchiveId", DbType.Int32,  jobArchiveId );
			database.AddInParameter(commandWrapper, "@Draft", DbType.Boolean,  draft );
			database.AddInParameter(commandWrapper, "@JobApplicationTypeId", DbType.Int32,  jobApplicationTypeId );
			database.AddInParameter(commandWrapper, "@ExternalXmlFilename", DbType.AnsiString,  externalXmlFilename );
			database.AddInParameter(commandWrapper, "@CustomQuestionnaireXml", DbType.String,  customQuestionnaireXml );
			database.AddInParameter(commandWrapper, "@ExternalPdfFilename", DbType.AnsiString,  externalPdfFilename );
			database.AddInParameter(commandWrapper, "@FileDownloaded", DbType.Boolean,  fileDownloaded );
			database.AddInParameter(commandWrapper, "@AppliedWith", DbType.AnsiString,  appliedWith );
			database.AddInParameter(commandWrapper, "@ScreeningQuestionaireXml", DbType.String,  screeningQuestionaireXml );
			database.AddInParameter(commandWrapper, "@ScreeningQuestionsGuid", DbType.Guid,  screeningQuestionsGuid );
			database.AddInParameter(commandWrapper, "@ProcessDate", DbType.DateTime,  processDate );
			database.AddInParameter(commandWrapper, "@ProcessException", DbType.AnsiString,  processException );
			database.AddInParameter(commandWrapper, "@ExternalId", DbType.AnsiString,  externalId );
	
			database.AddParameter(commandWrapper, "@JobApplicationId", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, jobApplicationId);
			database.AddParameter(commandWrapper, "@JobAppValidateId", DbType.Guid, 16, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, jobAppValidateId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", (IEntity)null));

			jobApplicationId =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@JobApplicationId"]);
			jobAppValidateId =  Utility.GetParameterValue<System.Guid?>(commandWrapper.Parameters["@JobAppValidateId"]);

				
				return;
		}
		#endregion

		#region JobApplication_GetBySiteIdReferral
					
		/// <summary>
		///	This method wraps the 'JobApplication_GetBySiteIdReferral' stored procedure. 
		/// </summary>	
		/// <param name="siteIdReferral"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBySiteIdReferral(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteIdReferral)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_GetBySiteIdReferral", true);
			
			database.AddInParameter(commandWrapper, "@SiteIdReferral", DbType.Int32,  siteIdReferral );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteIdReferral", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteIdReferral", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobApplication_GetByAdvertiserId
					
		/// <summary>
		///	This method wraps the 'JobApplication_GetByAdvertiserId' stored procedure. 
		/// </summary>	
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageNumber"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByAdvertiserId(TransactionManager transactionManager, int start, int pageLength , System.Int32? advertiserId, System.Int32? pageNumber, System.Int32? pageSize)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_GetByAdvertiserId", true);
			
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@PageNumber", DbType.Int32,  pageNumber );
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32,  pageSize );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdvertiserId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdvertiserId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobApplication_GetByJobArchiveId
					
		/// <summary>
		///	This method wraps the 'JobApplication_GetByJobArchiveId' stored procedure. 
		/// </summary>	
		/// <param name="jobArchiveId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByJobArchiveId(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobArchiveId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_GetByJobArchiveId", true);
			
			database.AddInParameter(commandWrapper, "@JobArchiveId", DbType.Int32,  jobArchiveId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByJobArchiveId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByJobArchiveId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobApplication_GetPaged
					
		/// <summary>
		///	This method wraps the 'JobApplication_GetPaged' stored procedure. 
		/// </summary>	
		/// <param name="whereClause"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetPaged(TransactionManager transactionManager, int start, int pageLength , System.String whereClause, System.String orderBy, System.Int32? pageIndex, System.Int32? pageSize)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_GetPaged", true);
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.AnsiString,  whereClause );
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.AnsiString,  orderBy );
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32,  pageIndex );
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32,  pageSize );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobApplication_CustomGetDraftJobsByMemberId
					
		/// <summary>
		///	This method wraps the 'JobApplication_CustomGetDraftJobsByMemberId' stored procedure. 
		/// </summary>	
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageNumber"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet CustomGetDraftJobsByMemberId(TransactionManager transactionManager, int start, int pageLength , System.Int32? memberId, System.Int32? pageSize, System.Int32? pageNumber)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_CustomGetDraftJobsByMemberId", true);
			
			database.AddInParameter(commandWrapper, "@MemberID", DbType.Int32,  memberId );
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32,  pageSize );
			database.AddInParameter(commandWrapper, "@PageNumber", DbType.Int32,  pageNumber );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomGetDraftJobsByMemberId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomGetDraftJobsByMemberId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobApplication_CustomGetNewJobApplications
					
		/// <summary>
		///	This method wraps the 'JobApplication_CustomGetNewJobApplications' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobApplicationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet CustomGetNewJobApplications(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.Int32? jobApplicationId, System.Int32? advertiserUserId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_CustomGetNewJobApplications", true);
			
			database.AddInParameter(commandWrapper, "@SiteID", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@JobApplicationID", DbType.Int32,  jobApplicationId );
			database.AddInParameter(commandWrapper, "@AdvertiserUserID", DbType.Int32,  advertiserUserId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomGetNewJobApplications", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomGetNewJobApplications", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobApplication_Get_List
					
		/// <summary>
		///	This method wraps the 'JobApplication_Get_List' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Get_List(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_Get_List", true);
			
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Get_List", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Get_List", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region JobApplication_CustomUpdateDownloadedFileStatus
					
		/// <summary>
		///	This method wraps the 'JobApplication_CustomUpdateDownloadedFileStatus' stored procedure. 
		/// </summary>	
		/// <param name="jobappids"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void CustomUpdateDownloadedFileStatus(TransactionManager transactionManager, int start, int pageLength , System.String jobappids)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.JobApplication_CustomUpdateDownloadedFileStatus", true);
			
			database.AddInParameter(commandWrapper, "@jobappids", DbType.String,  jobappids );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomUpdateDownloadedFileStatus", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomUpdateDownloadedFileStatus", (IEntity)null));


				
				return;
		}
		#endregion
		#endregion
	}//end class
} // end namespace

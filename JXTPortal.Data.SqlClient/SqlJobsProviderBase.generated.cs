
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlJobsProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using JXTPortal.Entities;
using JXTPortal.Data;
using JXTPortal.Data.Bases;

#endregion

namespace JXTPortal.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Jobs"/> entity.
	///</summary>
	public abstract partial class SqlJobsProviderBase : JobsProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlJobsProviderBase"/> instance.
		/// </summary>
		public SqlJobsProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlJobsProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlJobsProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_jobId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _jobId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@JobId", DbType.Int32, _jobId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Jobs)
					,_jobId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Jobs objects.</returns>
		public override TList<Jobs> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<Jobs>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@JobId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Description", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FullDescription", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WebServiceProcessed", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ApplicationEmailAddress", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RefNo", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Visible", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DatePosted", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExpiryDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Expired", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobItemPrice", DbType.Currency, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Billed", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShowSalaryDetails", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SalaryText", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastModifiedByAdvertiserUserId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastModifiedByAdminUserId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobItemTypeId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ApplicationMethod", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ApplicationUrl", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UploadMethod", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Tags", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobTemplateId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SearchFieldExtension", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdvertiserJobTemplateLogoId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HashValue", DbType.Binary, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RequireLogonForExternalApplications", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShowLocationDetails", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PublicTransport", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Address", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ContactDetails", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobContactPhone", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobContactName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@QualificationsRecognised", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ResidentOnly", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DocumentLink", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BulletPoint1", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BulletPoint2", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BulletPoint3", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HotJob", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobFriendlyName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SearchField", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShowSalaryRange", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EnteredByAdvertiserUserId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobLatitude", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobLongitude", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AddressStatus", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobExternalId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ScreeningQuestionsTemplateId", DbType.Int32, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("jobid ") || clause.Trim().StartsWith("jobid="))
				{
					database.SetParameterValue(commandWrapper, "@JobId", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("siteid ") || clause.Trim().StartsWith("siteid="))
				{
					database.SetParameterValue(commandWrapper, "@SiteId", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("worktypeid ") || clause.Trim().StartsWith("worktypeid="))
				{
					database.SetParameterValue(commandWrapper, "@WorkTypeId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobname ") || clause.Trim().StartsWith("jobname="))
				{
					database.SetParameterValue(commandWrapper, "@JobName", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("description ") || clause.Trim().StartsWith("description="))
				{
					database.SetParameterValue(commandWrapper, "@Description", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fulldescription ") || clause.Trim().StartsWith("fulldescription="))
				{
					database.SetParameterValue(commandWrapper, "@FullDescription", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("webserviceprocessed ") || clause.Trim().StartsWith("webserviceprocessed="))
				{
					database.SetParameterValue(commandWrapper, "@WebServiceProcessed", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("applicationemailaddress ") || clause.Trim().StartsWith("applicationemailaddress="))
				{
					database.SetParameterValue(commandWrapper, "@ApplicationEmailAddress", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("refno ") || clause.Trim().StartsWith("refno="))
				{
					database.SetParameterValue(commandWrapper, "@RefNo", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("visible ") || clause.Trim().StartsWith("visible="))
				{
					database.SetParameterValue(commandWrapper, "@Visible", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dateposted ") || clause.Trim().StartsWith("dateposted="))
				{
					database.SetParameterValue(commandWrapper, "@DatePosted", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("expirydate ") || clause.Trim().StartsWith("expirydate="))
				{
					database.SetParameterValue(commandWrapper, "@ExpiryDate", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("expired ") || clause.Trim().StartsWith("expired="))
				{
					database.SetParameterValue(commandWrapper, "@Expired", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobitemprice ") || clause.Trim().StartsWith("jobitemprice="))
				{
					database.SetParameterValue(commandWrapper, "@JobItemPrice", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billed ") || clause.Trim().StartsWith("billed="))
				{
					database.SetParameterValue(commandWrapper, "@Billed", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastmodified ") || clause.Trim().StartsWith("lastmodified="))
				{
					database.SetParameterValue(commandWrapper, "@LastModified", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("showsalarydetails ") || clause.Trim().StartsWith("showsalarydetails="))
				{
					database.SetParameterValue(commandWrapper, "@ShowSalaryDetails", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("salarytext ") || clause.Trim().StartsWith("salarytext="))
				{
					database.SetParameterValue(commandWrapper, "@SalaryText", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("advertiserid ") || clause.Trim().StartsWith("advertiserid="))
				{
					database.SetParameterValue(commandWrapper, "@AdvertiserId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastmodifiedbyadvertiseruserid ") || clause.Trim().StartsWith("lastmodifiedbyadvertiseruserid="))
				{
					database.SetParameterValue(commandWrapper, "@LastModifiedByAdvertiserUserId", 
						clause.Trim().Remove(0,30).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastmodifiedbyadminuserid ") || clause.Trim().StartsWith("lastmodifiedbyadminuserid="))
				{
					database.SetParameterValue(commandWrapper, "@LastModifiedByAdminUserId", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobitemtypeid ") || clause.Trim().StartsWith("jobitemtypeid="))
				{
					database.SetParameterValue(commandWrapper, "@JobItemTypeId", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("applicationmethod ") || clause.Trim().StartsWith("applicationmethod="))
				{
					database.SetParameterValue(commandWrapper, "@ApplicationMethod", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("applicationurl ") || clause.Trim().StartsWith("applicationurl="))
				{
					database.SetParameterValue(commandWrapper, "@ApplicationUrl", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("uploadmethod ") || clause.Trim().StartsWith("uploadmethod="))
				{
					database.SetParameterValue(commandWrapper, "@UploadMethod", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tags ") || clause.Trim().StartsWith("tags="))
				{
					database.SetParameterValue(commandWrapper, "@Tags", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobtemplateid ") || clause.Trim().StartsWith("jobtemplateid="))
				{
					database.SetParameterValue(commandWrapper, "@JobTemplateId", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("searchfieldextension ") || clause.Trim().StartsWith("searchfieldextension="))
				{
					database.SetParameterValue(commandWrapper, "@SearchFieldExtension", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("advertiserjobtemplatelogoid ") || clause.Trim().StartsWith("advertiserjobtemplatelogoid="))
				{
					database.SetParameterValue(commandWrapper, "@AdvertiserJobTemplateLogoId", 
						clause.Trim().Remove(0,27).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("companyname ") || clause.Trim().StartsWith("companyname="))
				{
					database.SetParameterValue(commandWrapper, "@CompanyName", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hashvalue ") || clause.Trim().StartsWith("hashvalue="))
				{
					database.SetParameterValue(commandWrapper, "@HashValue", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("requirelogonforexternalapplications ") || clause.Trim().StartsWith("requirelogonforexternalapplications="))
				{
					database.SetParameterValue(commandWrapper, "@RequireLogonForExternalApplications", 
						clause.Trim().Remove(0,35).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("showlocationdetails ") || clause.Trim().StartsWith("showlocationdetails="))
				{
					database.SetParameterValue(commandWrapper, "@ShowLocationDetails", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("publictransport ") || clause.Trim().StartsWith("publictransport="))
				{
					database.SetParameterValue(commandWrapper, "@PublicTransport", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("address ") || clause.Trim().StartsWith("address="))
				{
					database.SetParameterValue(commandWrapper, "@Address", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("contactdetails ") || clause.Trim().StartsWith("contactdetails="))
				{
					database.SetParameterValue(commandWrapper, "@ContactDetails", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobcontactphone ") || clause.Trim().StartsWith("jobcontactphone="))
				{
					database.SetParameterValue(commandWrapper, "@JobContactPhone", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobcontactname ") || clause.Trim().StartsWith("jobcontactname="))
				{
					database.SetParameterValue(commandWrapper, "@JobContactName", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("qualificationsrecognised ") || clause.Trim().StartsWith("qualificationsrecognised="))
				{
					database.SetParameterValue(commandWrapper, "@QualificationsRecognised", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("residentonly ") || clause.Trim().StartsWith("residentonly="))
				{
					database.SetParameterValue(commandWrapper, "@ResidentOnly", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("documentlink ") || clause.Trim().StartsWith("documentlink="))
				{
					database.SetParameterValue(commandWrapper, "@DocumentLink", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("bulletpoint1 ") || clause.Trim().StartsWith("bulletpoint1="))
				{
					database.SetParameterValue(commandWrapper, "@BulletPoint1", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("bulletpoint2 ") || clause.Trim().StartsWith("bulletpoint2="))
				{
					database.SetParameterValue(commandWrapper, "@BulletPoint2", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("bulletpoint3 ") || clause.Trim().StartsWith("bulletpoint3="))
				{
					database.SetParameterValue(commandWrapper, "@BulletPoint3", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hotjob ") || clause.Trim().StartsWith("hotjob="))
				{
					database.SetParameterValue(commandWrapper, "@HotJob", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobfriendlyname ") || clause.Trim().StartsWith("jobfriendlyname="))
				{
					database.SetParameterValue(commandWrapper, "@JobFriendlyName", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("searchfield ") || clause.Trim().StartsWith("searchfield="))
				{
					database.SetParameterValue(commandWrapper, "@SearchField", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("showsalaryrange ") || clause.Trim().StartsWith("showsalaryrange="))
				{
					database.SetParameterValue(commandWrapper, "@ShowSalaryRange", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("salarylowerband ") || clause.Trim().StartsWith("salarylowerband="))
				{
					database.SetParameterValue(commandWrapper, "@SalaryLowerBand", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("salaryupperband ") || clause.Trim().StartsWith("salaryupperband="))
				{
					database.SetParameterValue(commandWrapper, "@SalaryUpperBand", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("currencyid ") || clause.Trim().StartsWith("currencyid="))
				{
					database.SetParameterValue(commandWrapper, "@CurrencyId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("salarytypeid ") || clause.Trim().StartsWith("salarytypeid="))
				{
					database.SetParameterValue(commandWrapper, "@SalaryTypeId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("enteredbyadvertiseruserid ") || clause.Trim().StartsWith("enteredbyadvertiseruserid="))
				{
					database.SetParameterValue(commandWrapper, "@EnteredByAdvertiserUserId", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("joblatitude ") || clause.Trim().StartsWith("joblatitude="))
				{
					database.SetParameterValue(commandWrapper, "@JobLatitude", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("joblongitude ") || clause.Trim().StartsWith("joblongitude="))
				{
					database.SetParameterValue(commandWrapper, "@JobLongitude", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("addressstatus ") || clause.Trim().StartsWith("addressstatus="))
				{
					database.SetParameterValue(commandWrapper, "@AddressStatus", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("jobexternalid ") || clause.Trim().StartsWith("jobexternalid="))
				{
					database.SetParameterValue(commandWrapper, "@JobExternalId", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("screeningquestionstemplateid ") || clause.Trim().StartsWith("screeningquestionstemplateid="))
				{
					database.SetParameterValue(commandWrapper, "@ScreeningQuestionsTemplateId", 
						clause.Trim().Remove(0,28).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<Jobs> rows = new TList<Jobs>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Jobs objects.</returns>
		public override TList<Jobs> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_Find_Dynamic", typeof(JobsColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<Jobs> rows = new TList<Jobs>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Jobs objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Jobs> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<Jobs> rows = new TList<Jobs>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Jobs objects.</returns>
		public override TList<Jobs> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<Jobs> rows = new TList<Jobs>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByAdvertiserId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__Jobs__Advertiser__6C63F2D5 key.
		///		FK__Jobs__Advertiser__6C63F2D5 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_advertiserId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Jobs objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Jobs> GetByAdvertiserId(TransactionManager transactionManager, System.Int32? _advertiserId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByAdvertiserId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32, _advertiserId);
			
			IDataReader reader = null;
			TList<Jobs> rows = new TList<Jobs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdvertiserId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdvertiserId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByCurrencyId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__Jobs__CurrencyID__45554476 key.
		///		FK__Jobs__CurrencyID__45554476 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_currencyId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Jobs objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Jobs> GetByCurrencyId(TransactionManager transactionManager, System.Int32 _currencyId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByCurrencyId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32, _currencyId);
			
			IDataReader reader = null;
			TList<Jobs> rows = new TList<Jobs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCurrencyId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCurrencyId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByJobTemplateId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__Jobs__JobTemplat__703483B9 key.
		///		FK__Jobs__JobTemplat__703483B9 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_jobTemplateId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Jobs objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Jobs> GetByJobTemplateId(TransactionManager transactionManager, System.Int32? _jobTemplateId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByJobTemplateId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@JobTemplateId", DbType.Int32, _jobTemplateId);
			
			IDataReader reader = null;
			TList<Jobs> rows = new TList<Jobs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByJobTemplateId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByJobTemplateId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByLastModifiedByAdvertiserUserId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__Jobs__LastModifi__6D58170E key.
		///		FK__Jobs__LastModifi__6D58170E Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_lastModifiedByAdvertiserUserId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Jobs objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Jobs> GetByLastModifiedByAdvertiserUserId(TransactionManager transactionManager, System.Int32? _lastModifiedByAdvertiserUserId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByLastModifiedByAdvertiserUserId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@LastModifiedByAdvertiserUserId", DbType.Int32, _lastModifiedByAdvertiserUserId);
			
			IDataReader reader = null;
			TList<Jobs> rows = new TList<Jobs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByLastModifiedByAdvertiserUserId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByLastModifiedByAdvertiserUserId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByLastModifiedByAdminUserId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__Jobs__LastModifi__6E4C3B47 key.
		///		FK__Jobs__LastModifi__6E4C3B47 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_lastModifiedByAdminUserId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Jobs objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Jobs> GetByLastModifiedByAdminUserId(TransactionManager transactionManager, System.Int32? _lastModifiedByAdminUserId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByLastModifiedByAdminUserId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@LastModifiedByAdminUserId", DbType.Int32, _lastModifiedByAdminUserId);
			
			IDataReader reader = null;
			TList<Jobs> rows = new TList<Jobs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByLastModifiedByAdminUserId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByLastModifiedByAdminUserId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySalaryTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__Jobs__SalaryType__464968AF key.
		///		FK__Jobs__SalaryType__464968AF Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_salaryTypeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Jobs objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Jobs> GetBySalaryTypeId(TransactionManager transactionManager, System.Int32 _salaryTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetBySalaryTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32, _salaryTypeId);
			
			IDataReader reader = null;
			TList<Jobs> rows = new TList<Jobs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySalaryTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySalaryTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByScreeningQuestionsTemplateId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__Jobs__ScreeningQ__43CEFD10 key.
		///		FK__Jobs__ScreeningQ__43CEFD10 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_screeningQuestionsTemplateId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Jobs objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Jobs> GetByScreeningQuestionsTemplateId(TransactionManager transactionManager, System.Int32? _screeningQuestionsTemplateId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByScreeningQuestionsTemplateId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ScreeningQuestionsTemplateId", DbType.Int32, _screeningQuestionsTemplateId);
			
			IDataReader reader = null;
			TList<Jobs> rows = new TList<Jobs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByScreeningQuestionsTemplateId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByScreeningQuestionsTemplateId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySiteId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__Jobs__SiteID__64C2D10D key.
		///		FK__Jobs__SiteID__64C2D10D Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_siteId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Jobs objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Jobs> GetBySiteId(TransactionManager transactionManager, System.Int32 _siteId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetBySiteId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, _siteId);
			
			IDataReader reader = null;
			TList<Jobs> rows = new TList<Jobs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByWorkTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__Jobs__WorkTypeID__65B6F546 key.
		///		FK__Jobs__WorkTypeID__65B6F546 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_workTypeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Jobs objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Jobs> GetByWorkTypeId(TransactionManager transactionManager, System.Int32 _workTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByWorkTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.Int32, _workTypeId);
			
			IDataReader reader = null;
			TList<Jobs> rows = new TList<Jobs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByWorkTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByWorkTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByExpiredAdvertiserIdExpiryDate
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Jobs_Expired_AdvertiserID_ExpiryDate index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_expired"></param>
		/// <param name="_advertiserId"></param>
		/// <param name="_expiryDate"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;Jobs&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Jobs> GetByExpiredAdvertiserIdExpiryDate(TransactionManager transactionManager, System.Int32? _expired, System.Int32? _advertiserId, System.DateTime _expiryDate, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByExpiredAdvertiserIdExpiryDate", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Expired", DbType.Int32, _expired);
				database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32, _advertiserId);
				database.AddInParameter(commandWrapper, "@ExpiryDate", DbType.DateTime, _expiryDate);
			
			IDataReader reader = null;
			TList<Jobs> tmp = new TList<Jobs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByExpiredAdvertiserIdExpiryDate", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByExpiredAdvertiserIdExpiryDate", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByExpiredBilledExpiryDate
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Jobs_Expired_Bill_ExpiryDate index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_expired"></param>
		/// <param name="_billed"></param>
		/// <param name="_expiryDate"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;Jobs&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Jobs> GetByExpiredBilledExpiryDate(TransactionManager transactionManager, System.Int32? _expired, System.Boolean _billed, System.DateTime _expiryDate, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByExpiredBilledExpiryDate", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Expired", DbType.Int32, _expired);
				database.AddInParameter(commandWrapper, "@Billed", DbType.Boolean, _billed);
				database.AddInParameter(commandWrapper, "@ExpiryDate", DbType.DateTime, _expiryDate);
			
			IDataReader reader = null;
			TList<Jobs> tmp = new TList<Jobs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByExpiredBilledExpiryDate", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByExpiredBilledExpiryDate", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByExpiredExpiryDate
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Jobs_Expired_ExpiryDate index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_expired"></param>
		/// <param name="_expiryDate"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;Jobs&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Jobs> GetByExpiredExpiryDate(TransactionManager transactionManager, System.Int32? _expired, System.DateTime _expiryDate, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByExpiredExpiryDate", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Expired", DbType.Int32, _expired);
				database.AddInParameter(commandWrapper, "@ExpiryDate", DbType.DateTime, _expiryDate);
			
			IDataReader reader = null;
			TList<Jobs> tmp = new TList<Jobs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByExpiredExpiryDate", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByExpiredExpiryDate", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByWorkTypeIdJobIdAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandExpiredExpiryDate
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Jobs_Search index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_workTypeId"></param>
		/// <param name="_jobId"></param>
		/// <param name="_advertiserId"></param>
		/// <param name="_currencyId"></param>
		/// <param name="_salaryTypeId"></param>
		/// <param name="_salaryLowerBand"></param>
		/// <param name="_salaryUpperBand"></param>
		/// <param name="_expired"></param>
		/// <param name="_expiryDate"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;Jobs&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Jobs> GetByWorkTypeIdJobIdAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandExpiredExpiryDate(TransactionManager transactionManager, System.Int32 _workTypeId, System.Int32 _jobId, System.Int32? _advertiserId, System.Int32 _currencyId, System.Int32 _salaryTypeId, System.Decimal _salaryLowerBand, System.Decimal _salaryUpperBand, System.Int32? _expired, System.DateTime _expiryDate, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByWorkTypeIdJobIdAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandExpiredExpiryDate", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.Int32, _workTypeId);
				database.AddInParameter(commandWrapper, "@JobId", DbType.Int32, _jobId);
				database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32, _advertiserId);
				database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32, _currencyId);
				database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32, _salaryTypeId);
				database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal, _salaryLowerBand);
				database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal, _salaryUpperBand);
				database.AddInParameter(commandWrapper, "@Expired", DbType.Int32, _expired);
				database.AddInParameter(commandWrapper, "@ExpiryDate", DbType.DateTime, _expiryDate);
			
			IDataReader reader = null;
			TList<Jobs> tmp = new TList<Jobs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByWorkTypeIdJobIdAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandExpiredExpiryDate", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByWorkTypeIdJobIdAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandExpiredExpiryDate", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetBySiteIdBilledAdvertiserId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Jobs_SiteID_Billed_AdvertiserID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_siteId"></param>
		/// <param name="_billed"></param>
		/// <param name="_advertiserId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;Jobs&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Jobs> GetBySiteIdBilledAdvertiserId(TransactionManager transactionManager, System.Int32 _siteId, System.Boolean _billed, System.Int32? _advertiserId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetBySiteIdBilledAdvertiserId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, _siteId);
				database.AddInParameter(commandWrapper, "@Billed", DbType.Boolean, _billed);
				database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32, _advertiserId);
			
			IDataReader reader = null;
			TList<Jobs> tmp = new TList<Jobs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteIdBilledAdvertiserId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteIdBilledAdvertiserId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetBySiteIdExpiredBilledAdvertiserIdEnteredByAdvertiserUserId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Jobs_SiteID_Expired_Billed_AdvertiserID_EnteredByAdvertiserUserID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_siteId"></param>
		/// <param name="_expired"></param>
		/// <param name="_billed"></param>
		/// <param name="_advertiserId"></param>
		/// <param name="_enteredByAdvertiserUserId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;Jobs&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Jobs> GetBySiteIdExpiredBilledAdvertiserIdEnteredByAdvertiserUserId(TransactionManager transactionManager, System.Int32 _siteId, System.Int32? _expired, System.Boolean _billed, System.Int32? _advertiserId, System.Int32? _enteredByAdvertiserUserId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetBySiteIdExpiredBilledAdvertiserIdEnteredByAdvertiserUserId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, _siteId);
				database.AddInParameter(commandWrapper, "@Expired", DbType.Int32, _expired);
				database.AddInParameter(commandWrapper, "@Billed", DbType.Boolean, _billed);
				database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32, _advertiserId);
				database.AddInParameter(commandWrapper, "@EnteredByAdvertiserUserId", DbType.Int32, _enteredByAdvertiserUserId);
			
			IDataReader reader = null;
			TList<Jobs> tmp = new TList<Jobs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteIdExpiredBilledAdvertiserIdEnteredByAdvertiserUserId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteIdExpiredBilledAdvertiserIdEnteredByAdvertiserUserId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByJobId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK__Jobs__63CEACD4 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_jobId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="JXTPortal.Entities.Jobs"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override JXTPortal.Entities.Jobs GetByJobId(TransactionManager transactionManager, System.Int32 _jobId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByJobId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@JobId", DbType.Int32, _jobId);
			
			IDataReader reader = null;
			TList<Jobs> tmp = new TList<Jobs>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByJobId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByJobId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the JXTPortal.Entities.Jobs object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<JXTPortal.Entities.Jobs> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "Jobs";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("JobID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("SiteID", typeof(System.Int32));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("WorkTypeID", typeof(System.Int32));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("JobName", typeof(System.String));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("Description", typeof(System.String));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("FullDescription", typeof(System.String));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("WebServiceProcessed", typeof(System.Boolean));
			col6.AllowDBNull = false;		
			DataColumn col7 = dataTable.Columns.Add("ApplicationEmailAddress", typeof(System.String));
			col7.AllowDBNull = false;		
			DataColumn col8 = dataTable.Columns.Add("RefNo", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("Visible", typeof(System.Boolean));
			col9.AllowDBNull = false;		
			DataColumn col10 = dataTable.Columns.Add("DatePosted", typeof(System.DateTime));
			col10.AllowDBNull = false;		
			DataColumn col11 = dataTable.Columns.Add("ExpiryDate", typeof(System.DateTime));
			col11.AllowDBNull = false;		
			DataColumn col12 = dataTable.Columns.Add("Expired", typeof(System.Int32));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("JobItemPrice", typeof(System.Decimal));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("Billed", typeof(System.Boolean));
			col14.AllowDBNull = false;		
			DataColumn col15 = dataTable.Columns.Add("LastModified", typeof(System.DateTime));
			col15.AllowDBNull = false;		
			DataColumn col16 = dataTable.Columns.Add("ShowSalaryDetails", typeof(System.Boolean));
			col16.AllowDBNull = false;		
			DataColumn col17 = dataTable.Columns.Add("SalaryText", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("AdvertiserID", typeof(System.Int32));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("LastModifiedByAdvertiserUserId", typeof(System.Int32));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("LastModifiedByAdminUserId", typeof(System.Int32));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("JobItemTypeID", typeof(System.Int32));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("ApplicationMethod", typeof(System.Int32));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("ApplicationURL", typeof(System.String));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("UploadMethod", typeof(System.Int32));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("Tags", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("JobTemplateID", typeof(System.Int32));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("SearchFieldExtension", typeof(System.String));
			col27.AllowDBNull = false;		
			DataColumn col28 = dataTable.Columns.Add("AdvertiserJobTemplateLogoID", typeof(System.Int32));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("CompanyName", typeof(System.String));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("HashValue", typeof(System.Byte[]));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("RequireLogonForExternalApplications", typeof(System.Boolean));
			col31.AllowDBNull = false;		
			DataColumn col32 = dataTable.Columns.Add("ShowLocationDetails", typeof(System.Boolean));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("PublicTransport", typeof(System.String));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("Address", typeof(System.String));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("ContactDetails", typeof(System.String));
			col35.AllowDBNull = false;		
			DataColumn col36 = dataTable.Columns.Add("JobContactPhone", typeof(System.String));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("JobContactName", typeof(System.String));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("QualificationsRecognised", typeof(System.Boolean));
			col38.AllowDBNull = false;		
			DataColumn col39 = dataTable.Columns.Add("ResidentOnly", typeof(System.Boolean));
			col39.AllowDBNull = false;		
			DataColumn col40 = dataTable.Columns.Add("DocumentLink", typeof(System.String));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("BulletPoint1", typeof(System.String));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("BulletPoint2", typeof(System.String));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("BulletPoint3", typeof(System.String));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("HotJob", typeof(System.Boolean));
			col44.AllowDBNull = false;		
			DataColumn col45 = dataTable.Columns.Add("JobFriendlyName", typeof(System.String));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("SearchField", typeof(System.String));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("ShowSalaryRange", typeof(System.Boolean));
			col47.AllowDBNull = false;		
			DataColumn col48 = dataTable.Columns.Add("SalaryLowerBand", typeof(System.Decimal));
			col48.AllowDBNull = false;		
			DataColumn col49 = dataTable.Columns.Add("SalaryUpperBand", typeof(System.Decimal));
			col49.AllowDBNull = false;		
			DataColumn col50 = dataTable.Columns.Add("CurrencyID", typeof(System.Int32));
			col50.AllowDBNull = false;		
			DataColumn col51 = dataTable.Columns.Add("SalaryTypeID", typeof(System.Int32));
			col51.AllowDBNull = false;		
			DataColumn col52 = dataTable.Columns.Add("EnteredByAdvertiserUserID", typeof(System.Int32));
			col52.AllowDBNull = true;		
			DataColumn col53 = dataTable.Columns.Add("JobLatitude", typeof(System.Double));
			col53.AllowDBNull = true;		
			DataColumn col54 = dataTable.Columns.Add("JobLongitude", typeof(System.Double));
			col54.AllowDBNull = true;		
			DataColumn col55 = dataTable.Columns.Add("AddressStatus", typeof(System.Int32));
			col55.AllowDBNull = true;		
			DataColumn col56 = dataTable.Columns.Add("JobExternalId", typeof(System.String));
			col56.AllowDBNull = true;		
			DataColumn col57 = dataTable.Columns.Add("ScreeningQuestionsTemplateId", typeof(System.Int32));
			col57.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("JobID", "JobID");
			bulkCopy.ColumnMappings.Add("SiteID", "SiteID");
			bulkCopy.ColumnMappings.Add("WorkTypeID", "WorkTypeID");
			bulkCopy.ColumnMappings.Add("JobName", "JobName");
			bulkCopy.ColumnMappings.Add("Description", "Description");
			bulkCopy.ColumnMappings.Add("FullDescription", "FullDescription");
			bulkCopy.ColumnMappings.Add("WebServiceProcessed", "WebServiceProcessed");
			bulkCopy.ColumnMappings.Add("ApplicationEmailAddress", "ApplicationEmailAddress");
			bulkCopy.ColumnMappings.Add("RefNo", "RefNo");
			bulkCopy.ColumnMappings.Add("Visible", "Visible");
			bulkCopy.ColumnMappings.Add("DatePosted", "DatePosted");
			bulkCopy.ColumnMappings.Add("ExpiryDate", "ExpiryDate");
			bulkCopy.ColumnMappings.Add("Expired", "Expired");
			bulkCopy.ColumnMappings.Add("JobItemPrice", "JobItemPrice");
			bulkCopy.ColumnMappings.Add("Billed", "Billed");
			bulkCopy.ColumnMappings.Add("LastModified", "LastModified");
			bulkCopy.ColumnMappings.Add("ShowSalaryDetails", "ShowSalaryDetails");
			bulkCopy.ColumnMappings.Add("SalaryText", "SalaryText");
			bulkCopy.ColumnMappings.Add("AdvertiserID", "AdvertiserID");
			bulkCopy.ColumnMappings.Add("LastModifiedByAdvertiserUserId", "LastModifiedByAdvertiserUserId");
			bulkCopy.ColumnMappings.Add("LastModifiedByAdminUserId", "LastModifiedByAdminUserId");
			bulkCopy.ColumnMappings.Add("JobItemTypeID", "JobItemTypeID");
			bulkCopy.ColumnMappings.Add("ApplicationMethod", "ApplicationMethod");
			bulkCopy.ColumnMappings.Add("ApplicationURL", "ApplicationURL");
			bulkCopy.ColumnMappings.Add("UploadMethod", "UploadMethod");
			bulkCopy.ColumnMappings.Add("Tags", "Tags");
			bulkCopy.ColumnMappings.Add("JobTemplateID", "JobTemplateID");
			bulkCopy.ColumnMappings.Add("SearchFieldExtension", "SearchFieldExtension");
			bulkCopy.ColumnMappings.Add("AdvertiserJobTemplateLogoID", "AdvertiserJobTemplateLogoID");
			bulkCopy.ColumnMappings.Add("CompanyName", "CompanyName");
			bulkCopy.ColumnMappings.Add("HashValue", "HashValue");
			bulkCopy.ColumnMappings.Add("RequireLogonForExternalApplications", "RequireLogonForExternalApplications");
			bulkCopy.ColumnMappings.Add("ShowLocationDetails", "ShowLocationDetails");
			bulkCopy.ColumnMappings.Add("PublicTransport", "PublicTransport");
			bulkCopy.ColumnMappings.Add("Address", "Address");
			bulkCopy.ColumnMappings.Add("ContactDetails", "ContactDetails");
			bulkCopy.ColumnMappings.Add("JobContactPhone", "JobContactPhone");
			bulkCopy.ColumnMappings.Add("JobContactName", "JobContactName");
			bulkCopy.ColumnMappings.Add("QualificationsRecognised", "QualificationsRecognised");
			bulkCopy.ColumnMappings.Add("ResidentOnly", "ResidentOnly");
			bulkCopy.ColumnMappings.Add("DocumentLink", "DocumentLink");
			bulkCopy.ColumnMappings.Add("BulletPoint1", "BulletPoint1");
			bulkCopy.ColumnMappings.Add("BulletPoint2", "BulletPoint2");
			bulkCopy.ColumnMappings.Add("BulletPoint3", "BulletPoint3");
			bulkCopy.ColumnMappings.Add("HotJob", "HotJob");
			bulkCopy.ColumnMappings.Add("JobFriendlyName", "JobFriendlyName");
			bulkCopy.ColumnMappings.Add("SearchField", "SearchField");
			bulkCopy.ColumnMappings.Add("ShowSalaryRange", "ShowSalaryRange");
			bulkCopy.ColumnMappings.Add("SalaryLowerBand", "SalaryLowerBand");
			bulkCopy.ColumnMappings.Add("SalaryUpperBand", "SalaryUpperBand");
			bulkCopy.ColumnMappings.Add("CurrencyID", "CurrencyID");
			bulkCopy.ColumnMappings.Add("SalaryTypeID", "SalaryTypeID");
			bulkCopy.ColumnMappings.Add("EnteredByAdvertiserUserID", "EnteredByAdvertiserUserID");
			bulkCopy.ColumnMappings.Add("JobLatitude", "JobLatitude");
			bulkCopy.ColumnMappings.Add("JobLongitude", "JobLongitude");
			bulkCopy.ColumnMappings.Add("AddressStatus", "AddressStatus");
			bulkCopy.ColumnMappings.Add("JobExternalId", "JobExternalId");
			bulkCopy.ColumnMappings.Add("ScreeningQuestionsTemplateId", "ScreeningQuestionsTemplateId");
			
			foreach(JXTPortal.Entities.Jobs entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["JobID"] = entity.JobId;
							
				
					row["SiteID"] = entity.SiteId;
							
				
					row["WorkTypeID"] = entity.WorkTypeId;
							
				
					row["JobName"] = entity.JobName;
							
				
					row["Description"] = entity.Description;
							
				
					row["FullDescription"] = entity.FullDescription;
							
				
					row["WebServiceProcessed"] = entity.WebServiceProcessed;
							
				
					row["ApplicationEmailAddress"] = entity.ApplicationEmailAddress;
							
				
					row["RefNo"] = entity.RefNo;
							
				
					row["Visible"] = entity.Visible;
							
				
					row["DatePosted"] = entity.DatePosted;
							
				
					row["ExpiryDate"] = entity.ExpiryDate;
							
				
					row["Expired"] = entity.Expired.HasValue ? (object) entity.Expired  : System.DBNull.Value;
							
				
					row["JobItemPrice"] = entity.JobItemPrice.HasValue ? (object) entity.JobItemPrice  : System.DBNull.Value;
							
				
					row["Billed"] = entity.Billed;
							
				
					row["LastModified"] = entity.LastModified;
							
				
					row["ShowSalaryDetails"] = entity.ShowSalaryDetails;
							
				
					row["SalaryText"] = entity.SalaryText;
							
				
					row["AdvertiserID"] = entity.AdvertiserId.HasValue ? (object) entity.AdvertiserId  : System.DBNull.Value;
							
				
					row["LastModifiedByAdvertiserUserId"] = entity.LastModifiedByAdvertiserUserId.HasValue ? (object) entity.LastModifiedByAdvertiserUserId  : System.DBNull.Value;
							
				
					row["LastModifiedByAdminUserId"] = entity.LastModifiedByAdminUserId.HasValue ? (object) entity.LastModifiedByAdminUserId  : System.DBNull.Value;
							
				
					row["JobItemTypeID"] = entity.JobItemTypeId.HasValue ? (object) entity.JobItemTypeId  : System.DBNull.Value;
							
				
					row["ApplicationMethod"] = entity.ApplicationMethod.HasValue ? (object) entity.ApplicationMethod  : System.DBNull.Value;
							
				
					row["ApplicationURL"] = entity.ApplicationUrl;
							
				
					row["UploadMethod"] = entity.UploadMethod.HasValue ? (object) entity.UploadMethod  : System.DBNull.Value;
							
				
					row["Tags"] = entity.Tags;
							
				
					row["JobTemplateID"] = entity.JobTemplateId.HasValue ? (object) entity.JobTemplateId  : System.DBNull.Value;
							
				
					row["SearchFieldExtension"] = entity.SearchFieldExtension;
							
				
					row["AdvertiserJobTemplateLogoID"] = entity.AdvertiserJobTemplateLogoId.HasValue ? (object) entity.AdvertiserJobTemplateLogoId  : System.DBNull.Value;
							
				
					row["CompanyName"] = entity.CompanyName;
							
				
					row["HashValue"] = entity.HashValue;
							
				
					row["RequireLogonForExternalApplications"] = entity.RequireLogonForExternalApplications;
							
				
					row["ShowLocationDetails"] = entity.ShowLocationDetails.HasValue ? (object) entity.ShowLocationDetails  : System.DBNull.Value;
							
				
					row["PublicTransport"] = entity.PublicTransport;
							
				
					row["Address"] = entity.Address;
							
				
					row["ContactDetails"] = entity.ContactDetails;
							
				
					row["JobContactPhone"] = entity.JobContactPhone;
							
				
					row["JobContactName"] = entity.JobContactName;
							
				
					row["QualificationsRecognised"] = entity.QualificationsRecognised;
							
				
					row["ResidentOnly"] = entity.ResidentOnly;
							
				
					row["DocumentLink"] = entity.DocumentLink;
							
				
					row["BulletPoint1"] = entity.BulletPoint1;
							
				
					row["BulletPoint2"] = entity.BulletPoint2;
							
				
					row["BulletPoint3"] = entity.BulletPoint3;
							
				
					row["HotJob"] = entity.HotJob;
							
				
					row["JobFriendlyName"] = entity.JobFriendlyName;
							
				
					row["SearchField"] = entity.SearchField;
							
				
					row["ShowSalaryRange"] = entity.ShowSalaryRange;
							
				
					row["SalaryLowerBand"] = entity.SalaryLowerBand;
							
				
					row["SalaryUpperBand"] = entity.SalaryUpperBand;
							
				
					row["CurrencyID"] = entity.CurrencyId;
							
				
					row["SalaryTypeID"] = entity.SalaryTypeId;
							
				
					row["EnteredByAdvertiserUserID"] = entity.EnteredByAdvertiserUserId.HasValue ? (object) entity.EnteredByAdvertiserUserId  : System.DBNull.Value;
							
				
					row["JobLatitude"] = entity.JobLatitude.HasValue ? (object) entity.JobLatitude  : System.DBNull.Value;
							
				
					row["JobLongitude"] = entity.JobLongitude.HasValue ? (object) entity.JobLongitude  : System.DBNull.Value;
							
				
					row["AddressStatus"] = entity.AddressStatus.HasValue ? (object) entity.AddressStatus  : System.DBNull.Value;
							
				
					row["JobExternalId"] = entity.JobExternalId;
							
				
					row["ScreeningQuestionsTemplateId"] = entity.ScreeningQuestionsTemplateId.HasValue ? (object) entity.ScreeningQuestionsTemplateId  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(JXTPortal.Entities.Jobs entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a JXTPortal.Entities.Jobs object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">JXTPortal.Entities.Jobs object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the JXTPortal.Entities.Jobs object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, JXTPortal.Entities.Jobs entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@JobId", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, entity.SiteId );
			database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.Int32, entity.WorkTypeId );
			database.AddInParameter(commandWrapper, "@JobName", DbType.String, entity.JobName );
			database.AddInParameter(commandWrapper, "@Description", DbType.String, entity.Description );
			database.AddInParameter(commandWrapper, "@FullDescription", DbType.String, entity.FullDescription );
			database.AddInParameter(commandWrapper, "@WebServiceProcessed", DbType.Boolean, entity.WebServiceProcessed );
			database.AddInParameter(commandWrapper, "@ApplicationEmailAddress", DbType.AnsiString, entity.ApplicationEmailAddress );
			database.AddInParameter(commandWrapper, "@RefNo", DbType.AnsiString, entity.RefNo );
			database.AddInParameter(commandWrapper, "@Visible", DbType.Boolean, entity.Visible );
			database.AddInParameter(commandWrapper, "@DatePosted", DbType.DateTime, entity.DatePosted );
			database.AddInParameter(commandWrapper, "@ExpiryDate", DbType.DateTime, entity.ExpiryDate );
			database.AddInParameter(commandWrapper, "@Expired", DbType.Int32, (entity.Expired.HasValue ? (object) entity.Expired  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@JobItemPrice", DbType.Currency, (entity.JobItemPrice.HasValue ? (object) entity.JobItemPrice  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Billed", DbType.Boolean, entity.Billed );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, entity.LastModified );
			database.AddInParameter(commandWrapper, "@ShowSalaryDetails", DbType.Boolean, entity.ShowSalaryDetails );
			database.AddInParameter(commandWrapper, "@SalaryText", DbType.AnsiString, entity.SalaryText );
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32, (entity.AdvertiserId.HasValue ? (object) entity.AdvertiserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastModifiedByAdvertiserUserId", DbType.Int32, (entity.LastModifiedByAdvertiserUserId.HasValue ? (object) entity.LastModifiedByAdvertiserUserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastModifiedByAdminUserId", DbType.Int32, (entity.LastModifiedByAdminUserId.HasValue ? (object) entity.LastModifiedByAdminUserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@JobItemTypeId", DbType.Int32, (entity.JobItemTypeId.HasValue ? (object) entity.JobItemTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ApplicationMethod", DbType.Int32, (entity.ApplicationMethod.HasValue ? (object) entity.ApplicationMethod  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ApplicationUrl", DbType.AnsiString, entity.ApplicationUrl );
			database.AddInParameter(commandWrapper, "@UploadMethod", DbType.Int32, (entity.UploadMethod.HasValue ? (object) entity.UploadMethod  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Tags", DbType.AnsiString, entity.Tags );
			database.AddInParameter(commandWrapper, "@JobTemplateId", DbType.Int32, (entity.JobTemplateId.HasValue ? (object) entity.JobTemplateId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SearchFieldExtension", DbType.AnsiString, entity.SearchFieldExtension );
			database.AddInParameter(commandWrapper, "@AdvertiserJobTemplateLogoId", DbType.Int32, (entity.AdvertiserJobTemplateLogoId.HasValue ? (object) entity.AdvertiserJobTemplateLogoId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString, entity.CompanyName );
			database.AddInParameter(commandWrapper, "@HashValue", DbType.Binary, entity.HashValue );
			database.AddInParameter(commandWrapper, "@RequireLogonForExternalApplications", DbType.Boolean, entity.RequireLogonForExternalApplications );
			database.AddInParameter(commandWrapper, "@ShowLocationDetails", DbType.Boolean, (entity.ShowLocationDetails.HasValue ? (object) entity.ShowLocationDetails  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PublicTransport", DbType.String, entity.PublicTransport );
			database.AddInParameter(commandWrapper, "@Address", DbType.AnsiString, entity.Address );
			database.AddInParameter(commandWrapper, "@ContactDetails", DbType.String, entity.ContactDetails );
			database.AddInParameter(commandWrapper, "@JobContactPhone", DbType.AnsiString, entity.JobContactPhone );
			database.AddInParameter(commandWrapper, "@JobContactName", DbType.AnsiString, entity.JobContactName );
			database.AddInParameter(commandWrapper, "@QualificationsRecognised", DbType.Boolean, entity.QualificationsRecognised );
			database.AddInParameter(commandWrapper, "@ResidentOnly", DbType.Boolean, entity.ResidentOnly );
			database.AddInParameter(commandWrapper, "@DocumentLink", DbType.AnsiString, entity.DocumentLink );
			database.AddInParameter(commandWrapper, "@BulletPoint1", DbType.String, entity.BulletPoint1 );
			database.AddInParameter(commandWrapper, "@BulletPoint2", DbType.String, entity.BulletPoint2 );
			database.AddInParameter(commandWrapper, "@BulletPoint3", DbType.String, entity.BulletPoint3 );
			database.AddInParameter(commandWrapper, "@HotJob", DbType.Boolean, entity.HotJob );
			database.AddInParameter(commandWrapper, "@JobFriendlyName", DbType.AnsiString, entity.JobFriendlyName );
			database.AddInParameter(commandWrapper, "@SearchField", DbType.String, entity.SearchField );
			database.AddInParameter(commandWrapper, "@ShowSalaryRange", DbType.Boolean, entity.ShowSalaryRange );
			database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal, entity.SalaryLowerBand );
			database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal, entity.SalaryUpperBand );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32, entity.CurrencyId );
			database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32, entity.SalaryTypeId );
			database.AddInParameter(commandWrapper, "@EnteredByAdvertiserUserId", DbType.Int32, (entity.EnteredByAdvertiserUserId.HasValue ? (object) entity.EnteredByAdvertiserUserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@JobLatitude", DbType.Double, (entity.JobLatitude.HasValue ? (object) entity.JobLatitude  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@JobLongitude", DbType.Double, (entity.JobLongitude.HasValue ? (object) entity.JobLongitude  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AddressStatus", DbType.Int32, (entity.AddressStatus.HasValue ? (object) entity.AddressStatus  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@JobExternalId", DbType.AnsiString, entity.JobExternalId );
			database.AddInParameter(commandWrapper, "@ScreeningQuestionsTemplateId", DbType.Int32, (entity.ScreeningQuestionsTemplateId.HasValue ? (object) entity.ScreeningQuestionsTemplateId  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _jobId = database.GetParameterValue(commandWrapper, "@JobId");
			entity.JobId = (System.Int32)_jobId;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">JXTPortal.Entities.Jobs object to update.</param>
		/// <remarks>
		///		After updating the datasource, the JXTPortal.Entities.Jobs object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, JXTPortal.Entities.Jobs entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@JobId", DbType.Int32, entity.JobId );
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, entity.SiteId );
			database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.Int32, entity.WorkTypeId );
			database.AddInParameter(commandWrapper, "@JobName", DbType.String, entity.JobName );
			database.AddInParameter(commandWrapper, "@Description", DbType.String, entity.Description );
			database.AddInParameter(commandWrapper, "@FullDescription", DbType.String, entity.FullDescription );
			database.AddInParameter(commandWrapper, "@WebServiceProcessed", DbType.Boolean, entity.WebServiceProcessed );
			database.AddInParameter(commandWrapper, "@ApplicationEmailAddress", DbType.AnsiString, entity.ApplicationEmailAddress );
			database.AddInParameter(commandWrapper, "@RefNo", DbType.AnsiString, entity.RefNo );
			database.AddInParameter(commandWrapper, "@Visible", DbType.Boolean, entity.Visible );
			database.AddInParameter(commandWrapper, "@DatePosted", DbType.DateTime, entity.DatePosted );
			database.AddInParameter(commandWrapper, "@ExpiryDate", DbType.DateTime, entity.ExpiryDate );
			database.AddInParameter(commandWrapper, "@Expired", DbType.Int32, (entity.Expired.HasValue ? (object) entity.Expired : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@JobItemPrice", DbType.Currency, (entity.JobItemPrice.HasValue ? (object) entity.JobItemPrice : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Billed", DbType.Boolean, entity.Billed );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, entity.LastModified );
			database.AddInParameter(commandWrapper, "@ShowSalaryDetails", DbType.Boolean, entity.ShowSalaryDetails );
			database.AddInParameter(commandWrapper, "@SalaryText", DbType.AnsiString, entity.SalaryText );
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32, (entity.AdvertiserId.HasValue ? (object) entity.AdvertiserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastModifiedByAdvertiserUserId", DbType.Int32, (entity.LastModifiedByAdvertiserUserId.HasValue ? (object) entity.LastModifiedByAdvertiserUserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastModifiedByAdminUserId", DbType.Int32, (entity.LastModifiedByAdminUserId.HasValue ? (object) entity.LastModifiedByAdminUserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@JobItemTypeId", DbType.Int32, (entity.JobItemTypeId.HasValue ? (object) entity.JobItemTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ApplicationMethod", DbType.Int32, (entity.ApplicationMethod.HasValue ? (object) entity.ApplicationMethod : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ApplicationUrl", DbType.AnsiString, entity.ApplicationUrl );
			database.AddInParameter(commandWrapper, "@UploadMethod", DbType.Int32, (entity.UploadMethod.HasValue ? (object) entity.UploadMethod : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Tags", DbType.AnsiString, entity.Tags );
			database.AddInParameter(commandWrapper, "@JobTemplateId", DbType.Int32, (entity.JobTemplateId.HasValue ? (object) entity.JobTemplateId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SearchFieldExtension", DbType.AnsiString, entity.SearchFieldExtension );
			database.AddInParameter(commandWrapper, "@AdvertiserJobTemplateLogoId", DbType.Int32, (entity.AdvertiserJobTemplateLogoId.HasValue ? (object) entity.AdvertiserJobTemplateLogoId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString, entity.CompanyName );
			database.AddInParameter(commandWrapper, "@HashValue", DbType.Binary, entity.HashValue );
			database.AddInParameter(commandWrapper, "@RequireLogonForExternalApplications", DbType.Boolean, entity.RequireLogonForExternalApplications );
			database.AddInParameter(commandWrapper, "@ShowLocationDetails", DbType.Boolean, (entity.ShowLocationDetails.HasValue ? (object) entity.ShowLocationDetails : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PublicTransport", DbType.String, entity.PublicTransport );
			database.AddInParameter(commandWrapper, "@Address", DbType.AnsiString, entity.Address );
			database.AddInParameter(commandWrapper, "@ContactDetails", DbType.String, entity.ContactDetails );
			database.AddInParameter(commandWrapper, "@JobContactPhone", DbType.AnsiString, entity.JobContactPhone );
			database.AddInParameter(commandWrapper, "@JobContactName", DbType.AnsiString, entity.JobContactName );
			database.AddInParameter(commandWrapper, "@QualificationsRecognised", DbType.Boolean, entity.QualificationsRecognised );
			database.AddInParameter(commandWrapper, "@ResidentOnly", DbType.Boolean, entity.ResidentOnly );
			database.AddInParameter(commandWrapper, "@DocumentLink", DbType.AnsiString, entity.DocumentLink );
			database.AddInParameter(commandWrapper, "@BulletPoint1", DbType.String, entity.BulletPoint1 );
			database.AddInParameter(commandWrapper, "@BulletPoint2", DbType.String, entity.BulletPoint2 );
			database.AddInParameter(commandWrapper, "@BulletPoint3", DbType.String, entity.BulletPoint3 );
			database.AddInParameter(commandWrapper, "@HotJob", DbType.Boolean, entity.HotJob );
			database.AddInParameter(commandWrapper, "@JobFriendlyName", DbType.AnsiString, entity.JobFriendlyName );
			database.AddInParameter(commandWrapper, "@SearchField", DbType.String, entity.SearchField );
			database.AddInParameter(commandWrapper, "@ShowSalaryRange", DbType.Boolean, entity.ShowSalaryRange );
			database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal, entity.SalaryLowerBand );
			database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal, entity.SalaryUpperBand );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32, entity.CurrencyId );
			database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32, entity.SalaryTypeId );
			database.AddInParameter(commandWrapper, "@EnteredByAdvertiserUserId", DbType.Int32, (entity.EnteredByAdvertiserUserId.HasValue ? (object) entity.EnteredByAdvertiserUserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@JobLatitude", DbType.Double, (entity.JobLatitude.HasValue ? (object) entity.JobLatitude : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@JobLongitude", DbType.Double, (entity.JobLongitude.HasValue ? (object) entity.JobLongitude : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AddressStatus", DbType.Int32, (entity.AddressStatus.HasValue ? (object) entity.AddressStatus : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@JobExternalId", DbType.AnsiString, entity.JobExternalId );
			database.AddInParameter(commandWrapper, "@ScreeningQuestionsTemplateId", DbType.Int32, (entity.ScreeningQuestionsTemplateId.HasValue ? (object) entity.ScreeningQuestionsTemplateId : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region Jobs_CustomUpdateAllSiteJobCount
					
		/// <summary>
		///	This method wraps the 'Jobs_CustomUpdateAllSiteJobCount' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void CustomUpdateAllSiteJobCount(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_CustomUpdateAllSiteJobCount", true);
			
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomUpdateAllSiteJobCount", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomUpdateAllSiteJobCount", (IEntity)null));


				
				return;
		}
		#endregion

		#region Jobs_GetByAdvertiserId
					
		/// <summary>
		///	This method wraps the 'Jobs_GetByAdvertiserId' stored procedure. 
		/// </summary>	
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByAdvertiserId(TransactionManager transactionManager, int start, int pageLength , System.Int32? advertiserId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByAdvertiserId", true);
			
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdvertiserId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdvertiserId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetByJobId
					
		/// <summary>
		///	This method wraps the 'Jobs_GetByJobId' stored procedure. 
		/// </summary>	
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByJobId(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByJobId", true);
			
			database.AddInParameter(commandWrapper, "@JobId", DbType.Int32,  jobId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByJobId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByJobId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetByLastModifiedByAdvertiserUserId
					
		/// <summary>
		///	This method wraps the 'Jobs_GetByLastModifiedByAdvertiserUserId' stored procedure. 
		/// </summary>	
		/// <param name="lastModifiedByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByLastModifiedByAdvertiserUserId(TransactionManager transactionManager, int start, int pageLength , System.Int32? lastModifiedByAdvertiserUserId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByLastModifiedByAdvertiserUserId", true);
			
			database.AddInParameter(commandWrapper, "@LastModifiedByAdvertiserUserId", DbType.Int32,  lastModifiedByAdvertiserUserId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByLastModifiedByAdvertiserUserId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByLastModifiedByAdvertiserUserId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetByWorkTypeIdJobIdAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandExpiredExpiryDate
					
		/// <summary>
		///	This method wraps the 'Jobs_GetByWorkTypeIdJobIdAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandExpiredExpiryDate' stored procedure. 
		/// </summary>	
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="expired"> A <c>System.Int32?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByWorkTypeIdJobIdAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandExpiredExpiryDate(TransactionManager transactionManager, int start, int pageLength , System.Int32? workTypeId, System.Int32? jobId, System.Int32? advertiserId, System.Int32? currencyId, System.Int32? salaryTypeId, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? expired, System.DateTime? expiryDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByWorkTypeIdJobIdAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandExpiredExpiryDate", true);
			
			database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.Int32,  workTypeId );
			database.AddInParameter(commandWrapper, "@JobId", DbType.Int32,  jobId );
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
			database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32,  salaryTypeId );
			database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal,  salaryLowerBand );
			database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal,  salaryUpperBand );
			database.AddInParameter(commandWrapper, "@Expired", DbType.Int32,  expired );
			database.AddInParameter(commandWrapper, "@ExpiryDate", DbType.DateTime,  expiryDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByWorkTypeIdJobIdAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandExpiredExpiryDate", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByWorkTypeIdJobIdAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandExpiredExpiryDate", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetJobApplicationAndViewsDetail
					
		/// <summary>
		///	This method wraps the 'Jobs_GetJobApplicationAndViewsDetail' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="fromDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="duration"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetJobApplicationAndViewsDetail(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.DateTime? fromDate, System.Int32? duration)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetJobApplicationAndViewsDetail", true);
			
			database.AddInParameter(commandWrapper, "@SiteID", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@FromDate", DbType.DateTime,  fromDate );
			database.AddInParameter(commandWrapper, "@Duration", DbType.Int32,  duration );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetJobApplicationAndViewsDetail", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetJobApplicationAndViewsDetail", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_CustomGetBySiteIdStatusIDs
					
		/// <summary>
		///	This method wraps the 'Jobs_CustomGetBySiteIdStatusIDs' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="statusIds"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet CustomGetBySiteIdStatusIDs(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.String statusIds, System.String orderBy, System.Int32? pageIndex, System.Int32? pageSize)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_CustomGetBySiteIdStatusIDs", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@StatusIDs", DbType.AnsiString,  statusIds );
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.AnsiString,  orderBy );
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32,  pageIndex );
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32,  pageSize );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomGetBySiteIdStatusIDs", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomGetBySiteIdStatusIDs", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_CustomArchiveXML
					
		/// <summary>
		///	This method wraps the 'Jobs_CustomArchiveXML' stored procedure. 
		/// </summary>	
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserUserName"> A <c>System.String</c> instance.</param>
		/// <param name="xmlFeed"> A <c>string</c> instance.</param>
		/// <param name="clientIpAddress"> A <c>System.String</c> instance.</param>
			/// <param name="webServiceLogId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void CustomArchiveXML(TransactionManager transactionManager, int start, int pageLength , System.Int32? advertiserId, System.String advertiserUserName, string xmlFeed, System.String clientIpAddress, ref System.Int32? webServiceLogId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_CustomArchiveXML", true);
			
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@AdvertiserUserName", DbType.AnsiString,  advertiserUserName );
			database.AddInParameter(commandWrapper, "@XMLFeed", DbType.Xml,  xmlFeed );
			database.AddInParameter(commandWrapper, "@ClientIPAddress", DbType.AnsiString,  clientIpAddress );
	
			database.AddParameter(commandWrapper, "@WebServiceLogId", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, webServiceLogId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomArchiveXML", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomArchiveXML", (IEntity)null));

			webServiceLogId =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@WebServiceLogId"]);

				
				return;
		}
		#endregion

		#region Jobs_GetAdvertiserJobs
					
		/// <summary>
		///	This method wraps the 'Jobs_GetAdvertiserJobs' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enteredByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="type"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetAdvertiserJobs(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.Int32? advertiserId, System.Int32? enteredByAdvertiserUserId, System.String type, System.String orderBy, System.Int32? pageIndex, System.Int32? pageSize)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetAdvertiserJobs", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@EnteredByAdvertiserUserID", DbType.Int32,  enteredByAdvertiserUserId );
			database.AddInParameter(commandWrapper, "@Type", DbType.AnsiString,  type );
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.AnsiString,  orderBy );
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32,  pageIndex );
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32,  pageSize );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAdvertiserJobs", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetAdvertiserJobs", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_JobsPurge
					
		/// <summary>
		///	This method wraps the 'Jobs_JobsPurge' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void JobsPurge(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_JobsPurge", true);
			
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "JobsPurge", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "JobsPurge", (IEntity)null));


				
				return;
		}
		#endregion

		#region Jobs_GetStatistics
					
		/// <summary>
		///	This method wraps the 'Jobs_GetStatistics' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enteredByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetStatistics(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.Int32? advertiserId, System.Int32? enteredByAdvertiserUserId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetStatistics", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@EnteredByAdvertiserUserID", DbType.Int32,  enteredByAdvertiserUserId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetStatistics", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetStatistics", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetByExpiredAdvertiserIdExpiryDate
					
		/// <summary>
		///	This method wraps the 'Jobs_GetByExpiredAdvertiserIdExpiryDate' stored procedure. 
		/// </summary>	
		/// <param name="expired"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByExpiredAdvertiserIdExpiryDate(TransactionManager transactionManager, int start, int pageLength , System.Int32? expired, System.Int32? advertiserId, System.DateTime? expiryDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByExpiredAdvertiserIdExpiryDate", true);
			
			database.AddInParameter(commandWrapper, "@Expired", DbType.Int32,  expired );
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@ExpiryDate", DbType.DateTime,  expiryDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByExpiredAdvertiserIdExpiryDate", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByExpiredAdvertiserIdExpiryDate", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_JobUnarchive
					
		/// <summary>
		///	This method wraps the 'Jobs_JobUnarchive' stored procedure. 
		/// </summary>	
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void JobUnarchive(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_JobUnarchive", true);
			
			database.AddInParameter(commandWrapper, "@JobID", DbType.Int32,  jobId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "JobUnarchive", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "JobUnarchive", (IEntity)null));


				
				return;
		}
		#endregion

		#region Jobs_CustomGetJobByExternalJobId
					
		/// <summary>
		///	This method wraps the 'Jobs_CustomGetJobByExternalJobId' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="externalJobId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet CustomGetJobByExternalJobId(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.Int32? advertiserId, System.String externalJobId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_CustomGetJobByExternalJobId", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@ExternalJobId", DbType.AnsiString,  externalJobId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomGetJobByExternalJobId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomGetJobByExternalJobId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetByJobTemplateId
					
		/// <summary>
		///	This method wraps the 'Jobs_GetByJobTemplateId' stored procedure. 
		/// </summary>	
		/// <param name="jobTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByJobTemplateId(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobTemplateId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByJobTemplateId", true);
			
			database.AddInParameter(commandWrapper, "@JobTemplateId", DbType.Int32,  jobTemplateId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByJobTemplateId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByJobTemplateId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_Get_List
					
		/// <summary>
		///	This method wraps the 'Jobs_Get_List' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Get_List(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_Get_List", true);
			
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Get_List", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Get_List", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetByWorkTypeId
					
		/// <summary>
		///	This method wraps the 'Jobs_GetByWorkTypeId' stored procedure. 
		/// </summary>	
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByWorkTypeId(TransactionManager transactionManager, int start, int pageLength , System.Int32? workTypeId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByWorkTypeId", true);
			
			database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.Int32,  workTypeId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByWorkTypeId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByWorkTypeId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetByCurrencyId
					
		/// <summary>
		///	This method wraps the 'Jobs_GetByCurrencyId' stored procedure. 
		/// </summary>	
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByCurrencyId(TransactionManager transactionManager, int start, int pageLength , System.Int32? currencyId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByCurrencyId", true);
			
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCurrencyId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCurrencyId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate
					
		/// <summary>
		///	This method wraps the 'Jobs_GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate' stored procedure. 
		/// </summary>	
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="expired"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate(TransactionManager transactionManager, int start, int pageLength , System.Int32? advertiserId, System.Int32? currencyId, System.Int32? salaryTypeId, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? workTypeId, System.Boolean? expired, System.DateTime? expiryDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate", true);
			
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
			database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32,  salaryTypeId );
			database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal,  salaryLowerBand );
			database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal,  salaryUpperBand );
			database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.Int32,  workTypeId );
			database.AddInParameter(commandWrapper, "@Expired", DbType.Boolean,  expired );
			database.AddInParameter(commandWrapper, "@ExpiryDate", DbType.DateTime,  expiryDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetByExpiredExpiryDateAdvertiserIdCurrencyIdSalaryUpperBandSalaryLowerBandWorkTypeId
					
		/// <summary>
		///	This method wraps the 'Jobs_GetByExpiredExpiryDateAdvertiserIdCurrencyIdSalaryUpperBandSalaryLowerBandWorkTypeId' stored procedure. 
		/// </summary>	
		/// <param name="expired"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByExpiredExpiryDateAdvertiserIdCurrencyIdSalaryUpperBandSalaryLowerBandWorkTypeId(TransactionManager transactionManager, int start, int pageLength , System.Boolean? expired, System.DateTime? expiryDate, System.Int32? advertiserId, System.Int32? currencyId, System.Decimal? salaryUpperBand, System.Decimal? salaryLowerBand, System.Int32? workTypeId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByExpiredExpiryDateAdvertiserIdCurrencyIdSalaryUpperBandSalaryLowerBandWorkTypeId", true);
			
			database.AddInParameter(commandWrapper, "@Expired", DbType.Boolean,  expired );
			database.AddInParameter(commandWrapper, "@ExpiryDate", DbType.DateTime,  expiryDate );
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
			database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal,  salaryUpperBand );
			database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal,  salaryLowerBand );
			database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.Int32,  workTypeId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByExpiredExpiryDateAdvertiserIdCurrencyIdSalaryUpperBandSalaryLowerBandWorkTypeId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByExpiredExpiryDateAdvertiserIdCurrencyIdSalaryUpperBandSalaryLowerBandWorkTypeId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_CustomGetGeoAddressToUpdate
					
		/// <summary>
		///	This method wraps the 'Jobs_CustomGetGeoAddressToUpdate' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet CustomGetGeoAddressToUpdate(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_CustomGetGeoAddressToUpdate", true);
			
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomGetGeoAddressToUpdate", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomGetGeoAddressToUpdate", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetByExpiredBilledExpiryDate
					
		/// <summary>
		///	This method wraps the 'Jobs_GetByExpiredBilledExpiryDate' stored procedure. 
		/// </summary>	
		/// <param name="expired"> A <c>System.Int32?</c> instance.</param>
		/// <param name="billed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByExpiredBilledExpiryDate(TransactionManager transactionManager, int start, int pageLength , System.Int32? expired, System.Boolean? billed, System.DateTime? expiryDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByExpiredBilledExpiryDate", true);
			
			database.AddInParameter(commandWrapper, "@Expired", DbType.Int32,  expired );
			database.AddInParameter(commandWrapper, "@Billed", DbType.Boolean,  billed );
			database.AddInParameter(commandWrapper, "@ExpiryDate", DbType.DateTime,  expiryDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByExpiredBilledExpiryDate", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByExpiredBilledExpiryDate", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetPaged
					
		/// <summary>
		///	This method wraps the 'Jobs_GetPaged' stored procedure. 
		/// </summary>	
		/// <param name="whereClause"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetPaged(TransactionManager transactionManager, int start, int pageLength , System.String whereClause, System.String orderBy, System.Int32? pageIndex, System.Int32? pageSize)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetPaged", true);
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.AnsiString,  whereClause );
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.AnsiString,  orderBy );
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32,  pageIndex );
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32,  pageSize );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetCurrentJobStatistics
					
		/// <summary>
		///	This method wraps the 'Jobs_GetCurrentJobStatistics' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enteredByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="sortField"> A <c>System.String</c> instance.</param>
		/// <param name="sortAsc"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetCurrentJobStatistics(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.Int32? advertiserId, System.Int32? enteredByAdvertiserUserId, System.String sortField, System.Boolean? sortAsc)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetCurrentJobStatistics", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@EnteredByAdvertiserUserID", DbType.Int32,  enteredByAdvertiserUserId );
			database.AddInParameter(commandWrapper, "@SortField", DbType.AnsiString,  sortField );
			database.AddInParameter(commandWrapper, "@SortASC", DbType.Boolean,  sortAsc );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetCurrentJobStatistics", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetCurrentJobStatistics", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_CustomUpdateSiteJobCount
					
		/// <summary>
		///	This method wraps the 'Jobs_CustomUpdateSiteJobCount' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void CustomUpdateSiteJobCount(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_CustomUpdateSiteJobCount", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomUpdateSiteJobCount", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomUpdateSiteJobCount", (IEntity)null));


				
				return;
		}
		#endregion

		#region Jobs_GetBySalaryTypeId
					
		/// <summary>
		///	This method wraps the 'Jobs_GetBySalaryTypeId' stored procedure. 
		/// </summary>	
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBySalaryTypeId(TransactionManager transactionManager, int start, int pageLength , System.Int32? salaryTypeId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetBySalaryTypeId", true);
			
			database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32,  salaryTypeId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySalaryTypeId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySalaryTypeId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_JobArchive
					
		/// <summary>
		///	This method wraps the 'Jobs_JobArchive' stored procedure. 
		/// </summary>	
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void JobArchive(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_JobArchive", true);
			
			database.AddInParameter(commandWrapper, "@JobID", DbType.Int32,  jobId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "JobArchive", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "JobArchive", (IEntity)null));


				
				return;
		}
		#endregion

		#region Jobs_GetByLastModifiedByAdminUserId
					
		/// <summary>
		///	This method wraps the 'Jobs_GetByLastModifiedByAdminUserId' stored procedure. 
		/// </summary>	
		/// <param name="lastModifiedByAdminUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByLastModifiedByAdminUserId(TransactionManager transactionManager, int start, int pageLength , System.Int32? lastModifiedByAdminUserId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByLastModifiedByAdminUserId", true);
			
			database.AddInParameter(commandWrapper, "@LastModifiedByAdminUserId", DbType.Int32,  lastModifiedByAdminUserId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByLastModifiedByAdminUserId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByLastModifiedByAdminUserId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_JobX_SubmitQueue
					
		/// <summary>
		///	This method wraps the 'Jobs_JobX_SubmitQueue' stored procedure. 
		/// </summary>	
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void JobX_SubmitQueue(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_JobX_SubmitQueue", true);
			
			database.AddInParameter(commandWrapper, "@JobID", DbType.Int32,  jobId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "JobX_SubmitQueue", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "JobX_SubmitQueue", (IEntity)null));


				
				return;
		}
		#endregion

		#region Jobs_GetHistoricalJobStatistics
					
		/// <summary>
		///	This method wraps the 'Jobs_GetHistoricalJobStatistics' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enteredByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dateFrom"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="dateTo"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="sortField"> A <c>System.String</c> instance.</param>
		/// <param name="sortAsc"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetHistoricalJobStatistics(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.Int32? advertiserId, System.Int32? enteredByAdvertiserUserId, System.DateTime? dateFrom, System.DateTime? dateTo, System.String sortField, System.Boolean? sortAsc)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetHistoricalJobStatistics", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@EnteredByAdvertiserUserID", DbType.Int32,  enteredByAdvertiserUserId );
			database.AddInParameter(commandWrapper, "@DateFrom", DbType.DateTime,  dateFrom );
			database.AddInParameter(commandWrapper, "@DateTo", DbType.DateTime,  dateTo );
			database.AddInParameter(commandWrapper, "@SortField", DbType.AnsiString,  sortField );
			database.AddInParameter(commandWrapper, "@SortASC", DbType.Boolean,  sortAsc );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetHistoricalJobStatistics", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetHistoricalJobStatistics", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetBySiteId
					
		/// <summary>
		///	This method wraps the 'Jobs_GetBySiteId' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBySiteId(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetBySiteId", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetByExpiredExpiryDate
					
		/// <summary>
		///	This method wraps the 'Jobs_GetByExpiredExpiryDate' stored procedure. 
		/// </summary>	
		/// <param name="expired"> A <c>System.Int32?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByExpiredExpiryDate(TransactionManager transactionManager, int start, int pageLength , System.Int32? expired, System.DateTime? expiryDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByExpiredExpiryDate", true);
			
			database.AddInParameter(commandWrapper, "@Expired", DbType.Int32,  expired );
			database.AddInParameter(commandWrapper, "@ExpiryDate", DbType.DateTime,  expiryDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByExpiredExpiryDate", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByExpiredExpiryDate", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_CustomCalculateJobCount
					
		/// <summary>
		///	This method wraps the 'Jobs_CustomCalculateJobCount' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="addJob"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void CustomCalculateJobCount(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.Int32? jobId, System.Boolean? addJob)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_CustomCalculateJobCount", true);
			
			database.AddInParameter(commandWrapper, "@SiteID", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@JobID", DbType.Int32,  jobId );
			database.AddInParameter(commandWrapper, "@AddJob", DbType.Boolean,  addJob );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomCalculateJobCount", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomCalculateJobCount", (IEntity)null));


				
				return;
		}
		#endregion

		#region Jobs_GetArchivedJobs
					
		/// <summary>
		///	This method wraps the 'Jobs_GetArchivedJobs' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="currentOrderBy"> A <c>System.String</c> instance.</param>
		/// <param name="currentPageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="currentPageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetArchivedJobs(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.Int32? advertiserId, System.String currentOrderBy, System.Int32? currentPageIndex, System.Int32? currentPageSize)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetArchivedJobs", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@CurrentOrderBy", DbType.AnsiString,  currentOrderBy );
			database.AddInParameter(commandWrapper, "@CurrentPageIndex", DbType.Int32,  currentPageIndex );
			database.AddInParameter(commandWrapper, "@CurrentPageSize", DbType.Int32,  currentPageSize );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetArchivedJobs", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetArchivedJobs", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetByJobItemTypeId
					
		/// <summary>
		///	This method wraps the 'Jobs_GetByJobItemTypeId' stored procedure. 
		/// </summary>	
		/// <param name="jobItemTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByJobItemTypeId(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobItemTypeId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByJobItemTypeId", true);
			
			database.AddInParameter(commandWrapper, "@JobItemTypeId", DbType.Int32,  jobItemTypeId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByJobItemTypeId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByJobItemTypeId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_CustomUpdateGeoLocations
					
		/// <summary>
		///	This method wraps the 'Jobs_CustomUpdateGeoLocations' stored procedure. 
		/// </summary>	
		/// <param name="xmlFeed"> A <c>string</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet CustomUpdateGeoLocations(TransactionManager transactionManager, int start, int pageLength , string xmlFeed)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_CustomUpdateGeoLocations", true);
			
			database.AddInParameter(commandWrapper, "@XMLFeed", DbType.Xml,  xmlFeed );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomUpdateGeoLocations", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomUpdateGeoLocations", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetBySiteIdBilledAdvertiserId
					
		/// <summary>
		///	This method wraps the 'Jobs_GetBySiteIdBilledAdvertiserId' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="billed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBySiteIdBilledAdvertiserId(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.Boolean? billed, System.Int32? advertiserId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetBySiteIdBilledAdvertiserId", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@Billed", DbType.Boolean,  billed );
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteIdBilledAdvertiserId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteIdBilledAdvertiserId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_Insert
					
		/// <summary>
		///	This method wraps the 'Jobs_Insert' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobName"> A <c>System.String</c> instance.</param>
		/// <param name="description"> A <c>System.String</c> instance.</param>
		/// <param name="fullDescription"> A <c>System.String</c> instance.</param>
		/// <param name="webServiceProcessed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="applicationEmailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="refNo"> A <c>System.String</c> instance.</param>
		/// <param name="visible"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="datePosted"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expired"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemPrice"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="billed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="showSalaryDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryText"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdminUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationUrl"> A <c>System.String</c> instance.</param>
		/// <param name="uploadMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="tags"> A <c>System.String</c> instance.</param>
		/// <param name="jobTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchFieldExtension"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserJobTemplateLogoId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="companyName"> A <c>System.String</c> instance.</param>
		/// <param name="hashValue"> A <c>System.Byte[]</c> instance.</param>
		/// <param name="requireLogonForExternalApplications"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showLocationDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicTransport"> A <c>System.String</c> instance.</param>
		/// <param name="address"> A <c>System.String</c> instance.</param>
		/// <param name="contactDetails"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactPhone"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactName"> A <c>System.String</c> instance.</param>
		/// <param name="qualificationsRecognised"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="residentOnly"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="documentLink"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint1"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint2"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint3"> A <c>System.String</c> instance.</param>
		/// <param name="hotJob"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="showSalaryRange"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enteredByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobLatitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="jobLongitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="addressStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobExternalId"> A <c>System.String</c> instance.</param>
		/// <param name="hasScreeningQuestions"> A <c>System.Int32?</c> instance.</param>
			/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Insert(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.Int32? workTypeId, System.String jobName, System.String description, System.String fullDescription, System.Boolean? webServiceProcessed, System.String applicationEmailAddress, System.String refNo, System.Boolean? visible, System.DateTime? datePosted, System.DateTime? expiryDate, System.Int32? expired, System.Decimal? jobItemPrice, System.Boolean? billed, System.DateTime? lastModified, System.Boolean? showSalaryDetails, System.String salaryText, System.Int32? advertiserId, System.Int32? lastModifiedByAdvertiserUserId, System.Int32? lastModifiedByAdminUserId, System.Int32? jobItemTypeId, System.Int32? applicationMethod, System.String applicationUrl, System.Int32? uploadMethod, System.String tags, System.Int32? jobTemplateId, System.String searchFieldExtension, System.Int32? advertiserJobTemplateLogoId, System.String companyName, System.Byte[] hashValue, System.Boolean? requireLogonForExternalApplications, System.Boolean? showLocationDetails, System.String publicTransport, System.String address, System.String contactDetails, System.String jobContactPhone, System.String jobContactName, System.Boolean? qualificationsRecognised, System.Boolean? residentOnly, System.String documentLink, System.String bulletPoint1, System.String bulletPoint2, System.String bulletPoint3, System.Boolean? hotJob, System.String jobFriendlyName, System.String searchField, System.Boolean? showSalaryRange, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? currencyId, System.Int32? salaryTypeId, System.Int32? enteredByAdvertiserUserId, System.Double? jobLatitude, System.Double? jobLongitude, System.Int32? addressStatus, System.String jobExternalId, System.Int32? hasScreeningQuestions, ref System.Int32? jobId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_Insert", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.Int32,  workTypeId );
			database.AddInParameter(commandWrapper, "@JobName", DbType.String,  jobName );
			database.AddInParameter(commandWrapper, "@Description", DbType.String,  description );
			database.AddInParameter(commandWrapper, "@FullDescription", DbType.String,  fullDescription );
			database.AddInParameter(commandWrapper, "@WebServiceProcessed", DbType.Boolean,  webServiceProcessed );
			database.AddInParameter(commandWrapper, "@ApplicationEmailAddress", DbType.AnsiString,  applicationEmailAddress );
			database.AddInParameter(commandWrapper, "@RefNo", DbType.AnsiString,  refNo );
			database.AddInParameter(commandWrapper, "@Visible", DbType.Boolean,  visible );
			database.AddInParameter(commandWrapper, "@DatePosted", DbType.DateTime,  datePosted );
			database.AddInParameter(commandWrapper, "@ExpiryDate", DbType.DateTime,  expiryDate );
			database.AddInParameter(commandWrapper, "@Expired", DbType.Int32,  expired );
			database.AddInParameter(commandWrapper, "@JobItemPrice", DbType.Currency,  jobItemPrice );
			database.AddInParameter(commandWrapper, "@Billed", DbType.Boolean,  billed );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime,  lastModified );
			database.AddInParameter(commandWrapper, "@ShowSalaryDetails", DbType.Boolean,  showSalaryDetails );
			database.AddInParameter(commandWrapper, "@SalaryText", DbType.AnsiString,  salaryText );
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@LastModifiedByAdvertiserUserId", DbType.Int32,  lastModifiedByAdvertiserUserId );
			database.AddInParameter(commandWrapper, "@LastModifiedByAdminUserId", DbType.Int32,  lastModifiedByAdminUserId );
			database.AddInParameter(commandWrapper, "@JobItemTypeId", DbType.Int32,  jobItemTypeId );
			database.AddInParameter(commandWrapper, "@ApplicationMethod", DbType.Int32,  applicationMethod );
			database.AddInParameter(commandWrapper, "@ApplicationUrl", DbType.AnsiString,  applicationUrl );
			database.AddInParameter(commandWrapper, "@UploadMethod", DbType.Int32,  uploadMethod );
			database.AddInParameter(commandWrapper, "@Tags", DbType.AnsiString,  tags );
			database.AddInParameter(commandWrapper, "@JobTemplateId", DbType.Int32,  jobTemplateId );
			database.AddInParameter(commandWrapper, "@SearchFieldExtension", DbType.AnsiString,  searchFieldExtension );
			database.AddInParameter(commandWrapper, "@AdvertiserJobTemplateLogoId", DbType.Int32,  advertiserJobTemplateLogoId );
			database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString,  companyName );
			database.AddInParameter(commandWrapper, "@HashValue", DbType.Binary,  hashValue );
			database.AddInParameter(commandWrapper, "@RequireLogonForExternalApplications", DbType.Boolean,  requireLogonForExternalApplications );
			database.AddInParameter(commandWrapper, "@ShowLocationDetails", DbType.Boolean,  showLocationDetails );
			database.AddInParameter(commandWrapper, "@PublicTransport", DbType.String,  publicTransport );
			database.AddInParameter(commandWrapper, "@Address", DbType.AnsiString,  address );
			database.AddInParameter(commandWrapper, "@ContactDetails", DbType.String,  contactDetails );
			database.AddInParameter(commandWrapper, "@JobContactPhone", DbType.AnsiString,  jobContactPhone );
			database.AddInParameter(commandWrapper, "@JobContactName", DbType.AnsiString,  jobContactName );
			database.AddInParameter(commandWrapper, "@QualificationsRecognised", DbType.Boolean,  qualificationsRecognised );
			database.AddInParameter(commandWrapper, "@ResidentOnly", DbType.Boolean,  residentOnly );
			database.AddInParameter(commandWrapper, "@DocumentLink", DbType.AnsiString,  documentLink );
			database.AddInParameter(commandWrapper, "@BulletPoint1", DbType.String,  bulletPoint1 );
			database.AddInParameter(commandWrapper, "@BulletPoint2", DbType.String,  bulletPoint2 );
			database.AddInParameter(commandWrapper, "@BulletPoint3", DbType.String,  bulletPoint3 );
			database.AddInParameter(commandWrapper, "@HotJob", DbType.Boolean,  hotJob );
			database.AddInParameter(commandWrapper, "@JobFriendlyName", DbType.AnsiString,  jobFriendlyName );
			database.AddInParameter(commandWrapper, "@SearchField", DbType.String,  searchField );
			database.AddInParameter(commandWrapper, "@ShowSalaryRange", DbType.Boolean,  showSalaryRange );
			database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal,  salaryLowerBand );
			database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal,  salaryUpperBand );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
			database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32,  salaryTypeId );
			database.AddInParameter(commandWrapper, "@EnteredByAdvertiserUserId", DbType.Int32,  enteredByAdvertiserUserId );
			database.AddInParameter(commandWrapper, "@JobLatitude", DbType.Double,  jobLatitude );
			database.AddInParameter(commandWrapper, "@JobLongitude", DbType.Double,  jobLongitude );
			database.AddInParameter(commandWrapper, "@AddressStatus", DbType.Int32,  addressStatus );
			database.AddInParameter(commandWrapper, "@JobExternalId", DbType.AnsiString,  jobExternalId );
			database.AddInParameter(commandWrapper, "@HasScreeningQuestions", DbType.Int32,  hasScreeningQuestions );
	
			database.AddParameter(commandWrapper, "@JobId", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, jobId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", (IEntity)null));

			jobId =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@JobId"]);

				
				return;
		}
		#endregion

		#region Jobs_Delete
					
		/// <summary>
		///	This method wraps the 'Jobs_Delete' stored procedure. 
		/// </summary>	
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Delete(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_Delete", true);
			
			database.AddInParameter(commandWrapper, "@JobId", DbType.Int32,  jobId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete", (IEntity)null));


				
				return;
		}
		#endregion

		#region Jobs_GetByJobIdWithArchive
					
		/// <summary>
		///	This method wraps the 'Jobs_GetByJobIdWithArchive' stored procedure. 
		/// </summary>	
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByJobIdWithArchive(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetByJobIdWithArchive", true);
			
			database.AddInParameter(commandWrapper, "@JobId", DbType.Int32,  jobId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByJobIdWithArchive", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByJobIdWithArchive", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_GetBySiteIdExpiredBilledAdvertiserIdEnteredByAdvertiserUserId
					
		/// <summary>
		///	This method wraps the 'Jobs_GetBySiteIdExpiredBilledAdvertiserIdEnteredByAdvertiserUserId' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="expired"> A <c>System.Int32?</c> instance.</param>
		/// <param name="billed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enteredByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBySiteIdExpiredBilledAdvertiserIdEnteredByAdvertiserUserId(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.Int32? expired, System.Boolean? billed, System.Int32? advertiserId, System.Int32? enteredByAdvertiserUserId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_GetBySiteIdExpiredBilledAdvertiserIdEnteredByAdvertiserUserId", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@Expired", DbType.Int32,  expired );
			database.AddInParameter(commandWrapper, "@Billed", DbType.Boolean,  billed );
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@EnteredByAdvertiserUserId", DbType.Int32,  enteredByAdvertiserUserId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteIdExpiredBilledAdvertiserIdEnteredByAdvertiserUserId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteIdExpiredBilledAdvertiserIdEnteredByAdvertiserUserId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_Find
					
		/// <summary>
		///	This method wraps the 'Jobs_Find' stored procedure. 
		/// </summary>	
		/// <param name="searchUsingOr"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobName"> A <c>System.String</c> instance.</param>
		/// <param name="description"> A <c>System.String</c> instance.</param>
		/// <param name="fullDescription"> A <c>System.String</c> instance.</param>
		/// <param name="webServiceProcessed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="applicationEmailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="refNo"> A <c>System.String</c> instance.</param>
		/// <param name="visible"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="datePosted"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expired"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemPrice"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="billed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="showSalaryDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryText"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdminUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationUrl"> A <c>System.String</c> instance.</param>
		/// <param name="uploadMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="tags"> A <c>System.String</c> instance.</param>
		/// <param name="jobTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchFieldExtension"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserJobTemplateLogoId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="companyName"> A <c>System.String</c> instance.</param>
		/// <param name="hashValue"> A <c>System.Byte[]</c> instance.</param>
		/// <param name="requireLogonForExternalApplications"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showLocationDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicTransport"> A <c>System.String</c> instance.</param>
		/// <param name="address"> A <c>System.String</c> instance.</param>
		/// <param name="contactDetails"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactPhone"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactName"> A <c>System.String</c> instance.</param>
		/// <param name="qualificationsRecognised"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="residentOnly"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="documentLink"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint1"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint2"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint3"> A <c>System.String</c> instance.</param>
		/// <param name="hotJob"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="showSalaryRange"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enteredByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobLatitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="jobLongitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="addressStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobExternalId"> A <c>System.String</c> instance.</param>
		/// <param name="hasScreeningQuestions"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Find(TransactionManager transactionManager, int start, int pageLength , System.Boolean? searchUsingOr, System.Int32? jobId, System.Int32? siteId, System.Int32? workTypeId, System.String jobName, System.String description, System.String fullDescription, System.Boolean? webServiceProcessed, System.String applicationEmailAddress, System.String refNo, System.Boolean? visible, System.DateTime? datePosted, System.DateTime? expiryDate, System.Int32? expired, System.Decimal? jobItemPrice, System.Boolean? billed, System.DateTime? lastModified, System.Boolean? showSalaryDetails, System.String salaryText, System.Int32? advertiserId, System.Int32? lastModifiedByAdvertiserUserId, System.Int32? lastModifiedByAdminUserId, System.Int32? jobItemTypeId, System.Int32? applicationMethod, System.String applicationUrl, System.Int32? uploadMethod, System.String tags, System.Int32? jobTemplateId, System.String searchFieldExtension, System.Int32? advertiserJobTemplateLogoId, System.String companyName, System.Byte[] hashValue, System.Boolean? requireLogonForExternalApplications, System.Boolean? showLocationDetails, System.String publicTransport, System.String address, System.String contactDetails, System.String jobContactPhone, System.String jobContactName, System.Boolean? qualificationsRecognised, System.Boolean? residentOnly, System.String documentLink, System.String bulletPoint1, System.String bulletPoint2, System.String bulletPoint3, System.Boolean? hotJob, System.String jobFriendlyName, System.String searchField, System.Boolean? showSalaryRange, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? currencyId, System.Int32? salaryTypeId, System.Int32? enteredByAdvertiserUserId, System.Double? jobLatitude, System.Double? jobLongitude, System.Int32? addressStatus, System.String jobExternalId, System.Int32? hasScreeningQuestions)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_Find", true);
			
			database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean,  searchUsingOr );
			database.AddInParameter(commandWrapper, "@JobId", DbType.Int32,  jobId );
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.Int32,  workTypeId );
			database.AddInParameter(commandWrapper, "@JobName", DbType.String,  jobName );
			database.AddInParameter(commandWrapper, "@Description", DbType.String,  description );
			database.AddInParameter(commandWrapper, "@FullDescription", DbType.String,  fullDescription );
			database.AddInParameter(commandWrapper, "@WebServiceProcessed", DbType.Boolean,  webServiceProcessed );
			database.AddInParameter(commandWrapper, "@ApplicationEmailAddress", DbType.AnsiString,  applicationEmailAddress );
			database.AddInParameter(commandWrapper, "@RefNo", DbType.AnsiString,  refNo );
			database.AddInParameter(commandWrapper, "@Visible", DbType.Boolean,  visible );
			database.AddInParameter(commandWrapper, "@DatePosted", DbType.DateTime,  datePosted );
			database.AddInParameter(commandWrapper, "@ExpiryDate", DbType.DateTime,  expiryDate );
			database.AddInParameter(commandWrapper, "@Expired", DbType.Int32,  expired );
			database.AddInParameter(commandWrapper, "@JobItemPrice", DbType.Currency,  jobItemPrice );
			database.AddInParameter(commandWrapper, "@Billed", DbType.Boolean,  billed );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime,  lastModified );
			database.AddInParameter(commandWrapper, "@ShowSalaryDetails", DbType.Boolean,  showSalaryDetails );
			database.AddInParameter(commandWrapper, "@SalaryText", DbType.AnsiString,  salaryText );
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@LastModifiedByAdvertiserUserId", DbType.Int32,  lastModifiedByAdvertiserUserId );
			database.AddInParameter(commandWrapper, "@LastModifiedByAdminUserId", DbType.Int32,  lastModifiedByAdminUserId );
			database.AddInParameter(commandWrapper, "@JobItemTypeId", DbType.Int32,  jobItemTypeId );
			database.AddInParameter(commandWrapper, "@ApplicationMethod", DbType.Int32,  applicationMethod );
			database.AddInParameter(commandWrapper, "@ApplicationUrl", DbType.AnsiString,  applicationUrl );
			database.AddInParameter(commandWrapper, "@UploadMethod", DbType.Int32,  uploadMethod );
			database.AddInParameter(commandWrapper, "@Tags", DbType.AnsiString,  tags );
			database.AddInParameter(commandWrapper, "@JobTemplateId", DbType.Int32,  jobTemplateId );
			database.AddInParameter(commandWrapper, "@SearchFieldExtension", DbType.AnsiString,  searchFieldExtension );
			database.AddInParameter(commandWrapper, "@AdvertiserJobTemplateLogoId", DbType.Int32,  advertiserJobTemplateLogoId );
			database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString,  companyName );
			database.AddInParameter(commandWrapper, "@HashValue", DbType.Binary,  hashValue );
			database.AddInParameter(commandWrapper, "@RequireLogonForExternalApplications", DbType.Boolean,  requireLogonForExternalApplications );
			database.AddInParameter(commandWrapper, "@ShowLocationDetails", DbType.Boolean,  showLocationDetails );
			database.AddInParameter(commandWrapper, "@PublicTransport", DbType.String,  publicTransport );
			database.AddInParameter(commandWrapper, "@Address", DbType.AnsiString,  address );
			database.AddInParameter(commandWrapper, "@ContactDetails", DbType.String,  contactDetails );
			database.AddInParameter(commandWrapper, "@JobContactPhone", DbType.AnsiString,  jobContactPhone );
			database.AddInParameter(commandWrapper, "@JobContactName", DbType.AnsiString,  jobContactName );
			database.AddInParameter(commandWrapper, "@QualificationsRecognised", DbType.Boolean,  qualificationsRecognised );
			database.AddInParameter(commandWrapper, "@ResidentOnly", DbType.Boolean,  residentOnly );
			database.AddInParameter(commandWrapper, "@DocumentLink", DbType.AnsiString,  documentLink );
			database.AddInParameter(commandWrapper, "@BulletPoint1", DbType.String,  bulletPoint1 );
			database.AddInParameter(commandWrapper, "@BulletPoint2", DbType.String,  bulletPoint2 );
			database.AddInParameter(commandWrapper, "@BulletPoint3", DbType.String,  bulletPoint3 );
			database.AddInParameter(commandWrapper, "@HotJob", DbType.Boolean,  hotJob );
			database.AddInParameter(commandWrapper, "@JobFriendlyName", DbType.AnsiString,  jobFriendlyName );
			database.AddInParameter(commandWrapper, "@SearchField", DbType.String,  searchField );
			database.AddInParameter(commandWrapper, "@ShowSalaryRange", DbType.Boolean,  showSalaryRange );
			database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal,  salaryLowerBand );
			database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal,  salaryUpperBand );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
			database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32,  salaryTypeId );
			database.AddInParameter(commandWrapper, "@EnteredByAdvertiserUserId", DbType.Int32,  enteredByAdvertiserUserId );
			database.AddInParameter(commandWrapper, "@JobLatitude", DbType.Double,  jobLatitude );
			database.AddInParameter(commandWrapper, "@JobLongitude", DbType.Double,  jobLongitude );
			database.AddInParameter(commandWrapper, "@AddressStatus", DbType.Int32,  addressStatus );
			database.AddInParameter(commandWrapper, "@JobExternalId", DbType.AnsiString,  jobExternalId );
			database.AddInParameter(commandWrapper, "@HasScreeningQuestions", DbType.Int32,  hasScreeningQuestions );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Find", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Jobs_CustomPostXML
					
		/// <summary>
		///	This method wraps the 'Jobs_CustomPostXML' stored procedure. 
		/// </summary>	
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserUserName"> A <c>System.String</c> instance.</param>
		/// <param name="xmlFeed"> A <c>string</c> instance.</param>
		/// <param name="errorList"> A <c>string</c> instance.</param>
		/// <param name="clientIpAddress"> A <c>System.String</c> instance.</param>
		/// <param name="archiveMissingJobs"> A <c>System.Boolean?</c> instance.</param>
			/// <param name="webServiceLogId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void CustomPostXML(TransactionManager transactionManager, int start, int pageLength , System.Int32? advertiserId, System.String advertiserUserName, string xmlFeed, string errorList, System.String clientIpAddress, System.Boolean? archiveMissingJobs, ref System.Int32? webServiceLogId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_CustomPostXML", true);
			
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@AdvertiserUserName", DbType.AnsiString,  advertiserUserName );
			database.AddInParameter(commandWrapper, "@XMLFeed", DbType.Xml,  xmlFeed );
			database.AddInParameter(commandWrapper, "@ErrorList", DbType.Xml,  errorList );
			database.AddInParameter(commandWrapper, "@ClientIPAddress", DbType.AnsiString,  clientIpAddress );
			database.AddInParameter(commandWrapper, "@ArchiveMissingJobs", DbType.Boolean,  archiveMissingJobs );
	
			database.AddParameter(commandWrapper, "@WebServiceLogId", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, webServiceLogId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomPostXML", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomPostXML", (IEntity)null));

			webServiceLogId =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@WebServiceLogId"]);

				
				return;
		}
		#endregion

		#region Jobs_Update
					
		/// <summary>
		///	This method wraps the 'Jobs_Update' stored procedure. 
		/// </summary>	
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobName"> A <c>System.String</c> instance.</param>
		/// <param name="description"> A <c>System.String</c> instance.</param>
		/// <param name="fullDescription"> A <c>System.String</c> instance.</param>
		/// <param name="webServiceProcessed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="applicationEmailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="refNo"> A <c>System.String</c> instance.</param>
		/// <param name="visible"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="datePosted"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expired"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemPrice"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="billed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="showSalaryDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryText"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdminUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationUrl"> A <c>System.String</c> instance.</param>
		/// <param name="uploadMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="tags"> A <c>System.String</c> instance.</param>
		/// <param name="jobTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchFieldExtension"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserJobTemplateLogoId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="companyName"> A <c>System.String</c> instance.</param>
		/// <param name="hashValue"> A <c>System.Byte[]</c> instance.</param>
		/// <param name="requireLogonForExternalApplications"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showLocationDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicTransport"> A <c>System.String</c> instance.</param>
		/// <param name="address"> A <c>System.String</c> instance.</param>
		/// <param name="contactDetails"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactPhone"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactName"> A <c>System.String</c> instance.</param>
		/// <param name="qualificationsRecognised"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="residentOnly"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="documentLink"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint1"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint2"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint3"> A <c>System.String</c> instance.</param>
		/// <param name="hotJob"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="showSalaryRange"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enteredByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobLatitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="jobLongitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="addressStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobExternalId"> A <c>System.String</c> instance.</param>
		/// <param name="hasScreeningQuestions"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Update(TransactionManager transactionManager, int start, int pageLength , System.Int32? jobId, System.Int32? siteId, System.Int32? workTypeId, System.String jobName, System.String description, System.String fullDescription, System.Boolean? webServiceProcessed, System.String applicationEmailAddress, System.String refNo, System.Boolean? visible, System.DateTime? datePosted, System.DateTime? expiryDate, System.Int32? expired, System.Decimal? jobItemPrice, System.Boolean? billed, System.DateTime? lastModified, System.Boolean? showSalaryDetails, System.String salaryText, System.Int32? advertiserId, System.Int32? lastModifiedByAdvertiserUserId, System.Int32? lastModifiedByAdminUserId, System.Int32? jobItemTypeId, System.Int32? applicationMethod, System.String applicationUrl, System.Int32? uploadMethod, System.String tags, System.Int32? jobTemplateId, System.String searchFieldExtension, System.Int32? advertiserJobTemplateLogoId, System.String companyName, System.Byte[] hashValue, System.Boolean? requireLogonForExternalApplications, System.Boolean? showLocationDetails, System.String publicTransport, System.String address, System.String contactDetails, System.String jobContactPhone, System.String jobContactName, System.Boolean? qualificationsRecognised, System.Boolean? residentOnly, System.String documentLink, System.String bulletPoint1, System.String bulletPoint2, System.String bulletPoint3, System.Boolean? hotJob, System.String jobFriendlyName, System.String searchField, System.Boolean? showSalaryRange, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? currencyId, System.Int32? salaryTypeId, System.Int32? enteredByAdvertiserUserId, System.Double? jobLatitude, System.Double? jobLongitude, System.Int32? addressStatus, System.String jobExternalId, System.Int32? hasScreeningQuestions)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Jobs_Update", true);
			
			database.AddInParameter(commandWrapper, "@JobId", DbType.Int32,  jobId );
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.Int32,  workTypeId );
			database.AddInParameter(commandWrapper, "@JobName", DbType.String,  jobName );
			database.AddInParameter(commandWrapper, "@Description", DbType.String,  description );
			database.AddInParameter(commandWrapper, "@FullDescription", DbType.String,  fullDescription );
			database.AddInParameter(commandWrapper, "@WebServiceProcessed", DbType.Boolean,  webServiceProcessed );
			database.AddInParameter(commandWrapper, "@ApplicationEmailAddress", DbType.AnsiString,  applicationEmailAddress );
			database.AddInParameter(commandWrapper, "@RefNo", DbType.AnsiString,  refNo );
			database.AddInParameter(commandWrapper, "@Visible", DbType.Boolean,  visible );
			database.AddInParameter(commandWrapper, "@DatePosted", DbType.DateTime,  datePosted );
			database.AddInParameter(commandWrapper, "@ExpiryDate", DbType.DateTime,  expiryDate );
			database.AddInParameter(commandWrapper, "@Expired", DbType.Int32,  expired );
			database.AddInParameter(commandWrapper, "@JobItemPrice", DbType.Currency,  jobItemPrice );
			database.AddInParameter(commandWrapper, "@Billed", DbType.Boolean,  billed );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime,  lastModified );
			database.AddInParameter(commandWrapper, "@ShowSalaryDetails", DbType.Boolean,  showSalaryDetails );
			database.AddInParameter(commandWrapper, "@SalaryText", DbType.AnsiString,  salaryText );
			database.AddInParameter(commandWrapper, "@AdvertiserId", DbType.Int32,  advertiserId );
			database.AddInParameter(commandWrapper, "@LastModifiedByAdvertiserUserId", DbType.Int32,  lastModifiedByAdvertiserUserId );
			database.AddInParameter(commandWrapper, "@LastModifiedByAdminUserId", DbType.Int32,  lastModifiedByAdminUserId );
			database.AddInParameter(commandWrapper, "@JobItemTypeId", DbType.Int32,  jobItemTypeId );
			database.AddInParameter(commandWrapper, "@ApplicationMethod", DbType.Int32,  applicationMethod );
			database.AddInParameter(commandWrapper, "@ApplicationUrl", DbType.AnsiString,  applicationUrl );
			database.AddInParameter(commandWrapper, "@UploadMethod", DbType.Int32,  uploadMethod );
			database.AddInParameter(commandWrapper, "@Tags", DbType.AnsiString,  tags );
			database.AddInParameter(commandWrapper, "@JobTemplateId", DbType.Int32,  jobTemplateId );
			database.AddInParameter(commandWrapper, "@SearchFieldExtension", DbType.AnsiString,  searchFieldExtension );
			database.AddInParameter(commandWrapper, "@AdvertiserJobTemplateLogoId", DbType.Int32,  advertiserJobTemplateLogoId );
			database.AddInParameter(commandWrapper, "@CompanyName", DbType.AnsiString,  companyName );
			database.AddInParameter(commandWrapper, "@HashValue", DbType.Binary,  hashValue );
			database.AddInParameter(commandWrapper, "@RequireLogonForExternalApplications", DbType.Boolean,  requireLogonForExternalApplications );
			database.AddInParameter(commandWrapper, "@ShowLocationDetails", DbType.Boolean,  showLocationDetails );
			database.AddInParameter(commandWrapper, "@PublicTransport", DbType.String,  publicTransport );
			database.AddInParameter(commandWrapper, "@Address", DbType.AnsiString,  address );
			database.AddInParameter(commandWrapper, "@ContactDetails", DbType.String,  contactDetails );
			database.AddInParameter(commandWrapper, "@JobContactPhone", DbType.AnsiString,  jobContactPhone );
			database.AddInParameter(commandWrapper, "@JobContactName", DbType.AnsiString,  jobContactName );
			database.AddInParameter(commandWrapper, "@QualificationsRecognised", DbType.Boolean,  qualificationsRecognised );
			database.AddInParameter(commandWrapper, "@ResidentOnly", DbType.Boolean,  residentOnly );
			database.AddInParameter(commandWrapper, "@DocumentLink", DbType.AnsiString,  documentLink );
			database.AddInParameter(commandWrapper, "@BulletPoint1", DbType.String,  bulletPoint1 );
			database.AddInParameter(commandWrapper, "@BulletPoint2", DbType.String,  bulletPoint2 );
			database.AddInParameter(commandWrapper, "@BulletPoint3", DbType.String,  bulletPoint3 );
			database.AddInParameter(commandWrapper, "@HotJob", DbType.Boolean,  hotJob );
			database.AddInParameter(commandWrapper, "@JobFriendlyName", DbType.AnsiString,  jobFriendlyName );
			database.AddInParameter(commandWrapper, "@SearchField", DbType.String,  searchField );
			database.AddInParameter(commandWrapper, "@ShowSalaryRange", DbType.Boolean,  showSalaryRange );
			database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal,  salaryLowerBand );
			database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal,  salaryUpperBand );
			database.AddInParameter(commandWrapper, "@CurrencyId", DbType.Int32,  currencyId );
			database.AddInParameter(commandWrapper, "@SalaryTypeId", DbType.Int32,  salaryTypeId );
			database.AddInParameter(commandWrapper, "@EnteredByAdvertiserUserId", DbType.Int32,  enteredByAdvertiserUserId );
			database.AddInParameter(commandWrapper, "@JobLatitude", DbType.Double,  jobLatitude );
			database.AddInParameter(commandWrapper, "@JobLongitude", DbType.Double,  jobLongitude );
			database.AddInParameter(commandWrapper, "@AddressStatus", DbType.Int32,  addressStatus );
			database.AddInParameter(commandWrapper, "@JobExternalId", DbType.AnsiString,  jobExternalId );
			database.AddInParameter(commandWrapper, "@HasScreeningQuestions", DbType.Int32,  hasScreeningQuestions );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", (IEntity)null));


				
				return;
		}
		#endregion
		#endregion
	}//end class
} // end namespace


/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlMembersProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using JXTPortal.Entities;
using JXTPortal.Data;
using JXTPortal.Data.Bases;

#endregion

namespace JXTPortal.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Members"/> entity.
	///</summary>
	public abstract partial class SqlMembersProviderBase : MembersProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlMembersProviderBase"/> instance.
		/// </summary>
		public SqlMembersProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlMembersProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlMembersProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_memberId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _memberId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32, _memberId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Members)
					,_memberId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Members objects.</returns>
		public override TList<Members> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<Members>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Username", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Password", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Title", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FirstName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Surname", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EmailAddress", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Company", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Position", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HomePhone", DbType.AnsiStringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WorkPhone", DbType.AnsiStringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MobilePhone", DbType.AnsiStringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Fax", DbType.AnsiStringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Address1", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Address2", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LocationId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AreaId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CountryId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PreferredCategoryId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PreferredSubCategoryId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PreferredSalaryId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Subscribed", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MonthlyUpdate", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ReferringMemberId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastModifiedDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Valid", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EmailFormat", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastLogon", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DateOfBirth", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Gender", DbType.AnsiStringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Tags", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Validated", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ValidateGuid", DbType.Guid, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MemberUrlExtension", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WebsiteUrl", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AvailabilityId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AvailabilityFromDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MySpaceHeading", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MySpaceContent", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UrlReferrer", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RequiredPasswordChange", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PreferredJobTitle", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PreferredAvailability", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PreferredAvailabilityType", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PreferredSalaryFrom", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PreferredSalaryTo", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CurrentSalaryFrom", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CurrentSalaryTo", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LookingFor", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Experience", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Skills", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Reasons", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Comments", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProfileType", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EducationId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SearchField", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RegisteredDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@States", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Suburb", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PostCode", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProfilePicture", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ShortBio", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Memberships", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MemberStatusId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LinkedInAccessToken", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExternalMemberId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PassportNo", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MailingAddress1", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MailingAddress2", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MailingStates", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MailingSuburb", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MailingPostCode", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MailingCountryId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CountryName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MailingCountryName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LoginAttempts", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastAttemptDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Status", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastTermsAndConditionsDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DefaultLanguageId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ReferringSiteId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MultiLingualFirstName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MultiLingualSurame", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SecondaryEmail", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CandidateData", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EligibleToWorkIn", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ReferenceUponRequest", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PreferredLine", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@VideoUrl", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProfileDataXml", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastProfileSubmittedDate", DbType.DateTime, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("memberid ") || clause.Trim().StartsWith("memberid="))
				{
					database.SetParameterValue(commandWrapper, "@MemberId", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("siteid ") || clause.Trim().StartsWith("siteid="))
				{
					database.SetParameterValue(commandWrapper, "@SiteId", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("username ") || clause.Trim().StartsWith("username="))
				{
					database.SetParameterValue(commandWrapper, "@Username", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("password ") || clause.Trim().StartsWith("password="))
				{
					database.SetParameterValue(commandWrapper, "@Password", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("title ") || clause.Trim().StartsWith("title="))
				{
					database.SetParameterValue(commandWrapper, "@Title", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("firstname ") || clause.Trim().StartsWith("firstname="))
				{
					database.SetParameterValue(commandWrapper, "@FirstName", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("surname ") || clause.Trim().StartsWith("surname="))
				{
					database.SetParameterValue(commandWrapper, "@Surname", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("emailaddress ") || clause.Trim().StartsWith("emailaddress="))
				{
					database.SetParameterValue(commandWrapper, "@EmailAddress", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("company ") || clause.Trim().StartsWith("company="))
				{
					database.SetParameterValue(commandWrapper, "@Company", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("position ") || clause.Trim().StartsWith("position="))
				{
					database.SetParameterValue(commandWrapper, "@Position", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("homephone ") || clause.Trim().StartsWith("homephone="))
				{
					database.SetParameterValue(commandWrapper, "@HomePhone", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("workphone ") || clause.Trim().StartsWith("workphone="))
				{
					database.SetParameterValue(commandWrapper, "@WorkPhone", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mobilephone ") || clause.Trim().StartsWith("mobilephone="))
				{
					database.SetParameterValue(commandWrapper, "@MobilePhone", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fax ") || clause.Trim().StartsWith("fax="))
				{
					database.SetParameterValue(commandWrapper, "@Fax", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("address1 ") || clause.Trim().StartsWith("address1="))
				{
					database.SetParameterValue(commandWrapper, "@Address1", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("address2 ") || clause.Trim().StartsWith("address2="))
				{
					database.SetParameterValue(commandWrapper, "@Address2", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("locationid ") || clause.Trim().StartsWith("locationid="))
				{
					database.SetParameterValue(commandWrapper, "@LocationId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("areaid ") || clause.Trim().StartsWith("areaid="))
				{
					database.SetParameterValue(commandWrapper, "@AreaId", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("countryid ") || clause.Trim().StartsWith("countryid="))
				{
					database.SetParameterValue(commandWrapper, "@CountryId", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("preferredcategoryid ") || clause.Trim().StartsWith("preferredcategoryid="))
				{
					database.SetParameterValue(commandWrapper, "@PreferredCategoryId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("preferredsubcategoryid ") || clause.Trim().StartsWith("preferredsubcategoryid="))
				{
					database.SetParameterValue(commandWrapper, "@PreferredSubCategoryId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("preferredsalaryid ") || clause.Trim().StartsWith("preferredsalaryid="))
				{
					database.SetParameterValue(commandWrapper, "@PreferredSalaryId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("subscribed ") || clause.Trim().StartsWith("subscribed="))
				{
					database.SetParameterValue(commandWrapper, "@Subscribed", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("monthlyupdate ") || clause.Trim().StartsWith("monthlyupdate="))
				{
					database.SetParameterValue(commandWrapper, "@MonthlyUpdate", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("referringmemberid ") || clause.Trim().StartsWith("referringmemberid="))
				{
					database.SetParameterValue(commandWrapper, "@ReferringMemberId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastmodifieddate ") || clause.Trim().StartsWith("lastmodifieddate="))
				{
					database.SetParameterValue(commandWrapper, "@LastModifiedDate", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("valid ") || clause.Trim().StartsWith("valid="))
				{
					database.SetParameterValue(commandWrapper, "@Valid", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("emailformat ") || clause.Trim().StartsWith("emailformat="))
				{
					database.SetParameterValue(commandWrapper, "@EmailFormat", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastlogon ") || clause.Trim().StartsWith("lastlogon="))
				{
					database.SetParameterValue(commandWrapper, "@LastLogon", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dateofbirth ") || clause.Trim().StartsWith("dateofbirth="))
				{
					database.SetParameterValue(commandWrapper, "@DateOfBirth", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gender ") || clause.Trim().StartsWith("gender="))
				{
					database.SetParameterValue(commandWrapper, "@Gender", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tags ") || clause.Trim().StartsWith("tags="))
				{
					database.SetParameterValue(commandWrapper, "@Tags", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("validated ") || clause.Trim().StartsWith("validated="))
				{
					database.SetParameterValue(commandWrapper, "@Validated", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("validateguid ") || clause.Trim().StartsWith("validateguid="))
				{
					database.SetParameterValue(commandWrapper, "@ValidateGuid", new Guid(
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
				if (clause.Trim().StartsWith("memberurlextension ") || clause.Trim().StartsWith("memberurlextension="))
				{
					database.SetParameterValue(commandWrapper, "@MemberUrlExtension", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("websiteurl ") || clause.Trim().StartsWith("websiteurl="))
				{
					database.SetParameterValue(commandWrapper, "@WebsiteUrl", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("availabilityid ") || clause.Trim().StartsWith("availabilityid="))
				{
					database.SetParameterValue(commandWrapper, "@AvailabilityId", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("availabilityfromdate ") || clause.Trim().StartsWith("availabilityfromdate="))
				{
					database.SetParameterValue(commandWrapper, "@AvailabilityFromDate", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("myspaceheading ") || clause.Trim().StartsWith("myspaceheading="))
				{
					database.SetParameterValue(commandWrapper, "@MySpaceHeading", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("myspacecontent ") || clause.Trim().StartsWith("myspacecontent="))
				{
					database.SetParameterValue(commandWrapper, "@MySpaceContent", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("urlreferrer ") || clause.Trim().StartsWith("urlreferrer="))
				{
					database.SetParameterValue(commandWrapper, "@UrlReferrer", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("requiredpasswordchange ") || clause.Trim().StartsWith("requiredpasswordchange="))
				{
					database.SetParameterValue(commandWrapper, "@RequiredPasswordChange", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("preferredjobtitle ") || clause.Trim().StartsWith("preferredjobtitle="))
				{
					database.SetParameterValue(commandWrapper, "@PreferredJobTitle", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("preferredavailability ") || clause.Trim().StartsWith("preferredavailability="))
				{
					database.SetParameterValue(commandWrapper, "@PreferredAvailability", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("preferredavailabilitytype ") || clause.Trim().StartsWith("preferredavailabilitytype="))
				{
					database.SetParameterValue(commandWrapper, "@PreferredAvailabilityType", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("preferredsalaryfrom ") || clause.Trim().StartsWith("preferredsalaryfrom="))
				{
					database.SetParameterValue(commandWrapper, "@PreferredSalaryFrom", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("preferredsalaryto ") || clause.Trim().StartsWith("preferredsalaryto="))
				{
					database.SetParameterValue(commandWrapper, "@PreferredSalaryTo", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("currentsalaryfrom ") || clause.Trim().StartsWith("currentsalaryfrom="))
				{
					database.SetParameterValue(commandWrapper, "@CurrentSalaryFrom", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("currentsalaryto ") || clause.Trim().StartsWith("currentsalaryto="))
				{
					database.SetParameterValue(commandWrapper, "@CurrentSalaryTo", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lookingfor ") || clause.Trim().StartsWith("lookingfor="))
				{
					database.SetParameterValue(commandWrapper, "@LookingFor", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("experience ") || clause.Trim().StartsWith("experience="))
				{
					database.SetParameterValue(commandWrapper, "@Experience", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("skills ") || clause.Trim().StartsWith("skills="))
				{
					database.SetParameterValue(commandWrapper, "@Skills", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("reasons ") || clause.Trim().StartsWith("reasons="))
				{
					database.SetParameterValue(commandWrapper, "@Reasons", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("comments ") || clause.Trim().StartsWith("comments="))
				{
					database.SetParameterValue(commandWrapper, "@Comments", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("profiletype ") || clause.Trim().StartsWith("profiletype="))
				{
					database.SetParameterValue(commandWrapper, "@ProfileType", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("educationid ") || clause.Trim().StartsWith("educationid="))
				{
					database.SetParameterValue(commandWrapper, "@EducationId", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("searchfield ") || clause.Trim().StartsWith("searchfield="))
				{
					database.SetParameterValue(commandWrapper, "@SearchField", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("registereddate ") || clause.Trim().StartsWith("registereddate="))
				{
					database.SetParameterValue(commandWrapper, "@RegisteredDate", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("states ") || clause.Trim().StartsWith("states="))
				{
					database.SetParameterValue(commandWrapper, "@States", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("suburb ") || clause.Trim().StartsWith("suburb="))
				{
					database.SetParameterValue(commandWrapper, "@Suburb", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("postcode ") || clause.Trim().StartsWith("postcode="))
				{
					database.SetParameterValue(commandWrapper, "@PostCode", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("profilepicture ") || clause.Trim().StartsWith("profilepicture="))
				{
					database.SetParameterValue(commandWrapper, "@ProfilePicture", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("shortbio ") || clause.Trim().StartsWith("shortbio="))
				{
					database.SetParameterValue(commandWrapper, "@ShortBio", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("worktypeid ") || clause.Trim().StartsWith("worktypeid="))
				{
					database.SetParameterValue(commandWrapper, "@WorkTypeId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("memberships ") || clause.Trim().StartsWith("memberships="))
				{
					database.SetParameterValue(commandWrapper, "@Memberships", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("memberstatusid ") || clause.Trim().StartsWith("memberstatusid="))
				{
					database.SetParameterValue(commandWrapper, "@MemberStatusId", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("linkedinaccesstoken ") || clause.Trim().StartsWith("linkedinaccesstoken="))
				{
					database.SetParameterValue(commandWrapper, "@LinkedInAccessToken", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("externalmemberid ") || clause.Trim().StartsWith("externalmemberid="))
				{
					database.SetParameterValue(commandWrapper, "@ExternalMemberId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("passportno ") || clause.Trim().StartsWith("passportno="))
				{
					database.SetParameterValue(commandWrapper, "@PassportNo", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mailingaddress1 ") || clause.Trim().StartsWith("mailingaddress1="))
				{
					database.SetParameterValue(commandWrapper, "@MailingAddress1", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mailingaddress2 ") || clause.Trim().StartsWith("mailingaddress2="))
				{
					database.SetParameterValue(commandWrapper, "@MailingAddress2", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mailingstates ") || clause.Trim().StartsWith("mailingstates="))
				{
					database.SetParameterValue(commandWrapper, "@MailingStates", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mailingsuburb ") || clause.Trim().StartsWith("mailingsuburb="))
				{
					database.SetParameterValue(commandWrapper, "@MailingSuburb", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mailingpostcode ") || clause.Trim().StartsWith("mailingpostcode="))
				{
					database.SetParameterValue(commandWrapper, "@MailingPostCode", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mailingcountryid ") || clause.Trim().StartsWith("mailingcountryid="))
				{
					database.SetParameterValue(commandWrapper, "@MailingCountryId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("countryname ") || clause.Trim().StartsWith("countryname="))
				{
					database.SetParameterValue(commandWrapper, "@CountryName", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mailingcountryname ") || clause.Trim().StartsWith("mailingcountryname="))
				{
					database.SetParameterValue(commandWrapper, "@MailingCountryName", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("loginattempts ") || clause.Trim().StartsWith("loginattempts="))
				{
					database.SetParameterValue(commandWrapper, "@LoginAttempts", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastattemptdate ") || clause.Trim().StartsWith("lastattemptdate="))
				{
					database.SetParameterValue(commandWrapper, "@LastAttemptDate", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("status ") || clause.Trim().StartsWith("status="))
				{
					database.SetParameterValue(commandWrapper, "@Status", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lasttermsandconditionsdate ") || clause.Trim().StartsWith("lasttermsandconditionsdate="))
				{
					database.SetParameterValue(commandWrapper, "@LastTermsAndConditionsDate", 
						clause.Trim().Remove(0,26).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("defaultlanguageid ") || clause.Trim().StartsWith("defaultlanguageid="))
				{
					database.SetParameterValue(commandWrapper, "@DefaultLanguageId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("referringsiteid ") || clause.Trim().StartsWith("referringsiteid="))
				{
					database.SetParameterValue(commandWrapper, "@ReferringSiteId", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("multilingualfirstname ") || clause.Trim().StartsWith("multilingualfirstname="))
				{
					database.SetParameterValue(commandWrapper, "@MultiLingualFirstName", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("multilingualsurame ") || clause.Trim().StartsWith("multilingualsurame="))
				{
					database.SetParameterValue(commandWrapper, "@MultiLingualSurame", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("secondaryemail ") || clause.Trim().StartsWith("secondaryemail="))
				{
					database.SetParameterValue(commandWrapper, "@SecondaryEmail", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("candidatedata ") || clause.Trim().StartsWith("candidatedata="))
				{
					database.SetParameterValue(commandWrapper, "@CandidateData", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("eligibletoworkin ") || clause.Trim().StartsWith("eligibletoworkin="))
				{
					database.SetParameterValue(commandWrapper, "@EligibleToWorkIn", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("referenceuponrequest ") || clause.Trim().StartsWith("referenceuponrequest="))
				{
					database.SetParameterValue(commandWrapper, "@ReferenceUponRequest", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("preferredline ") || clause.Trim().StartsWith("preferredline="))
				{
					database.SetParameterValue(commandWrapper, "@PreferredLine", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("videourl ") || clause.Trim().StartsWith("videourl="))
				{
					database.SetParameterValue(commandWrapper, "@VideoUrl", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("profiledataxml ") || clause.Trim().StartsWith("profiledataxml="))
				{
					database.SetParameterValue(commandWrapper, "@ProfileDataXml", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastprofilesubmitteddate ") || clause.Trim().StartsWith("lastprofilesubmitteddate="))
				{
					database.SetParameterValue(commandWrapper, "@LastProfileSubmittedDate", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<Members> rows = new TList<Members>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Members objects.</returns>
		public override TList<Members> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_Find_Dynamic", typeof(MembersColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<Members> rows = new TList<Members>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Members objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Members> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<Members> rows = new TList<Members>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Members objects.</returns>
		public override TList<Members> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<Members> rows = new TList<Members>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByCountryId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__Members__Country__797309D9 key.
		///		FK__Members__Country__797309D9 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_countryId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Members objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Members> GetByCountryId(TransactionManager transactionManager, System.Int32 _countryId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetByCountryId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CountryId", DbType.Int32, _countryId);
			
			IDataReader reader = null;
			TList<Members> rows = new TList<Members>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCountryId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCountryId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEducationId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__Members__Educati__2215F810 key.
		///		FK__Members__Educati__2215F810 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_educationId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Members objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Members> GetByEducationId(TransactionManager transactionManager, System.Int32? _educationId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetByEducationId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EducationId", DbType.Int32, _educationId);
			
			IDataReader reader = null;
			TList<Members> rows = new TList<Members>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEducationId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEducationId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEmailFormat
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__Members__EmailFo__7A672E12 key.
		///		FK__Members__EmailFo__7A672E12 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_emailFormat"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Members objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Members> GetByEmailFormat(TransactionManager transactionManager, System.Int32 _emailFormat, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetByEmailFormat", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EmailFormat", DbType.Int32, _emailFormat);
			
			IDataReader reader = null;
			TList<Members> rows = new TList<Members>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEmailFormat", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEmailFormat", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySiteId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__Members__SiteID__0ABD916C key.
		///		FK__Members__SiteID__0ABD916C Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_siteId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Members objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Members> GetBySiteId(TransactionManager transactionManager, System.Int32 _siteId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetBySiteId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, _siteId);
			
			IDataReader reader = null;
			TList<Members> rows = new TList<Members>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetBySiteIdEmailAddress
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Unique_Members index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_siteId"></param>
		/// <param name="_emailAddress"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="JXTPortal.Entities.Members"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override JXTPortal.Entities.Members GetBySiteIdEmailAddress(TransactionManager transactionManager, System.Int32 _siteId, System.String _emailAddress, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetBySiteIdEmailAddress", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, _siteId);
				database.AddInParameter(commandWrapper, "@EmailAddress", DbType.AnsiString, _emailAddress);
			
			IDataReader reader = null;
			TList<Members> tmp = new TList<Members>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteIdEmailAddress", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteIdEmailAddress", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetBySiteIdUsername
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_Unique_Members_Email index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_siteId"></param>
		/// <param name="_username"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="JXTPortal.Entities.Members"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override JXTPortal.Entities.Members GetBySiteIdUsername(TransactionManager transactionManager, System.Int32 _siteId, System.String _username, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetBySiteIdUsername", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, _siteId);
				database.AddInParameter(commandWrapper, "@Username", DbType.String, _username);
			
			IDataReader reader = null;
			TList<Members> tmp = new TList<Members>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteIdUsername", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteIdUsername", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByMemberId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK__Members__2A4B4B5E index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_memberId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="JXTPortal.Entities.Members"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override JXTPortal.Entities.Members GetByMemberId(TransactionManager transactionManager, System.Int32 _memberId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetByMemberId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32, _memberId);
			
			IDataReader reader = null;
			TList<Members> tmp = new TList<Members>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMemberId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMemberId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the JXTPortal.Entities.Members object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<JXTPortal.Entities.Members> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "Members";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("MemberID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("SiteID", typeof(System.Int32));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("Username", typeof(System.String));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("Password", typeof(System.String));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("Title", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("FirstName", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("Surname", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("EmailAddress", typeof(System.String));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("Company", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("Position", typeof(System.String));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("HomePhone", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("WorkPhone", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("MobilePhone", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("Fax", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("Address1", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("Address2", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("LocationID", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("AreaID", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("CountryID", typeof(System.Int32));
			col18.AllowDBNull = false;		
			DataColumn col19 = dataTable.Columns.Add("PreferredCategoryID", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("PreferredSubCategoryID", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("PreferredSalaryID", typeof(System.Int32));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("Subscribed", typeof(System.Boolean));
			col22.AllowDBNull = false;		
			DataColumn col23 = dataTable.Columns.Add("MonthlyUpdate", typeof(System.Boolean));
			col23.AllowDBNull = false;		
			DataColumn col24 = dataTable.Columns.Add("ReferringMemberID", typeof(System.Int32));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("LastModifiedDate", typeof(System.DateTime));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("Valid", typeof(System.Boolean));
			col26.AllowDBNull = false;		
			DataColumn col27 = dataTable.Columns.Add("EmailFormat", typeof(System.Int32));
			col27.AllowDBNull = false;		
			DataColumn col28 = dataTable.Columns.Add("LastLogon", typeof(System.DateTime));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("DateOfBirth", typeof(System.DateTime));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("Gender", typeof(System.String));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("Tags", typeof(System.String));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("Validated", typeof(System.Boolean));
			col32.AllowDBNull = false;		
			DataColumn col33 = dataTable.Columns.Add("ValidateGUID", typeof(System.Guid));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("MemberURLExtension", typeof(System.String));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("WebsiteURL", typeof(System.String));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("AvailabilityID", typeof(System.Int32));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("AvailabilityFromDate", typeof(System.DateTime));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("MySpaceHeading", typeof(System.String));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("MySpaceContent", typeof(System.String));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("URLReferrer", typeof(System.String));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("RequiredPasswordChange", typeof(System.Boolean));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("PreferredJobTitle", typeof(System.String));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("PreferredAvailability", typeof(System.String));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("PreferredAvailabilityType", typeof(System.Int32));
			col44.AllowDBNull = true;		
			DataColumn col45 = dataTable.Columns.Add("PreferredSalaryFrom", typeof(System.String));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("PreferredSalaryTo", typeof(System.String));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("CurrentSalaryFrom", typeof(System.String));
			col47.AllowDBNull = true;		
			DataColumn col48 = dataTable.Columns.Add("CurrentSalaryTo", typeof(System.String));
			col48.AllowDBNull = true;		
			DataColumn col49 = dataTable.Columns.Add("LookingFor", typeof(System.String));
			col49.AllowDBNull = true;		
			DataColumn col50 = dataTable.Columns.Add("Experience", typeof(System.String));
			col50.AllowDBNull = true;		
			DataColumn col51 = dataTable.Columns.Add("Skills", typeof(System.String));
			col51.AllowDBNull = true;		
			DataColumn col52 = dataTable.Columns.Add("Reasons", typeof(System.String));
			col52.AllowDBNull = true;		
			DataColumn col53 = dataTable.Columns.Add("Comments", typeof(System.String));
			col53.AllowDBNull = true;		
			DataColumn col54 = dataTable.Columns.Add("ProfileType", typeof(System.String));
			col54.AllowDBNull = true;		
			DataColumn col55 = dataTable.Columns.Add("EducationID", typeof(System.Int32));
			col55.AllowDBNull = true;		
			DataColumn col56 = dataTable.Columns.Add("SearchField", typeof(System.String));
			col56.AllowDBNull = true;		
			DataColumn col57 = dataTable.Columns.Add("RegisteredDate", typeof(System.DateTime));
			col57.AllowDBNull = false;		
			DataColumn col58 = dataTable.Columns.Add("States", typeof(System.String));
			col58.AllowDBNull = true;		
			DataColumn col59 = dataTable.Columns.Add("Suburb", typeof(System.String));
			col59.AllowDBNull = true;		
			DataColumn col60 = dataTable.Columns.Add("PostCode", typeof(System.String));
			col60.AllowDBNull = true;		
			DataColumn col61 = dataTable.Columns.Add("ProfilePicture", typeof(System.String));
			col61.AllowDBNull = true;		
			DataColumn col62 = dataTable.Columns.Add("ShortBio", typeof(System.String));
			col62.AllowDBNull = true;		
			DataColumn col63 = dataTable.Columns.Add("WorkTypeID", typeof(System.String));
			col63.AllowDBNull = true;		
			DataColumn col64 = dataTable.Columns.Add("Memberships", typeof(System.String));
			col64.AllowDBNull = true;		
			DataColumn col65 = dataTable.Columns.Add("MemberStatusID", typeof(System.Int32));
			col65.AllowDBNull = true;		
			DataColumn col66 = dataTable.Columns.Add("LinkedInAccessToken", typeof(System.String));
			col66.AllowDBNull = true;		
			DataColumn col67 = dataTable.Columns.Add("ExternalMemberID", typeof(System.String));
			col67.AllowDBNull = true;		
			DataColumn col68 = dataTable.Columns.Add("PassportNo", typeof(System.String));
			col68.AllowDBNull = true;		
			DataColumn col69 = dataTable.Columns.Add("MailingAddress1", typeof(System.String));
			col69.AllowDBNull = true;		
			DataColumn col70 = dataTable.Columns.Add("MailingAddress2", typeof(System.String));
			col70.AllowDBNull = true;		
			DataColumn col71 = dataTable.Columns.Add("MailingStates", typeof(System.String));
			col71.AllowDBNull = true;		
			DataColumn col72 = dataTable.Columns.Add("MailingSuburb", typeof(System.String));
			col72.AllowDBNull = true;		
			DataColumn col73 = dataTable.Columns.Add("MailingPostCode", typeof(System.String));
			col73.AllowDBNull = true;		
			DataColumn col74 = dataTable.Columns.Add("MailingCountryID", typeof(System.Int32));
			col74.AllowDBNull = true;		
			DataColumn col75 = dataTable.Columns.Add("CountryName", typeof(System.String));
			col75.AllowDBNull = true;		
			DataColumn col76 = dataTable.Columns.Add("MailingCountryName", typeof(System.String));
			col76.AllowDBNull = true;		
			DataColumn col77 = dataTable.Columns.Add("LoginAttempts", typeof(System.Int32));
			col77.AllowDBNull = false;		
			DataColumn col78 = dataTable.Columns.Add("LastAttemptDate", typeof(System.DateTime));
			col78.AllowDBNull = true;		
			DataColumn col79 = dataTable.Columns.Add("Status", typeof(System.Int32));
			col79.AllowDBNull = true;		
			DataColumn col80 = dataTable.Columns.Add("LastTermsAndConditionsDate", typeof(System.DateTime));
			col80.AllowDBNull = true;		
			DataColumn col81 = dataTable.Columns.Add("DefaultLanguageId", typeof(System.Int32));
			col81.AllowDBNull = true;		
			DataColumn col82 = dataTable.Columns.Add("ReferringSiteID", typeof(System.Int32));
			col82.AllowDBNull = true;		
			DataColumn col83 = dataTable.Columns.Add("MultiLingualFirstName", typeof(System.String));
			col83.AllowDBNull = true;		
			DataColumn col84 = dataTable.Columns.Add("MultiLingualSurame", typeof(System.String));
			col84.AllowDBNull = true;		
			DataColumn col85 = dataTable.Columns.Add("SecondaryEmail", typeof(System.String));
			col85.AllowDBNull = true;		
			DataColumn col86 = dataTable.Columns.Add("CandidateData", typeof(System.String));
			col86.AllowDBNull = true;		
			DataColumn col87 = dataTable.Columns.Add("EligibleToWorkIn", typeof(System.String));
			col87.AllowDBNull = true;		
			DataColumn col88 = dataTable.Columns.Add("ReferenceUponRequest", typeof(System.Boolean));
			col88.AllowDBNull = true;		
			DataColumn col89 = dataTable.Columns.Add("PreferredLine", typeof(System.Int32));
			col89.AllowDBNull = false;		
			DataColumn col90 = dataTable.Columns.Add("VideoURL", typeof(System.String));
			col90.AllowDBNull = true;		
			DataColumn col91 = dataTable.Columns.Add("ProfileDataXML", typeof(System.String));
			col91.AllowDBNull = true;		
			DataColumn col92 = dataTable.Columns.Add("LastProfileSubmittedDate", typeof(System.DateTime));
			col92.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("MemberID", "MemberID");
			bulkCopy.ColumnMappings.Add("SiteID", "SiteID");
			bulkCopy.ColumnMappings.Add("Username", "Username");
			bulkCopy.ColumnMappings.Add("Password", "Password");
			bulkCopy.ColumnMappings.Add("Title", "Title");
			bulkCopy.ColumnMappings.Add("FirstName", "FirstName");
			bulkCopy.ColumnMappings.Add("Surname", "Surname");
			bulkCopy.ColumnMappings.Add("EmailAddress", "EmailAddress");
			bulkCopy.ColumnMappings.Add("Company", "Company");
			bulkCopy.ColumnMappings.Add("Position", "Position");
			bulkCopy.ColumnMappings.Add("HomePhone", "HomePhone");
			bulkCopy.ColumnMappings.Add("WorkPhone", "WorkPhone");
			bulkCopy.ColumnMappings.Add("MobilePhone", "MobilePhone");
			bulkCopy.ColumnMappings.Add("Fax", "Fax");
			bulkCopy.ColumnMappings.Add("Address1", "Address1");
			bulkCopy.ColumnMappings.Add("Address2", "Address2");
			bulkCopy.ColumnMappings.Add("LocationID", "LocationID");
			bulkCopy.ColumnMappings.Add("AreaID", "AreaID");
			bulkCopy.ColumnMappings.Add("CountryID", "CountryID");
			bulkCopy.ColumnMappings.Add("PreferredCategoryID", "PreferredCategoryID");
			bulkCopy.ColumnMappings.Add("PreferredSubCategoryID", "PreferredSubCategoryID");
			bulkCopy.ColumnMappings.Add("PreferredSalaryID", "PreferredSalaryID");
			bulkCopy.ColumnMappings.Add("Subscribed", "Subscribed");
			bulkCopy.ColumnMappings.Add("MonthlyUpdate", "MonthlyUpdate");
			bulkCopy.ColumnMappings.Add("ReferringMemberID", "ReferringMemberID");
			bulkCopy.ColumnMappings.Add("LastModifiedDate", "LastModifiedDate");
			bulkCopy.ColumnMappings.Add("Valid", "Valid");
			bulkCopy.ColumnMappings.Add("EmailFormat", "EmailFormat");
			bulkCopy.ColumnMappings.Add("LastLogon", "LastLogon");
			bulkCopy.ColumnMappings.Add("DateOfBirth", "DateOfBirth");
			bulkCopy.ColumnMappings.Add("Gender", "Gender");
			bulkCopy.ColumnMappings.Add("Tags", "Tags");
			bulkCopy.ColumnMappings.Add("Validated", "Validated");
			bulkCopy.ColumnMappings.Add("ValidateGUID", "ValidateGUID");
			bulkCopy.ColumnMappings.Add("MemberURLExtension", "MemberURLExtension");
			bulkCopy.ColumnMappings.Add("WebsiteURL", "WebsiteURL");
			bulkCopy.ColumnMappings.Add("AvailabilityID", "AvailabilityID");
			bulkCopy.ColumnMappings.Add("AvailabilityFromDate", "AvailabilityFromDate");
			bulkCopy.ColumnMappings.Add("MySpaceHeading", "MySpaceHeading");
			bulkCopy.ColumnMappings.Add("MySpaceContent", "MySpaceContent");
			bulkCopy.ColumnMappings.Add("URLReferrer", "URLReferrer");
			bulkCopy.ColumnMappings.Add("RequiredPasswordChange", "RequiredPasswordChange");
			bulkCopy.ColumnMappings.Add("PreferredJobTitle", "PreferredJobTitle");
			bulkCopy.ColumnMappings.Add("PreferredAvailability", "PreferredAvailability");
			bulkCopy.ColumnMappings.Add("PreferredAvailabilityType", "PreferredAvailabilityType");
			bulkCopy.ColumnMappings.Add("PreferredSalaryFrom", "PreferredSalaryFrom");
			bulkCopy.ColumnMappings.Add("PreferredSalaryTo", "PreferredSalaryTo");
			bulkCopy.ColumnMappings.Add("CurrentSalaryFrom", "CurrentSalaryFrom");
			bulkCopy.ColumnMappings.Add("CurrentSalaryTo", "CurrentSalaryTo");
			bulkCopy.ColumnMappings.Add("LookingFor", "LookingFor");
			bulkCopy.ColumnMappings.Add("Experience", "Experience");
			bulkCopy.ColumnMappings.Add("Skills", "Skills");
			bulkCopy.ColumnMappings.Add("Reasons", "Reasons");
			bulkCopy.ColumnMappings.Add("Comments", "Comments");
			bulkCopy.ColumnMappings.Add("ProfileType", "ProfileType");
			bulkCopy.ColumnMappings.Add("EducationID", "EducationID");
			bulkCopy.ColumnMappings.Add("SearchField", "SearchField");
			bulkCopy.ColumnMappings.Add("RegisteredDate", "RegisteredDate");
			bulkCopy.ColumnMappings.Add("States", "States");
			bulkCopy.ColumnMappings.Add("Suburb", "Suburb");
			bulkCopy.ColumnMappings.Add("PostCode", "PostCode");
			bulkCopy.ColumnMappings.Add("ProfilePicture", "ProfilePicture");
			bulkCopy.ColumnMappings.Add("ShortBio", "ShortBio");
			bulkCopy.ColumnMappings.Add("WorkTypeID", "WorkTypeID");
			bulkCopy.ColumnMappings.Add("Memberships", "Memberships");
			bulkCopy.ColumnMappings.Add("MemberStatusID", "MemberStatusID");
			bulkCopy.ColumnMappings.Add("LinkedInAccessToken", "LinkedInAccessToken");
			bulkCopy.ColumnMappings.Add("ExternalMemberID", "ExternalMemberID");
			bulkCopy.ColumnMappings.Add("PassportNo", "PassportNo");
			bulkCopy.ColumnMappings.Add("MailingAddress1", "MailingAddress1");
			bulkCopy.ColumnMappings.Add("MailingAddress2", "MailingAddress2");
			bulkCopy.ColumnMappings.Add("MailingStates", "MailingStates");
			bulkCopy.ColumnMappings.Add("MailingSuburb", "MailingSuburb");
			bulkCopy.ColumnMappings.Add("MailingPostCode", "MailingPostCode");
			bulkCopy.ColumnMappings.Add("MailingCountryID", "MailingCountryID");
			bulkCopy.ColumnMappings.Add("CountryName", "CountryName");
			bulkCopy.ColumnMappings.Add("MailingCountryName", "MailingCountryName");
			bulkCopy.ColumnMappings.Add("LoginAttempts", "LoginAttempts");
			bulkCopy.ColumnMappings.Add("LastAttemptDate", "LastAttemptDate");
			bulkCopy.ColumnMappings.Add("Status", "Status");
			bulkCopy.ColumnMappings.Add("LastTermsAndConditionsDate", "LastTermsAndConditionsDate");
			bulkCopy.ColumnMappings.Add("DefaultLanguageId", "DefaultLanguageId");
			bulkCopy.ColumnMappings.Add("ReferringSiteID", "ReferringSiteID");
			bulkCopy.ColumnMappings.Add("MultiLingualFirstName", "MultiLingualFirstName");
			bulkCopy.ColumnMappings.Add("MultiLingualSurame", "MultiLingualSurame");
			bulkCopy.ColumnMappings.Add("SecondaryEmail", "SecondaryEmail");
			bulkCopy.ColumnMappings.Add("CandidateData", "CandidateData");
			bulkCopy.ColumnMappings.Add("EligibleToWorkIn", "EligibleToWorkIn");
			bulkCopy.ColumnMappings.Add("ReferenceUponRequest", "ReferenceUponRequest");
			bulkCopy.ColumnMappings.Add("PreferredLine", "PreferredLine");
			bulkCopy.ColumnMappings.Add("VideoURL", "VideoURL");
			bulkCopy.ColumnMappings.Add("ProfileDataXML", "ProfileDataXML");
			bulkCopy.ColumnMappings.Add("LastProfileSubmittedDate", "LastProfileSubmittedDate");
			
			foreach(JXTPortal.Entities.Members entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["MemberID"] = entity.MemberId;
							
				
					row["SiteID"] = entity.SiteId;
							
				
					row["Username"] = entity.Username;
							
				
					row["Password"] = entity.Password;
							
				
					row["Title"] = entity.Title;
							
				
					row["FirstName"] = entity.FirstName;
							
				
					row["Surname"] = entity.Surname;
							
				
					row["EmailAddress"] = entity.EmailAddress;
							
				
					row["Company"] = entity.Company;
							
				
					row["Position"] = entity.Position;
							
				
					row["HomePhone"] = entity.HomePhone;
							
				
					row["WorkPhone"] = entity.WorkPhone;
							
				
					row["MobilePhone"] = entity.MobilePhone;
							
				
					row["Fax"] = entity.Fax;
							
				
					row["Address1"] = entity.Address1;
							
				
					row["Address2"] = entity.Address2;
							
				
					row["LocationID"] = entity.LocationId;
							
				
					row["AreaID"] = entity.AreaId;
							
				
					row["CountryID"] = entity.CountryId;
							
				
					row["PreferredCategoryID"] = entity.PreferredCategoryId;
							
				
					row["PreferredSubCategoryID"] = entity.PreferredSubCategoryId;
							
				
					row["PreferredSalaryID"] = entity.PreferredSalaryId.HasValue ? (object) entity.PreferredSalaryId  : System.DBNull.Value;
							
				
					row["Subscribed"] = entity.Subscribed;
							
				
					row["MonthlyUpdate"] = entity.MonthlyUpdate;
							
				
					row["ReferringMemberID"] = entity.ReferringMemberId.HasValue ? (object) entity.ReferringMemberId  : System.DBNull.Value;
							
				
					row["LastModifiedDate"] = entity.LastModifiedDate.HasValue ? (object) entity.LastModifiedDate  : System.DBNull.Value;
							
				
					row["Valid"] = entity.Valid;
							
				
					row["EmailFormat"] = entity.EmailFormat;
							
				
					row["LastLogon"] = entity.LastLogon.HasValue ? (object) entity.LastLogon  : System.DBNull.Value;
							
				
					row["DateOfBirth"] = entity.DateOfBirth.HasValue ? (object) entity.DateOfBirth  : System.DBNull.Value;
							
				
					row["Gender"] = entity.Gender;
							
				
					row["Tags"] = entity.Tags;
							
				
					row["Validated"] = entity.Validated;
							
				
					row["ValidateGUID"] = entity.ValidateGuid.HasValue ? (object) entity.ValidateGuid  : System.DBNull.Value;
							
				
					row["MemberURLExtension"] = entity.MemberUrlExtension;
							
				
					row["WebsiteURL"] = entity.WebsiteUrl;
							
				
					row["AvailabilityID"] = entity.AvailabilityId.HasValue ? (object) entity.AvailabilityId  : System.DBNull.Value;
							
				
					row["AvailabilityFromDate"] = entity.AvailabilityFromDate.HasValue ? (object) entity.AvailabilityFromDate  : System.DBNull.Value;
							
				
					row["MySpaceHeading"] = entity.MySpaceHeading;
							
				
					row["MySpaceContent"] = entity.MySpaceContent;
							
				
					row["URLReferrer"] = entity.UrlReferrer;
							
				
					row["RequiredPasswordChange"] = entity.RequiredPasswordChange.HasValue ? (object) entity.RequiredPasswordChange  : System.DBNull.Value;
							
				
					row["PreferredJobTitle"] = entity.PreferredJobTitle;
							
				
					row["PreferredAvailability"] = entity.PreferredAvailability;
							
				
					row["PreferredAvailabilityType"] = entity.PreferredAvailabilityType.HasValue ? (object) entity.PreferredAvailabilityType  : System.DBNull.Value;
							
				
					row["PreferredSalaryFrom"] = entity.PreferredSalaryFrom;
							
				
					row["PreferredSalaryTo"] = entity.PreferredSalaryTo;
							
				
					row["CurrentSalaryFrom"] = entity.CurrentSalaryFrom;
							
				
					row["CurrentSalaryTo"] = entity.CurrentSalaryTo;
							
				
					row["LookingFor"] = entity.LookingFor;
							
				
					row["Experience"] = entity.Experience;
							
				
					row["Skills"] = entity.Skills;
							
				
					row["Reasons"] = entity.Reasons;
							
				
					row["Comments"] = entity.Comments;
							
				
					row["ProfileType"] = entity.ProfileType;
							
				
					row["EducationID"] = entity.EducationId.HasValue ? (object) entity.EducationId  : System.DBNull.Value;
							
				
					row["SearchField"] = entity.SearchField;
							
				
					row["RegisteredDate"] = entity.RegisteredDate;
							
				
					row["States"] = entity.States;
							
				
					row["Suburb"] = entity.Suburb;
							
				
					row["PostCode"] = entity.PostCode;
							
				
					row["ProfilePicture"] = entity.ProfilePicture;
							
				
					row["ShortBio"] = entity.ShortBio;
							
				
					row["WorkTypeID"] = entity.WorkTypeId;
							
				
					row["Memberships"] = entity.Memberships;
							
				
					row["MemberStatusID"] = entity.MemberStatusId.HasValue ? (object) entity.MemberStatusId  : System.DBNull.Value;
							
				
					row["LinkedInAccessToken"] = entity.LinkedInAccessToken;
							
				
					row["ExternalMemberID"] = entity.ExternalMemberId;
							
				
					row["PassportNo"] = entity.PassportNo;
							
				
					row["MailingAddress1"] = entity.MailingAddress1;
							
				
					row["MailingAddress2"] = entity.MailingAddress2;
							
				
					row["MailingStates"] = entity.MailingStates;
							
				
					row["MailingSuburb"] = entity.MailingSuburb;
							
				
					row["MailingPostCode"] = entity.MailingPostCode;
							
				
					row["MailingCountryID"] = entity.MailingCountryId.HasValue ? (object) entity.MailingCountryId  : System.DBNull.Value;
							
				
					row["CountryName"] = entity.CountryName;
							
				
					row["MailingCountryName"] = entity.MailingCountryName;
							
				
					row["LoginAttempts"] = entity.LoginAttempts;
							
				
					row["LastAttemptDate"] = entity.LastAttemptDate.HasValue ? (object) entity.LastAttemptDate  : System.DBNull.Value;
							
				
					row["Status"] = entity.Status.HasValue ? (object) entity.Status  : System.DBNull.Value;
							
				
					row["LastTermsAndConditionsDate"] = entity.LastTermsAndConditionsDate.HasValue ? (object) entity.LastTermsAndConditionsDate  : System.DBNull.Value;
							
				
					row["DefaultLanguageId"] = entity.DefaultLanguageId.HasValue ? (object) entity.DefaultLanguageId  : System.DBNull.Value;
							
				
					row["ReferringSiteID"] = entity.ReferringSiteId.HasValue ? (object) entity.ReferringSiteId  : System.DBNull.Value;
							
				
					row["MultiLingualFirstName"] = entity.MultiLingualFirstName;
							
				
					row["MultiLingualSurame"] = entity.MultiLingualSurame;
							
				
					row["SecondaryEmail"] = entity.SecondaryEmail;
							
				
					row["CandidateData"] = entity.CandidateData;
							
				
					row["EligibleToWorkIn"] = entity.EligibleToWorkIn;
							
				
					row["ReferenceUponRequest"] = entity.ReferenceUponRequest.HasValue ? (object) entity.ReferenceUponRequest  : System.DBNull.Value;
							
				
					row["PreferredLine"] = entity.PreferredLine;
							
				
					row["VideoURL"] = entity.VideoUrl;
							
				
					row["ProfileDataXML"] = entity.ProfileDataXml;
							
				
					row["LastProfileSubmittedDate"] = entity.LastProfileSubmittedDate.HasValue ? (object) entity.LastProfileSubmittedDate  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(JXTPortal.Entities.Members entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a JXTPortal.Entities.Members object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">JXTPortal.Entities.Members object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the JXTPortal.Entities.Members object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, JXTPortal.Entities.Members entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@MemberId", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, entity.SiteId );
			database.AddInParameter(commandWrapper, "@Username", DbType.String, entity.Username );
			database.AddInParameter(commandWrapper, "@Password", DbType.String, entity.Password );
			database.AddInParameter(commandWrapper, "@Title", DbType.String, entity.Title );
			database.AddInParameter(commandWrapper, "@FirstName", DbType.String, entity.FirstName );
			database.AddInParameter(commandWrapper, "@Surname", DbType.String, entity.Surname );
			database.AddInParameter(commandWrapper, "@EmailAddress", DbType.AnsiString, entity.EmailAddress );
			database.AddInParameter(commandWrapper, "@Company", DbType.AnsiString, entity.Company );
			database.AddInParameter(commandWrapper, "@Position", DbType.AnsiString, entity.Position );
			database.AddInParameter(commandWrapper, "@HomePhone", DbType.AnsiStringFixedLength, entity.HomePhone );
			database.AddInParameter(commandWrapper, "@WorkPhone", DbType.AnsiStringFixedLength, entity.WorkPhone );
			database.AddInParameter(commandWrapper, "@MobilePhone", DbType.AnsiStringFixedLength, entity.MobilePhone );
			database.AddInParameter(commandWrapper, "@Fax", DbType.AnsiStringFixedLength, entity.Fax );
			database.AddInParameter(commandWrapper, "@Address1", DbType.String, entity.Address1 );
			database.AddInParameter(commandWrapper, "@Address2", DbType.String, entity.Address2 );
			database.AddInParameter(commandWrapper, "@LocationId", DbType.AnsiString, entity.LocationId );
			database.AddInParameter(commandWrapper, "@AreaId", DbType.AnsiString, entity.AreaId );
			database.AddInParameter(commandWrapper, "@CountryId", DbType.Int32, entity.CountryId );
			database.AddInParameter(commandWrapper, "@PreferredCategoryId", DbType.AnsiString, entity.PreferredCategoryId );
			database.AddInParameter(commandWrapper, "@PreferredSubCategoryId", DbType.AnsiString, entity.PreferredSubCategoryId );
			database.AddInParameter(commandWrapper, "@PreferredSalaryId", DbType.Int32, (entity.PreferredSalaryId.HasValue ? (object) entity.PreferredSalaryId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Subscribed", DbType.Boolean, entity.Subscribed );
			database.AddInParameter(commandWrapper, "@MonthlyUpdate", DbType.Boolean, entity.MonthlyUpdate );
			database.AddInParameter(commandWrapper, "@ReferringMemberId", DbType.Int32, (entity.ReferringMemberId.HasValue ? (object) entity.ReferringMemberId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastModifiedDate", DbType.DateTime, (entity.LastModifiedDate.HasValue ? (object) entity.LastModifiedDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Valid", DbType.Boolean, entity.Valid );
			database.AddInParameter(commandWrapper, "@EmailFormat", DbType.Int32, entity.EmailFormat );
			database.AddInParameter(commandWrapper, "@LastLogon", DbType.DateTime, (entity.LastLogon.HasValue ? (object) entity.LastLogon  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DateOfBirth", DbType.DateTime, (entity.DateOfBirth.HasValue ? (object) entity.DateOfBirth  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Gender", DbType.AnsiStringFixedLength, entity.Gender );
			database.AddInParameter(commandWrapper, "@Tags", DbType.String, entity.Tags );
			database.AddInParameter(commandWrapper, "@Validated", DbType.Boolean, entity.Validated );
			database.AddInParameter(commandWrapper, "@ValidateGuid", DbType.Guid, (entity.ValidateGuid.HasValue ? (object) entity.ValidateGuid  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MemberUrlExtension", DbType.AnsiString, entity.MemberUrlExtension );
			database.AddInParameter(commandWrapper, "@WebsiteUrl", DbType.AnsiString, entity.WebsiteUrl );
			database.AddInParameter(commandWrapper, "@AvailabilityId", DbType.Int32, (entity.AvailabilityId.HasValue ? (object) entity.AvailabilityId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AvailabilityFromDate", DbType.DateTime, (entity.AvailabilityFromDate.HasValue ? (object) entity.AvailabilityFromDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MySpaceHeading", DbType.String, entity.MySpaceHeading );
			database.AddInParameter(commandWrapper, "@MySpaceContent", DbType.String, entity.MySpaceContent );
			database.AddInParameter(commandWrapper, "@UrlReferrer", DbType.AnsiString, entity.UrlReferrer );
			database.AddInParameter(commandWrapper, "@RequiredPasswordChange", DbType.Boolean, (entity.RequiredPasswordChange.HasValue ? (object) entity.RequiredPasswordChange  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PreferredJobTitle", DbType.String, entity.PreferredJobTitle );
			database.AddInParameter(commandWrapper, "@PreferredAvailability", DbType.AnsiString, entity.PreferredAvailability );
			database.AddInParameter(commandWrapper, "@PreferredAvailabilityType", DbType.Int32, (entity.PreferredAvailabilityType.HasValue ? (object) entity.PreferredAvailabilityType  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PreferredSalaryFrom", DbType.AnsiString, entity.PreferredSalaryFrom );
			database.AddInParameter(commandWrapper, "@PreferredSalaryTo", DbType.AnsiString, entity.PreferredSalaryTo );
			database.AddInParameter(commandWrapper, "@CurrentSalaryFrom", DbType.AnsiString, entity.CurrentSalaryFrom );
			database.AddInParameter(commandWrapper, "@CurrentSalaryTo", DbType.AnsiString, entity.CurrentSalaryTo );
			database.AddInParameter(commandWrapper, "@LookingFor", DbType.String, entity.LookingFor );
			database.AddInParameter(commandWrapper, "@Experience", DbType.String, entity.Experience );
			database.AddInParameter(commandWrapper, "@Skills", DbType.String, entity.Skills );
			database.AddInParameter(commandWrapper, "@Reasons", DbType.String, entity.Reasons );
			database.AddInParameter(commandWrapper, "@Comments", DbType.String, entity.Comments );
			database.AddInParameter(commandWrapper, "@ProfileType", DbType.AnsiString, entity.ProfileType );
			database.AddInParameter(commandWrapper, "@EducationId", DbType.Int32, (entity.EducationId.HasValue ? (object) entity.EducationId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SearchField", DbType.String, entity.SearchField );
			database.AddInParameter(commandWrapper, "@RegisteredDate", DbType.DateTime, entity.RegisteredDate );
			database.AddInParameter(commandWrapper, "@States", DbType.String, entity.States );
			database.AddInParameter(commandWrapper, "@Suburb", DbType.String, entity.Suburb );
			database.AddInParameter(commandWrapper, "@PostCode", DbType.String, entity.PostCode );
			database.AddInParameter(commandWrapper, "@ProfilePicture", DbType.AnsiString, entity.ProfilePicture );
			database.AddInParameter(commandWrapper, "@ShortBio", DbType.String, entity.ShortBio );
			database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.AnsiString, entity.WorkTypeId );
			database.AddInParameter(commandWrapper, "@Memberships", DbType.String, entity.Memberships );
			database.AddInParameter(commandWrapper, "@MemberStatusId", DbType.Int32, (entity.MemberStatusId.HasValue ? (object) entity.MemberStatusId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LinkedInAccessToken", DbType.AnsiString, entity.LinkedInAccessToken );
			database.AddInParameter(commandWrapper, "@ExternalMemberId", DbType.AnsiString, entity.ExternalMemberId );
			database.AddInParameter(commandWrapper, "@PassportNo", DbType.AnsiString, entity.PassportNo );
			database.AddInParameter(commandWrapper, "@MailingAddress1", DbType.String, entity.MailingAddress1 );
			database.AddInParameter(commandWrapper, "@MailingAddress2", DbType.String, entity.MailingAddress2 );
			database.AddInParameter(commandWrapper, "@MailingStates", DbType.String, entity.MailingStates );
			database.AddInParameter(commandWrapper, "@MailingSuburb", DbType.String, entity.MailingSuburb );
			database.AddInParameter(commandWrapper, "@MailingPostCode", DbType.String, entity.MailingPostCode );
			database.AddInParameter(commandWrapper, "@MailingCountryId", DbType.Int32, (entity.MailingCountryId.HasValue ? (object) entity.MailingCountryId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CountryName", DbType.String, entity.CountryName );
			database.AddInParameter(commandWrapper, "@MailingCountryName", DbType.String, entity.MailingCountryName );
			database.AddInParameter(commandWrapper, "@LoginAttempts", DbType.Int32, entity.LoginAttempts );
			database.AddInParameter(commandWrapper, "@LastAttemptDate", DbType.DateTime, (entity.LastAttemptDate.HasValue ? (object) entity.LastAttemptDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Status", DbType.Int32, (entity.Status.HasValue ? (object) entity.Status  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastTermsAndConditionsDate", DbType.DateTime, (entity.LastTermsAndConditionsDate.HasValue ? (object) entity.LastTermsAndConditionsDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DefaultLanguageId", DbType.Int32, (entity.DefaultLanguageId.HasValue ? (object) entity.DefaultLanguageId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ReferringSiteId", DbType.Int32, (entity.ReferringSiteId.HasValue ? (object) entity.ReferringSiteId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MultiLingualFirstName", DbType.String, entity.MultiLingualFirstName );
			database.AddInParameter(commandWrapper, "@MultiLingualSurame", DbType.String, entity.MultiLingualSurame );
			database.AddInParameter(commandWrapper, "@SecondaryEmail", DbType.AnsiString, entity.SecondaryEmail );
			database.AddInParameter(commandWrapper, "@CandidateData", DbType.String, entity.CandidateData );
			database.AddInParameter(commandWrapper, "@EligibleToWorkIn", DbType.AnsiString, entity.EligibleToWorkIn );
			database.AddInParameter(commandWrapper, "@ReferenceUponRequest", DbType.Boolean, (entity.ReferenceUponRequest.HasValue ? (object) entity.ReferenceUponRequest  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PreferredLine", DbType.Int32, entity.PreferredLine );
			database.AddInParameter(commandWrapper, "@VideoUrl", DbType.AnsiString, entity.VideoUrl );
			database.AddInParameter(commandWrapper, "@ProfileDataXml", DbType.String, entity.ProfileDataXml );
			database.AddInParameter(commandWrapper, "@LastProfileSubmittedDate", DbType.DateTime, (entity.LastProfileSubmittedDate.HasValue ? (object) entity.LastProfileSubmittedDate  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _memberId = database.GetParameterValue(commandWrapper, "@MemberId");
			entity.MemberId = (System.Int32)_memberId;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">JXTPortal.Entities.Members object to update.</param>
		/// <remarks>
		///		After updating the datasource, the JXTPortal.Entities.Members object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, JXTPortal.Entities.Members entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32, entity.MemberId );
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, entity.SiteId );
			database.AddInParameter(commandWrapper, "@Username", DbType.String, entity.Username );
			database.AddInParameter(commandWrapper, "@Password", DbType.String, entity.Password );
			database.AddInParameter(commandWrapper, "@Title", DbType.String, entity.Title );
			database.AddInParameter(commandWrapper, "@FirstName", DbType.String, entity.FirstName );
			database.AddInParameter(commandWrapper, "@Surname", DbType.String, entity.Surname );
			database.AddInParameter(commandWrapper, "@EmailAddress", DbType.AnsiString, entity.EmailAddress );
			database.AddInParameter(commandWrapper, "@Company", DbType.AnsiString, entity.Company );
			database.AddInParameter(commandWrapper, "@Position", DbType.AnsiString, entity.Position );
			database.AddInParameter(commandWrapper, "@HomePhone", DbType.AnsiStringFixedLength, entity.HomePhone );
			database.AddInParameter(commandWrapper, "@WorkPhone", DbType.AnsiStringFixedLength, entity.WorkPhone );
			database.AddInParameter(commandWrapper, "@MobilePhone", DbType.AnsiStringFixedLength, entity.MobilePhone );
			database.AddInParameter(commandWrapper, "@Fax", DbType.AnsiStringFixedLength, entity.Fax );
			database.AddInParameter(commandWrapper, "@Address1", DbType.String, entity.Address1 );
			database.AddInParameter(commandWrapper, "@Address2", DbType.String, entity.Address2 );
			database.AddInParameter(commandWrapper, "@LocationId", DbType.AnsiString, entity.LocationId );
			database.AddInParameter(commandWrapper, "@AreaId", DbType.AnsiString, entity.AreaId );
			database.AddInParameter(commandWrapper, "@CountryId", DbType.Int32, entity.CountryId );
			database.AddInParameter(commandWrapper, "@PreferredCategoryId", DbType.AnsiString, entity.PreferredCategoryId );
			database.AddInParameter(commandWrapper, "@PreferredSubCategoryId", DbType.AnsiString, entity.PreferredSubCategoryId );
			database.AddInParameter(commandWrapper, "@PreferredSalaryId", DbType.Int32, (entity.PreferredSalaryId.HasValue ? (object) entity.PreferredSalaryId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Subscribed", DbType.Boolean, entity.Subscribed );
			database.AddInParameter(commandWrapper, "@MonthlyUpdate", DbType.Boolean, entity.MonthlyUpdate );
			database.AddInParameter(commandWrapper, "@ReferringMemberId", DbType.Int32, (entity.ReferringMemberId.HasValue ? (object) entity.ReferringMemberId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastModifiedDate", DbType.DateTime, (entity.LastModifiedDate.HasValue ? (object) entity.LastModifiedDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Valid", DbType.Boolean, entity.Valid );
			database.AddInParameter(commandWrapper, "@EmailFormat", DbType.Int32, entity.EmailFormat );
			database.AddInParameter(commandWrapper, "@LastLogon", DbType.DateTime, (entity.LastLogon.HasValue ? (object) entity.LastLogon : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DateOfBirth", DbType.DateTime, (entity.DateOfBirth.HasValue ? (object) entity.DateOfBirth : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Gender", DbType.AnsiStringFixedLength, entity.Gender );
			database.AddInParameter(commandWrapper, "@Tags", DbType.String, entity.Tags );
			database.AddInParameter(commandWrapper, "@Validated", DbType.Boolean, entity.Validated );
			database.AddInParameter(commandWrapper, "@ValidateGuid", DbType.Guid, (entity.ValidateGuid.HasValue ? (object) entity.ValidateGuid : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MemberUrlExtension", DbType.AnsiString, entity.MemberUrlExtension );
			database.AddInParameter(commandWrapper, "@WebsiteUrl", DbType.AnsiString, entity.WebsiteUrl );
			database.AddInParameter(commandWrapper, "@AvailabilityId", DbType.Int32, (entity.AvailabilityId.HasValue ? (object) entity.AvailabilityId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AvailabilityFromDate", DbType.DateTime, (entity.AvailabilityFromDate.HasValue ? (object) entity.AvailabilityFromDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MySpaceHeading", DbType.String, entity.MySpaceHeading );
			database.AddInParameter(commandWrapper, "@MySpaceContent", DbType.String, entity.MySpaceContent );
			database.AddInParameter(commandWrapper, "@UrlReferrer", DbType.AnsiString, entity.UrlReferrer );
			database.AddInParameter(commandWrapper, "@RequiredPasswordChange", DbType.Boolean, (entity.RequiredPasswordChange.HasValue ? (object) entity.RequiredPasswordChange : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PreferredJobTitle", DbType.String, entity.PreferredJobTitle );
			database.AddInParameter(commandWrapper, "@PreferredAvailability", DbType.AnsiString, entity.PreferredAvailability );
			database.AddInParameter(commandWrapper, "@PreferredAvailabilityType", DbType.Int32, (entity.PreferredAvailabilityType.HasValue ? (object) entity.PreferredAvailabilityType : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PreferredSalaryFrom", DbType.AnsiString, entity.PreferredSalaryFrom );
			database.AddInParameter(commandWrapper, "@PreferredSalaryTo", DbType.AnsiString, entity.PreferredSalaryTo );
			database.AddInParameter(commandWrapper, "@CurrentSalaryFrom", DbType.AnsiString, entity.CurrentSalaryFrom );
			database.AddInParameter(commandWrapper, "@CurrentSalaryTo", DbType.AnsiString, entity.CurrentSalaryTo );
			database.AddInParameter(commandWrapper, "@LookingFor", DbType.String, entity.LookingFor );
			database.AddInParameter(commandWrapper, "@Experience", DbType.String, entity.Experience );
			database.AddInParameter(commandWrapper, "@Skills", DbType.String, entity.Skills );
			database.AddInParameter(commandWrapper, "@Reasons", DbType.String, entity.Reasons );
			database.AddInParameter(commandWrapper, "@Comments", DbType.String, entity.Comments );
			database.AddInParameter(commandWrapper, "@ProfileType", DbType.AnsiString, entity.ProfileType );
			database.AddInParameter(commandWrapper, "@EducationId", DbType.Int32, (entity.EducationId.HasValue ? (object) entity.EducationId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SearchField", DbType.String, entity.SearchField );
			database.AddInParameter(commandWrapper, "@RegisteredDate", DbType.DateTime, entity.RegisteredDate );
			database.AddInParameter(commandWrapper, "@States", DbType.String, entity.States );
			database.AddInParameter(commandWrapper, "@Suburb", DbType.String, entity.Suburb );
			database.AddInParameter(commandWrapper, "@PostCode", DbType.String, entity.PostCode );
			database.AddInParameter(commandWrapper, "@ProfilePicture", DbType.AnsiString, entity.ProfilePicture );
			database.AddInParameter(commandWrapper, "@ShortBio", DbType.String, entity.ShortBio );
			database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.AnsiString, entity.WorkTypeId );
			database.AddInParameter(commandWrapper, "@Memberships", DbType.String, entity.Memberships );
			database.AddInParameter(commandWrapper, "@MemberStatusId", DbType.Int32, (entity.MemberStatusId.HasValue ? (object) entity.MemberStatusId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LinkedInAccessToken", DbType.AnsiString, entity.LinkedInAccessToken );
			database.AddInParameter(commandWrapper, "@ExternalMemberId", DbType.AnsiString, entity.ExternalMemberId );
			database.AddInParameter(commandWrapper, "@PassportNo", DbType.AnsiString, entity.PassportNo );
			database.AddInParameter(commandWrapper, "@MailingAddress1", DbType.String, entity.MailingAddress1 );
			database.AddInParameter(commandWrapper, "@MailingAddress2", DbType.String, entity.MailingAddress2 );
			database.AddInParameter(commandWrapper, "@MailingStates", DbType.String, entity.MailingStates );
			database.AddInParameter(commandWrapper, "@MailingSuburb", DbType.String, entity.MailingSuburb );
			database.AddInParameter(commandWrapper, "@MailingPostCode", DbType.String, entity.MailingPostCode );
			database.AddInParameter(commandWrapper, "@MailingCountryId", DbType.Int32, (entity.MailingCountryId.HasValue ? (object) entity.MailingCountryId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CountryName", DbType.String, entity.CountryName );
			database.AddInParameter(commandWrapper, "@MailingCountryName", DbType.String, entity.MailingCountryName );
			database.AddInParameter(commandWrapper, "@LoginAttempts", DbType.Int32, entity.LoginAttempts );
			database.AddInParameter(commandWrapper, "@LastAttemptDate", DbType.DateTime, (entity.LastAttemptDate.HasValue ? (object) entity.LastAttemptDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Status", DbType.Int32, (entity.Status.HasValue ? (object) entity.Status : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastTermsAndConditionsDate", DbType.DateTime, (entity.LastTermsAndConditionsDate.HasValue ? (object) entity.LastTermsAndConditionsDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DefaultLanguageId", DbType.Int32, (entity.DefaultLanguageId.HasValue ? (object) entity.DefaultLanguageId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ReferringSiteId", DbType.Int32, (entity.ReferringSiteId.HasValue ? (object) entity.ReferringSiteId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MultiLingualFirstName", DbType.String, entity.MultiLingualFirstName );
			database.AddInParameter(commandWrapper, "@MultiLingualSurame", DbType.String, entity.MultiLingualSurame );
			database.AddInParameter(commandWrapper, "@SecondaryEmail", DbType.AnsiString, entity.SecondaryEmail );
			database.AddInParameter(commandWrapper, "@CandidateData", DbType.String, entity.CandidateData );
			database.AddInParameter(commandWrapper, "@EligibleToWorkIn", DbType.AnsiString, entity.EligibleToWorkIn );
			database.AddInParameter(commandWrapper, "@ReferenceUponRequest", DbType.Boolean, (entity.ReferenceUponRequest.HasValue ? (object) entity.ReferenceUponRequest : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PreferredLine", DbType.Int32, entity.PreferredLine );
			database.AddInParameter(commandWrapper, "@VideoUrl", DbType.AnsiString, entity.VideoUrl );
			database.AddInParameter(commandWrapper, "@ProfileDataXml", DbType.String, entity.ProfileDataXml );
			database.AddInParameter(commandWrapper, "@LastProfileSubmittedDate", DbType.DateTime, (entity.LastProfileSubmittedDate.HasValue ? (object) entity.LastProfileSubmittedDate : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region Members_GetPaged
					
		/// <summary>
		///	This method wraps the 'Members_GetPaged' stored procedure. 
		/// </summary>	
		/// <param name="whereClause"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetPaged(TransactionManager transactionManager, int start, int pageLength , System.String whereClause, System.String orderBy, System.Int32? pageIndex, System.Int32? pageSize)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetPaged", true);
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.AnsiString,  whereClause );
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.AnsiString,  orderBy );
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32,  pageIndex );
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32,  pageSize );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_GetByMemberId
					
		/// <summary>
		///	This method wraps the 'Members_GetByMemberId' stored procedure. 
		/// </summary>	
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByMemberId(TransactionManager transactionManager, int start, int pageLength , System.Int32? memberId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetByMemberId", true);
			
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32,  memberId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMemberId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMemberId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_GetBySiteIdEmailAddress
					
		/// <summary>
		///	This method wraps the 'Members_GetBySiteIdEmailAddress' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="emailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBySiteIdEmailAddress(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.String emailAddress)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetBySiteIdEmailAddress", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@EmailAddress", DbType.AnsiString,  emailAddress );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteIdEmailAddress", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteIdEmailAddress", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_Find
					
		/// <summary>
		///	This method wraps the 'Members_Find' stored procedure. 
		/// </summary>	
		/// <param name="searchUsingOr"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="username"> A <c>System.String</c> instance.</param>
		/// <param name="password"> A <c>System.String</c> instance.</param>
		/// <param name="title"> A <c>System.String</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="surname"> A <c>System.String</c> instance.</param>
		/// <param name="emailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="company"> A <c>System.String</c> instance.</param>
		/// <param name="position"> A <c>System.String</c> instance.</param>
		/// <param name="homePhone"> A <c>System.String</c> instance.</param>
		/// <param name="workPhone"> A <c>System.String</c> instance.</param>
		/// <param name="mobilePhone"> A <c>System.String</c> instance.</param>
		/// <param name="fax"> A <c>System.String</c> instance.</param>
		/// <param name="address1"> A <c>System.String</c> instance.</param>
		/// <param name="address2"> A <c>System.String</c> instance.</param>
		/// <param name="locationId"> A <c>System.String</c> instance.</param>
		/// <param name="areaId"> A <c>System.String</c> instance.</param>
		/// <param name="countryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="preferredCategoryId"> A <c>System.String</c> instance.</param>
		/// <param name="preferredSubCategoryId"> A <c>System.String</c> instance.</param>
		/// <param name="preferredSalaryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="subscribed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="monthlyUpdate"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="referringMemberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="valid"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="emailFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastLogon"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="dateOfBirth"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="gender"> A <c>System.String</c> instance.</param>
		/// <param name="tags"> A <c>System.String</c> instance.</param>
		/// <param name="validated"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="validateGuid"> A <c>System.Guid?</c> instance.</param>
		/// <param name="memberUrlExtension"> A <c>System.String</c> instance.</param>
		/// <param name="websiteUrl"> A <c>System.String</c> instance.</param>
		/// <param name="availabilityId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="availabilityFromDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="mySpaceHeading"> A <c>System.String</c> instance.</param>
		/// <param name="mySpaceContent"> A <c>System.String</c> instance.</param>
		/// <param name="urlReferrer"> A <c>System.String</c> instance.</param>
		/// <param name="requiredPasswordChange"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="preferredJobTitle"> A <c>System.String</c> instance.</param>
		/// <param name="preferredAvailability"> A <c>System.String</c> instance.</param>
		/// <param name="preferredAvailabilityType"> A <c>System.Int32?</c> instance.</param>
		/// <param name="preferredSalaryFrom"> A <c>System.String</c> instance.</param>
		/// <param name="preferredSalaryTo"> A <c>System.String</c> instance.</param>
		/// <param name="currentSalaryFrom"> A <c>System.String</c> instance.</param>
		/// <param name="currentSalaryTo"> A <c>System.String</c> instance.</param>
		/// <param name="lookingFor"> A <c>System.String</c> instance.</param>
		/// <param name="experience"> A <c>System.String</c> instance.</param>
		/// <param name="skills"> A <c>System.String</c> instance.</param>
		/// <param name="reasons"> A <c>System.String</c> instance.</param>
		/// <param name="comments"> A <c>System.String</c> instance.</param>
		/// <param name="profileType"> A <c>System.String</c> instance.</param>
		/// <param name="educationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="registeredDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="states"> A <c>System.String</c> instance.</param>
		/// <param name="suburb"> A <c>System.String</c> instance.</param>
		/// <param name="postCode"> A <c>System.String</c> instance.</param>
		/// <param name="profilePicture"> A <c>System.String</c> instance.</param>
		/// <param name="shortBio"> A <c>System.String</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.String</c> instance.</param>
		/// <param name="memberships"> A <c>System.String</c> instance.</param>
		/// <param name="memberStatusId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="linkedInAccessToken"> A <c>System.String</c> instance.</param>
		/// <param name="externalMemberId"> A <c>System.String</c> instance.</param>
		/// <param name="passportNo"> A <c>System.String</c> instance.</param>
		/// <param name="mailingAddress1"> A <c>System.String</c> instance.</param>
		/// <param name="mailingAddress2"> A <c>System.String</c> instance.</param>
		/// <param name="mailingStates"> A <c>System.String</c> instance.</param>
		/// <param name="mailingSuburb"> A <c>System.String</c> instance.</param>
		/// <param name="mailingPostCode"> A <c>System.String</c> instance.</param>
		/// <param name="mailingCountryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="countryName"> A <c>System.String</c> instance.</param>
		/// <param name="mailingCountryName"> A <c>System.String</c> instance.</param>
		/// <param name="loginAttempts"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastAttemptDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="status"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastTermsAndConditionsDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="defaultLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="referringSiteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="multiLingualFirstName"> A <c>System.String</c> instance.</param>
		/// <param name="multiLingualSurame"> A <c>System.String</c> instance.</param>
		/// <param name="secondaryEmail"> A <c>System.String</c> instance.</param>
		/// <param name="candidateData"> A <c>System.String</c> instance.</param>
		/// <param name="eligibleToWorkIn"> A <c>System.String</c> instance.</param>
		/// <param name="referenceUponRequest"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="preferredLine"> A <c>System.Int32?</c> instance.</param>
		/// <param name="videoUrl"> A <c>System.String</c> instance.</param>
		/// <param name="profileDataXml"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Find(TransactionManager transactionManager, int start, int pageLength , System.Boolean? searchUsingOr, System.Int32? memberId, System.Int32? siteId, System.String username, System.String password, System.String title, System.String firstName, System.String surname, System.String emailAddress, System.String company, System.String position, System.String homePhone, System.String workPhone, System.String mobilePhone, System.String fax, System.String address1, System.String address2, System.String locationId, System.String areaId, System.Int32? countryId, System.String preferredCategoryId, System.String preferredSubCategoryId, System.Int32? preferredSalaryId, System.Boolean? subscribed, System.Boolean? monthlyUpdate, System.Int32? referringMemberId, System.DateTime? lastModifiedDate, System.Boolean? valid, System.Int32? emailFormat, System.DateTime? lastLogon, System.DateTime? dateOfBirth, System.String gender, System.String tags, System.Boolean? validated, System.Guid? validateGuid, System.String memberUrlExtension, System.String websiteUrl, System.Int32? availabilityId, System.DateTime? availabilityFromDate, System.String mySpaceHeading, System.String mySpaceContent, System.String urlReferrer, System.Boolean? requiredPasswordChange, System.String preferredJobTitle, System.String preferredAvailability, System.Int32? preferredAvailabilityType, System.String preferredSalaryFrom, System.String preferredSalaryTo, System.String currentSalaryFrom, System.String currentSalaryTo, System.String lookingFor, System.String experience, System.String skills, System.String reasons, System.String comments, System.String profileType, System.Int32? educationId, System.String searchField, System.DateTime? registeredDate, System.String states, System.String suburb, System.String postCode, System.String profilePicture, System.String shortBio, System.String workTypeId, System.String memberships, System.Int32? memberStatusId, System.String linkedInAccessToken, System.String externalMemberId, System.String passportNo, System.String mailingAddress1, System.String mailingAddress2, System.String mailingStates, System.String mailingSuburb, System.String mailingPostCode, System.Int32? mailingCountryId, System.String countryName, System.String mailingCountryName, System.Int32? loginAttempts, System.DateTime? lastAttemptDate, System.Int32? status, System.DateTime? lastTermsAndConditionsDate, System.Int32? defaultLanguageId, System.Int32? referringSiteId, System.String multiLingualFirstName, System.String multiLingualSurame, System.String secondaryEmail, System.String candidateData, System.String eligibleToWorkIn, System.Boolean? referenceUponRequest, System.Int32? preferredLine, System.String videoUrl, System.String profileDataXml)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_Find", true);
			
			database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean,  searchUsingOr );
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32,  memberId );
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@Username", DbType.String,  username );
			database.AddInParameter(commandWrapper, "@Password", DbType.String,  password );
			database.AddInParameter(commandWrapper, "@Title", DbType.String,  title );
			database.AddInParameter(commandWrapper, "@FirstName", DbType.String,  firstName );
			database.AddInParameter(commandWrapper, "@Surname", DbType.String,  surname );
			database.AddInParameter(commandWrapper, "@EmailAddress", DbType.AnsiString,  emailAddress );
			database.AddInParameter(commandWrapper, "@Company", DbType.AnsiString,  company );
			database.AddInParameter(commandWrapper, "@Position", DbType.AnsiString,  position );
			database.AddInParameter(commandWrapper, "@HomePhone", DbType.AnsiStringFixedLength,  homePhone );
			database.AddInParameter(commandWrapper, "@WorkPhone", DbType.AnsiStringFixedLength,  workPhone );
			database.AddInParameter(commandWrapper, "@MobilePhone", DbType.AnsiStringFixedLength,  mobilePhone );
			database.AddInParameter(commandWrapper, "@Fax", DbType.AnsiStringFixedLength,  fax );
			database.AddInParameter(commandWrapper, "@Address1", DbType.String,  address1 );
			database.AddInParameter(commandWrapper, "@Address2", DbType.String,  address2 );
			database.AddInParameter(commandWrapper, "@LocationId", DbType.AnsiString,  locationId );
			database.AddInParameter(commandWrapper, "@AreaId", DbType.AnsiString,  areaId );
			database.AddInParameter(commandWrapper, "@CountryId", DbType.Int32,  countryId );
			database.AddInParameter(commandWrapper, "@PreferredCategoryId", DbType.AnsiString,  preferredCategoryId );
			database.AddInParameter(commandWrapper, "@PreferredSubCategoryId", DbType.AnsiString,  preferredSubCategoryId );
			database.AddInParameter(commandWrapper, "@PreferredSalaryId", DbType.Int32,  preferredSalaryId );
			database.AddInParameter(commandWrapper, "@Subscribed", DbType.Boolean,  subscribed );
			database.AddInParameter(commandWrapper, "@MonthlyUpdate", DbType.Boolean,  monthlyUpdate );
			database.AddInParameter(commandWrapper, "@ReferringMemberId", DbType.Int32,  referringMemberId );
			database.AddInParameter(commandWrapper, "@LastModifiedDate", DbType.DateTime,  lastModifiedDate );
			database.AddInParameter(commandWrapper, "@Valid", DbType.Boolean,  valid );
			database.AddInParameter(commandWrapper, "@EmailFormat", DbType.Int32,  emailFormat );
			database.AddInParameter(commandWrapper, "@LastLogon", DbType.DateTime,  lastLogon );
			database.AddInParameter(commandWrapper, "@DateOfBirth", DbType.DateTime,  dateOfBirth );
			database.AddInParameter(commandWrapper, "@Gender", DbType.AnsiStringFixedLength,  gender );
			database.AddInParameter(commandWrapper, "@Tags", DbType.String,  tags );
			database.AddInParameter(commandWrapper, "@Validated", DbType.Boolean,  validated );
			database.AddInParameter(commandWrapper, "@ValidateGuid", DbType.Guid,  validateGuid );
			database.AddInParameter(commandWrapper, "@MemberUrlExtension", DbType.AnsiString,  memberUrlExtension );
			database.AddInParameter(commandWrapper, "@WebsiteUrl", DbType.AnsiString,  websiteUrl );
			database.AddInParameter(commandWrapper, "@AvailabilityId", DbType.Int32,  availabilityId );
			database.AddInParameter(commandWrapper, "@AvailabilityFromDate", DbType.DateTime,  availabilityFromDate );
			database.AddInParameter(commandWrapper, "@MySpaceHeading", DbType.String,  mySpaceHeading );
			database.AddInParameter(commandWrapper, "@MySpaceContent", DbType.String,  mySpaceContent );
			database.AddInParameter(commandWrapper, "@UrlReferrer", DbType.AnsiString,  urlReferrer );
			database.AddInParameter(commandWrapper, "@RequiredPasswordChange", DbType.Boolean,  requiredPasswordChange );
			database.AddInParameter(commandWrapper, "@PreferredJobTitle", DbType.String,  preferredJobTitle );
			database.AddInParameter(commandWrapper, "@PreferredAvailability", DbType.AnsiString,  preferredAvailability );
			database.AddInParameter(commandWrapper, "@PreferredAvailabilityType", DbType.Int32,  preferredAvailabilityType );
			database.AddInParameter(commandWrapper, "@PreferredSalaryFrom", DbType.AnsiString,  preferredSalaryFrom );
			database.AddInParameter(commandWrapper, "@PreferredSalaryTo", DbType.AnsiString,  preferredSalaryTo );
			database.AddInParameter(commandWrapper, "@CurrentSalaryFrom", DbType.AnsiString,  currentSalaryFrom );
			database.AddInParameter(commandWrapper, "@CurrentSalaryTo", DbType.AnsiString,  currentSalaryTo );
			database.AddInParameter(commandWrapper, "@LookingFor", DbType.String,  lookingFor );
			database.AddInParameter(commandWrapper, "@Experience", DbType.String,  experience );
			database.AddInParameter(commandWrapper, "@Skills", DbType.String,  skills );
			database.AddInParameter(commandWrapper, "@Reasons", DbType.String,  reasons );
			database.AddInParameter(commandWrapper, "@Comments", DbType.String,  comments );
			database.AddInParameter(commandWrapper, "@ProfileType", DbType.AnsiString,  profileType );
			database.AddInParameter(commandWrapper, "@EducationId", DbType.Int32,  educationId );
			database.AddInParameter(commandWrapper, "@SearchField", DbType.String,  searchField );
			database.AddInParameter(commandWrapper, "@RegisteredDate", DbType.DateTime,  registeredDate );
			database.AddInParameter(commandWrapper, "@States", DbType.String,  states );
			database.AddInParameter(commandWrapper, "@Suburb", DbType.String,  suburb );
			database.AddInParameter(commandWrapper, "@PostCode", DbType.String,  postCode );
			database.AddInParameter(commandWrapper, "@ProfilePicture", DbType.AnsiString,  profilePicture );
			database.AddInParameter(commandWrapper, "@ShortBio", DbType.String,  shortBio );
			database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.AnsiString,  workTypeId );
			database.AddInParameter(commandWrapper, "@Memberships", DbType.String,  memberships );
			database.AddInParameter(commandWrapper, "@MemberStatusId", DbType.Int32,  memberStatusId );
			database.AddInParameter(commandWrapper, "@LinkedInAccessToken", DbType.AnsiString,  linkedInAccessToken );
			database.AddInParameter(commandWrapper, "@ExternalMemberId", DbType.AnsiString,  externalMemberId );
			database.AddInParameter(commandWrapper, "@PassportNo", DbType.AnsiString,  passportNo );
			database.AddInParameter(commandWrapper, "@MailingAddress1", DbType.String,  mailingAddress1 );
			database.AddInParameter(commandWrapper, "@MailingAddress2", DbType.String,  mailingAddress2 );
			database.AddInParameter(commandWrapper, "@MailingStates", DbType.String,  mailingStates );
			database.AddInParameter(commandWrapper, "@MailingSuburb", DbType.String,  mailingSuburb );
			database.AddInParameter(commandWrapper, "@MailingPostCode", DbType.String,  mailingPostCode );
			database.AddInParameter(commandWrapper, "@MailingCountryId", DbType.Int32,  mailingCountryId );
			database.AddInParameter(commandWrapper, "@CountryName", DbType.String,  countryName );
			database.AddInParameter(commandWrapper, "@MailingCountryName", DbType.String,  mailingCountryName );
			database.AddInParameter(commandWrapper, "@LoginAttempts", DbType.Int32,  loginAttempts );
			database.AddInParameter(commandWrapper, "@LastAttemptDate", DbType.DateTime,  lastAttemptDate );
			database.AddInParameter(commandWrapper, "@Status", DbType.Int32,  status );
			database.AddInParameter(commandWrapper, "@LastTermsAndConditionsDate", DbType.DateTime,  lastTermsAndConditionsDate );
			database.AddInParameter(commandWrapper, "@DefaultLanguageId", DbType.Int32,  defaultLanguageId );
			database.AddInParameter(commandWrapper, "@ReferringSiteId", DbType.Int32,  referringSiteId );
			database.AddInParameter(commandWrapper, "@MultiLingualFirstName", DbType.String,  multiLingualFirstName );
			database.AddInParameter(commandWrapper, "@MultiLingualSurame", DbType.String,  multiLingualSurame );
			database.AddInParameter(commandWrapper, "@SecondaryEmail", DbType.AnsiString,  secondaryEmail );
			database.AddInParameter(commandWrapper, "@CandidateData", DbType.String,  candidateData );
			database.AddInParameter(commandWrapper, "@EligibleToWorkIn", DbType.AnsiString,  eligibleToWorkIn );
			database.AddInParameter(commandWrapper, "@ReferenceUponRequest", DbType.Boolean,  referenceUponRequest );
			database.AddInParameter(commandWrapper, "@PreferredLine", DbType.Int32,  preferredLine );
			database.AddInParameter(commandWrapper, "@VideoUrl", DbType.AnsiString,  videoUrl );
			database.AddInParameter(commandWrapper, "@ProfileDataXml", DbType.String,  profileDataXml );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Find", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_Update
					
		/// <summary>
		///	This method wraps the 'Members_Update' stored procedure. 
		/// </summary>	
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="username"> A <c>System.String</c> instance.</param>
		/// <param name="password"> A <c>System.String</c> instance.</param>
		/// <param name="title"> A <c>System.String</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="surname"> A <c>System.String</c> instance.</param>
		/// <param name="emailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="company"> A <c>System.String</c> instance.</param>
		/// <param name="position"> A <c>System.String</c> instance.</param>
		/// <param name="homePhone"> A <c>System.String</c> instance.</param>
		/// <param name="workPhone"> A <c>System.String</c> instance.</param>
		/// <param name="mobilePhone"> A <c>System.String</c> instance.</param>
		/// <param name="fax"> A <c>System.String</c> instance.</param>
		/// <param name="address1"> A <c>System.String</c> instance.</param>
		/// <param name="address2"> A <c>System.String</c> instance.</param>
		/// <param name="locationId"> A <c>System.String</c> instance.</param>
		/// <param name="areaId"> A <c>System.String</c> instance.</param>
		/// <param name="countryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="preferredCategoryId"> A <c>System.String</c> instance.</param>
		/// <param name="preferredSubCategoryId"> A <c>System.String</c> instance.</param>
		/// <param name="preferredSalaryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="subscribed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="monthlyUpdate"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="referringMemberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="valid"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="emailFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastLogon"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="dateOfBirth"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="gender"> A <c>System.String</c> instance.</param>
		/// <param name="tags"> A <c>System.String</c> instance.</param>
		/// <param name="validated"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="validateGuid"> A <c>System.Guid?</c> instance.</param>
		/// <param name="memberUrlExtension"> A <c>System.String</c> instance.</param>
		/// <param name="websiteUrl"> A <c>System.String</c> instance.</param>
		/// <param name="availabilityId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="availabilityFromDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="mySpaceHeading"> A <c>System.String</c> instance.</param>
		/// <param name="mySpaceContent"> A <c>System.String</c> instance.</param>
		/// <param name="urlReferrer"> A <c>System.String</c> instance.</param>
		/// <param name="requiredPasswordChange"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="preferredJobTitle"> A <c>System.String</c> instance.</param>
		/// <param name="preferredAvailability"> A <c>System.String</c> instance.</param>
		/// <param name="preferredAvailabilityType"> A <c>System.Int32?</c> instance.</param>
		/// <param name="preferredSalaryFrom"> A <c>System.String</c> instance.</param>
		/// <param name="preferredSalaryTo"> A <c>System.String</c> instance.</param>
		/// <param name="currentSalaryFrom"> A <c>System.String</c> instance.</param>
		/// <param name="currentSalaryTo"> A <c>System.String</c> instance.</param>
		/// <param name="lookingFor"> A <c>System.String</c> instance.</param>
		/// <param name="experience"> A <c>System.String</c> instance.</param>
		/// <param name="skills"> A <c>System.String</c> instance.</param>
		/// <param name="reasons"> A <c>System.String</c> instance.</param>
		/// <param name="comments"> A <c>System.String</c> instance.</param>
		/// <param name="profileType"> A <c>System.String</c> instance.</param>
		/// <param name="educationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="registeredDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="states"> A <c>System.String</c> instance.</param>
		/// <param name="suburb"> A <c>System.String</c> instance.</param>
		/// <param name="postCode"> A <c>System.String</c> instance.</param>
		/// <param name="profilePicture"> A <c>System.String</c> instance.</param>
		/// <param name="shortBio"> A <c>System.String</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.String</c> instance.</param>
		/// <param name="memberships"> A <c>System.String</c> instance.</param>
		/// <param name="memberStatusId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="linkedInAccessToken"> A <c>System.String</c> instance.</param>
		/// <param name="externalMemberId"> A <c>System.String</c> instance.</param>
		/// <param name="passportNo"> A <c>System.String</c> instance.</param>
		/// <param name="mailingAddress1"> A <c>System.String</c> instance.</param>
		/// <param name="mailingAddress2"> A <c>System.String</c> instance.</param>
		/// <param name="mailingStates"> A <c>System.String</c> instance.</param>
		/// <param name="mailingSuburb"> A <c>System.String</c> instance.</param>
		/// <param name="mailingPostCode"> A <c>System.String</c> instance.</param>
		/// <param name="mailingCountryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="countryName"> A <c>System.String</c> instance.</param>
		/// <param name="mailingCountryName"> A <c>System.String</c> instance.</param>
		/// <param name="loginAttempts"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastAttemptDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="status"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastTermsAndConditionsDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="defaultLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="referringSiteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="multiLingualFirstName"> A <c>System.String</c> instance.</param>
		/// <param name="multiLingualSurame"> A <c>System.String</c> instance.</param>
		/// <param name="secondaryEmail"> A <c>System.String</c> instance.</param>
		/// <param name="candidateData"> A <c>System.String</c> instance.</param>
		/// <param name="eligibleToWorkIn"> A <c>System.String</c> instance.</param>
		/// <param name="referenceUponRequest"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="preferredLine"> A <c>System.Int32?</c> instance.</param>
		/// <param name="videoUrl"> A <c>System.String</c> instance.</param>
		/// <param name="profileDataXml"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Update(TransactionManager transactionManager, int start, int pageLength , System.Int32? memberId, System.Int32? siteId, System.String username, System.String password, System.String title, System.String firstName, System.String surname, System.String emailAddress, System.String company, System.String position, System.String homePhone, System.String workPhone, System.String mobilePhone, System.String fax, System.String address1, System.String address2, System.String locationId, System.String areaId, System.Int32? countryId, System.String preferredCategoryId, System.String preferredSubCategoryId, System.Int32? preferredSalaryId, System.Boolean? subscribed, System.Boolean? monthlyUpdate, System.Int32? referringMemberId, System.DateTime? lastModifiedDate, System.Boolean? valid, System.Int32? emailFormat, System.DateTime? lastLogon, System.DateTime? dateOfBirth, System.String gender, System.String tags, System.Boolean? validated, System.Guid? validateGuid, System.String memberUrlExtension, System.String websiteUrl, System.Int32? availabilityId, System.DateTime? availabilityFromDate, System.String mySpaceHeading, System.String mySpaceContent, System.String urlReferrer, System.Boolean? requiredPasswordChange, System.String preferredJobTitle, System.String preferredAvailability, System.Int32? preferredAvailabilityType, System.String preferredSalaryFrom, System.String preferredSalaryTo, System.String currentSalaryFrom, System.String currentSalaryTo, System.String lookingFor, System.String experience, System.String skills, System.String reasons, System.String comments, System.String profileType, System.Int32? educationId, System.String searchField, System.DateTime? registeredDate, System.String states, System.String suburb, System.String postCode, System.String profilePicture, System.String shortBio, System.String workTypeId, System.String memberships, System.Int32? memberStatusId, System.String linkedInAccessToken, System.String externalMemberId, System.String passportNo, System.String mailingAddress1, System.String mailingAddress2, System.String mailingStates, System.String mailingSuburb, System.String mailingPostCode, System.Int32? mailingCountryId, System.String countryName, System.String mailingCountryName, System.Int32? loginAttempts, System.DateTime? lastAttemptDate, System.Int32? status, System.DateTime? lastTermsAndConditionsDate, System.Int32? defaultLanguageId, System.Int32? referringSiteId, System.String multiLingualFirstName, System.String multiLingualSurame, System.String secondaryEmail, System.String candidateData, System.String eligibleToWorkIn, System.Boolean? referenceUponRequest, System.Int32? preferredLine, System.String videoUrl, System.String profileDataXml)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_Update", true);
			
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32,  memberId );
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@Username", DbType.String,  username );
			database.AddInParameter(commandWrapper, "@Password", DbType.String,  password );
			database.AddInParameter(commandWrapper, "@Title", DbType.String,  title );
			database.AddInParameter(commandWrapper, "@FirstName", DbType.String,  firstName );
			database.AddInParameter(commandWrapper, "@Surname", DbType.String,  surname );
			database.AddInParameter(commandWrapper, "@EmailAddress", DbType.AnsiString,  emailAddress );
			database.AddInParameter(commandWrapper, "@Company", DbType.AnsiString,  company );
			database.AddInParameter(commandWrapper, "@Position", DbType.AnsiString,  position );
			database.AddInParameter(commandWrapper, "@HomePhone", DbType.AnsiStringFixedLength,  homePhone );
			database.AddInParameter(commandWrapper, "@WorkPhone", DbType.AnsiStringFixedLength,  workPhone );
			database.AddInParameter(commandWrapper, "@MobilePhone", DbType.AnsiStringFixedLength,  mobilePhone );
			database.AddInParameter(commandWrapper, "@Fax", DbType.AnsiStringFixedLength,  fax );
			database.AddInParameter(commandWrapper, "@Address1", DbType.String,  address1 );
			database.AddInParameter(commandWrapper, "@Address2", DbType.String,  address2 );
			database.AddInParameter(commandWrapper, "@LocationId", DbType.AnsiString,  locationId );
			database.AddInParameter(commandWrapper, "@AreaId", DbType.AnsiString,  areaId );
			database.AddInParameter(commandWrapper, "@CountryId", DbType.Int32,  countryId );
			database.AddInParameter(commandWrapper, "@PreferredCategoryId", DbType.AnsiString,  preferredCategoryId );
			database.AddInParameter(commandWrapper, "@PreferredSubCategoryId", DbType.AnsiString,  preferredSubCategoryId );
			database.AddInParameter(commandWrapper, "@PreferredSalaryId", DbType.Int32,  preferredSalaryId );
			database.AddInParameter(commandWrapper, "@Subscribed", DbType.Boolean,  subscribed );
			database.AddInParameter(commandWrapper, "@MonthlyUpdate", DbType.Boolean,  monthlyUpdate );
			database.AddInParameter(commandWrapper, "@ReferringMemberId", DbType.Int32,  referringMemberId );
			database.AddInParameter(commandWrapper, "@LastModifiedDate", DbType.DateTime,  lastModifiedDate );
			database.AddInParameter(commandWrapper, "@Valid", DbType.Boolean,  valid );
			database.AddInParameter(commandWrapper, "@EmailFormat", DbType.Int32,  emailFormat );
			database.AddInParameter(commandWrapper, "@LastLogon", DbType.DateTime,  lastLogon );
			database.AddInParameter(commandWrapper, "@DateOfBirth", DbType.DateTime,  dateOfBirth );
			database.AddInParameter(commandWrapper, "@Gender", DbType.AnsiStringFixedLength,  gender );
			database.AddInParameter(commandWrapper, "@Tags", DbType.String,  tags );
			database.AddInParameter(commandWrapper, "@Validated", DbType.Boolean,  validated );
			database.AddInParameter(commandWrapper, "@ValidateGuid", DbType.Guid,  validateGuid );
			database.AddInParameter(commandWrapper, "@MemberUrlExtension", DbType.AnsiString,  memberUrlExtension );
			database.AddInParameter(commandWrapper, "@WebsiteUrl", DbType.AnsiString,  websiteUrl );
			database.AddInParameter(commandWrapper, "@AvailabilityId", DbType.Int32,  availabilityId );
			database.AddInParameter(commandWrapper, "@AvailabilityFromDate", DbType.DateTime,  availabilityFromDate );
			database.AddInParameter(commandWrapper, "@MySpaceHeading", DbType.String,  mySpaceHeading );
			database.AddInParameter(commandWrapper, "@MySpaceContent", DbType.String,  mySpaceContent );
			database.AddInParameter(commandWrapper, "@UrlReferrer", DbType.AnsiString,  urlReferrer );
			database.AddInParameter(commandWrapper, "@RequiredPasswordChange", DbType.Boolean,  requiredPasswordChange );
			database.AddInParameter(commandWrapper, "@PreferredJobTitle", DbType.String,  preferredJobTitle );
			database.AddInParameter(commandWrapper, "@PreferredAvailability", DbType.AnsiString,  preferredAvailability );
			database.AddInParameter(commandWrapper, "@PreferredAvailabilityType", DbType.Int32,  preferredAvailabilityType );
			database.AddInParameter(commandWrapper, "@PreferredSalaryFrom", DbType.AnsiString,  preferredSalaryFrom );
			database.AddInParameter(commandWrapper, "@PreferredSalaryTo", DbType.AnsiString,  preferredSalaryTo );
			database.AddInParameter(commandWrapper, "@CurrentSalaryFrom", DbType.AnsiString,  currentSalaryFrom );
			database.AddInParameter(commandWrapper, "@CurrentSalaryTo", DbType.AnsiString,  currentSalaryTo );
			database.AddInParameter(commandWrapper, "@LookingFor", DbType.String,  lookingFor );
			database.AddInParameter(commandWrapper, "@Experience", DbType.String,  experience );
			database.AddInParameter(commandWrapper, "@Skills", DbType.String,  skills );
			database.AddInParameter(commandWrapper, "@Reasons", DbType.String,  reasons );
			database.AddInParameter(commandWrapper, "@Comments", DbType.String,  comments );
			database.AddInParameter(commandWrapper, "@ProfileType", DbType.AnsiString,  profileType );
			database.AddInParameter(commandWrapper, "@EducationId", DbType.Int32,  educationId );
			database.AddInParameter(commandWrapper, "@SearchField", DbType.String,  searchField );
			database.AddInParameter(commandWrapper, "@RegisteredDate", DbType.DateTime,  registeredDate );
			database.AddInParameter(commandWrapper, "@States", DbType.String,  states );
			database.AddInParameter(commandWrapper, "@Suburb", DbType.String,  suburb );
			database.AddInParameter(commandWrapper, "@PostCode", DbType.String,  postCode );
			database.AddInParameter(commandWrapper, "@ProfilePicture", DbType.AnsiString,  profilePicture );
			database.AddInParameter(commandWrapper, "@ShortBio", DbType.String,  shortBio );
			database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.AnsiString,  workTypeId );
			database.AddInParameter(commandWrapper, "@Memberships", DbType.String,  memberships );
			database.AddInParameter(commandWrapper, "@MemberStatusId", DbType.Int32,  memberStatusId );
			database.AddInParameter(commandWrapper, "@LinkedInAccessToken", DbType.AnsiString,  linkedInAccessToken );
			database.AddInParameter(commandWrapper, "@ExternalMemberId", DbType.AnsiString,  externalMemberId );
			database.AddInParameter(commandWrapper, "@PassportNo", DbType.AnsiString,  passportNo );
			database.AddInParameter(commandWrapper, "@MailingAddress1", DbType.String,  mailingAddress1 );
			database.AddInParameter(commandWrapper, "@MailingAddress2", DbType.String,  mailingAddress2 );
			database.AddInParameter(commandWrapper, "@MailingStates", DbType.String,  mailingStates );
			database.AddInParameter(commandWrapper, "@MailingSuburb", DbType.String,  mailingSuburb );
			database.AddInParameter(commandWrapper, "@MailingPostCode", DbType.String,  mailingPostCode );
			database.AddInParameter(commandWrapper, "@MailingCountryId", DbType.Int32,  mailingCountryId );
			database.AddInParameter(commandWrapper, "@CountryName", DbType.String,  countryName );
			database.AddInParameter(commandWrapper, "@MailingCountryName", DbType.String,  mailingCountryName );
			database.AddInParameter(commandWrapper, "@LoginAttempts", DbType.Int32,  loginAttempts );
			database.AddInParameter(commandWrapper, "@LastAttemptDate", DbType.DateTime,  lastAttemptDate );
			database.AddInParameter(commandWrapper, "@Status", DbType.Int32,  status );
			database.AddInParameter(commandWrapper, "@LastTermsAndConditionsDate", DbType.DateTime,  lastTermsAndConditionsDate );
			database.AddInParameter(commandWrapper, "@DefaultLanguageId", DbType.Int32,  defaultLanguageId );
			database.AddInParameter(commandWrapper, "@ReferringSiteId", DbType.Int32,  referringSiteId );
			database.AddInParameter(commandWrapper, "@MultiLingualFirstName", DbType.String,  multiLingualFirstName );
			database.AddInParameter(commandWrapper, "@MultiLingualSurame", DbType.String,  multiLingualSurame );
			database.AddInParameter(commandWrapper, "@SecondaryEmail", DbType.AnsiString,  secondaryEmail );
			database.AddInParameter(commandWrapper, "@CandidateData", DbType.String,  candidateData );
			database.AddInParameter(commandWrapper, "@EligibleToWorkIn", DbType.AnsiString,  eligibleToWorkIn );
			database.AddInParameter(commandWrapper, "@ReferenceUponRequest", DbType.Boolean,  referenceUponRequest );
			database.AddInParameter(commandWrapper, "@PreferredLine", DbType.Int32,  preferredLine );
			database.AddInParameter(commandWrapper, "@VideoUrl", DbType.AnsiString,  videoUrl );
			database.AddInParameter(commandWrapper, "@ProfileDataXml", DbType.String,  profileDataXml );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", (IEntity)null));


				
				return;
		}
		#endregion

		#region Members_GetBySiteIdUsername
					
		/// <summary>
		///	This method wraps the 'Members_GetBySiteIdUsername' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="username"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBySiteIdUsername(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.String username)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetBySiteIdUsername", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@Username", DbType.String,  username );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteIdUsername", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteIdUsername", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_GetByCountryId
					
		/// <summary>
		///	This method wraps the 'Members_GetByCountryId' stored procedure. 
		/// </summary>	
		/// <param name="countryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByCountryId(TransactionManager transactionManager, int start, int pageLength , System.Int32? countryId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetByCountryId", true);
			
			database.AddInParameter(commandWrapper, "@CountryId", DbType.Int32,  countryId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCountryId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCountryId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_AdminGetPaged
					
		/// <summary>
		///	This method wraps the 'Members_AdminGetPaged' stored procedure. 
		/// </summary>	
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="surname"> A <c>System.String</c> instance.</param>
		/// <param name="emailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="username"> A <c>System.String</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageNumber"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet AdminGetPaged(TransactionManager transactionManager, int start, int pageLength , System.Int32? memberId, System.Int32? siteId, System.String firstName, System.String surname, System.String emailAddress, System.String username, System.Int32? pageSize, System.Int32? pageNumber)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_AdminGetPaged", true);
			
			database.AddInParameter(commandWrapper, "@MemberID", DbType.Int32,  memberId );
			database.AddInParameter(commandWrapper, "@SiteID", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@FirstName", DbType.String,  firstName );
			database.AddInParameter(commandWrapper, "@Surname", DbType.String,  surname );
			database.AddInParameter(commandWrapper, "@EmailAddress", DbType.AnsiString,  emailAddress );
			database.AddInParameter(commandWrapper, "@Username", DbType.String,  username );
			database.AddInParameter(commandWrapper, "@pageSize", DbType.Int32,  pageSize );
			database.AddInParameter(commandWrapper, "@pageNumber", DbType.Int32,  pageNumber );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "AdminGetPaged", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "AdminGetPaged", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_Insert
					
		/// <summary>
		///	This method wraps the 'Members_Insert' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="username"> A <c>System.String</c> instance.</param>
		/// <param name="password"> A <c>System.String</c> instance.</param>
		/// <param name="title"> A <c>System.String</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="surname"> A <c>System.String</c> instance.</param>
		/// <param name="emailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="company"> A <c>System.String</c> instance.</param>
		/// <param name="position"> A <c>System.String</c> instance.</param>
		/// <param name="homePhone"> A <c>System.String</c> instance.</param>
		/// <param name="workPhone"> A <c>System.String</c> instance.</param>
		/// <param name="mobilePhone"> A <c>System.String</c> instance.</param>
		/// <param name="fax"> A <c>System.String</c> instance.</param>
		/// <param name="address1"> A <c>System.String</c> instance.</param>
		/// <param name="address2"> A <c>System.String</c> instance.</param>
		/// <param name="locationId"> A <c>System.String</c> instance.</param>
		/// <param name="areaId"> A <c>System.String</c> instance.</param>
		/// <param name="countryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="preferredCategoryId"> A <c>System.String</c> instance.</param>
		/// <param name="preferredSubCategoryId"> A <c>System.String</c> instance.</param>
		/// <param name="preferredSalaryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="subscribed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="monthlyUpdate"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="referringMemberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="valid"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="emailFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastLogon"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="dateOfBirth"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="gender"> A <c>System.String</c> instance.</param>
		/// <param name="tags"> A <c>System.String</c> instance.</param>
		/// <param name="validated"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="validateGuid"> A <c>System.Guid?</c> instance.</param>
		/// <param name="memberUrlExtension"> A <c>System.String</c> instance.</param>
		/// <param name="websiteUrl"> A <c>System.String</c> instance.</param>
		/// <param name="availabilityId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="availabilityFromDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="mySpaceHeading"> A <c>System.String</c> instance.</param>
		/// <param name="mySpaceContent"> A <c>System.String</c> instance.</param>
		/// <param name="urlReferrer"> A <c>System.String</c> instance.</param>
		/// <param name="requiredPasswordChange"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="preferredJobTitle"> A <c>System.String</c> instance.</param>
		/// <param name="preferredAvailability"> A <c>System.String</c> instance.</param>
		/// <param name="preferredAvailabilityType"> A <c>System.Int32?</c> instance.</param>
		/// <param name="preferredSalaryFrom"> A <c>System.String</c> instance.</param>
		/// <param name="preferredSalaryTo"> A <c>System.String</c> instance.</param>
		/// <param name="currentSalaryFrom"> A <c>System.String</c> instance.</param>
		/// <param name="currentSalaryTo"> A <c>System.String</c> instance.</param>
		/// <param name="lookingFor"> A <c>System.String</c> instance.</param>
		/// <param name="experience"> A <c>System.String</c> instance.</param>
		/// <param name="skills"> A <c>System.String</c> instance.</param>
		/// <param name="reasons"> A <c>System.String</c> instance.</param>
		/// <param name="comments"> A <c>System.String</c> instance.</param>
		/// <param name="profileType"> A <c>System.String</c> instance.</param>
		/// <param name="educationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="registeredDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="states"> A <c>System.String</c> instance.</param>
		/// <param name="suburb"> A <c>System.String</c> instance.</param>
		/// <param name="postCode"> A <c>System.String</c> instance.</param>
		/// <param name="profilePicture"> A <c>System.String</c> instance.</param>
		/// <param name="shortBio"> A <c>System.String</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.String</c> instance.</param>
		/// <param name="memberships"> A <c>System.String</c> instance.</param>
		/// <param name="memberStatusId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="linkedInAccessToken"> A <c>System.String</c> instance.</param>
		/// <param name="externalMemberId"> A <c>System.String</c> instance.</param>
		/// <param name="passportNo"> A <c>System.String</c> instance.</param>
		/// <param name="mailingAddress1"> A <c>System.String</c> instance.</param>
		/// <param name="mailingAddress2"> A <c>System.String</c> instance.</param>
		/// <param name="mailingStates"> A <c>System.String</c> instance.</param>
		/// <param name="mailingSuburb"> A <c>System.String</c> instance.</param>
		/// <param name="mailingPostCode"> A <c>System.String</c> instance.</param>
		/// <param name="mailingCountryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="countryName"> A <c>System.String</c> instance.</param>
		/// <param name="mailingCountryName"> A <c>System.String</c> instance.</param>
		/// <param name="loginAttempts"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastAttemptDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="status"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastTermsAndConditionsDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="defaultLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="referringSiteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="multiLingualFirstName"> A <c>System.String</c> instance.</param>
		/// <param name="multiLingualSurame"> A <c>System.String</c> instance.</param>
		/// <param name="secondaryEmail"> A <c>System.String</c> instance.</param>
		/// <param name="candidateData"> A <c>System.String</c> instance.</param>
		/// <param name="eligibleToWorkIn"> A <c>System.String</c> instance.</param>
		/// <param name="referenceUponRequest"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="preferredLine"> A <c>System.Int32?</c> instance.</param>
		/// <param name="videoUrl"> A <c>System.String</c> instance.</param>
		/// <param name="profileDataXml"> A <c>System.String</c> instance.</param>
			/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Insert(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.String username, System.String password, System.String title, System.String firstName, System.String surname, System.String emailAddress, System.String company, System.String position, System.String homePhone, System.String workPhone, System.String mobilePhone, System.String fax, System.String address1, System.String address2, System.String locationId, System.String areaId, System.Int32? countryId, System.String preferredCategoryId, System.String preferredSubCategoryId, System.Int32? preferredSalaryId, System.Boolean? subscribed, System.Boolean? monthlyUpdate, System.Int32? referringMemberId, System.DateTime? lastModifiedDate, System.Boolean? valid, System.Int32? emailFormat, System.DateTime? lastLogon, System.DateTime? dateOfBirth, System.String gender, System.String tags, System.Boolean? validated, System.Guid? validateGuid, System.String memberUrlExtension, System.String websiteUrl, System.Int32? availabilityId, System.DateTime? availabilityFromDate, System.String mySpaceHeading, System.String mySpaceContent, System.String urlReferrer, System.Boolean? requiredPasswordChange, System.String preferredJobTitle, System.String preferredAvailability, System.Int32? preferredAvailabilityType, System.String preferredSalaryFrom, System.String preferredSalaryTo, System.String currentSalaryFrom, System.String currentSalaryTo, System.String lookingFor, System.String experience, System.String skills, System.String reasons, System.String comments, System.String profileType, System.Int32? educationId, System.String searchField, System.DateTime? registeredDate, System.String states, System.String suburb, System.String postCode, System.String profilePicture, System.String shortBio, System.String workTypeId, System.String memberships, System.Int32? memberStatusId, System.String linkedInAccessToken, System.String externalMemberId, System.String passportNo, System.String mailingAddress1, System.String mailingAddress2, System.String mailingStates, System.String mailingSuburb, System.String mailingPostCode, System.Int32? mailingCountryId, System.String countryName, System.String mailingCountryName, System.Int32? loginAttempts, System.DateTime? lastAttemptDate, System.Int32? status, System.DateTime? lastTermsAndConditionsDate, System.Int32? defaultLanguageId, System.Int32? referringSiteId, System.String multiLingualFirstName, System.String multiLingualSurame, System.String secondaryEmail, System.String candidateData, System.String eligibleToWorkIn, System.Boolean? referenceUponRequest, System.Int32? preferredLine, System.String videoUrl, System.String profileDataXml, ref System.Int32? memberId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_Insert", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@Username", DbType.String,  username );
			database.AddInParameter(commandWrapper, "@Password", DbType.String,  password );
			database.AddInParameter(commandWrapper, "@Title", DbType.String,  title );
			database.AddInParameter(commandWrapper, "@FirstName", DbType.String,  firstName );
			database.AddInParameter(commandWrapper, "@Surname", DbType.String,  surname );
			database.AddInParameter(commandWrapper, "@EmailAddress", DbType.AnsiString,  emailAddress );
			database.AddInParameter(commandWrapper, "@Company", DbType.AnsiString,  company );
			database.AddInParameter(commandWrapper, "@Position", DbType.AnsiString,  position );
			database.AddInParameter(commandWrapper, "@HomePhone", DbType.AnsiStringFixedLength,  homePhone );
			database.AddInParameter(commandWrapper, "@WorkPhone", DbType.AnsiStringFixedLength,  workPhone );
			database.AddInParameter(commandWrapper, "@MobilePhone", DbType.AnsiStringFixedLength,  mobilePhone );
			database.AddInParameter(commandWrapper, "@Fax", DbType.AnsiStringFixedLength,  fax );
			database.AddInParameter(commandWrapper, "@Address1", DbType.String,  address1 );
			database.AddInParameter(commandWrapper, "@Address2", DbType.String,  address2 );
			database.AddInParameter(commandWrapper, "@LocationId", DbType.AnsiString,  locationId );
			database.AddInParameter(commandWrapper, "@AreaId", DbType.AnsiString,  areaId );
			database.AddInParameter(commandWrapper, "@CountryId", DbType.Int32,  countryId );
			database.AddInParameter(commandWrapper, "@PreferredCategoryId", DbType.AnsiString,  preferredCategoryId );
			database.AddInParameter(commandWrapper, "@PreferredSubCategoryId", DbType.AnsiString,  preferredSubCategoryId );
			database.AddInParameter(commandWrapper, "@PreferredSalaryId", DbType.Int32,  preferredSalaryId );
			database.AddInParameter(commandWrapper, "@Subscribed", DbType.Boolean,  subscribed );
			database.AddInParameter(commandWrapper, "@MonthlyUpdate", DbType.Boolean,  monthlyUpdate );
			database.AddInParameter(commandWrapper, "@ReferringMemberId", DbType.Int32,  referringMemberId );
			database.AddInParameter(commandWrapper, "@LastModifiedDate", DbType.DateTime,  lastModifiedDate );
			database.AddInParameter(commandWrapper, "@Valid", DbType.Boolean,  valid );
			database.AddInParameter(commandWrapper, "@EmailFormat", DbType.Int32,  emailFormat );
			database.AddInParameter(commandWrapper, "@LastLogon", DbType.DateTime,  lastLogon );
			database.AddInParameter(commandWrapper, "@DateOfBirth", DbType.DateTime,  dateOfBirth );
			database.AddInParameter(commandWrapper, "@Gender", DbType.AnsiStringFixedLength,  gender );
			database.AddInParameter(commandWrapper, "@Tags", DbType.String,  tags );
			database.AddInParameter(commandWrapper, "@Validated", DbType.Boolean,  validated );
			database.AddInParameter(commandWrapper, "@ValidateGuid", DbType.Guid,  validateGuid );
			database.AddInParameter(commandWrapper, "@MemberUrlExtension", DbType.AnsiString,  memberUrlExtension );
			database.AddInParameter(commandWrapper, "@WebsiteUrl", DbType.AnsiString,  websiteUrl );
			database.AddInParameter(commandWrapper, "@AvailabilityId", DbType.Int32,  availabilityId );
			database.AddInParameter(commandWrapper, "@AvailabilityFromDate", DbType.DateTime,  availabilityFromDate );
			database.AddInParameter(commandWrapper, "@MySpaceHeading", DbType.String,  mySpaceHeading );
			database.AddInParameter(commandWrapper, "@MySpaceContent", DbType.String,  mySpaceContent );
			database.AddInParameter(commandWrapper, "@UrlReferrer", DbType.AnsiString,  urlReferrer );
			database.AddInParameter(commandWrapper, "@RequiredPasswordChange", DbType.Boolean,  requiredPasswordChange );
			database.AddInParameter(commandWrapper, "@PreferredJobTitle", DbType.String,  preferredJobTitle );
			database.AddInParameter(commandWrapper, "@PreferredAvailability", DbType.AnsiString,  preferredAvailability );
			database.AddInParameter(commandWrapper, "@PreferredAvailabilityType", DbType.Int32,  preferredAvailabilityType );
			database.AddInParameter(commandWrapper, "@PreferredSalaryFrom", DbType.AnsiString,  preferredSalaryFrom );
			database.AddInParameter(commandWrapper, "@PreferredSalaryTo", DbType.AnsiString,  preferredSalaryTo );
			database.AddInParameter(commandWrapper, "@CurrentSalaryFrom", DbType.AnsiString,  currentSalaryFrom );
			database.AddInParameter(commandWrapper, "@CurrentSalaryTo", DbType.AnsiString,  currentSalaryTo );
			database.AddInParameter(commandWrapper, "@LookingFor", DbType.String,  lookingFor );
			database.AddInParameter(commandWrapper, "@Experience", DbType.String,  experience );
			database.AddInParameter(commandWrapper, "@Skills", DbType.String,  skills );
			database.AddInParameter(commandWrapper, "@Reasons", DbType.String,  reasons );
			database.AddInParameter(commandWrapper, "@Comments", DbType.String,  comments );
			database.AddInParameter(commandWrapper, "@ProfileType", DbType.AnsiString,  profileType );
			database.AddInParameter(commandWrapper, "@EducationId", DbType.Int32,  educationId );
			database.AddInParameter(commandWrapper, "@SearchField", DbType.String,  searchField );
			database.AddInParameter(commandWrapper, "@RegisteredDate", DbType.DateTime,  registeredDate );
			database.AddInParameter(commandWrapper, "@States", DbType.String,  states );
			database.AddInParameter(commandWrapper, "@Suburb", DbType.String,  suburb );
			database.AddInParameter(commandWrapper, "@PostCode", DbType.String,  postCode );
			database.AddInParameter(commandWrapper, "@ProfilePicture", DbType.AnsiString,  profilePicture );
			database.AddInParameter(commandWrapper, "@ShortBio", DbType.String,  shortBio );
			database.AddInParameter(commandWrapper, "@WorkTypeId", DbType.AnsiString,  workTypeId );
			database.AddInParameter(commandWrapper, "@Memberships", DbType.String,  memberships );
			database.AddInParameter(commandWrapper, "@MemberStatusId", DbType.Int32,  memberStatusId );
			database.AddInParameter(commandWrapper, "@LinkedInAccessToken", DbType.AnsiString,  linkedInAccessToken );
			database.AddInParameter(commandWrapper, "@ExternalMemberId", DbType.AnsiString,  externalMemberId );
			database.AddInParameter(commandWrapper, "@PassportNo", DbType.AnsiString,  passportNo );
			database.AddInParameter(commandWrapper, "@MailingAddress1", DbType.String,  mailingAddress1 );
			database.AddInParameter(commandWrapper, "@MailingAddress2", DbType.String,  mailingAddress2 );
			database.AddInParameter(commandWrapper, "@MailingStates", DbType.String,  mailingStates );
			database.AddInParameter(commandWrapper, "@MailingSuburb", DbType.String,  mailingSuburb );
			database.AddInParameter(commandWrapper, "@MailingPostCode", DbType.String,  mailingPostCode );
			database.AddInParameter(commandWrapper, "@MailingCountryId", DbType.Int32,  mailingCountryId );
			database.AddInParameter(commandWrapper, "@CountryName", DbType.String,  countryName );
			database.AddInParameter(commandWrapper, "@MailingCountryName", DbType.String,  mailingCountryName );
			database.AddInParameter(commandWrapper, "@LoginAttempts", DbType.Int32,  loginAttempts );
			database.AddInParameter(commandWrapper, "@LastAttemptDate", DbType.DateTime,  lastAttemptDate );
			database.AddInParameter(commandWrapper, "@Status", DbType.Int32,  status );
			database.AddInParameter(commandWrapper, "@LastTermsAndConditionsDate", DbType.DateTime,  lastTermsAndConditionsDate );
			database.AddInParameter(commandWrapper, "@DefaultLanguageId", DbType.Int32,  defaultLanguageId );
			database.AddInParameter(commandWrapper, "@ReferringSiteId", DbType.Int32,  referringSiteId );
			database.AddInParameter(commandWrapper, "@MultiLingualFirstName", DbType.String,  multiLingualFirstName );
			database.AddInParameter(commandWrapper, "@MultiLingualSurame", DbType.String,  multiLingualSurame );
			database.AddInParameter(commandWrapper, "@SecondaryEmail", DbType.AnsiString,  secondaryEmail );
			database.AddInParameter(commandWrapper, "@CandidateData", DbType.String,  candidateData );
			database.AddInParameter(commandWrapper, "@EligibleToWorkIn", DbType.AnsiString,  eligibleToWorkIn );
			database.AddInParameter(commandWrapper, "@ReferenceUponRequest", DbType.Boolean,  referenceUponRequest );
			database.AddInParameter(commandWrapper, "@PreferredLine", DbType.Int32,  preferredLine );
			database.AddInParameter(commandWrapper, "@VideoUrl", DbType.AnsiString,  videoUrl );
			database.AddInParameter(commandWrapper, "@ProfileDataXml", DbType.String,  profileDataXml );
	
			database.AddParameter(commandWrapper, "@MemberId", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, memberId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", (IEntity)null));

			memberId =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@MemberId"]);

				
				return;
		}
		#endregion

		#region Members_GetByEducationId
					
		/// <summary>
		///	This method wraps the 'Members_GetByEducationId' stored procedure. 
		/// </summary>	
		/// <param name="educationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByEducationId(TransactionManager transactionManager, int start, int pageLength , System.Int32? educationId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetByEducationId", true);
			
			database.AddInParameter(commandWrapper, "@EducationId", DbType.Int32,  educationId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEducationId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEducationId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_Delete
					
		/// <summary>
		///	This method wraps the 'Members_Delete' stored procedure. 
		/// </summary>	
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Delete(TransactionManager transactionManager, int start, int pageLength , System.Int32? memberId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_Delete", true);
			
			database.AddInParameter(commandWrapper, "@MemberId", DbType.Int32,  memberId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete", (IEntity)null));


				
				return;
		}
		#endregion

		#region Members_GetByKeyword
					
		/// <summary>
		///	This method wraps the 'Members_GetByKeyword' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="keyword"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByKeyword(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.String keyword)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetByKeyword", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@Keyword", DbType.String,  keyword );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByKeyword", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByKeyword", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_CustomGetNewValidMembers
					
		/// <summary>
		///	This method wraps the 'Members_CustomGetNewValidMembers' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet CustomGetNewValidMembers(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.DateTime? lastModifiedDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_CustomGetNewValidMembers", true);
			
			database.AddInParameter(commandWrapper, "@SiteID", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@LastModifiedDate", DbType.DateTime,  lastModifiedDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomGetNewValidMembers", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomGetNewValidMembers", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_Get_List
					
		/// <summary>
		///	This method wraps the 'Members_Get_List' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Get_List(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_Get_List", true);
			
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Get_List", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Get_List", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_CustomGetCV
					
		/// <summary>
		///	This method wraps the 'Members_CustomGetCV' stored procedure. 
		/// </summary>	
		/// <param name="memberId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet CustomGetCV(TransactionManager transactionManager, int start, int pageLength , System.Int32? memberId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_CustomGetCV", true);
			
			database.AddInParameter(commandWrapper, "@MemberID", DbType.Int32,  memberId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomGetCV", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomGetCV", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_GetByEmailFormat
					
		/// <summary>
		///	This method wraps the 'Members_GetByEmailFormat' stored procedure. 
		/// </summary>	
		/// <param name="emailFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByEmailFormat(TransactionManager transactionManager, int start, int pageLength , System.Int32? emailFormat)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetByEmailFormat", true);
			
			database.AddInParameter(commandWrapper, "@EmailFormat", DbType.Int32,  emailFormat );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEmailFormat", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEmailFormat", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_GetBySiteId
					
		/// <summary>
		///	This method wraps the 'Members_GetBySiteId' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBySiteId(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetBySiteId", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_CustomPeopleSearch
					
		/// <summary>
		///	This method wraps the 'Members_CustomPeopleSearch' stored procedure. 
		/// </summary>	
		/// <param name="keyword"> A <c>System.String</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.String</c> instance.</param>
		/// <param name="professionId"> A <c>System.String</c> instance.</param>
		/// <param name="roleId"> A <c>System.String</c> instance.</param>
		/// <param name="countryId"> A <c>System.String</c> instance.</param>
		/// <param name="locationId"> A <c>System.String</c> instance.</param>
		/// <param name="areaId"> A <c>System.String</c> instance.</param>
		/// <param name="eligibleToWorkIn"> A <c>System.String</c> instance.</param>
		/// <param name="availabilityFromDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet CustomPeopleSearch(TransactionManager transactionManager, int start, int pageLength , System.String keyword, System.Int32? siteId, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? salaryTypeId, System.String workTypeId, System.String professionId, System.String roleId, System.String countryId, System.String locationId, System.String areaId, System.String eligibleToWorkIn, System.DateTime? availabilityFromDate, System.Int32? pageIndex, System.Int32? pageSize, System.String orderBy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_CustomPeopleSearch", true);
			
			database.AddInParameter(commandWrapper, "@Keyword", DbType.String,  keyword );
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal,  salaryLowerBand );
			database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal,  salaryUpperBand );
			database.AddInParameter(commandWrapper, "@SalaryTypeID", DbType.Int32,  salaryTypeId );
			database.AddInParameter(commandWrapper, "@WorkTypeID", DbType.AnsiString,  workTypeId );
			database.AddInParameter(commandWrapper, "@ProfessionID", DbType.AnsiString,  professionId );
			database.AddInParameter(commandWrapper, "@RoleID", DbType.AnsiString,  roleId );
			database.AddInParameter(commandWrapper, "@CountryID", DbType.AnsiString,  countryId );
			database.AddInParameter(commandWrapper, "@LocationID", DbType.AnsiString,  locationId );
			database.AddInParameter(commandWrapper, "@AreaID", DbType.AnsiString,  areaId );
			database.AddInParameter(commandWrapper, "@EligibleToWorkIn", DbType.AnsiString,  eligibleToWorkIn );
			database.AddInParameter(commandWrapper, "@AvailabilityFromDate", DbType.DateTime,  availabilityFromDate );
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32,  pageIndex );
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32,  pageSize );
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.AnsiString,  orderBy );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomPeopleSearch", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomPeopleSearch", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_GetMemberCount
					
		/// <summary>
		///	This method wraps the 'Members_GetMemberCount' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetMemberCount(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_GetMemberCount", true);
			
			database.AddInParameter(commandWrapper, "@SiteID", DbType.Int32,  siteId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetMemberCount", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetMemberCount", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_CustomGetNewValidProfiles
					
		/// <summary>
		///	This method wraps the 'Members_CustomGetNewValidProfiles' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet CustomGetNewValidProfiles(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.DateTime? lastModifiedDate)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_CustomGetNewValidProfiles", true);
			
			database.AddInParameter(commandWrapper, "@SiteID", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@LastModifiedDate", DbType.DateTime,  lastModifiedDate );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CustomGetNewValidProfiles", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CustomGetNewValidProfiles", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Members_PeopleSearch
					
		/// <summary>
		///	This method wraps the 'Members_PeopleSearch' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="preferredCategoryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="preferredSubCategoryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="preferredSalaryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="availabilityId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="countryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="locationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="areaId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchExpression"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet PeopleSearch(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.Int32? preferredCategoryId, System.Int32? preferredSubCategoryId, System.Int32? preferredSalaryId, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? availabilityId, System.Int32? countryId, System.Int32? locationId, System.Int32? areaId, System.String searchExpression, System.String orderBy, System.Int32? pageIndex, System.Int32? pageSize)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Members_PeopleSearch", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@PreferredCategoryId", DbType.Int32,  preferredCategoryId );
			database.AddInParameter(commandWrapper, "@PreferredSubCategoryId", DbType.Int32,  preferredSubCategoryId );
			database.AddInParameter(commandWrapper, "@PreferredSalaryId", DbType.Int32,  preferredSalaryId );
			database.AddInParameter(commandWrapper, "@SalaryLowerBand", DbType.Decimal,  salaryLowerBand );
			database.AddInParameter(commandWrapper, "@SalaryUpperBand", DbType.Decimal,  salaryUpperBand );
			database.AddInParameter(commandWrapper, "@AvailabilityId", DbType.Int32,  availabilityId );
			database.AddInParameter(commandWrapper, "@CountryId", DbType.Int32,  countryId );
			database.AddInParameter(commandWrapper, "@LocationId", DbType.Int32,  locationId );
			database.AddInParameter(commandWrapper, "@AreaId", DbType.Int32,  areaId );
			database.AddInParameter(commandWrapper, "@SearchExpression", DbType.AnsiString,  searchExpression );
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.AnsiString,  orderBy );
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32,  pageIndex );
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32,  pageSize );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "PeopleSearch", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "PeopleSearch", (IEntity)null));

			

			
			return ds;	
		}
		#endregion
		#endregion
	}//end class
} // end namespace

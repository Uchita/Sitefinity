
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlSitesProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using JXTPortal.Entities;
using JXTPortal.Data;
using JXTPortal.Data.Bases;

#endregion

namespace JXTPortal.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Sites"/> entity.
	///</summary>
	public abstract partial class SqlSitesProviderBase : SitesProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlSitesProviderBase"/> instance.
		/// </summary>
		public SqlSitesProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlSitesProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlSitesProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_siteId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _siteId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, _siteId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Sites)
					,_siteId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Sites objects.</returns>
		public override TList<Sites> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<Sites>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SiteName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SiteUrl", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SiteDescription", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SiteAdminLogo", DbType.Binary, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Live", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MobileEnabled", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MobileUrl", DbType.AnsiString, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("siteid ") || clause.Trim().StartsWith("siteid="))
				{
					database.SetParameterValue(commandWrapper, "@SiteId", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sitename ") || clause.Trim().StartsWith("sitename="))
				{
					database.SetParameterValue(commandWrapper, "@SiteName", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("siteurl ") || clause.Trim().StartsWith("siteurl="))
				{
					database.SetParameterValue(commandWrapper, "@SiteUrl", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sitedescription ") || clause.Trim().StartsWith("sitedescription="))
				{
					database.SetParameterValue(commandWrapper, "@SiteDescription", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("siteadminlogo ") || clause.Trim().StartsWith("siteadminlogo="))
				{
					database.SetParameterValue(commandWrapper, "@SiteAdminLogo", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastmodified ") || clause.Trim().StartsWith("lastmodified="))
				{
					database.SetParameterValue(commandWrapper, "@LastModified", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastmodifiedby ") || clause.Trim().StartsWith("lastmodifiedby="))
				{
					database.SetParameterValue(commandWrapper, "@LastModifiedBy", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("live ") || clause.Trim().StartsWith("live="))
				{
					database.SetParameterValue(commandWrapper, "@Live", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mobileenabled ") || clause.Trim().StartsWith("mobileenabled="))
				{
					database.SetParameterValue(commandWrapper, "@MobileEnabled", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mobileurl ") || clause.Trim().StartsWith("mobileurl="))
				{
					database.SetParameterValue(commandWrapper, "@MobileUrl", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<Sites> rows = new TList<Sites>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Sites objects.</returns>
		public override TList<Sites> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_Find_Dynamic", typeof(SitesColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<Sites> rows = new TList<Sites>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Sites objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Sites> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<Sites> rows = new TList<Sites>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Sites objects.</returns>
		public override TList<Sites> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<Sites> rows = new TList<Sites>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByLastModifiedBy
		/// <summary>
		/// 	Gets rows from the datasource based on the FK__Sites__LastModif__153B1FDF key.
		///		FK__Sites__LastModif__153B1FDF Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_lastModifiedBy"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of JXTPortal.Entities.Sites objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Sites> GetByLastModifiedBy(TransactionManager transactionManager, System.Int32? _lastModifiedBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_GetByLastModifiedBy", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32, _lastModifiedBy);
			
			IDataReader reader = null;
			TList<Sites> rows = new TList<Sites>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByLastModifiedBy", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByLastModifiedBy", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetBySiteId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK__tmp_ms_xx_Sites__0504B816 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_siteId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="JXTPortal.Entities.Sites"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override JXTPortal.Entities.Sites GetBySiteId(TransactionManager transactionManager, System.Int32 _siteId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_GetBySiteId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, _siteId);
			
			IDataReader reader = null;
			TList<Sites> tmp = new TList<Sites>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByMobileUrl
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UX_Sites_MobileUrl index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_mobileUrl"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="JXTPortal.Entities.Sites"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override JXTPortal.Entities.Sites GetByMobileUrl(TransactionManager transactionManager, System.String _mobileUrl, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_GetByMobileUrl", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MobileUrl", DbType.AnsiString, _mobileUrl);
			
			IDataReader reader = null;
			TList<Sites> tmp = new TList<Sites>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMobileUrl", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMobileUrl", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the JXTPortal.Entities.Sites object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<JXTPortal.Entities.Sites> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "Sites";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("SiteID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("SiteName", typeof(System.String));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("SiteURL", typeof(System.String));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("SiteDescription", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("SiteAdminLogo", typeof(System.Byte[]));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("LastModified", typeof(System.DateTime));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("LastModifiedBy", typeof(System.Int32));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("Live", typeof(System.Boolean));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("MobileEnabled", typeof(System.Boolean));
			col8.AllowDBNull = false;		
			DataColumn col9 = dataTable.Columns.Add("MobileUrl", typeof(System.String));
			col9.AllowDBNull = false;		
			
			bulkCopy.ColumnMappings.Add("SiteID", "SiteID");
			bulkCopy.ColumnMappings.Add("SiteName", "SiteName");
			bulkCopy.ColumnMappings.Add("SiteURL", "SiteURL");
			bulkCopy.ColumnMappings.Add("SiteDescription", "SiteDescription");
			bulkCopy.ColumnMappings.Add("SiteAdminLogo", "SiteAdminLogo");
			bulkCopy.ColumnMappings.Add("LastModified", "LastModified");
			bulkCopy.ColumnMappings.Add("LastModifiedBy", "LastModifiedBy");
			bulkCopy.ColumnMappings.Add("Live", "Live");
			bulkCopy.ColumnMappings.Add("MobileEnabled", "MobileEnabled");
			bulkCopy.ColumnMappings.Add("MobileUrl", "MobileUrl");
			
			foreach(JXTPortal.Entities.Sites entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["SiteID"] = entity.SiteId;
							
				
					row["SiteName"] = entity.SiteName;
							
				
					row["SiteURL"] = entity.SiteUrl;
							
				
					row["SiteDescription"] = entity.SiteDescription;
							
				
					row["SiteAdminLogo"] = entity.SiteAdminLogo;
							
				
					row["LastModified"] = entity.LastModified;
							
				
					row["LastModifiedBy"] = entity.LastModifiedBy.HasValue ? (object) entity.LastModifiedBy  : System.DBNull.Value;
							
				
					row["Live"] = entity.Live.HasValue ? (object) entity.Live  : System.DBNull.Value;
							
				
					row["MobileEnabled"] = entity.MobileEnabled;
							
				
					row["MobileUrl"] = entity.MobileUrl;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(JXTPortal.Entities.Sites entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a JXTPortal.Entities.Sites object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">JXTPortal.Entities.Sites object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the JXTPortal.Entities.Sites object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, JXTPortal.Entities.Sites entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@SiteId", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@SiteName", DbType.AnsiString, entity.SiteName );
			database.AddInParameter(commandWrapper, "@SiteUrl", DbType.AnsiString, entity.SiteUrl );
			database.AddInParameter(commandWrapper, "@SiteDescription", DbType.AnsiString, entity.SiteDescription );
			database.AddInParameter(commandWrapper, "@SiteAdminLogo", DbType.Binary, entity.SiteAdminLogo );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, entity.LastModified );
			database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32, (entity.LastModifiedBy.HasValue ? (object) entity.LastModifiedBy  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Live", DbType.Boolean, (entity.Live.HasValue ? (object) entity.Live  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MobileEnabled", DbType.Boolean, entity.MobileEnabled );
			database.AddInParameter(commandWrapper, "@MobileUrl", DbType.AnsiString, entity.MobileUrl );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _siteId = database.GetParameterValue(commandWrapper, "@SiteId");
			entity.SiteId = (System.Int32)_siteId;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">JXTPortal.Entities.Sites object to update.</param>
		/// <remarks>
		///		After updating the datasource, the JXTPortal.Entities.Sites object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, JXTPortal.Entities.Sites entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32, entity.SiteId );
			database.AddInParameter(commandWrapper, "@SiteName", DbType.AnsiString, entity.SiteName );
			database.AddInParameter(commandWrapper, "@SiteUrl", DbType.AnsiString, entity.SiteUrl );
			database.AddInParameter(commandWrapper, "@SiteDescription", DbType.AnsiString, entity.SiteDescription );
			database.AddInParameter(commandWrapper, "@SiteAdminLogo", DbType.Binary, entity.SiteAdminLogo );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime, entity.LastModified );
			database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32, (entity.LastModifiedBy.HasValue ? (object) entity.LastModifiedBy : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Live", DbType.Boolean, (entity.Live.HasValue ? (object) entity.Live : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MobileEnabled", DbType.Boolean, entity.MobileEnabled );
			database.AddInParameter(commandWrapper, "@MobileUrl", DbType.AnsiString, entity.MobileUrl );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region Sites_Create
					
		/// <summary>
		///	This method wraps the 'Sites_Create' stored procedure. 
		/// </summary>	
		/// <param name="sourceSiteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteName"> A <c>System.String</c> instance.</param>
		/// <param name="siteUrl"> A <c>System.String</c> instance.</param>
		/// <param name="siteDescription"> A <c>System.String</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Create(TransactionManager transactionManager, int start, int pageLength , System.Int32? sourceSiteId, System.Int32? languageId, System.String siteName, System.String siteUrl, System.String siteDescription, System.Int32? lastModifiedBy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_Create", true);
			
			database.AddInParameter(commandWrapper, "@SourceSiteID", DbType.Int32,  sourceSiteId );
			database.AddInParameter(commandWrapper, "@LanguageID", DbType.Int32,  languageId );
			database.AddInParameter(commandWrapper, "@SiteName", DbType.AnsiString,  siteName );
			database.AddInParameter(commandWrapper, "@SiteUrl", DbType.AnsiString,  siteUrl );
			database.AddInParameter(commandWrapper, "@SiteDescription", DbType.AnsiString,  siteDescription );
			database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32,  lastModifiedBy );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Create", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Create", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Sites_Insert
					
		/// <summary>
		///	This method wraps the 'Sites_Insert' stored procedure. 
		/// </summary>	
		/// <param name="siteName"> A <c>System.String</c> instance.</param>
		/// <param name="siteUrl"> A <c>System.String</c> instance.</param>
		/// <param name="siteDescription"> A <c>System.String</c> instance.</param>
		/// <param name="siteAdminLogo"> A <c>System.Byte[]</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="live"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="mobileEnabled"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="mobileUrl"> A <c>System.String</c> instance.</param>
			/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Insert(TransactionManager transactionManager, int start, int pageLength , System.String siteName, System.String siteUrl, System.String siteDescription, System.Byte[] siteAdminLogo, System.DateTime? lastModified, System.Int32? lastModifiedBy, System.Boolean? live, System.Boolean? mobileEnabled, System.String mobileUrl, ref System.Int32? siteId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_Insert", true);
			
			database.AddInParameter(commandWrapper, "@SiteName", DbType.AnsiString,  siteName );
			database.AddInParameter(commandWrapper, "@SiteUrl", DbType.AnsiString,  siteUrl );
			database.AddInParameter(commandWrapper, "@SiteDescription", DbType.AnsiString,  siteDescription );
			database.AddInParameter(commandWrapper, "@SiteAdminLogo", DbType.Binary,  siteAdminLogo );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime,  lastModified );
			database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32,  lastModifiedBy );
			database.AddInParameter(commandWrapper, "@Live", DbType.Boolean,  live );
			database.AddInParameter(commandWrapper, "@MobileEnabled", DbType.Boolean,  mobileEnabled );
			database.AddInParameter(commandWrapper, "@MobileUrl", DbType.AnsiString,  mobileUrl );
	
			database.AddParameter(commandWrapper, "@SiteId", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, siteId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", (IEntity)null));

			siteId =  Utility.GetParameterValue<System.Int32?>(commandWrapper.Parameters["@SiteId"]);

				
				return;
		}
		#endregion

		#region Sites_GetBySiteId
					
		/// <summary>
		///	This method wraps the 'Sites_GetBySiteId' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetBySiteId(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_GetBySiteId", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySiteId", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySiteId", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Sites_Get_List
					
		/// <summary>
		///	This method wraps the 'Sites_Get_List' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
        public override TList<Sites> Get_List(TransactionManager transactionManager, int start, int pageLength)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_Get_List", true);



            IDataReader reader = null;

            //Create Collection
            TList<Sites> rows = new TList<Sites>();
            //Provider Data Requesting Command Event
            OnDataRequesting(new CommandEventArgs(commandWrapper, "Get_List", rows));

            if (transactionManager != null)
            {
                reader = Utility.ExecuteReader(transactionManager, commandWrapper);
            }
            else
            {
                reader = Utility.ExecuteReader(database, commandWrapper);
            }

            try
            {
                Fill(reader, rows, start, pageLength);
            }
            finally
            {
                if (reader != null)
                    reader.Close();
            }

            //Provider Data Requested Command Event
            OnDataRequested(new CommandEventArgs(commandWrapper, "Get_List", rows));


            return rows;	
		}
		#endregion

		#region Sites_GetByMobileUrl
					
		/// <summary>
		///	This method wraps the 'Sites_GetByMobileUrl' stored procedure. 
		/// </summary>	
		/// <param name="mobileUrl"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByMobileUrl(TransactionManager transactionManager, int start, int pageLength , System.String mobileUrl)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_GetByMobileUrl", true);
			
			database.AddInParameter(commandWrapper, "@MobileUrl", DbType.AnsiString,  mobileUrl );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMobileUrl", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMobileUrl", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Sites_FindSite
					
		/// <summary>
		///	This method wraps the 'Sites_FindSite' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteUrl"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet FindSite(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.String siteUrl)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_FindSite", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@SiteUrl", DbType.AnsiString,  siteUrl );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "FindSite", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "FindSite", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Sites_Update
					
		/// <summary>
		///	This method wraps the 'Sites_Update' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteName"> A <c>System.String</c> instance.</param>
		/// <param name="siteUrl"> A <c>System.String</c> instance.</param>
		/// <param name="siteDescription"> A <c>System.String</c> instance.</param>
		/// <param name="siteAdminLogo"> A <c>System.Byte[]</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="live"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="mobileEnabled"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="mobileUrl"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Update(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.String siteName, System.String siteUrl, System.String siteDescription, System.Byte[] siteAdminLogo, System.DateTime? lastModified, System.Int32? lastModifiedBy, System.Boolean? live, System.Boolean? mobileEnabled, System.String mobileUrl)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_Update", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@SiteName", DbType.AnsiString,  siteName );
			database.AddInParameter(commandWrapper, "@SiteUrl", DbType.AnsiString,  siteUrl );
			database.AddInParameter(commandWrapper, "@SiteDescription", DbType.AnsiString,  siteDescription );
			database.AddInParameter(commandWrapper, "@SiteAdminLogo", DbType.Binary,  siteAdminLogo );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime,  lastModified );
			database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32,  lastModifiedBy );
			database.AddInParameter(commandWrapper, "@Live", DbType.Boolean,  live );
			database.AddInParameter(commandWrapper, "@MobileEnabled", DbType.Boolean,  mobileEnabled );
			database.AddInParameter(commandWrapper, "@MobileUrl", DbType.AnsiString,  mobileUrl );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", (IEntity)null));


				
				return;
		}
		#endregion

		#region Sites_Remove
					
		/// <summary>
		///	This method wraps the 'Sites_Remove' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Remove(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_Remove", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Remove", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Remove", (IEntity)null));


				
				return;
		}
		#endregion

		#region Sites_GetPaging
					
		/// <summary>
		///	This method wraps the 'Sites_GetPaging' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteName"> A <c>System.String</c> instance.</param>
		/// <param name="siteUrl"> A <c>System.String</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageNumber"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetPaging(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.String siteName, System.String siteUrl, System.Int32? pageSize, System.Int32? pageNumber)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_GetPaging", true);
			
			database.AddInParameter(commandWrapper, "@SiteID", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@SiteName", DbType.AnsiString,  siteName );
			database.AddInParameter(commandWrapper, "@SiteURL", DbType.AnsiString,  siteUrl );
			database.AddInParameter(commandWrapper, "@pageSize", DbType.Int32,  pageSize );
			database.AddInParameter(commandWrapper, "@pageNumber", DbType.Int32,  pageNumber );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaging", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaging", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Sites_Find
					
		/// <summary>
		///	This method wraps the 'Sites_Find' stored procedure. 
		/// </summary>	
		/// <param name="searchUsingOr"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteName"> A <c>System.String</c> instance.</param>
		/// <param name="siteUrl"> A <c>System.String</c> instance.</param>
		/// <param name="siteDescription"> A <c>System.String</c> instance.</param>
		/// <param name="siteAdminLogo"> A <c>System.Byte[]</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="live"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="mobileEnabled"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="mobileUrl"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Find(TransactionManager transactionManager, int start, int pageLength , System.Boolean? searchUsingOr, System.Int32? siteId, System.String siteName, System.String siteUrl, System.String siteDescription, System.Byte[] siteAdminLogo, System.DateTime? lastModified, System.Int32? lastModifiedBy, System.Boolean? live, System.Boolean? mobileEnabled, System.String mobileUrl)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_Find", true);
			
			database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean,  searchUsingOr );
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@SiteName", DbType.AnsiString,  siteName );
			database.AddInParameter(commandWrapper, "@SiteUrl", DbType.AnsiString,  siteUrl );
			database.AddInParameter(commandWrapper, "@SiteDescription", DbType.AnsiString,  siteDescription );
			database.AddInParameter(commandWrapper, "@SiteAdminLogo", DbType.Binary,  siteAdminLogo );
			database.AddInParameter(commandWrapper, "@LastModified", DbType.DateTime,  lastModified );
			database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32,  lastModifiedBy );
			database.AddInParameter(commandWrapper, "@Live", DbType.Boolean,  live );
			database.AddInParameter(commandWrapper, "@MobileEnabled", DbType.Boolean,  mobileEnabled );
			database.AddInParameter(commandWrapper, "@MobileUrl", DbType.AnsiString,  mobileUrl );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Find", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Sites_Copy
					
		/// <summary>
		///	This method wraps the 'Sites_Copy' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteName"> A <c>System.String</c> instance.</param>
		/// <param name="siteUrl"> A <c>System.String</c> instance.</param>
		/// <param name="siteDescription"> A <c>System.String</c> instance.</param>
		/// <param name="ftpFolderLocation"> A <c>System.String</c> instance.</param>
		/// <param name="copyGlobalSettings"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="copyJobTemplates"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="copySiteLocation"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="copyProfessionRoles"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="useCustomProfessionRole"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="copySalaryTypes"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="copyWorkTypes"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="copyEducation"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="copyAvailableStatus"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="copyWebParts"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="copyWidgets"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="copyEmailTemplates"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="selectedLanguages"> A <c>System.String</c> instance.</param>
		/// <param name="selectedDynamicPages"> A <c>System.String</c> instance.</param>
		/// <param name="selectedFiles"> A <c>System.String</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet Copy(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId, System.String siteName, System.String siteUrl, System.String siteDescription, System.String ftpFolderLocation, System.Boolean? copyGlobalSettings, System.Boolean? copyJobTemplates, System.Boolean? copySiteLocation, System.Boolean? copyProfessionRoles, System.Boolean? useCustomProfessionRole, System.Boolean? copySalaryTypes, System.Boolean? copyWorkTypes, System.Boolean? copyEducation, System.Boolean? copyAvailableStatus, System.Boolean? copyWebParts, System.Boolean? copyWidgets, System.Boolean? copyEmailTemplates, System.String selectedLanguages, System.String selectedDynamicPages, System.String selectedFiles, System.Int32? lastModifiedBy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_Copy", true);
			
			database.AddInParameter(commandWrapper, "@SiteID", DbType.Int32,  siteId );
			database.AddInParameter(commandWrapper, "@SiteName", DbType.AnsiString,  siteName );
			database.AddInParameter(commandWrapper, "@SiteUrl", DbType.AnsiString,  siteUrl );
			database.AddInParameter(commandWrapper, "@SiteDescription", DbType.AnsiString,  siteDescription );
			database.AddInParameter(commandWrapper, "@FtpFolderLocation", DbType.AnsiString,  ftpFolderLocation );
			database.AddInParameter(commandWrapper, "@CopyGlobalSettings", DbType.Boolean,  copyGlobalSettings );
			database.AddInParameter(commandWrapper, "@CopyJobTemplates", DbType.Boolean,  copyJobTemplates );
			database.AddInParameter(commandWrapper, "@CopySiteLocation", DbType.Boolean,  copySiteLocation );
			database.AddInParameter(commandWrapper, "@CopyProfessionRoles", DbType.Boolean,  copyProfessionRoles );
			database.AddInParameter(commandWrapper, "@UseCustomProfessionRole", DbType.Boolean,  useCustomProfessionRole );
			database.AddInParameter(commandWrapper, "@CopySalaryTypes", DbType.Boolean,  copySalaryTypes );
			database.AddInParameter(commandWrapper, "@CopyWorkTypes", DbType.Boolean,  copyWorkTypes );
			database.AddInParameter(commandWrapper, "@CopyEducation", DbType.Boolean,  copyEducation );
			database.AddInParameter(commandWrapper, "@CopyAvailableStatus", DbType.Boolean,  copyAvailableStatus );
			database.AddInParameter(commandWrapper, "@CopyWebParts", DbType.Boolean,  copyWebParts );
			database.AddInParameter(commandWrapper, "@CopyWidgets", DbType.Boolean,  copyWidgets );
			database.AddInParameter(commandWrapper, "@CopyEmailTemplates", DbType.Boolean,  copyEmailTemplates );
			database.AddInParameter(commandWrapper, "@SelectedLanguages", DbType.AnsiString,  selectedLanguages );
			database.AddInParameter(commandWrapper, "@SelectedDynamicPages", DbType.AnsiString,  selectedDynamicPages );
			database.AddInParameter(commandWrapper, "@SelectedFiles", DbType.AnsiString,  selectedFiles );
			database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32,  lastModifiedBy );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Copy", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Copy", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Sites_GetPaged
					
		/// <summary>
		///	This method wraps the 'Sites_GetPaged' stored procedure. 
		/// </summary>	
		/// <param name="whereClause"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetPaged(TransactionManager transactionManager, int start, int pageLength , System.String whereClause, System.String orderBy, System.Int32? pageIndex, System.Int32? pageSize)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_GetPaged", true);
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.AnsiString,  whereClause );
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.AnsiString,  orderBy );
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32,  pageIndex );
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32,  pageSize );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Sites_GetByLastModifiedBy
					
		/// <summary>
		///	This method wraps the 'Sites_GetByLastModifiedBy' stored procedure. 
		/// </summary>	
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetByLastModifiedBy(TransactionManager transactionManager, int start, int pageLength , System.Int32? lastModifiedBy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_GetByLastModifiedBy", true);
			
			database.AddInParameter(commandWrapper, "@LastModifiedBy", DbType.Int32,  lastModifiedBy );
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByLastModifiedBy", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByLastModifiedBy", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region Sites_Delete
					
		/// <summary>
		///	This method wraps the 'Sites_Delete' stored procedure. 
		/// </summary>	
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Delete(TransactionManager transactionManager, int start, int pageLength , System.Int32? siteId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.Sites_Delete", true);
			
			database.AddInParameter(commandWrapper, "@SiteId", DbType.Int32,  siteId );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete", (IEntity)null));


				
				return;
		}
		#endregion
		#endregion
	}//end class
} // end namespace

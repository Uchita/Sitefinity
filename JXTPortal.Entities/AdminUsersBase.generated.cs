
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdminUsers.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'AdminUsers' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdminUsersBase : EntityBase, IAdminUsers, IEntityId<AdminUsersKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdminUsersEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdminUsersEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdminUsersEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdminUsers> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdminUsersEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdminUsersEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdminUsersBase"/> instance.
		///</summary>
		public AdminUsersBase()
		{
			this.entityData = new AdminUsersEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdminUsersBase"/> instance.
		///</summary>
		///<param name="_adminRoleId"></param>
		///<param name="_siteId"></param>
		///<param name="_userName"></param>
		///<param name="_userPassword"></param>
		///<param name="_firstName"></param>
		///<param name="_surname"></param>
		///<param name="_email"></param>
		///<param name="_loginAttempts"></param>
		///<param name="_lastAttemptDate"></param>
		///<param name="_status"></param>
		public AdminUsersBase(System.Int32 _adminRoleId, System.Int32 _siteId, System.String _userName, 
			System.String _userPassword, System.String _firstName, System.String _surname, System.String _email, 
			System.Int32 _loginAttempts, System.DateTime? _lastAttemptDate, System.Int32 _status)
		{
			this.entityData = new AdminUsersEntityData();
			this.backupData = null;

			this.AdminRoleId = _adminRoleId;
			this.SiteId = _siteId;
			this.UserName = _userName;
			this.UserPassword = _userPassword;
			this.FirstName = _firstName;
			this.Surname = _surname;
			this.Email = _email;
			this.LoginAttempts = _loginAttempts;
			this.LastAttemptDate = _lastAttemptDate;
			this.Status = _status;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdminUsers"/> instance.
		///</summary>
		///<param name="_adminRoleId"></param>
		///<param name="_siteId"></param>
		///<param name="_userName"></param>
		///<param name="_userPassword"></param>
		///<param name="_firstName"></param>
		///<param name="_surname"></param>
		///<param name="_email"></param>
		///<param name="_loginAttempts"></param>
		///<param name="_lastAttemptDate"></param>
		///<param name="_status"></param>
		public static AdminUsers CreateAdminUsers(System.Int32 _adminRoleId, System.Int32 _siteId, System.String _userName, 
			System.String _userPassword, System.String _firstName, System.String _surname, System.String _email, 
			System.Int32 _loginAttempts, System.DateTime? _lastAttemptDate, System.Int32 _status)
		{
			AdminUsers newAdminUsers = new AdminUsers();
			newAdminUsers.AdminRoleId = _adminRoleId;
			newAdminUsers.SiteId = _siteId;
			newAdminUsers.UserName = _userName;
			newAdminUsers.UserPassword = _userPassword;
			newAdminUsers.FirstName = _firstName;
			newAdminUsers.Surname = _surname;
			newAdminUsers.Email = _email;
			newAdminUsers.LoginAttempts = _loginAttempts;
			newAdminUsers.LastAttemptDate = _lastAttemptDate;
			newAdminUsers.Status = _status;
			return newAdminUsers;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdminUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 AdminUserId
		{
			get
			{
				return this.entityData.AdminUserId; 
			}
			
			set
			{
				if (this.entityData.AdminUserId == value)
					return;
					
				OnColumnChanging(AdminUsersColumn.AdminUserId, this.entityData.AdminUserId);
				this.entityData.AdminUserId = value;
				this.EntityId.AdminUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminUsersColumn.AdminUserId, this.entityData.AdminUserId);
				OnPropertyChanged("AdminUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdminRoleId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 AdminRoleId
		{
			get
			{
				return this.entityData.AdminRoleId; 
			}
			
			set
			{
				if (this.entityData.AdminRoleId == value)
					return;
					
				OnColumnChanging(AdminUsersColumn.AdminRoleId, this.entityData.AdminRoleId);
				this.entityData.AdminRoleId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminUsersColumn.AdminRoleId, this.entityData.AdminRoleId);
				OnPropertyChanged("AdminRoleId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SiteId
		{
			get
			{
				return this.entityData.SiteId; 
			}
			
			set
			{
				if (this.entityData.SiteId == value)
					return;
					
				OnColumnChanging(AdminUsersColumn.SiteId, this.entityData.SiteId);
				this.entityData.SiteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminUsersColumn.SiteId, this.entityData.SiteId);
				OnPropertyChanged("SiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String UserName
		{
			get
			{
				return this.entityData.UserName; 
			}
			
			set
			{
				if (this.entityData.UserName == value)
					return;
					
				OnColumnChanging(AdminUsersColumn.UserName, this.entityData.UserName);
				this.entityData.UserName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminUsersColumn.UserName, this.entityData.UserName);
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserPassword property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String UserPassword
		{
			get
			{
				return this.entityData.UserPassword; 
			}
			
			set
			{
				if (this.entityData.UserPassword == value)
					return;
					
				OnColumnChanging(AdminUsersColumn.UserPassword, this.entityData.UserPassword);
				this.entityData.UserPassword = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminUsersColumn.UserPassword, this.entityData.UserPassword);
				OnPropertyChanged("UserPassword");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 500)]
		public virtual System.String FirstName
		{
			get
			{
				return this.entityData.FirstName; 
			}
			
			set
			{
				if (this.entityData.FirstName == value)
					return;
					
				OnColumnChanging(AdminUsersColumn.FirstName, this.entityData.FirstName);
				this.entityData.FirstName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminUsersColumn.FirstName, this.entityData.FirstName);
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Surname property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 500)]
		public virtual System.String Surname
		{
			get
			{
				return this.entityData.Surname; 
			}
			
			set
			{
				if (this.entityData.Surname == value)
					return;
					
				OnColumnChanging(AdminUsersColumn.Surname, this.entityData.Surname);
				this.entityData.Surname = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminUsersColumn.Surname, this.entityData.Surname);
				OnPropertyChanged("Surname");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
				OnColumnChanging(AdminUsersColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminUsersColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoginAttempts property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LoginAttempts
		{
			get
			{
				return this.entityData.LoginAttempts; 
			}
			
			set
			{
				if (this.entityData.LoginAttempts == value)
					return;
					
				OnColumnChanging(AdminUsersColumn.LoginAttempts, this.entityData.LoginAttempts);
				this.entityData.LoginAttempts = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminUsersColumn.LoginAttempts, this.entityData.LoginAttempts);
				OnPropertyChanged("LoginAttempts");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastAttemptDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastAttemptDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastAttemptDate
		{
			get
			{
				return this.entityData.LastAttemptDate; 
			}
			
			set
			{
				if (this.entityData.LastAttemptDate == value)
					return;
					
				OnColumnChanging(AdminUsersColumn.LastAttemptDate, this.entityData.LastAttemptDate);
				this.entityData.LastAttemptDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminUsersColumn.LastAttemptDate, this.entityData.LastAttemptDate);
				OnPropertyChanged("LastAttemptDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
				OnColumnChanging(AdminUsersColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminUsersColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdminRoles"/>.
		/// </summary>
		/// <value>The source AdminRoles for AdminRoleId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdminRoles AdminRoleIdSource
      	{
            get { return entityData.AdminRoleIdSource; }
            set { entityData.AdminRoleIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Sites SiteIdSource
      	{
            get { return entityData.SiteIdSource; }
            set { entityData.SiteIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SiteResources objects
		///	which are related to this object through the relation FK__SiteResou__LastM__7FA0E47B
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteResources> SiteResourcesCollection
		{
			get { return entityData.SiteResourcesCollection; }
			set { entityData.SiteResourcesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GlobalSettings objects
		///	which are related to this object through the relation FK__GlobalSet__LastM__5A4F643B
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GlobalSettings> GlobalSettingsCollection
		{
			get { return entityData.GlobalSettingsCollection; }
			set { entityData.GlobalSettingsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EmailTemplates objects
		///	which are related to this object through the relation FK__EmailTemp__LastM__2E3BD7D3
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EmailTemplates> EmailTemplatesCollection
		{
			get { return entityData.EmailTemplatesCollection; }
			set { entityData.EmailTemplatesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of JobsArchive objects
		///	which are related to this object through the relation FK__JobsArchi__LastM__0347582D
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<JobsArchive> JobsArchiveCollection
		{
			get { return entityData.JobsArchiveCollection; }
			set { entityData.JobsArchiveCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AvailableStatus objects
		///	which are related to this object through the relation FK__Available__LastM__79E80B25
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AvailableStatus> AvailableStatusCollection
		{
			get { return entityData.AvailableStatusCollection; }
			set { entityData.AvailableStatusCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of JobItemsType objects
		///	which are related to this object through the relation FK__JobItemsT__LastM__5D21AF45
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<JobItemsType> JobItemsTypeCollection
		{
			get { return entityData.JobItemsTypeCollection; }
			set { entityData.JobItemsTypeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Sites objects
		///	which are related to this object through the relation FK__Sites__LastModif__153B1FDF
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Sites> SitesCollection
		{
			get { return entityData.SitesCollection; }
			set { entityData.SitesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of News objects
		///	which are related to this object through the relation FK__News__LastModifi__7D439ABD
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<News> NewsCollection
		{
			get { return entityData.NewsCollection; }
			set { entityData.NewsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of MemberMemberships objects
		///	which are related to this object through the relation FK__MemberMem__LastM__0D93E57B
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MemberMemberships> MemberMembershipsCollection
		{
			get { return entityData.MemberMembershipsCollection; }
			set { entityData.MemberMembershipsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of JobTemplates objects
		///	which are related to this object through the relation FK__JobTempla__LastM__61E66462
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<JobTemplates> JobTemplatesCollection
		{
			get { return entityData.JobTemplatesCollection; }
			set { entityData.JobTemplatesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of DefaultResources objects
		///	which are related to this object through the relation FK__DefaultRe__LastM__7DB89C09
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DefaultResources> DefaultResourcesCollection
		{
			get { return entityData.DefaultResourcesCollection; }
			set { entityData.DefaultResourcesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Jobs objects
		///	which are related to this object through the relation FK__Jobs__LastModifi__6E4C3B47
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Jobs> JobsCollection
		{
			get { return entityData.JobsCollection; }
			set { entityData.JobsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of NewsCategories objects
		///	which are related to this object through the relation FK__NewsCateg__LastM__7EACC042
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<NewsCategories> NewsCategoriesCollection
		{
			get { return entityData.NewsCategoriesCollection; }
			set { entityData.NewsCategoriesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Educations objects
		///	which are related to this object through the relation FK__Education__LastM__7BD05397
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Educations> EducationsCollection
		{
			get { return entityData.EducationsCollection; }
			set { entityData.EducationsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of DynamicPages objects
		///	which are related to this object through the relation FK__DynamicPa__LastM__628FA481
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DynamicPages> DynamicPagesCollectionGetByLastModifiedBy
		{
			get { return entityData.DynamicPagesCollectionGetByLastModifiedBy; }
			set { entityData.DynamicPagesCollectionGetByLastModifiedBy = value; }	
		}
	
		/// <summary>
		///	Holds a collection of DynamicPageWebPartTemplates objects
		///	which are related to this object through the relation FK__DynamicPa__LastM__6B24EA82
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DynamicPageWebPartTemplates> DynamicPageWebPartTemplatesCollection
		{
			get { return entityData.DynamicPageWebPartTemplatesCollection; }
			set { entityData.DynamicPageWebPartTemplatesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of MemberStatus objects
		///	which are related to this object through the relation FK__MemberSta__LastM__15350743
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MemberStatus> MemberStatusCollection
		{
			get { return entityData.MemberStatusCollection; }
			set { entityData.MemberStatusCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of MemberWizard objects
		///	which are related to this object through the relation FK__MemberWiz__LastM__2847DBB7
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MemberWizard> MemberWizardCollection
		{
			get { return entityData.MemberWizardCollection; }
			set { entityData.MemberWizardCollection = value; }	
		}
	
	
		/// <summary>
		///	Holds a collection of Files objects
		///	which are related to this object through the relation FK_Files_AdminUsers
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Files> FilesCollection
		{
			get { return entityData.FilesCollection; }
			set { entityData.FilesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Advertisers objects
		///	which are related to this object through the relation FK__Advertise__LastM__092A4EB5
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Advertisers> AdvertisersCollection
		{
			get { return entityData.AdvertisersCollection; }
			set { entityData.AdvertisersCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdvertiserUsers objects
		///	which are related to this object through the relation FK__Advertise__LastM__7CC477D0
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdvertiserUsers> AdvertiserUsersCollection
		{
			get { return entityData.AdvertiserUsersCollection; }
			set { entityData.AdvertiserUsersCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("UserName", "User Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UserName", "User Name", 255));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("UserPassword", "User Password"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UserPassword", "User Password", 255));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FirstName", "First Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FirstName", "First Name", 500));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Surname", "Surname"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Surname", "Surname", 500));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Email", "Email"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Email", "Email", 255));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "AdminUsers"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"AdminUserID", "AdminRoleID", "SiteID", "UserName", "UserPassword", "FirstName", "Surname", "Email", "LoginAttempts", "LastAttemptDate", "Status"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdminUsersEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdminUsers) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdminUsers>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdminUsers);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdminUsers Entity 
		///</summary>
		protected virtual AdminUsers Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdminUsers copy = new AdminUsers();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdminUserId = this.AdminUserId;
				copy.AdminRoleId = this.AdminRoleId;
				copy.SiteId = this.SiteId;
				copy.UserName = this.UserName;
				copy.UserPassword = this.UserPassword;
				copy.FirstName = this.FirstName;
				copy.Surname = this.Surname;
				copy.Email = this.Email;
				copy.LoginAttempts = this.LoginAttempts;
				copy.LastAttemptDate = this.LastAttemptDate;
				copy.Status = this.Status;
			
			if (this.AdminRoleIdSource != null && existingCopies.Contains(this.AdminRoleIdSource))
				copy.AdminRoleIdSource = existingCopies[this.AdminRoleIdSource] as AdminRoles;
			else
				copy.AdminRoleIdSource = MakeCopyOf(this.AdminRoleIdSource, existingCopies) as AdminRoles;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				copy.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				copy.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
		
			//deep copy nested objects
			copy.SiteResourcesCollection = (TList<SiteResources>) MakeCopyOf(this.SiteResourcesCollection, existingCopies); 
			copy.GlobalSettingsCollection = (TList<GlobalSettings>) MakeCopyOf(this.GlobalSettingsCollection, existingCopies); 
			copy.EmailTemplatesCollection = (TList<EmailTemplates>) MakeCopyOf(this.EmailTemplatesCollection, existingCopies); 
			copy.JobsArchiveCollection = (TList<JobsArchive>) MakeCopyOf(this.JobsArchiveCollection, existingCopies); 
			copy.AvailableStatusCollection = (TList<AvailableStatus>) MakeCopyOf(this.AvailableStatusCollection, existingCopies); 
			copy.JobItemsTypeCollection = (TList<JobItemsType>) MakeCopyOf(this.JobItemsTypeCollection, existingCopies); 
			copy.SitesCollection = (TList<Sites>) MakeCopyOf(this.SitesCollection, existingCopies); 
			copy.NewsCollection = (TList<News>) MakeCopyOf(this.NewsCollection, existingCopies); 
			copy.MemberMembershipsCollection = (TList<MemberMemberships>) MakeCopyOf(this.MemberMembershipsCollection, existingCopies); 
			copy.JobTemplatesCollection = (TList<JobTemplates>) MakeCopyOf(this.JobTemplatesCollection, existingCopies); 
			copy.DefaultResourcesCollection = (TList<DefaultResources>) MakeCopyOf(this.DefaultResourcesCollection, existingCopies); 
			copy.JobsCollection = (TList<Jobs>) MakeCopyOf(this.JobsCollection, existingCopies); 
			copy.NewsCategoriesCollection = (TList<NewsCategories>) MakeCopyOf(this.NewsCategoriesCollection, existingCopies); 
			copy.EducationsCollection = (TList<Educations>) MakeCopyOf(this.EducationsCollection, existingCopies); 
			copy.DynamicPagesCollectionGetByLastModifiedBy = (TList<DynamicPages>) MakeCopyOf(this.DynamicPagesCollectionGetByLastModifiedBy, existingCopies); 
			copy.DynamicPageWebPartTemplatesCollection = (TList<DynamicPageWebPartTemplates>) MakeCopyOf(this.DynamicPageWebPartTemplatesCollection, existingCopies); 
			copy.MemberStatusCollection = (TList<MemberStatus>) MakeCopyOf(this.MemberStatusCollection, existingCopies); 
			copy.MemberWizardCollection = (TList<MemberWizard>) MakeCopyOf(this.MemberWizardCollection, existingCopies); 
			copy.DynamicPagesCollectionGetByLastModifiedBy = (TList<DynamicPages>) MakeCopyOf(this.DynamicPagesCollectionGetByLastModifiedBy, existingCopies); 
			copy.FilesCollection = (TList<Files>) MakeCopyOf(this.FilesCollection, existingCopies); 
			copy.AdvertisersCollection = (TList<Advertisers>) MakeCopyOf(this.AdvertisersCollection, existingCopies); 
			copy.AdvertiserUsersCollection = (TList<AdvertiserUsers>) MakeCopyOf(this.AdvertiserUsersCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdminUsers Entity 
		///</summary>
		public virtual AdminUsers Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdminUsers Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdminUsers DeepCopy()
		{
			return EntityHelper.Clone<AdminUsers>(this as AdminUsers);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdminUsersEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdminUsersEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdminUsersEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdminUsersColumn column)
		{
			switch(column)
			{
					case AdminUsersColumn.AdminUserId:
					return entityData.AdminUserId != _originalData.AdminUserId;
					case AdminUsersColumn.AdminRoleId:
					return entityData.AdminRoleId != _originalData.AdminRoleId;
					case AdminUsersColumn.SiteId:
					return entityData.SiteId != _originalData.SiteId;
					case AdminUsersColumn.UserName:
					return entityData.UserName != _originalData.UserName;
					case AdminUsersColumn.UserPassword:
					return entityData.UserPassword != _originalData.UserPassword;
					case AdminUsersColumn.FirstName:
					return entityData.FirstName != _originalData.FirstName;
					case AdminUsersColumn.Surname:
					return entityData.Surname != _originalData.Surname;
					case AdminUsersColumn.Email:
					return entityData.Email != _originalData.Email;
					case AdminUsersColumn.LoginAttempts:
					return entityData.LoginAttempts != _originalData.LoginAttempts;
					case AdminUsersColumn.LastAttemptDate:
					return entityData.LastAttemptDate != _originalData.LastAttemptDate;
					case AdminUsersColumn.Status:
					return entityData.Status != _originalData.Status;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdminUsersColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdminUserId != _originalData.AdminUserId;
			result = result || entityData.AdminRoleId != _originalData.AdminRoleId;
			result = result || entityData.SiteId != _originalData.SiteId;
			result = result || entityData.UserName != _originalData.UserName;
			result = result || entityData.UserPassword != _originalData.UserPassword;
			result = result || entityData.FirstName != _originalData.FirstName;
			result = result || entityData.Surname != _originalData.Surname;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.LoginAttempts != _originalData.LoginAttempts;
			result = result || entityData.LastAttemptDate != _originalData.LastAttemptDate;
			result = result || entityData.Status != _originalData.Status;
			return result;
		}	
		
		///<summary>
		///  Returns a AdminUsers Entity with the original data.
		///</summary>
		public AdminUsers GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdminUsers(
				_originalData.AdminRoleId,
				_originalData.SiteId,
				_originalData.UserName,
				_originalData.UserPassword,
				_originalData.FirstName,
				_originalData.Surname,
				_originalData.Email,
				_originalData.LoginAttempts,
				_originalData.LastAttemptDate,
				_originalData.Status
				);
				
			return (AdminUsers)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdminUsersBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdminUsersBase)
				return ValueEquals(this, (AdminUsersBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdminUsersBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdminUserId.GetHashCode() ^ 
					this.AdminRoleId.GetHashCode() ^ 
					this.SiteId.GetHashCode() ^ 
					this.UserName.GetHashCode() ^ 
					this.UserPassword.GetHashCode() ^ 
					this.FirstName.GetHashCode() ^ 
					this.Surname.GetHashCode() ^ 
					this.Email.GetHashCode() ^ 
					this.LoginAttempts.GetHashCode() ^ 
					((this.LastAttemptDate == null) ? string.Empty : this.LastAttemptDate.ToString()).GetHashCode() ^ 
					this.Status.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdminUsersBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdminUsersBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdminUsersBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdminUsersBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdminUsersBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdminUsersBase Object1, AdminUsersBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdminUserId != Object2.AdminUserId)
				equal = false;
			if (Object1.AdminRoleId != Object2.AdminRoleId)
				equal = false;
			if (Object1.SiteId != Object2.SiteId)
				equal = false;
			if (Object1.UserName != Object2.UserName)
				equal = false;
			if (Object1.UserPassword != Object2.UserPassword)
				equal = false;
			if (Object1.FirstName != Object2.FirstName)
				equal = false;
			if (Object1.Surname != Object2.Surname)
				equal = false;
			if (Object1.Email != Object2.Email)
				equal = false;
			if (Object1.LoginAttempts != Object2.LoginAttempts)
				equal = false;
			if ( Object1.LastAttemptDate != null && Object2.LastAttemptDate != null )
			{
				if (Object1.LastAttemptDate != Object2.LastAttemptDate)
					equal = false;
			}
			else if (Object1.LastAttemptDate == null ^ Object2.LastAttemptDate == null )
			{
				equal = false;
			}
			if (Object1.Status != Object2.Status)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdminUsersBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdminUsersComparer GetComparer()
        {
            return new AdminUsersComparer();
        }
        */

        // Comparer delegates back to AdminUsers
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdminUsers rhs, AdminUsersColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdminUsersColumn.AdminUserId:
            		return this.AdminUserId.CompareTo(rhs.AdminUserId);
            		
            		                 
            	
            	
            	case AdminUsersColumn.AdminRoleId:
            		return this.AdminRoleId.CompareTo(rhs.AdminRoleId);
            		
            		                 
            	
            	
            	case AdminUsersColumn.SiteId:
            		return this.SiteId.CompareTo(rhs.SiteId);
            		
            		                 
            	
            	
            	case AdminUsersColumn.UserName:
            		return this.UserName.CompareTo(rhs.UserName);
            		
            		                 
            	
            	
            	case AdminUsersColumn.UserPassword:
            		return this.UserPassword.CompareTo(rhs.UserPassword);
            		
            		                 
            	
            	
            	case AdminUsersColumn.FirstName:
            		return this.FirstName.CompareTo(rhs.FirstName);
            		
            		                 
            	
            	
            	case AdminUsersColumn.Surname:
            		return this.Surname.CompareTo(rhs.Surname);
            		
            		                 
            	
            	
            	case AdminUsersColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case AdminUsersColumn.LoginAttempts:
            		return this.LoginAttempts.CompareTo(rhs.LoginAttempts);
            		
            		                 
            	
            	
            	case AdminUsersColumn.LastAttemptDate:
            		return this.LastAttemptDate.Value.CompareTo(rhs.LastAttemptDate.Value);
            		
            		                 
            	
            	
            	case AdminUsersColumn.Status:
            		return this.Status.CompareTo(rhs.Status);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdminUsersKey> Members
		
		// member variable for the EntityId property
		private AdminUsersKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdminUsersKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdminUsersKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdminUsers")
					.Append("|").Append( this.AdminUserId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- AdminUserId: {0}{11}- AdminRoleId: {1}{11}- SiteId: {2}{11}- UserName: {3}{11}- UserPassword: {4}{11}- FirstName: {5}{11}- Surname: {6}{11}- Email: {7}{11}- LoginAttempts: {8}{11}- LastAttemptDate: {9}{11}- Status: {10}{11}{13}", 
				this.AdminUserId,
				this.AdminRoleId,
				this.SiteId,
				this.UserName,
				this.UserPassword,
				this.FirstName,
				this.Surname,
				this.Email,
				this.LoginAttempts,
				(this.LastAttemptDate == null) ? string.Empty : this.LastAttemptDate.ToString(),
				this.Status,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'AdminUsers' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdminUsersEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// AdminUserID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "AdminUsers"</remarks>
		public System.Int32 AdminUserId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// AdminRoleID : 
		/// </summary>
		public System.Int32		  AdminRoleId = (int)0;
		
		/// <summary>
		/// SiteID : 
		/// </summary>
		public System.Int32		  SiteId = (int)0;
		
		/// <summary>
		/// UserName : 
		/// </summary>
		public System.String		  UserName = string.Empty;
		
		/// <summary>
		/// UserPassword : 
		/// </summary>
		public System.String		  UserPassword = string.Empty;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		public System.String		  FirstName = string.Empty;
		
		/// <summary>
		/// Surname : 
		/// </summary>
		public System.String		  Surname = string.Empty;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public System.String		  Email = string.Empty;
		
		/// <summary>
		/// LoginAttempts : 
		/// </summary>
		public System.Int32		  LoginAttempts = (int)0;
		
		/// <summary>
		/// LastAttemptDate : 
		/// </summary>
		public System.DateTime?		  LastAttemptDate = null;
		
		/// <summary>
		/// Status : 
		/// </summary>
		public System.Int32		  Status = (int)0;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdminRoles _adminRoleIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdminRoles"/>.
		/// </summary>
		/// <value>The source AdminRoles for AdminRoleId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdminRoles AdminRoleIdSource
      	{
            get { return this._adminRoleIdSource; }
            set { this._adminRoleIdSource = value; }
      	}
		private Sites _siteIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Sites SiteIdSource
      	{
            get { return this._siteIdSource; }
            set { this._siteIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region SiteResourcesCollection
		
		private TList<SiteResources> _siteResourcesLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteResourcesLastModifiedBy
		/// </summary>
		
		public TList<SiteResources> SiteResourcesCollection
		{
			get
			{
				if (_siteResourcesLastModifiedBy == null)
				{
				_siteResourcesLastModifiedBy = new TList<SiteResources>();
				}
	
				return _siteResourcesLastModifiedBy;
			}
			set { _siteResourcesLastModifiedBy = value; }
		}
		
		#endregion

		#region GlobalSettingsCollection
		
		private TList<GlobalSettings> _globalSettingsLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _globalSettingsLastModifiedBy
		/// </summary>
		
		public TList<GlobalSettings> GlobalSettingsCollection
		{
			get
			{
				if (_globalSettingsLastModifiedBy == null)
				{
				_globalSettingsLastModifiedBy = new TList<GlobalSettings>();
				}
	
				return _globalSettingsLastModifiedBy;
			}
			set { _globalSettingsLastModifiedBy = value; }
		}
		
		#endregion

		#region EmailTemplatesCollection
		
		private TList<EmailTemplates> _emailTemplatesLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _emailTemplatesLastModifiedBy
		/// </summary>
		
		public TList<EmailTemplates> EmailTemplatesCollection
		{
			get
			{
				if (_emailTemplatesLastModifiedBy == null)
				{
				_emailTemplatesLastModifiedBy = new TList<EmailTemplates>();
				}
	
				return _emailTemplatesLastModifiedBy;
			}
			set { _emailTemplatesLastModifiedBy = value; }
		}
		
		#endregion

		#region JobsArchiveCollection
		
		private TList<JobsArchive> _jobsArchiveLastModifiedByAdminUserId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobsArchiveLastModifiedByAdminUserId
		/// </summary>
		
		public TList<JobsArchive> JobsArchiveCollection
		{
			get
			{
				if (_jobsArchiveLastModifiedByAdminUserId == null)
				{
				_jobsArchiveLastModifiedByAdminUserId = new TList<JobsArchive>();
				}
	
				return _jobsArchiveLastModifiedByAdminUserId;
			}
			set { _jobsArchiveLastModifiedByAdminUserId = value; }
		}
		
		#endregion

		#region AvailableStatusCollection
		
		private TList<AvailableStatus> _availableStatusLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _availableStatusLastModifiedBy
		/// </summary>
		
		public TList<AvailableStatus> AvailableStatusCollection
		{
			get
			{
				if (_availableStatusLastModifiedBy == null)
				{
				_availableStatusLastModifiedBy = new TList<AvailableStatus>();
				}
	
				return _availableStatusLastModifiedBy;
			}
			set { _availableStatusLastModifiedBy = value; }
		}
		
		#endregion

		#region JobItemsTypeCollection
		
		private TList<JobItemsType> _jobItemsTypeLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobItemsTypeLastModifiedBy
		/// </summary>
		
		public TList<JobItemsType> JobItemsTypeCollection
		{
			get
			{
				if (_jobItemsTypeLastModifiedBy == null)
				{
				_jobItemsTypeLastModifiedBy = new TList<JobItemsType>();
				}
	
				return _jobItemsTypeLastModifiedBy;
			}
			set { _jobItemsTypeLastModifiedBy = value; }
		}
		
		#endregion

		#region SitesCollection
		
		private TList<Sites> _sitesLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _sitesLastModifiedBy
		/// </summary>
		
		public TList<Sites> SitesCollection
		{
			get
			{
				if (_sitesLastModifiedBy == null)
				{
				_sitesLastModifiedBy = new TList<Sites>();
				}
	
				return _sitesLastModifiedBy;
			}
			set { _sitesLastModifiedBy = value; }
		}
		
		#endregion

		#region NewsCollection
		
		private TList<News> _newsLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _newsLastModifiedBy
		/// </summary>
		
		public TList<News> NewsCollection
		{
			get
			{
				if (_newsLastModifiedBy == null)
				{
				_newsLastModifiedBy = new TList<News>();
				}
	
				return _newsLastModifiedBy;
			}
			set { _newsLastModifiedBy = value; }
		}
		
		#endregion

		#region MemberMembershipsCollection
		
		private TList<MemberMemberships> _memberMembershipsLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _memberMembershipsLastModifiedBy
		/// </summary>
		
		public TList<MemberMemberships> MemberMembershipsCollection
		{
			get
			{
				if (_memberMembershipsLastModifiedBy == null)
				{
				_memberMembershipsLastModifiedBy = new TList<MemberMemberships>();
				}
	
				return _memberMembershipsLastModifiedBy;
			}
			set { _memberMembershipsLastModifiedBy = value; }
		}
		
		#endregion

		#region JobTemplatesCollection
		
		private TList<JobTemplates> _jobTemplatesLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobTemplatesLastModifiedBy
		/// </summary>
		
		public TList<JobTemplates> JobTemplatesCollection
		{
			get
			{
				if (_jobTemplatesLastModifiedBy == null)
				{
				_jobTemplatesLastModifiedBy = new TList<JobTemplates>();
				}
	
				return _jobTemplatesLastModifiedBy;
			}
			set { _jobTemplatesLastModifiedBy = value; }
		}
		
		#endregion

		#region DefaultResourcesCollection
		
		private TList<DefaultResources> _defaultResourcesLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _defaultResourcesLastModifiedBy
		/// </summary>
		
		public TList<DefaultResources> DefaultResourcesCollection
		{
			get
			{
				if (_defaultResourcesLastModifiedBy == null)
				{
				_defaultResourcesLastModifiedBy = new TList<DefaultResources>();
				}
	
				return _defaultResourcesLastModifiedBy;
			}
			set { _defaultResourcesLastModifiedBy = value; }
		}
		
		#endregion

		#region JobsCollection
		
		private TList<Jobs> _jobsLastModifiedByAdminUserId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobsLastModifiedByAdminUserId
		/// </summary>
		
		public TList<Jobs> JobsCollection
		{
			get
			{
				if (_jobsLastModifiedByAdminUserId == null)
				{
				_jobsLastModifiedByAdminUserId = new TList<Jobs>();
				}
	
				return _jobsLastModifiedByAdminUserId;
			}
			set { _jobsLastModifiedByAdminUserId = value; }
		}
		
		#endregion

		#region NewsCategoriesCollection
		
		private TList<NewsCategories> _newsCategoriesLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _newsCategoriesLastModifiedBy
		/// </summary>
		
		public TList<NewsCategories> NewsCategoriesCollection
		{
			get
			{
				if (_newsCategoriesLastModifiedBy == null)
				{
				_newsCategoriesLastModifiedBy = new TList<NewsCategories>();
				}
	
				return _newsCategoriesLastModifiedBy;
			}
			set { _newsCategoriesLastModifiedBy = value; }
		}
		
		#endregion

		#region EducationsCollection
		
		private TList<Educations> _educationsLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _educationsLastModifiedBy
		/// </summary>
		
		public TList<Educations> EducationsCollection
		{
			get
			{
				if (_educationsLastModifiedBy == null)
				{
				_educationsLastModifiedBy = new TList<Educations>();
				}
	
				return _educationsLastModifiedBy;
			}
			set { _educationsLastModifiedBy = value; }
		}
		
		#endregion

		#region DynamicPagesCollectionGetByLastModifiedBy
		
		private TList<DynamicPages> _dynamicPagesLastModifiedByGetByLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dynamicPagesLastModifiedByGetByLastModifiedBy
		/// </summary>
		
		public TList<DynamicPages> DynamicPagesCollectionGetByLastModifiedBy
		{
			get
			{
				if (_dynamicPagesLastModifiedByGetByLastModifiedBy == null)
				{
				_dynamicPagesLastModifiedByGetByLastModifiedBy = new TList<DynamicPages>();
				}
	
				return _dynamicPagesLastModifiedByGetByLastModifiedBy;
			}
			set { _dynamicPagesLastModifiedByGetByLastModifiedBy = value; }
		}
		
		#endregion

		#region DynamicPageWebPartTemplatesCollection
		
		private TList<DynamicPageWebPartTemplates> _dynamicPageWebPartTemplatesLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dynamicPageWebPartTemplatesLastModifiedBy
		/// </summary>
		
		public TList<DynamicPageWebPartTemplates> DynamicPageWebPartTemplatesCollection
		{
			get
			{
				if (_dynamicPageWebPartTemplatesLastModifiedBy == null)
				{
				_dynamicPageWebPartTemplatesLastModifiedBy = new TList<DynamicPageWebPartTemplates>();
				}
	
				return _dynamicPageWebPartTemplatesLastModifiedBy;
			}
			set { _dynamicPageWebPartTemplatesLastModifiedBy = value; }
		}
		
		#endregion

		#region MemberStatusCollection
		
		private TList<MemberStatus> _memberStatusLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _memberStatusLastModifiedBy
		/// </summary>
		
		public TList<MemberStatus> MemberStatusCollection
		{
			get
			{
				if (_memberStatusLastModifiedBy == null)
				{
				_memberStatusLastModifiedBy = new TList<MemberStatus>();
				}
	
				return _memberStatusLastModifiedBy;
			}
			set { _memberStatusLastModifiedBy = value; }
		}
		
		#endregion

		#region MemberWizardCollection
		
		private TList<MemberWizard> _memberWizardLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _memberWizardLastModifiedBy
		/// </summary>
		
		public TList<MemberWizard> MemberWizardCollection
		{
			get
			{
				if (_memberWizardLastModifiedBy == null)
				{
				_memberWizardLastModifiedBy = new TList<MemberWizard>();
				}
	
				return _memberWizardLastModifiedBy;
			}
			set { _memberWizardLastModifiedBy = value; }
		}
		
		#endregion

		#region DynamicPagesCollectionGetByLastModifiedBy
		

		#endregion

		#region FilesCollection
		
		private TList<Files> _filesLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _filesLastModifiedBy
		/// </summary>
		
		public TList<Files> FilesCollection
		{
			get
			{
				if (_filesLastModifiedBy == null)
				{
				_filesLastModifiedBy = new TList<Files>();
				}
	
				return _filesLastModifiedBy;
			}
			set { _filesLastModifiedBy = value; }
		}
		
		#endregion

		#region AdvertisersCollection
		
		private TList<Advertisers> _advertisersLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _advertisersLastModifiedBy
		/// </summary>
		
		public TList<Advertisers> AdvertisersCollection
		{
			get
			{
				if (_advertisersLastModifiedBy == null)
				{
				_advertisersLastModifiedBy = new TList<Advertisers>();
				}
	
				return _advertisersLastModifiedBy;
			}
			set { _advertisersLastModifiedBy = value; }
		}
		
		#endregion

		#region AdvertiserUsersCollection
		
		private TList<AdvertiserUsers> _advertiserUsersLastModifiedBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _advertiserUsersLastModifiedBy
		/// </summary>
		
		public TList<AdvertiserUsers> AdvertiserUsersCollection
		{
			get
			{
				if (_advertiserUsersLastModifiedBy == null)
				{
				_advertiserUsersLastModifiedBy = new TList<AdvertiserUsers>();
				}
	
				return _advertiserUsersLastModifiedBy;
			}
			set { _advertiserUsersLastModifiedBy = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdminUsersEntityData _tmp = new AdminUsersEntityData();
						
			_tmp.AdminUserId = this.AdminUserId;
			
			_tmp.AdminRoleId = this.AdminRoleId;
			_tmp.SiteId = this.SiteId;
			_tmp.UserName = this.UserName;
			_tmp.UserPassword = this.UserPassword;
			_tmp.FirstName = this.FirstName;
			_tmp.Surname = this.Surname;
			_tmp.Email = this.Email;
			_tmp.LoginAttempts = this.LoginAttempts;
			_tmp.LastAttemptDate = this.LastAttemptDate;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			if (this.AdminRoleIdSource != null)
				_tmp.AdminRoleIdSource = MakeCopyOf(this.AdminRoleIdSource) as AdminRoles;
			if (this.SiteIdSource != null)
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource) as Sites;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._siteResourcesLastModifiedBy != null)
				_tmp.SiteResourcesCollection = (TList<SiteResources>) MakeCopyOf(this.SiteResourcesCollection); 
			if (this._globalSettingsLastModifiedBy != null)
				_tmp.GlobalSettingsCollection = (TList<GlobalSettings>) MakeCopyOf(this.GlobalSettingsCollection); 
			if (this._emailTemplatesLastModifiedBy != null)
				_tmp.EmailTemplatesCollection = (TList<EmailTemplates>) MakeCopyOf(this.EmailTemplatesCollection); 
			if (this._jobsArchiveLastModifiedByAdminUserId != null)
				_tmp.JobsArchiveCollection = (TList<JobsArchive>) MakeCopyOf(this.JobsArchiveCollection); 
			if (this._availableStatusLastModifiedBy != null)
				_tmp.AvailableStatusCollection = (TList<AvailableStatus>) MakeCopyOf(this.AvailableStatusCollection); 
			if (this._jobItemsTypeLastModifiedBy != null)
				_tmp.JobItemsTypeCollection = (TList<JobItemsType>) MakeCopyOf(this.JobItemsTypeCollection); 
			if (this._sitesLastModifiedBy != null)
				_tmp.SitesCollection = (TList<Sites>) MakeCopyOf(this.SitesCollection); 
			if (this._newsLastModifiedBy != null)
				_tmp.NewsCollection = (TList<News>) MakeCopyOf(this.NewsCollection); 
			if (this._memberMembershipsLastModifiedBy != null)
				_tmp.MemberMembershipsCollection = (TList<MemberMemberships>) MakeCopyOf(this.MemberMembershipsCollection); 
			if (this._jobTemplatesLastModifiedBy != null)
				_tmp.JobTemplatesCollection = (TList<JobTemplates>) MakeCopyOf(this.JobTemplatesCollection); 
			if (this._defaultResourcesLastModifiedBy != null)
				_tmp.DefaultResourcesCollection = (TList<DefaultResources>) MakeCopyOf(this.DefaultResourcesCollection); 
			if (this._jobsLastModifiedByAdminUserId != null)
				_tmp.JobsCollection = (TList<Jobs>) MakeCopyOf(this.JobsCollection); 
			if (this._newsCategoriesLastModifiedBy != null)
				_tmp.NewsCategoriesCollection = (TList<NewsCategories>) MakeCopyOf(this.NewsCategoriesCollection); 
			if (this._educationsLastModifiedBy != null)
				_tmp.EducationsCollection = (TList<Educations>) MakeCopyOf(this.EducationsCollection); 
			if (this._dynamicPagesLastModifiedByGetByLastModifiedBy != null)
				_tmp.DynamicPagesCollectionGetByLastModifiedBy = (TList<DynamicPages>) MakeCopyOf(this.DynamicPagesCollectionGetByLastModifiedBy); 
			if (this._dynamicPageWebPartTemplatesLastModifiedBy != null)
				_tmp.DynamicPageWebPartTemplatesCollection = (TList<DynamicPageWebPartTemplates>) MakeCopyOf(this.DynamicPageWebPartTemplatesCollection); 
			if (this._memberStatusLastModifiedBy != null)
				_tmp.MemberStatusCollection = (TList<MemberStatus>) MakeCopyOf(this.MemberStatusCollection); 
			if (this._memberWizardLastModifiedBy != null)
				_tmp.MemberWizardCollection = (TList<MemberWizard>) MakeCopyOf(this.MemberWizardCollection); 
			if (this._dynamicPagesLastModifiedByGetByLastModifiedBy != null)
				_tmp.DynamicPagesCollectionGetByLastModifiedBy = (TList<DynamicPages>) MakeCopyOf(this.DynamicPagesCollectionGetByLastModifiedBy); 
			if (this._filesLastModifiedBy != null)
				_tmp.FilesCollection = (TList<Files>) MakeCopyOf(this.FilesCollection); 
			if (this._advertisersLastModifiedBy != null)
				_tmp.AdvertisersCollection = (TList<Advertisers>) MakeCopyOf(this.AdvertisersCollection); 
			if (this._advertiserUsersLastModifiedBy != null)
				_tmp.AdvertiserUsersCollection = (TList<AdvertiserUsers>) MakeCopyOf(this.AdvertiserUsersCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdminUsersEntityData _tmp = new AdminUsersEntityData();
						
			_tmp.AdminUserId = this.AdminUserId;
			
			_tmp.AdminRoleId = this.AdminRoleId;
			_tmp.SiteId = this.SiteId;
			_tmp.UserName = this.UserName;
			_tmp.UserPassword = this.UserPassword;
			_tmp.FirstName = this.FirstName;
			_tmp.Surname = this.Surname;
			_tmp.Email = this.Email;
			_tmp.LoginAttempts = this.LoginAttempts;
			_tmp.LastAttemptDate = this.LastAttemptDate;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			if (this.AdminRoleIdSource != null && existingCopies.Contains(this.AdminRoleIdSource))
				_tmp.AdminRoleIdSource = existingCopies[this.AdminRoleIdSource] as AdminRoles;
			else
				_tmp.AdminRoleIdSource = MakeCopyOf(this.AdminRoleIdSource, existingCopies) as AdminRoles;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				_tmp.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SiteResourcesCollection = (TList<SiteResources>) MakeCopyOf(this.SiteResourcesCollection, existingCopies); 
			_tmp.GlobalSettingsCollection = (TList<GlobalSettings>) MakeCopyOf(this.GlobalSettingsCollection, existingCopies); 
			_tmp.EmailTemplatesCollection = (TList<EmailTemplates>) MakeCopyOf(this.EmailTemplatesCollection, existingCopies); 
			_tmp.JobsArchiveCollection = (TList<JobsArchive>) MakeCopyOf(this.JobsArchiveCollection, existingCopies); 
			_tmp.AvailableStatusCollection = (TList<AvailableStatus>) MakeCopyOf(this.AvailableStatusCollection, existingCopies); 
			_tmp.JobItemsTypeCollection = (TList<JobItemsType>) MakeCopyOf(this.JobItemsTypeCollection, existingCopies); 
			_tmp.SitesCollection = (TList<Sites>) MakeCopyOf(this.SitesCollection, existingCopies); 
			_tmp.NewsCollection = (TList<News>) MakeCopyOf(this.NewsCollection, existingCopies); 
			_tmp.MemberMembershipsCollection = (TList<MemberMemberships>) MakeCopyOf(this.MemberMembershipsCollection, existingCopies); 
			_tmp.JobTemplatesCollection = (TList<JobTemplates>) MakeCopyOf(this.JobTemplatesCollection, existingCopies); 
			_tmp.DefaultResourcesCollection = (TList<DefaultResources>) MakeCopyOf(this.DefaultResourcesCollection, existingCopies); 
			_tmp.JobsCollection = (TList<Jobs>) MakeCopyOf(this.JobsCollection, existingCopies); 
			_tmp.NewsCategoriesCollection = (TList<NewsCategories>) MakeCopyOf(this.NewsCategoriesCollection, existingCopies); 
			_tmp.EducationsCollection = (TList<Educations>) MakeCopyOf(this.EducationsCollection, existingCopies); 
			_tmp.DynamicPagesCollectionGetByLastModifiedBy = (TList<DynamicPages>) MakeCopyOf(this.DynamicPagesCollectionGetByLastModifiedBy, existingCopies); 
			_tmp.DynamicPageWebPartTemplatesCollection = (TList<DynamicPageWebPartTemplates>) MakeCopyOf(this.DynamicPageWebPartTemplatesCollection, existingCopies); 
			_tmp.MemberStatusCollection = (TList<MemberStatus>) MakeCopyOf(this.MemberStatusCollection, existingCopies); 
			_tmp.MemberWizardCollection = (TList<MemberWizard>) MakeCopyOf(this.MemberWizardCollection, existingCopies); 
			_tmp.DynamicPagesCollectionGetByLastModifiedBy = (TList<DynamicPages>) MakeCopyOf(this.DynamicPagesCollectionGetByLastModifiedBy, existingCopies); 
			_tmp.FilesCollection = (TList<Files>) MakeCopyOf(this.FilesCollection, existingCopies); 
			_tmp.AdvertisersCollection = (TList<Advertisers>) MakeCopyOf(this.AdvertisersCollection, existingCopies); 
			_tmp.AdvertiserUsersCollection = (TList<AdvertiserUsers>) MakeCopyOf(this.AdvertiserUsersCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdminUsersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdminUsersColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdminUsersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdminUsersColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdminUsersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdminUsersColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdminUsersEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdminUsersEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdminUsersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdminUsersColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdminUsersEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdminUsersEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdminUsersEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdminUsers"/> object.
	/// </remarks>
	public class AdminUsersEventArgs : System.EventArgs
	{
		private AdminUsersColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdminUsersEventArgs class.
		///</summary>
		public AdminUsersEventArgs(AdminUsersColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdminUsersEventArgs class.
		///</summary>
		public AdminUsersEventArgs(AdminUsersColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdminUsersColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdminUsersColumn" />
		public AdminUsersColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdminUsers related events.
	///</summary>
	public delegate void AdminUsersEventHandler(object sender, AdminUsersEventArgs e);
	
	#region AdminUsersComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdminUsersComparer : System.Collections.Generic.IComparer<AdminUsers>
	{
		AdminUsersColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdminUsersComparer"/> class.
        /// </summary>
		public AdminUsersComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdminUsersComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdminUsersComparer(AdminUsersColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdminUsers"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdminUsers"/> to compare.</param>
        /// <param name="b">The second <c>AdminUsers</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdminUsers a, AdminUsers b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdminUsers entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdminUsers a, AdminUsers b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdminUsersColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdminUsersKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdminUsers"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdminUsersKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdminUsersKey class.
		/// </summary>
		public AdminUsersKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdminUsersKey class.
		/// </summary>
		public AdminUsersKey(AdminUsersBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdminUserId = entity.AdminUserId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdminUsersKey class.
		/// </summary>
		public AdminUsersKey(System.Int32 _adminUserId)
		{
			#region Init Properties

			this.AdminUserId = _adminUserId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdminUsersBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdminUsersBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdminUserId property
		private System.Int32 _adminUserId;
		
		/// <summary>
		/// Gets or sets the AdminUserId property.
		/// </summary>
		public System.Int32 AdminUserId
		{
			get { return _adminUserId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdminUserId = value;
				
				_adminUserId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdminUserId = ( values["AdminUserId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["AdminUserId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdminUserId", AdminUserId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdminUserId: {0}{1}",
								AdminUserId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdminUsersColumn Enum
	
	/// <summary>
	/// Enumerate the AdminUsers columns.
	/// </summary>
	[Serializable]
	public enum AdminUsersColumn : int
	{
		/// <summary>
		/// AdminUserId : 
		/// </summary>
		[EnumTextValue("AdminUserID")]
		[ColumnEnum("AdminUserID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		AdminUserId = 1,
		/// <summary>
		/// AdminRoleId : 
		/// </summary>
		[EnumTextValue("AdminRoleID")]
		[ColumnEnum("AdminRoleID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		AdminRoleId = 2,
		/// <summary>
		/// SiteId : 
		/// </summary>
		[EnumTextValue("SiteID")]
		[ColumnEnum("SiteID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteId = 3,
		/// <summary>
		/// UserName : 
		/// </summary>
		[EnumTextValue("UserName")]
		[ColumnEnum("UserName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		UserName = 4,
		/// <summary>
		/// UserPassword : 
		/// </summary>
		[EnumTextValue("UserPassword")]
		[ColumnEnum("UserPassword", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		UserPassword = 5,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("FirstName")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.String, false, false, false, 500)]
		FirstName = 6,
		/// <summary>
		/// Surname : 
		/// </summary>
		[EnumTextValue("Surname")]
		[ColumnEnum("Surname", typeof(System.String), System.Data.DbType.String, false, false, false, 500)]
		Surname = 7,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		Email = 8,
		/// <summary>
		/// LoginAttempts : 
		/// </summary>
		[EnumTextValue("LoginAttempts")]
		[ColumnEnum("LoginAttempts", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LoginAttempts = 9,
		/// <summary>
		/// LastAttemptDate : 
		/// </summary>
		[EnumTextValue("LastAttemptDate")]
		[ColumnEnum("LastAttemptDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastAttemptDate = 10,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Status = 11
	}//End enum

	#endregion AdminUsersColumn Enum

} // end namespace


/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CustomPayment.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'CustomPayment' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CustomPaymentBase : EntityBase, ICustomPayment, IEntityId<CustomPaymentKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CustomPaymentEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CustomPaymentEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CustomPaymentEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CustomPayment> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CustomPaymentEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CustomPaymentEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CustomPaymentBase"/> instance.
		///</summary>
		public CustomPaymentBase()
		{
			this.entityData = new CustomPaymentEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CustomPaymentBase"/> instance.
		///</summary>
		///<param name="_customPaymentGuid"></param>
		///<param name="_name"></param>
		///<param name="_emailAddress"></param>
		///<param name="_invoiceNumber"></param>
		///<param name="_amount"></param>
		///<param name="_comments"></param>
		///<param name="_createdDate"></param>
		///<param name="_ipAddress"></param>
		///<param name="_response"></param>
		///<param name="_securePay"></param>
		///<param name="_paypal"></param>
		///<param name="_paid"></param>
		///<param name="_paymentNameOnCard"></param>
		///<param name="_paymentCardNumber"></param>
		///<param name="_paymentCcv"></param>
		///<param name="_paymentExpiry"></param>
		///<param name="_paymentType"></param>
		///<param name="_siteId"></param>
		public CustomPaymentBase(System.Guid _customPaymentGuid, System.String _name, System.String _emailAddress, 
			System.String _invoiceNumber, System.Decimal _amount, System.String _comments, System.DateTime _createdDate, 
			System.String _ipAddress, System.String _response, System.Boolean _securePay, System.Boolean _paypal, 
			System.Boolean _paid, System.String _paymentNameOnCard, System.String _paymentCardNumber, 
			System.String _paymentCcv, System.String _paymentExpiry, System.String _paymentType, 
			System.Int32 _siteId)
		{
			this.entityData = new CustomPaymentEntityData();
			this.backupData = null;

			this.CustomPaymentGuid = _customPaymentGuid;
			this.Name = _name;
			this.EmailAddress = _emailAddress;
			this.InvoiceNumber = _invoiceNumber;
			this.Amount = _amount;
			this.Comments = _comments;
			this.CreatedDate = _createdDate;
			this.IpAddress = _ipAddress;
			this.Response = _response;
			this.SecurePay = _securePay;
			this.Paypal = _paypal;
			this.Paid = _paid;
			this.PaymentNameOnCard = _paymentNameOnCard;
			this.PaymentCardNumber = _paymentCardNumber;
			this.PaymentCcv = _paymentCcv;
			this.PaymentExpiry = _paymentExpiry;
			this.PaymentType = _paymentType;
			this.SiteId = _siteId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CustomPayment"/> instance.
		///</summary>
		///<param name="_customPaymentGuid"></param>
		///<param name="_name"></param>
		///<param name="_emailAddress"></param>
		///<param name="_invoiceNumber"></param>
		///<param name="_amount"></param>
		///<param name="_comments"></param>
		///<param name="_createdDate"></param>
		///<param name="_ipAddress"></param>
		///<param name="_response"></param>
		///<param name="_securePay"></param>
		///<param name="_paypal"></param>
		///<param name="_paid"></param>
		///<param name="_paymentNameOnCard"></param>
		///<param name="_paymentCardNumber"></param>
		///<param name="_paymentCcv"></param>
		///<param name="_paymentExpiry"></param>
		///<param name="_paymentType"></param>
		///<param name="_siteId"></param>
		public static CustomPayment CreateCustomPayment(System.Guid _customPaymentGuid, System.String _name, System.String _emailAddress, 
			System.String _invoiceNumber, System.Decimal _amount, System.String _comments, System.DateTime _createdDate, 
			System.String _ipAddress, System.String _response, System.Boolean _securePay, System.Boolean _paypal, 
			System.Boolean _paid, System.String _paymentNameOnCard, System.String _paymentCardNumber, 
			System.String _paymentCcv, System.String _paymentExpiry, System.String _paymentType, 
			System.Int32 _siteId)
		{
			CustomPayment newCustomPayment = new CustomPayment();
			newCustomPayment.CustomPaymentGuid = _customPaymentGuid;
			newCustomPayment.Name = _name;
			newCustomPayment.EmailAddress = _emailAddress;
			newCustomPayment.InvoiceNumber = _invoiceNumber;
			newCustomPayment.Amount = _amount;
			newCustomPayment.Comments = _comments;
			newCustomPayment.CreatedDate = _createdDate;
			newCustomPayment.IpAddress = _ipAddress;
			newCustomPayment.Response = _response;
			newCustomPayment.SecurePay = _securePay;
			newCustomPayment.Paypal = _paypal;
			newCustomPayment.Paid = _paid;
			newCustomPayment.PaymentNameOnCard = _paymentNameOnCard;
			newCustomPayment.PaymentCardNumber = _paymentCardNumber;
			newCustomPayment.PaymentCcv = _paymentCcv;
			newCustomPayment.PaymentExpiry = _paymentExpiry;
			newCustomPayment.PaymentType = _paymentType;
			newCustomPayment.SiteId = _siteId;
			return newCustomPayment;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CustomPaymentId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 CustomPaymentId
		{
			get
			{
				return this.entityData.CustomPaymentId; 
			}
			
			set
			{
				if (this.entityData.CustomPaymentId == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.CustomPaymentId, this.entityData.CustomPaymentId);
				this.entityData.CustomPaymentId = value;
				this.EntityId.CustomPaymentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.CustomPaymentId, this.entityData.CustomPaymentId);
				OnPropertyChanged("CustomPaymentId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomPaymentGuid property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Guid CustomPaymentGuid
		{
			get
			{
				return this.entityData.CustomPaymentGuid; 
			}
			
			set
			{
				if (this.entityData.CustomPaymentGuid == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.CustomPaymentGuid, this.entityData.CustomPaymentGuid);
				this.entityData.CustomPaymentGuid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.CustomPaymentGuid, this.entityData.CustomPaymentGuid);
				OnPropertyChanged("CustomPaymentGuid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 200)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailAddress property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String EmailAddress
		{
			get
			{
				return this.entityData.EmailAddress; 
			}
			
			set
			{
				if (this.entityData.EmailAddress == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.EmailAddress, this.entityData.EmailAddress);
				this.entityData.EmailAddress = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.EmailAddress, this.entityData.EmailAddress);
				OnPropertyChanged("EmailAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InvoiceNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String InvoiceNumber
		{
			get
			{
				return this.entityData.InvoiceNumber; 
			}
			
			set
			{
				if (this.entityData.InvoiceNumber == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.InvoiceNumber, this.entityData.InvoiceNumber);
				this.entityData.InvoiceNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.InvoiceNumber, this.entityData.InvoiceNumber);
				OnPropertyChanged("InvoiceNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Amount property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Amount
		{
			get
			{
				return this.entityData.Amount; 
			}
			
			set
			{
				if (this.entityData.Amount == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.Amount, this.entityData.Amount);
				this.entityData.Amount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.Amount, this.entityData.Amount);
				OnPropertyChanged("Amount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comments property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Comments
		{
			get
			{
				return this.entityData.Comments; 
			}
			
			set
			{
				if (this.entityData.Comments == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.Comments, this.entityData.Comments);
				this.entityData.Comments = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.Comments, this.entityData.Comments);
				OnPropertyChanged("Comments");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IpAddress property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String IpAddress
		{
			get
			{
				return this.entityData.IpAddress; 
			}
			
			set
			{
				if (this.entityData.IpAddress == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.IpAddress, this.entityData.IpAddress);
				this.entityData.IpAddress = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.IpAddress, this.entityData.IpAddress);
				OnPropertyChanged("IpAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Response property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Response
		{
			get
			{
				return this.entityData.Response; 
			}
			
			set
			{
				if (this.entityData.Response == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.Response, this.entityData.Response);
				this.entityData.Response = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.Response, this.entityData.Response);
				OnPropertyChanged("Response");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecurePay property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean SecurePay
		{
			get
			{
				return this.entityData.SecurePay; 
			}
			
			set
			{
				if (this.entityData.SecurePay == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.SecurePay, this.entityData.SecurePay);
				this.entityData.SecurePay = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.SecurePay, this.entityData.SecurePay);
				OnPropertyChanged("SecurePay");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Paypal property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Paypal
		{
			get
			{
				return this.entityData.Paypal; 
			}
			
			set
			{
				if (this.entityData.Paypal == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.Paypal, this.entityData.Paypal);
				this.entityData.Paypal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.Paypal, this.entityData.Paypal);
				OnPropertyChanged("Paypal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Paid property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Paid
		{
			get
			{
				return this.entityData.Paid; 
			}
			
			set
			{
				if (this.entityData.Paid == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.Paid, this.entityData.Paid);
				this.entityData.Paid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.Paid, this.entityData.Paid);
				OnPropertyChanged("Paid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaymentNameOnCard property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String PaymentNameOnCard
		{
			get
			{
				return this.entityData.PaymentNameOnCard; 
			}
			
			set
			{
				if (this.entityData.PaymentNameOnCard == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.PaymentNameOnCard, this.entityData.PaymentNameOnCard);
				this.entityData.PaymentNameOnCard = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.PaymentNameOnCard, this.entityData.PaymentNameOnCard);
				OnPropertyChanged("PaymentNameOnCard");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaymentCardNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String PaymentCardNumber
		{
			get
			{
				return this.entityData.PaymentCardNumber; 
			}
			
			set
			{
				if (this.entityData.PaymentCardNumber == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.PaymentCardNumber, this.entityData.PaymentCardNumber);
				this.entityData.PaymentCardNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.PaymentCardNumber, this.entityData.PaymentCardNumber);
				OnPropertyChanged("PaymentCardNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaymentCcv property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String PaymentCcv
		{
			get
			{
				return this.entityData.PaymentCcv; 
			}
			
			set
			{
				if (this.entityData.PaymentCcv == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.PaymentCcv, this.entityData.PaymentCcv);
				this.entityData.PaymentCcv = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.PaymentCcv, this.entityData.PaymentCcv);
				OnPropertyChanged("PaymentCcv");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaymentExpiry property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String PaymentExpiry
		{
			get
			{
				return this.entityData.PaymentExpiry; 
			}
			
			set
			{
				if (this.entityData.PaymentExpiry == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.PaymentExpiry, this.entityData.PaymentExpiry);
				this.entityData.PaymentExpiry = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.PaymentExpiry, this.entityData.PaymentExpiry);
				OnPropertyChanged("PaymentExpiry");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaymentType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String PaymentType
		{
			get
			{
				return this.entityData.PaymentType; 
			}
			
			set
			{
				if (this.entityData.PaymentType == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.PaymentType, this.entityData.PaymentType);
				this.entityData.PaymentType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.PaymentType, this.entityData.PaymentType);
				OnPropertyChanged("PaymentType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SiteId
		{
			get
			{
				return this.entityData.SiteId; 
			}
			
			set
			{
				if (this.entityData.SiteId == value)
					return;
					
				OnColumnChanging(CustomPaymentColumn.SiteId, this.entityData.SiteId);
				this.entityData.SiteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomPaymentColumn.SiteId, this.entityData.SiteId);
				OnPropertyChanged("SiteId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Sites SiteIdSource
      	{
            get { return entityData.SiteIdSource; }
            set { entityData.SiteIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Name", "Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Name", "Name", 200));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("EmailAddress", "Email Address"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmailAddress", "Email Address", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("InvoiceNumber", "Invoice Number"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("InvoiceNumber", "Invoice Number", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("IpAddress", "Ip Address", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PaymentNameOnCard", "Payment Name On Card", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PaymentCardNumber", "Payment Card Number", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PaymentCcv", "Payment Ccv", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PaymentExpiry", "Payment Expiry", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PaymentType", "Payment Type", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CustomPayment"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CustomPaymentID", "CustomPaymentGuid", "Name", "EmailAddress", "InvoiceNumber", "Amount", "Comments", "CreatedDate", "IpAddress", "Response", "SecurePay", "Paypal", "Paid", "PaymentNameOnCard", "PaymentCardNumber", "PaymentCCV", "PaymentExpiry", "PaymentType", "SiteID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CustomPaymentEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CustomPayment) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CustomPayment>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CustomPayment);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CustomPayment Entity 
		///</summary>
		protected virtual CustomPayment Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CustomPayment copy = new CustomPayment();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.CustomPaymentId = this.CustomPaymentId;
				copy.CustomPaymentGuid = this.CustomPaymentGuid;
				copy.Name = this.Name;
				copy.EmailAddress = this.EmailAddress;
				copy.InvoiceNumber = this.InvoiceNumber;
				copy.Amount = this.Amount;
				copy.Comments = this.Comments;
				copy.CreatedDate = this.CreatedDate;
				copy.IpAddress = this.IpAddress;
				copy.Response = this.Response;
				copy.SecurePay = this.SecurePay;
				copy.Paypal = this.Paypal;
				copy.Paid = this.Paid;
				copy.PaymentNameOnCard = this.PaymentNameOnCard;
				copy.PaymentCardNumber = this.PaymentCardNumber;
				copy.PaymentCcv = this.PaymentCcv;
				copy.PaymentExpiry = this.PaymentExpiry;
				copy.PaymentType = this.PaymentType;
				copy.SiteId = this.SiteId;
			
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				copy.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				copy.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CustomPayment Entity 
		///</summary>
		public virtual CustomPayment Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CustomPayment Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CustomPayment DeepCopy()
		{
			return EntityHelper.Clone<CustomPayment>(this as CustomPayment);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CustomPaymentEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CustomPaymentEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CustomPaymentEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CustomPaymentColumn column)
		{
			switch(column)
			{
					case CustomPaymentColumn.CustomPaymentId:
					return entityData.CustomPaymentId != _originalData.CustomPaymentId;
					case CustomPaymentColumn.CustomPaymentGuid:
					return entityData.CustomPaymentGuid != _originalData.CustomPaymentGuid;
					case CustomPaymentColumn.Name:
					return entityData.Name != _originalData.Name;
					case CustomPaymentColumn.EmailAddress:
					return entityData.EmailAddress != _originalData.EmailAddress;
					case CustomPaymentColumn.InvoiceNumber:
					return entityData.InvoiceNumber != _originalData.InvoiceNumber;
					case CustomPaymentColumn.Amount:
					return entityData.Amount != _originalData.Amount;
					case CustomPaymentColumn.Comments:
					return entityData.Comments != _originalData.Comments;
					case CustomPaymentColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case CustomPaymentColumn.IpAddress:
					return entityData.IpAddress != _originalData.IpAddress;
					case CustomPaymentColumn.Response:
					return entityData.Response != _originalData.Response;
					case CustomPaymentColumn.SecurePay:
					return entityData.SecurePay != _originalData.SecurePay;
					case CustomPaymentColumn.Paypal:
					return entityData.Paypal != _originalData.Paypal;
					case CustomPaymentColumn.Paid:
					return entityData.Paid != _originalData.Paid;
					case CustomPaymentColumn.PaymentNameOnCard:
					return entityData.PaymentNameOnCard != _originalData.PaymentNameOnCard;
					case CustomPaymentColumn.PaymentCardNumber:
					return entityData.PaymentCardNumber != _originalData.PaymentCardNumber;
					case CustomPaymentColumn.PaymentCcv:
					return entityData.PaymentCcv != _originalData.PaymentCcv;
					case CustomPaymentColumn.PaymentExpiry:
					return entityData.PaymentExpiry != _originalData.PaymentExpiry;
					case CustomPaymentColumn.PaymentType:
					return entityData.PaymentType != _originalData.PaymentType;
					case CustomPaymentColumn.SiteId:
					return entityData.SiteId != _originalData.SiteId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CustomPaymentColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CustomPaymentId != _originalData.CustomPaymentId;
			result = result || entityData.CustomPaymentGuid != _originalData.CustomPaymentGuid;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.EmailAddress != _originalData.EmailAddress;
			result = result || entityData.InvoiceNumber != _originalData.InvoiceNumber;
			result = result || entityData.Amount != _originalData.Amount;
			result = result || entityData.Comments != _originalData.Comments;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.IpAddress != _originalData.IpAddress;
			result = result || entityData.Response != _originalData.Response;
			result = result || entityData.SecurePay != _originalData.SecurePay;
			result = result || entityData.Paypal != _originalData.Paypal;
			result = result || entityData.Paid != _originalData.Paid;
			result = result || entityData.PaymentNameOnCard != _originalData.PaymentNameOnCard;
			result = result || entityData.PaymentCardNumber != _originalData.PaymentCardNumber;
			result = result || entityData.PaymentCcv != _originalData.PaymentCcv;
			result = result || entityData.PaymentExpiry != _originalData.PaymentExpiry;
			result = result || entityData.PaymentType != _originalData.PaymentType;
			result = result || entityData.SiteId != _originalData.SiteId;
			return result;
		}	
		
		///<summary>
		///  Returns a CustomPayment Entity with the original data.
		///</summary>
		public CustomPayment GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCustomPayment(
				_originalData.CustomPaymentGuid,
				_originalData.Name,
				_originalData.EmailAddress,
				_originalData.InvoiceNumber,
				_originalData.Amount,
				_originalData.Comments,
				_originalData.CreatedDate,
				_originalData.IpAddress,
				_originalData.Response,
				_originalData.SecurePay,
				_originalData.Paypal,
				_originalData.Paid,
				_originalData.PaymentNameOnCard,
				_originalData.PaymentCardNumber,
				_originalData.PaymentCcv,
				_originalData.PaymentExpiry,
				_originalData.PaymentType,
				_originalData.SiteId
				);
				
			return (CustomPayment)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CustomPaymentBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CustomPaymentBase)
				return ValueEquals(this, (CustomPaymentBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CustomPaymentBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.CustomPaymentId.GetHashCode() ^ 
					this.CustomPaymentGuid.GetHashCode() ^ 
					this.Name.GetHashCode() ^ 
					this.EmailAddress.GetHashCode() ^ 
					this.InvoiceNumber.GetHashCode() ^ 
					this.Amount.GetHashCode() ^ 
					((this.Comments == null) ? string.Empty : this.Comments.ToString()).GetHashCode() ^ 
					this.CreatedDate.GetHashCode() ^ 
					((this.IpAddress == null) ? string.Empty : this.IpAddress.ToString()).GetHashCode() ^ 
					((this.Response == null) ? string.Empty : this.Response.ToString()).GetHashCode() ^ 
					this.SecurePay.GetHashCode() ^ 
					this.Paypal.GetHashCode() ^ 
					this.Paid.GetHashCode() ^ 
					((this.PaymentNameOnCard == null) ? string.Empty : this.PaymentNameOnCard.ToString()).GetHashCode() ^ 
					((this.PaymentCardNumber == null) ? string.Empty : this.PaymentCardNumber.ToString()).GetHashCode() ^ 
					((this.PaymentCcv == null) ? string.Empty : this.PaymentCcv.ToString()).GetHashCode() ^ 
					((this.PaymentExpiry == null) ? string.Empty : this.PaymentExpiry.ToString()).GetHashCode() ^ 
					((this.PaymentType == null) ? string.Empty : this.PaymentType.ToString()).GetHashCode() ^ 
					this.SiteId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CustomPaymentBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CustomPaymentBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CustomPaymentBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CustomPaymentBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CustomPaymentBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CustomPaymentBase Object1, CustomPaymentBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CustomPaymentId != Object2.CustomPaymentId)
				equal = false;
			if (Object1.CustomPaymentGuid != Object2.CustomPaymentGuid)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if (Object1.EmailAddress != Object2.EmailAddress)
				equal = false;
			if (Object1.InvoiceNumber != Object2.InvoiceNumber)
				equal = false;
			if (Object1.Amount != Object2.Amount)
				equal = false;
			if ( Object1.Comments != null && Object2.Comments != null )
			{
				if (Object1.Comments != Object2.Comments)
					equal = false;
			}
			else if (Object1.Comments == null ^ Object2.Comments == null )
			{
				equal = false;
			}
			if (Object1.CreatedDate != Object2.CreatedDate)
				equal = false;
			if ( Object1.IpAddress != null && Object2.IpAddress != null )
			{
				if (Object1.IpAddress != Object2.IpAddress)
					equal = false;
			}
			else if (Object1.IpAddress == null ^ Object2.IpAddress == null )
			{
				equal = false;
			}
			if ( Object1.Response != null && Object2.Response != null )
			{
				if (Object1.Response != Object2.Response)
					equal = false;
			}
			else if (Object1.Response == null ^ Object2.Response == null )
			{
				equal = false;
			}
			if (Object1.SecurePay != Object2.SecurePay)
				equal = false;
			if (Object1.Paypal != Object2.Paypal)
				equal = false;
			if (Object1.Paid != Object2.Paid)
				equal = false;
			if ( Object1.PaymentNameOnCard != null && Object2.PaymentNameOnCard != null )
			{
				if (Object1.PaymentNameOnCard != Object2.PaymentNameOnCard)
					equal = false;
			}
			else if (Object1.PaymentNameOnCard == null ^ Object2.PaymentNameOnCard == null )
			{
				equal = false;
			}
			if ( Object1.PaymentCardNumber != null && Object2.PaymentCardNumber != null )
			{
				if (Object1.PaymentCardNumber != Object2.PaymentCardNumber)
					equal = false;
			}
			else if (Object1.PaymentCardNumber == null ^ Object2.PaymentCardNumber == null )
			{
				equal = false;
			}
			if ( Object1.PaymentCcv != null && Object2.PaymentCcv != null )
			{
				if (Object1.PaymentCcv != Object2.PaymentCcv)
					equal = false;
			}
			else if (Object1.PaymentCcv == null ^ Object2.PaymentCcv == null )
			{
				equal = false;
			}
			if ( Object1.PaymentExpiry != null && Object2.PaymentExpiry != null )
			{
				if (Object1.PaymentExpiry != Object2.PaymentExpiry)
					equal = false;
			}
			else if (Object1.PaymentExpiry == null ^ Object2.PaymentExpiry == null )
			{
				equal = false;
			}
			if ( Object1.PaymentType != null && Object2.PaymentType != null )
			{
				if (Object1.PaymentType != Object2.PaymentType)
					equal = false;
			}
			else if (Object1.PaymentType == null ^ Object2.PaymentType == null )
			{
				equal = false;
			}
			if (Object1.SiteId != Object2.SiteId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CustomPaymentBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CustomPaymentComparer GetComparer()
        {
            return new CustomPaymentComparer();
        }
        */

        // Comparer delegates back to CustomPayment
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CustomPayment rhs, CustomPaymentColumn which)
        {
            switch (which)
            {
            	
            	
            	case CustomPaymentColumn.CustomPaymentId:
            		return this.CustomPaymentId.CompareTo(rhs.CustomPaymentId);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.CustomPaymentGuid:
            		return this.CustomPaymentGuid.CompareTo(rhs.CustomPaymentGuid);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.EmailAddress:
            		return this.EmailAddress.CompareTo(rhs.EmailAddress);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.InvoiceNumber:
            		return this.InvoiceNumber.CompareTo(rhs.InvoiceNumber);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.Amount:
            		return this.Amount.CompareTo(rhs.Amount);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.Comments:
            		return this.Comments.CompareTo(rhs.Comments);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.CreatedDate:
            		return this.CreatedDate.CompareTo(rhs.CreatedDate);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.IpAddress:
            		return this.IpAddress.CompareTo(rhs.IpAddress);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.Response:
            		return this.Response.CompareTo(rhs.Response);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.SecurePay:
            		return this.SecurePay.CompareTo(rhs.SecurePay);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.Paypal:
            		return this.Paypal.CompareTo(rhs.Paypal);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.Paid:
            		return this.Paid.CompareTo(rhs.Paid);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.PaymentNameOnCard:
            		return this.PaymentNameOnCard.CompareTo(rhs.PaymentNameOnCard);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.PaymentCardNumber:
            		return this.PaymentCardNumber.CompareTo(rhs.PaymentCardNumber);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.PaymentCcv:
            		return this.PaymentCcv.CompareTo(rhs.PaymentCcv);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.PaymentExpiry:
            		return this.PaymentExpiry.CompareTo(rhs.PaymentExpiry);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.PaymentType:
            		return this.PaymentType.CompareTo(rhs.PaymentType);
            		
            		                 
            	
            	
            	case CustomPaymentColumn.SiteId:
            		return this.SiteId.CompareTo(rhs.SiteId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CustomPaymentKey> Members
		
		// member variable for the EntityId property
		private CustomPaymentKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CustomPaymentKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CustomPaymentKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CustomPayment")
					.Append("|").Append( this.CustomPaymentId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- CustomPaymentId: {0}{19}- CustomPaymentGuid: {1}{19}- Name: {2}{19}- EmailAddress: {3}{19}- InvoiceNumber: {4}{19}- Amount: {5}{19}- Comments: {6}{19}- CreatedDate: {7}{19}- IpAddress: {8}{19}- Response: {9}{19}- SecurePay: {10}{19}- Paypal: {11}{19}- Paid: {12}{19}- PaymentNameOnCard: {13}{19}- PaymentCardNumber: {14}{19}- PaymentCcv: {15}{19}- PaymentExpiry: {16}{19}- PaymentType: {17}{19}- SiteId: {18}{19}{21}", 
				this.CustomPaymentId,
				this.CustomPaymentGuid,
				this.Name,
				this.EmailAddress,
				this.InvoiceNumber,
				this.Amount,
				(this.Comments == null) ? string.Empty : this.Comments.ToString(),
				this.CreatedDate,
				(this.IpAddress == null) ? string.Empty : this.IpAddress.ToString(),
				(this.Response == null) ? string.Empty : this.Response.ToString(),
				this.SecurePay,
				this.Paypal,
				this.Paid,
				(this.PaymentNameOnCard == null) ? string.Empty : this.PaymentNameOnCard.ToString(),
				(this.PaymentCardNumber == null) ? string.Empty : this.PaymentCardNumber.ToString(),
				(this.PaymentCcv == null) ? string.Empty : this.PaymentCcv.ToString(),
				(this.PaymentExpiry == null) ? string.Empty : this.PaymentExpiry.ToString(),
				(this.PaymentType == null) ? string.Empty : this.PaymentType.ToString(),
				this.SiteId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CustomPayment' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CustomPaymentEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// CustomPaymentID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CustomPayment"</remarks>
		public System.Int32 CustomPaymentId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// CustomPaymentGuid : 
		/// </summary>
		public System.Guid		  CustomPaymentGuid = Guid.Empty;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// EmailAddress : 
		/// </summary>
		public System.String		  EmailAddress = string.Empty;
		
		/// <summary>
		/// InvoiceNumber : 
		/// </summary>
		public System.String		  InvoiceNumber = string.Empty;
		
		/// <summary>
		/// Amount : 
		/// </summary>
		public System.Decimal		  Amount = 0.0m;
		
		/// <summary>
		/// Comments : 
		/// </summary>
		public System.String		  Comments = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime		  CreatedDate = DateTime.MinValue;
		
		/// <summary>
		/// IpAddress : 
		/// </summary>
		public System.String		  IpAddress = null;
		
		/// <summary>
		/// Response : 
		/// </summary>
		public System.String		  Response = null;
		
		/// <summary>
		/// SecurePay : 
		/// </summary>
		public System.Boolean		  SecurePay = false;
		
		/// <summary>
		/// Paypal : 
		/// </summary>
		public System.Boolean		  Paypal = false;
		
		/// <summary>
		/// Paid : 
		/// </summary>
		public System.Boolean		  Paid = false;
		
		/// <summary>
		/// PaymentNameOnCard : 
		/// </summary>
		public System.String		  PaymentNameOnCard = null;
		
		/// <summary>
		/// PaymentCardNumber : 
		/// </summary>
		public System.String		  PaymentCardNumber = null;
		
		/// <summary>
		/// PaymentCCV : 
		/// </summary>
		public System.String		  PaymentCcv = null;
		
		/// <summary>
		/// PaymentExpiry : 
		/// </summary>
		public System.String		  PaymentExpiry = null;
		
		/// <summary>
		/// PaymentType : 
		/// </summary>
		public System.String		  PaymentType = null;
		
		/// <summary>
		/// SiteID : 
		/// </summary>
		public System.Int32		  SiteId = (int)0;
		#endregion
			
		#region Source Foreign Key Property
				
		private Sites _siteIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Sites SiteIdSource
      	{
            get { return this._siteIdSource; }
            set { this._siteIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CustomPaymentEntityData _tmp = new CustomPaymentEntityData();
						
			_tmp.CustomPaymentId = this.CustomPaymentId;
			
			_tmp.CustomPaymentGuid = this.CustomPaymentGuid;
			_tmp.Name = this.Name;
			_tmp.EmailAddress = this.EmailAddress;
			_tmp.InvoiceNumber = this.InvoiceNumber;
			_tmp.Amount = this.Amount;
			_tmp.Comments = this.Comments;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.IpAddress = this.IpAddress;
			_tmp.Response = this.Response;
			_tmp.SecurePay = this.SecurePay;
			_tmp.Paypal = this.Paypal;
			_tmp.Paid = this.Paid;
			_tmp.PaymentNameOnCard = this.PaymentNameOnCard;
			_tmp.PaymentCardNumber = this.PaymentCardNumber;
			_tmp.PaymentCcv = this.PaymentCcv;
			_tmp.PaymentExpiry = this.PaymentExpiry;
			_tmp.PaymentType = this.PaymentType;
			_tmp.SiteId = this.SiteId;
			
			#region Source Parent Composite Entities
			if (this.SiteIdSource != null)
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource) as Sites;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CustomPaymentEntityData _tmp = new CustomPaymentEntityData();
						
			_tmp.CustomPaymentId = this.CustomPaymentId;
			
			_tmp.CustomPaymentGuid = this.CustomPaymentGuid;
			_tmp.Name = this.Name;
			_tmp.EmailAddress = this.EmailAddress;
			_tmp.InvoiceNumber = this.InvoiceNumber;
			_tmp.Amount = this.Amount;
			_tmp.Comments = this.Comments;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.IpAddress = this.IpAddress;
			_tmp.Response = this.Response;
			_tmp.SecurePay = this.SecurePay;
			_tmp.Paypal = this.Paypal;
			_tmp.Paid = this.Paid;
			_tmp.PaymentNameOnCard = this.PaymentNameOnCard;
			_tmp.PaymentCardNumber = this.PaymentCardNumber;
			_tmp.PaymentCcv = this.PaymentCcv;
			_tmp.PaymentExpiry = this.PaymentExpiry;
			_tmp.PaymentType = this.PaymentType;
			_tmp.SiteId = this.SiteId;
			
			#region Source Parent Composite Entities
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				_tmp.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomPaymentColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CustomPaymentColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomPaymentColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CustomPaymentColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomPaymentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CustomPaymentColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CustomPaymentEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CustomPaymentEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomPaymentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CustomPaymentColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CustomPaymentEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CustomPaymentEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CustomPaymentEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CustomPayment"/> object.
	/// </remarks>
	public class CustomPaymentEventArgs : System.EventArgs
	{
		private CustomPaymentColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CustomPaymentEventArgs class.
		///</summary>
		public CustomPaymentEventArgs(CustomPaymentColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CustomPaymentEventArgs class.
		///</summary>
		public CustomPaymentEventArgs(CustomPaymentColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CustomPaymentColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CustomPaymentColumn" />
		public CustomPaymentColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CustomPayment related events.
	///</summary>
	public delegate void CustomPaymentEventHandler(object sender, CustomPaymentEventArgs e);
	
	#region CustomPaymentComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CustomPaymentComparer : System.Collections.Generic.IComparer<CustomPayment>
	{
		CustomPaymentColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CustomPaymentComparer"/> class.
        /// </summary>
		public CustomPaymentComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CustomPaymentComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CustomPaymentComparer(CustomPaymentColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CustomPayment"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CustomPayment"/> to compare.</param>
        /// <param name="b">The second <c>CustomPayment</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CustomPayment a, CustomPayment b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CustomPayment entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CustomPayment a, CustomPayment b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CustomPaymentColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CustomPaymentKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CustomPayment"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CustomPaymentKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CustomPaymentKey class.
		/// </summary>
		public CustomPaymentKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomPaymentKey class.
		/// </summary>
		public CustomPaymentKey(CustomPaymentBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.CustomPaymentId = entity.CustomPaymentId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomPaymentKey class.
		/// </summary>
		public CustomPaymentKey(System.Int32 _customPaymentId)
		{
			#region Init Properties

			this.CustomPaymentId = _customPaymentId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CustomPaymentBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CustomPaymentBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CustomPaymentId property
		private System.Int32 _customPaymentId;
		
		/// <summary>
		/// Gets or sets the CustomPaymentId property.
		/// </summary>
		public System.Int32 CustomPaymentId
		{
			get { return _customPaymentId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CustomPaymentId = value;
				
				_customPaymentId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CustomPaymentId = ( values["CustomPaymentId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["CustomPaymentId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CustomPaymentId", CustomPaymentId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CustomPaymentId: {0}{1}",
								CustomPaymentId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CustomPaymentColumn Enum
	
	/// <summary>
	/// Enumerate the CustomPayment columns.
	/// </summary>
	[Serializable]
	public enum CustomPaymentColumn : int
	{
		/// <summary>
		/// CustomPaymentId : 
		/// </summary>
		[EnumTextValue("CustomPaymentID")]
		[ColumnEnum("CustomPaymentID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		CustomPaymentId = 1,
		/// <summary>
		/// CustomPaymentGuid : 
		/// </summary>
		[EnumTextValue("CustomPaymentGuid")]
		[ColumnEnum("CustomPaymentGuid", typeof(System.Guid), System.Data.DbType.Guid, false, false, false)]
		CustomPaymentGuid = 2,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false, 200)]
		Name = 3,
		/// <summary>
		/// EmailAddress : 
		/// </summary>
		[EnumTextValue("EmailAddress")]
		[ColumnEnum("EmailAddress", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		EmailAddress = 4,
		/// <summary>
		/// InvoiceNumber : 
		/// </summary>
		[EnumTextValue("InvoiceNumber")]
		[ColumnEnum("InvoiceNumber", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		InvoiceNumber = 5,
		/// <summary>
		/// Amount : 
		/// </summary>
		[EnumTextValue("Amount")]
		[ColumnEnum("Amount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Amount = 6,
		/// <summary>
		/// Comments : 
		/// </summary>
		[EnumTextValue("Comments")]
		[ColumnEnum("Comments", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Comments = 7,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreatedDate = 8,
		/// <summary>
		/// IpAddress : 
		/// </summary>
		[EnumTextValue("IpAddress")]
		[ColumnEnum("IpAddress", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		IpAddress = 9,
		/// <summary>
		/// Response : 
		/// </summary>
		[EnumTextValue("Response")]
		[ColumnEnum("Response", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Response = 10,
		/// <summary>
		/// SecurePay : 
		/// </summary>
		[EnumTextValue("SecurePay")]
		[ColumnEnum("SecurePay", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		SecurePay = 11,
		/// <summary>
		/// Paypal : 
		/// </summary>
		[EnumTextValue("Paypal")]
		[ColumnEnum("Paypal", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Paypal = 12,
		/// <summary>
		/// Paid : 
		/// </summary>
		[EnumTextValue("Paid")]
		[ColumnEnum("Paid", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Paid = 13,
		/// <summary>
		/// PaymentNameOnCard : 
		/// </summary>
		[EnumTextValue("PaymentNameOnCard")]
		[ColumnEnum("PaymentNameOnCard", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		PaymentNameOnCard = 14,
		/// <summary>
		/// PaymentCardNumber : 
		/// </summary>
		[EnumTextValue("PaymentCardNumber")]
		[ColumnEnum("PaymentCardNumber", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		PaymentCardNumber = 15,
		/// <summary>
		/// PaymentCcv : 
		/// </summary>
		[EnumTextValue("PaymentCCV")]
		[ColumnEnum("PaymentCCV", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		PaymentCcv = 16,
		/// <summary>
		/// PaymentExpiry : 
		/// </summary>
		[EnumTextValue("PaymentExpiry")]
		[ColumnEnum("PaymentExpiry", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		PaymentExpiry = 17,
		/// <summary>
		/// PaymentType : 
		/// </summary>
		[EnumTextValue("PaymentType")]
		[ColumnEnum("PaymentType", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		PaymentType = 18,
		/// <summary>
		/// SiteId : 
		/// </summary>
		[EnumTextValue("SiteID")]
		[ColumnEnum("SiteID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteId = 19
	}//End enum

	#endregion CustomPaymentColumn Enum

} // end namespace


/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CustomWidgetCssSelector.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'CustomWidgetCSSSelector' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CustomWidgetCssSelectorBase : EntityBase, ICustomWidgetCssSelector, IEntityId<CustomWidgetCssSelectorKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CustomWidgetCssSelectorEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CustomWidgetCssSelectorEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CustomWidgetCssSelectorEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CustomWidgetCssSelector> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CustomWidgetCssSelectorEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CustomWidgetCssSelectorEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CustomWidgetCssSelectorBase"/> instance.
		///</summary>
		public CustomWidgetCssSelectorBase()
		{
			this.entityData = new CustomWidgetCssSelectorEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CustomWidgetCssSelectorBase"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_customWidgetCssSelectorName"></param>
		///<param name="_customWidgetCssSelectorClassName"></param>
		///<param name="_active"></param>
		///<param name="_modifiedDate"></param>
		///<param name="_modifiedBy"></param>
		///<param name="_sourceId"></param>
		public CustomWidgetCssSelectorBase(System.Int32 _siteId, System.String _customWidgetCssSelectorName, 
			System.String _customWidgetCssSelectorClassName, System.Boolean _active, System.DateTime _modifiedDate, 
			System.Int32 _modifiedBy, System.Int32? _sourceId)
		{
			this.entityData = new CustomWidgetCssSelectorEntityData();
			this.backupData = null;

			this.SiteId = _siteId;
			this.CustomWidgetCssSelectorName = _customWidgetCssSelectorName;
			this.CustomWidgetCssSelectorClassName = _customWidgetCssSelectorClassName;
			this.Active = _active;
			this.ModifiedDate = _modifiedDate;
			this.ModifiedBy = _modifiedBy;
			this.SourceId = _sourceId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CustomWidgetCssSelector"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_customWidgetCssSelectorName"></param>
		///<param name="_customWidgetCssSelectorClassName"></param>
		///<param name="_active"></param>
		///<param name="_modifiedDate"></param>
		///<param name="_modifiedBy"></param>
		///<param name="_sourceId"></param>
		public static CustomWidgetCssSelector CreateCustomWidgetCssSelector(System.Int32 _siteId, System.String _customWidgetCssSelectorName, 
			System.String _customWidgetCssSelectorClassName, System.Boolean _active, System.DateTime _modifiedDate, 
			System.Int32 _modifiedBy, System.Int32? _sourceId)
		{
			CustomWidgetCssSelector newCustomWidgetCssSelector = new CustomWidgetCssSelector();
			newCustomWidgetCssSelector.SiteId = _siteId;
			newCustomWidgetCssSelector.CustomWidgetCssSelectorName = _customWidgetCssSelectorName;
			newCustomWidgetCssSelector.CustomWidgetCssSelectorClassName = _customWidgetCssSelectorClassName;
			newCustomWidgetCssSelector.Active = _active;
			newCustomWidgetCssSelector.ModifiedDate = _modifiedDate;
			newCustomWidgetCssSelector.ModifiedBy = _modifiedBy;
			newCustomWidgetCssSelector.SourceId = _sourceId;
			return newCustomWidgetCssSelector;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CustomWidgetCssSelectorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 CustomWidgetCssSelectorId
		{
			get
			{
				return this.entityData.CustomWidgetCssSelectorId; 
			}
			
			set
			{
				if (this.entityData.CustomWidgetCssSelectorId == value)
					return;
					
				OnColumnChanging(CustomWidgetCssSelectorColumn.CustomWidgetCssSelectorId, this.entityData.CustomWidgetCssSelectorId);
				this.entityData.CustomWidgetCssSelectorId = value;
				this.EntityId.CustomWidgetCssSelectorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomWidgetCssSelectorColumn.CustomWidgetCssSelectorId, this.entityData.CustomWidgetCssSelectorId);
				OnPropertyChanged("CustomWidgetCssSelectorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SiteId
		{
			get
			{
				return this.entityData.SiteId; 
			}
			
			set
			{
				if (this.entityData.SiteId == value)
					return;
					
				OnColumnChanging(CustomWidgetCssSelectorColumn.SiteId, this.entityData.SiteId);
				this.entityData.SiteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomWidgetCssSelectorColumn.SiteId, this.entityData.SiteId);
				OnPropertyChanged("SiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomWidgetCssSelectorName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String CustomWidgetCssSelectorName
		{
			get
			{
				return this.entityData.CustomWidgetCssSelectorName; 
			}
			
			set
			{
				if (this.entityData.CustomWidgetCssSelectorName == value)
					return;
					
				OnColumnChanging(CustomWidgetCssSelectorColumn.CustomWidgetCssSelectorName, this.entityData.CustomWidgetCssSelectorName);
				this.entityData.CustomWidgetCssSelectorName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomWidgetCssSelectorColumn.CustomWidgetCssSelectorName, this.entityData.CustomWidgetCssSelectorName);
				OnPropertyChanged("CustomWidgetCssSelectorName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomWidgetCssSelectorClassName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String CustomWidgetCssSelectorClassName
		{
			get
			{
				return this.entityData.CustomWidgetCssSelectorClassName; 
			}
			
			set
			{
				if (this.entityData.CustomWidgetCssSelectorClassName == value)
					return;
					
				OnColumnChanging(CustomWidgetCssSelectorColumn.CustomWidgetCssSelectorClassName, this.entityData.CustomWidgetCssSelectorClassName);
				this.entityData.CustomWidgetCssSelectorClassName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomWidgetCssSelectorColumn.CustomWidgetCssSelectorClassName, this.entityData.CustomWidgetCssSelectorClassName);
				OnPropertyChanged("CustomWidgetCssSelectorClassName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Active property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Active
		{
			get
			{
				return this.entityData.Active; 
			}
			
			set
			{
				if (this.entityData.Active == value)
					return;
					
				OnColumnChanging(CustomWidgetCssSelectorColumn.Active, this.entityData.Active);
				this.entityData.Active = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomWidgetCssSelectorColumn.Active, this.entityData.Active);
				OnPropertyChanged("Active");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ModifiedDate
		{
			get
			{
				return this.entityData.ModifiedDate; 
			}
			
			set
			{
				if (this.entityData.ModifiedDate == value)
					return;
					
				OnColumnChanging(CustomWidgetCssSelectorColumn.ModifiedDate, this.entityData.ModifiedDate);
				this.entityData.ModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomWidgetCssSelectorColumn.ModifiedDate, this.entityData.ModifiedDate);
				OnPropertyChanged("ModifiedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ModifiedBy
		{
			get
			{
				return this.entityData.ModifiedBy; 
			}
			
			set
			{
				if (this.entityData.ModifiedBy == value)
					return;
					
				OnColumnChanging(CustomWidgetCssSelectorColumn.ModifiedBy, this.entityData.ModifiedBy);
				this.entityData.ModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomWidgetCssSelectorColumn.ModifiedBy, this.entityData.ModifiedBy);
				OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SourceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSourceIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SourceId
		{
			get
			{
				return this.entityData.SourceId; 
			}
			
			set
			{
				if (this.entityData.SourceId == value)
					return;
					
				OnColumnChanging(CustomWidgetCssSelectorColumn.SourceId, this.entityData.SourceId);
				this.entityData.SourceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomWidgetCssSelectorColumn.SourceId, this.entityData.SourceId);
				OnPropertyChanged("SourceId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Sites SiteIdSource
      	{
            get { return entityData.SiteIdSource; }
            set { entityData.SiteIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of CustomWidget objects
		///	which are related to this object through the relation FK__CustomWid__Custo__3A02AD19
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CustomWidget> CustomWidgetCollection
		{
			get { return entityData.CustomWidgetCollection; }
			set { entityData.CustomWidgetCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CustomWidgetCssSelectorName", "Custom Widget Css Selector Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CustomWidgetCssSelectorName", "Custom Widget Css Selector Name", 255));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CustomWidgetCssSelectorClassName", "Custom Widget Css Selector Class Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CustomWidgetCssSelectorClassName", "Custom Widget Css Selector Class Name", 255));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CustomWidgetCSSSelector"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CustomWidgetCSSSelectorID", "SiteID", "CustomWidgetCSSSelectorName", "CustomWidgetCSSSelectorClassName", "Active", "ModifiedDate", "ModifiedBy", "SourceID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CustomWidgetCssSelectorEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CustomWidgetCssSelector) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CustomWidgetCssSelector>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CustomWidgetCssSelector);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CustomWidgetCssSelector Entity 
		///</summary>
		protected virtual CustomWidgetCssSelector Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CustomWidgetCssSelector copy = new CustomWidgetCssSelector();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.CustomWidgetCssSelectorId = this.CustomWidgetCssSelectorId;
				copy.SiteId = this.SiteId;
				copy.CustomWidgetCssSelectorName = this.CustomWidgetCssSelectorName;
				copy.CustomWidgetCssSelectorClassName = this.CustomWidgetCssSelectorClassName;
				copy.Active = this.Active;
				copy.ModifiedDate = this.ModifiedDate;
				copy.ModifiedBy = this.ModifiedBy;
				copy.SourceId = this.SourceId;
			
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				copy.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				copy.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
		
			//deep copy nested objects
			copy.CustomWidgetCollection = (TList<CustomWidget>) MakeCopyOf(this.CustomWidgetCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CustomWidgetCssSelector Entity 
		///</summary>
		public virtual CustomWidgetCssSelector Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CustomWidgetCssSelector Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CustomWidgetCssSelector DeepCopy()
		{
			return EntityHelper.Clone<CustomWidgetCssSelector>(this as CustomWidgetCssSelector);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CustomWidgetCssSelectorEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CustomWidgetCssSelectorEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CustomWidgetCssSelectorEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CustomWidgetCssSelectorColumn column)
		{
			switch(column)
			{
					case CustomWidgetCssSelectorColumn.CustomWidgetCssSelectorId:
					return entityData.CustomWidgetCssSelectorId != _originalData.CustomWidgetCssSelectorId;
					case CustomWidgetCssSelectorColumn.SiteId:
					return entityData.SiteId != _originalData.SiteId;
					case CustomWidgetCssSelectorColumn.CustomWidgetCssSelectorName:
					return entityData.CustomWidgetCssSelectorName != _originalData.CustomWidgetCssSelectorName;
					case CustomWidgetCssSelectorColumn.CustomWidgetCssSelectorClassName:
					return entityData.CustomWidgetCssSelectorClassName != _originalData.CustomWidgetCssSelectorClassName;
					case CustomWidgetCssSelectorColumn.Active:
					return entityData.Active != _originalData.Active;
					case CustomWidgetCssSelectorColumn.ModifiedDate:
					return entityData.ModifiedDate != _originalData.ModifiedDate;
					case CustomWidgetCssSelectorColumn.ModifiedBy:
					return entityData.ModifiedBy != _originalData.ModifiedBy;
					case CustomWidgetCssSelectorColumn.SourceId:
					return entityData.SourceId != _originalData.SourceId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CustomWidgetCssSelectorColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CustomWidgetCssSelectorId != _originalData.CustomWidgetCssSelectorId;
			result = result || entityData.SiteId != _originalData.SiteId;
			result = result || entityData.CustomWidgetCssSelectorName != _originalData.CustomWidgetCssSelectorName;
			result = result || entityData.CustomWidgetCssSelectorClassName != _originalData.CustomWidgetCssSelectorClassName;
			result = result || entityData.Active != _originalData.Active;
			result = result || entityData.ModifiedDate != _originalData.ModifiedDate;
			result = result || entityData.ModifiedBy != _originalData.ModifiedBy;
			result = result || entityData.SourceId != _originalData.SourceId;
			return result;
		}	
		
		///<summary>
		///  Returns a CustomWidgetCssSelector Entity with the original data.
		///</summary>
		public CustomWidgetCssSelector GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCustomWidgetCssSelector(
				_originalData.SiteId,
				_originalData.CustomWidgetCssSelectorName,
				_originalData.CustomWidgetCssSelectorClassName,
				_originalData.Active,
				_originalData.ModifiedDate,
				_originalData.ModifiedBy,
				_originalData.SourceId
				);
				
			return (CustomWidgetCssSelector)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CustomWidgetCssSelectorBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CustomWidgetCssSelectorBase)
				return ValueEquals(this, (CustomWidgetCssSelectorBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CustomWidgetCssSelectorBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.CustomWidgetCssSelectorId.GetHashCode() ^ 
					this.SiteId.GetHashCode() ^ 
					this.CustomWidgetCssSelectorName.GetHashCode() ^ 
					this.CustomWidgetCssSelectorClassName.GetHashCode() ^ 
					this.Active.GetHashCode() ^ 
					this.ModifiedDate.GetHashCode() ^ 
					this.ModifiedBy.GetHashCode() ^ 
					((this.SourceId == null) ? string.Empty : this.SourceId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CustomWidgetCssSelectorBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CustomWidgetCssSelectorBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CustomWidgetCssSelectorBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CustomWidgetCssSelectorBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CustomWidgetCssSelectorBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CustomWidgetCssSelectorBase Object1, CustomWidgetCssSelectorBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CustomWidgetCssSelectorId != Object2.CustomWidgetCssSelectorId)
				equal = false;
			if (Object1.SiteId != Object2.SiteId)
				equal = false;
			if (Object1.CustomWidgetCssSelectorName != Object2.CustomWidgetCssSelectorName)
				equal = false;
			if (Object1.CustomWidgetCssSelectorClassName != Object2.CustomWidgetCssSelectorClassName)
				equal = false;
			if (Object1.Active != Object2.Active)
				equal = false;
			if (Object1.ModifiedDate != Object2.ModifiedDate)
				equal = false;
			if (Object1.ModifiedBy != Object2.ModifiedBy)
				equal = false;
			if ( Object1.SourceId != null && Object2.SourceId != null )
			{
				if (Object1.SourceId != Object2.SourceId)
					equal = false;
			}
			else if (Object1.SourceId == null ^ Object2.SourceId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CustomWidgetCssSelectorBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CustomWidgetCssSelectorComparer GetComparer()
        {
            return new CustomWidgetCssSelectorComparer();
        }
        */

        // Comparer delegates back to CustomWidgetCssSelector
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CustomWidgetCssSelector rhs, CustomWidgetCssSelectorColumn which)
        {
            switch (which)
            {
            	
            	
            	case CustomWidgetCssSelectorColumn.CustomWidgetCssSelectorId:
            		return this.CustomWidgetCssSelectorId.CompareTo(rhs.CustomWidgetCssSelectorId);
            		
            		                 
            	
            	
            	case CustomWidgetCssSelectorColumn.SiteId:
            		return this.SiteId.CompareTo(rhs.SiteId);
            		
            		                 
            	
            	
            	case CustomWidgetCssSelectorColumn.CustomWidgetCssSelectorName:
            		return this.CustomWidgetCssSelectorName.CompareTo(rhs.CustomWidgetCssSelectorName);
            		
            		                 
            	
            	
            	case CustomWidgetCssSelectorColumn.CustomWidgetCssSelectorClassName:
            		return this.CustomWidgetCssSelectorClassName.CompareTo(rhs.CustomWidgetCssSelectorClassName);
            		
            		                 
            	
            	
            	case CustomWidgetCssSelectorColumn.Active:
            		return this.Active.CompareTo(rhs.Active);
            		
            		                 
            	
            	
            	case CustomWidgetCssSelectorColumn.ModifiedDate:
            		return this.ModifiedDate.CompareTo(rhs.ModifiedDate);
            		
            		                 
            	
            	
            	case CustomWidgetCssSelectorColumn.ModifiedBy:
            		return this.ModifiedBy.CompareTo(rhs.ModifiedBy);
            		
            		                 
            	
            	
            	case CustomWidgetCssSelectorColumn.SourceId:
            		return this.SourceId.Value.CompareTo(rhs.SourceId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CustomWidgetCssSelectorKey> Members
		
		// member variable for the EntityId property
		private CustomWidgetCssSelectorKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CustomWidgetCssSelectorKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CustomWidgetCssSelectorKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CustomWidgetCssSelector")
					.Append("|").Append( this.CustomWidgetCssSelectorId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- CustomWidgetCssSelectorId: {0}{8}- SiteId: {1}{8}- CustomWidgetCssSelectorName: {2}{8}- CustomWidgetCssSelectorClassName: {3}{8}- Active: {4}{8}- ModifiedDate: {5}{8}- ModifiedBy: {6}{8}- SourceId: {7}{8}{10}", 
				this.CustomWidgetCssSelectorId,
				this.SiteId,
				this.CustomWidgetCssSelectorName,
				this.CustomWidgetCssSelectorClassName,
				this.Active,
				this.ModifiedDate,
				this.ModifiedBy,
				(this.SourceId == null) ? string.Empty : this.SourceId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CustomWidgetCSSSelector' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CustomWidgetCssSelectorEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// CustomWidgetCSSSelectorID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CustomWidgetCSSSelector"</remarks>
		public System.Int32 CustomWidgetCssSelectorId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SiteID : 
		/// </summary>
		public System.Int32		  SiteId = (int)0;
		
		/// <summary>
		/// CustomWidgetCSSSelectorName : 
		/// </summary>
		public System.String		  CustomWidgetCssSelectorName = string.Empty;
		
		/// <summary>
		/// CustomWidgetCSSSelectorClassName : 
		/// </summary>
		public System.String		  CustomWidgetCssSelectorClassName = string.Empty;
		
		/// <summary>
		/// Active : 
		/// </summary>
		public System.Boolean		  Active = false;
		
		/// <summary>
		/// ModifiedDate : 
		/// </summary>
		public System.DateTime		  ModifiedDate = DateTime.MinValue;
		
		/// <summary>
		/// ModifiedBy : 
		/// </summary>
		public System.Int32		  ModifiedBy = (int)0;
		
		/// <summary>
		/// SourceID : 
		/// </summary>
		public System.Int32?		  SourceId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Sites _siteIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Sites SiteIdSource
      	{
            get { return this._siteIdSource; }
            set { this._siteIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region CustomWidgetCollection
		
		private TList<CustomWidget> _customWidgetCustomWidgetCssSelectorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customWidgetCustomWidgetCssSelectorId
		/// </summary>
		
		public TList<CustomWidget> CustomWidgetCollection
		{
			get
			{
				if (_customWidgetCustomWidgetCssSelectorId == null)
				{
				_customWidgetCustomWidgetCssSelectorId = new TList<CustomWidget>();
				}
	
				return _customWidgetCustomWidgetCssSelectorId;
			}
			set { _customWidgetCustomWidgetCssSelectorId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CustomWidgetCssSelectorEntityData _tmp = new CustomWidgetCssSelectorEntityData();
						
			_tmp.CustomWidgetCssSelectorId = this.CustomWidgetCssSelectorId;
			
			_tmp.SiteId = this.SiteId;
			_tmp.CustomWidgetCssSelectorName = this.CustomWidgetCssSelectorName;
			_tmp.CustomWidgetCssSelectorClassName = this.CustomWidgetCssSelectorClassName;
			_tmp.Active = this.Active;
			_tmp.ModifiedDate = this.ModifiedDate;
			_tmp.ModifiedBy = this.ModifiedBy;
			_tmp.SourceId = this.SourceId;
			
			#region Source Parent Composite Entities
			if (this.SiteIdSource != null)
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource) as Sites;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._customWidgetCustomWidgetCssSelectorId != null)
				_tmp.CustomWidgetCollection = (TList<CustomWidget>) MakeCopyOf(this.CustomWidgetCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CustomWidgetCssSelectorEntityData _tmp = new CustomWidgetCssSelectorEntityData();
						
			_tmp.CustomWidgetCssSelectorId = this.CustomWidgetCssSelectorId;
			
			_tmp.SiteId = this.SiteId;
			_tmp.CustomWidgetCssSelectorName = this.CustomWidgetCssSelectorName;
			_tmp.CustomWidgetCssSelectorClassName = this.CustomWidgetCssSelectorClassName;
			_tmp.Active = this.Active;
			_tmp.ModifiedDate = this.ModifiedDate;
			_tmp.ModifiedBy = this.ModifiedBy;
			_tmp.SourceId = this.SourceId;
			
			#region Source Parent Composite Entities
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				_tmp.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.CustomWidgetCollection = (TList<CustomWidget>) MakeCopyOf(this.CustomWidgetCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomWidgetCssSelectorColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CustomWidgetCssSelectorColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomWidgetCssSelectorColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CustomWidgetCssSelectorColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomWidgetCssSelectorColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CustomWidgetCssSelectorColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CustomWidgetCssSelectorEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CustomWidgetCssSelectorEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomWidgetCssSelectorColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CustomWidgetCssSelectorColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CustomWidgetCssSelectorEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CustomWidgetCssSelectorEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CustomWidgetCssSelectorEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CustomWidgetCssSelector"/> object.
	/// </remarks>
	public class CustomWidgetCssSelectorEventArgs : System.EventArgs
	{
		private CustomWidgetCssSelectorColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CustomWidgetCssSelectorEventArgs class.
		///</summary>
		public CustomWidgetCssSelectorEventArgs(CustomWidgetCssSelectorColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CustomWidgetCssSelectorEventArgs class.
		///</summary>
		public CustomWidgetCssSelectorEventArgs(CustomWidgetCssSelectorColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CustomWidgetCssSelectorColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CustomWidgetCssSelectorColumn" />
		public CustomWidgetCssSelectorColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CustomWidgetCssSelector related events.
	///</summary>
	public delegate void CustomWidgetCssSelectorEventHandler(object sender, CustomWidgetCssSelectorEventArgs e);
	
	#region CustomWidgetCssSelectorComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CustomWidgetCssSelectorComparer : System.Collections.Generic.IComparer<CustomWidgetCssSelector>
	{
		CustomWidgetCssSelectorColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CustomWidgetCssSelectorComparer"/> class.
        /// </summary>
		public CustomWidgetCssSelectorComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CustomWidgetCssSelectorComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CustomWidgetCssSelectorComparer(CustomWidgetCssSelectorColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CustomWidgetCssSelector"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CustomWidgetCssSelector"/> to compare.</param>
        /// <param name="b">The second <c>CustomWidgetCssSelector</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CustomWidgetCssSelector a, CustomWidgetCssSelector b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CustomWidgetCssSelector entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CustomWidgetCssSelector a, CustomWidgetCssSelector b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CustomWidgetCssSelectorColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CustomWidgetCssSelectorKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CustomWidgetCssSelector"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CustomWidgetCssSelectorKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CustomWidgetCssSelectorKey class.
		/// </summary>
		public CustomWidgetCssSelectorKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomWidgetCssSelectorKey class.
		/// </summary>
		public CustomWidgetCssSelectorKey(CustomWidgetCssSelectorBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.CustomWidgetCssSelectorId = entity.CustomWidgetCssSelectorId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomWidgetCssSelectorKey class.
		/// </summary>
		public CustomWidgetCssSelectorKey(System.Int32 _customWidgetCssSelectorId)
		{
			#region Init Properties

			this.CustomWidgetCssSelectorId = _customWidgetCssSelectorId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CustomWidgetCssSelectorBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CustomWidgetCssSelectorBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CustomWidgetCssSelectorId property
		private System.Int32 _customWidgetCssSelectorId;
		
		/// <summary>
		/// Gets or sets the CustomWidgetCssSelectorId property.
		/// </summary>
		public System.Int32 CustomWidgetCssSelectorId
		{
			get { return _customWidgetCssSelectorId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CustomWidgetCssSelectorId = value;
				
				_customWidgetCssSelectorId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CustomWidgetCssSelectorId = ( values["CustomWidgetCssSelectorId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["CustomWidgetCssSelectorId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CustomWidgetCssSelectorId", CustomWidgetCssSelectorId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CustomWidgetCssSelectorId: {0}{1}",
								CustomWidgetCssSelectorId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CustomWidgetCssSelectorColumn Enum
	
	/// <summary>
	/// Enumerate the CustomWidgetCssSelector columns.
	/// </summary>
	[Serializable]
	public enum CustomWidgetCssSelectorColumn : int
	{
		/// <summary>
		/// CustomWidgetCssSelectorId : 
		/// </summary>
		[EnumTextValue("CustomWidgetCSSSelectorID")]
		[ColumnEnum("CustomWidgetCSSSelectorID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		CustomWidgetCssSelectorId = 1,
		/// <summary>
		/// SiteId : 
		/// </summary>
		[EnumTextValue("SiteID")]
		[ColumnEnum("SiteID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteId = 2,
		/// <summary>
		/// CustomWidgetCssSelectorName : 
		/// </summary>
		[EnumTextValue("CustomWidgetCSSSelectorName")]
		[ColumnEnum("CustomWidgetCSSSelectorName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		CustomWidgetCssSelectorName = 3,
		/// <summary>
		/// CustomWidgetCssSelectorClassName : 
		/// </summary>
		[EnumTextValue("CustomWidgetCSSSelectorClassName")]
		[ColumnEnum("CustomWidgetCSSSelectorClassName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		CustomWidgetCssSelectorClassName = 4,
		/// <summary>
		/// Active : 
		/// </summary>
		[EnumTextValue("Active")]
		[ColumnEnum("Active", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Active = 5,
		/// <summary>
		/// ModifiedDate : 
		/// </summary>
		[EnumTextValue("ModifiedDate")]
		[ColumnEnum("ModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ModifiedDate = 6,
		/// <summary>
		/// ModifiedBy : 
		/// </summary>
		[EnumTextValue("ModifiedBy")]
		[ColumnEnum("ModifiedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ModifiedBy = 7,
		/// <summary>
		/// SourceId : 
		/// </summary>
		[EnumTextValue("SourceID")]
		[ColumnEnum("SourceID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SourceId = 8
	}//End enum

	#endregion CustomWidgetCssSelectorColumn Enum

} // end namespace

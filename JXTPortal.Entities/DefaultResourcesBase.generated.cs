
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file DefaultResources.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'DefaultResources' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class DefaultResourcesBase : EntityBase, IDefaultResources, IEntityId<DefaultResourcesKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private DefaultResourcesEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private DefaultResourcesEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private DefaultResourcesEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<DefaultResources> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DefaultResourcesEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DefaultResourcesEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="DefaultResourcesBase"/> instance.
		///</summary>
		public DefaultResourcesBase()
		{
			this.entityData = new DefaultResourcesEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="DefaultResourcesBase"/> instance.
		///</summary>
		///<param name="_resourceCode"></param>
		///<param name="_resourceFileId"></param>
		///<param name="_resourceText"></param>
		///<param name="_resourceDescription"></param>
		///<param name="_lastModified"></param>
		///<param name="_lastModifiedBy"></param>
		public DefaultResourcesBase(System.String _resourceCode, System.Int32? _resourceFileId, 
			System.String _resourceText, System.String _resourceDescription, System.DateTime _lastModified, 
			System.Int32 _lastModifiedBy)
		{
			this.entityData = new DefaultResourcesEntityData();
			this.backupData = null;

			this.ResourceCode = _resourceCode;
			this.ResourceFileId = _resourceFileId;
			this.ResourceText = _resourceText;
			this.ResourceDescription = _resourceDescription;
			this.LastModified = _lastModified;
			this.LastModifiedBy = _lastModifiedBy;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="DefaultResources"/> instance.
		///</summary>
		///<param name="_resourceCode"></param>
		///<param name="_resourceFileId"></param>
		///<param name="_resourceText"></param>
		///<param name="_resourceDescription"></param>
		///<param name="_lastModified"></param>
		///<param name="_lastModifiedBy"></param>
		public static DefaultResources CreateDefaultResources(System.String _resourceCode, System.Int32? _resourceFileId, 
			System.String _resourceText, System.String _resourceDescription, System.DateTime _lastModified, 
			System.Int32 _lastModifiedBy)
		{
			DefaultResources newDefaultResources = new DefaultResources();
			newDefaultResources.ResourceCode = _resourceCode;
			newDefaultResources.ResourceFileId = _resourceFileId;
			newDefaultResources.ResourceText = _resourceText;
			newDefaultResources.ResourceDescription = _resourceDescription;
			newDefaultResources.LastModified = _lastModified;
			newDefaultResources.LastModifiedBy = _lastModifiedBy;
			return newDefaultResources;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the DefaultResourceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 DefaultResourceId
		{
			get
			{
				return this.entityData.DefaultResourceId; 
			}
			
			set
			{
				if (this.entityData.DefaultResourceId == value)
					return;
					
				OnColumnChanging(DefaultResourcesColumn.DefaultResourceId, this.entityData.DefaultResourceId);
				this.entityData.DefaultResourceId = value;
				this.EntityId.DefaultResourceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DefaultResourcesColumn.DefaultResourceId, this.entityData.DefaultResourceId);
				OnPropertyChanged("DefaultResourceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResourceCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String ResourceCode
		{
			get
			{
				return this.entityData.ResourceCode; 
			}
			
			set
			{
				if (this.entityData.ResourceCode == value)
					return;
					
				OnColumnChanging(DefaultResourcesColumn.ResourceCode, this.entityData.ResourceCode);
				this.entityData.ResourceCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DefaultResourcesColumn.ResourceCode, this.entityData.ResourceCode);
				OnPropertyChanged("ResourceCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResourceFileId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsResourceFileIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ResourceFileId
		{
			get
			{
				return this.entityData.ResourceFileId; 
			}
			
			set
			{
				if (this.entityData.ResourceFileId == value)
					return;
					
				OnColumnChanging(DefaultResourcesColumn.ResourceFileId, this.entityData.ResourceFileId);
				this.entityData.ResourceFileId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DefaultResourcesColumn.ResourceFileId, this.entityData.ResourceFileId);
				OnPropertyChanged("ResourceFileId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResourceText property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String ResourceText
		{
			get
			{
				return this.entityData.ResourceText; 
			}
			
			set
			{
				if (this.entityData.ResourceText == value)
					return;
					
				OnColumnChanging(DefaultResourcesColumn.ResourceText, this.entityData.ResourceText);
				this.entityData.ResourceText = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DefaultResourcesColumn.ResourceText, this.entityData.ResourceText);
				OnPropertyChanged("ResourceText");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResourceDescription property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String ResourceDescription
		{
			get
			{
				return this.entityData.ResourceDescription; 
			}
			
			set
			{
				if (this.entityData.ResourceDescription == value)
					return;
					
				OnColumnChanging(DefaultResourcesColumn.ResourceDescription, this.entityData.ResourceDescription);
				this.entityData.ResourceDescription = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DefaultResourcesColumn.ResourceDescription, this.entityData.ResourceDescription);
				OnPropertyChanged("ResourceDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModified property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastModified
		{
			get
			{
				return this.entityData.LastModified; 
			}
			
			set
			{
				if (this.entityData.LastModified == value)
					return;
					
				OnColumnChanging(DefaultResourcesColumn.LastModified, this.entityData.LastModified);
				this.entityData.LastModified = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DefaultResourcesColumn.LastModified, this.entityData.LastModified);
				OnPropertyChanged("LastModified");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LastModifiedBy
		{
			get
			{
				return this.entityData.LastModifiedBy; 
			}
			
			set
			{
				if (this.entityData.LastModifiedBy == value)
					return;
					
				OnColumnChanging(DefaultResourcesColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				this.entityData.LastModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DefaultResourcesColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				OnPropertyChanged("LastModifiedBy");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return entityData.LastModifiedBySource; }
            set { entityData.LastModifiedBySource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Files"/>.
		/// </summary>
		/// <value>The source Files for ResourceFileId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Files ResourceFileIdSource
      	{
            get { return entityData.ResourceFileIdSource; }
            set { entityData.ResourceFileIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SiteResources objects
		///	which are related to this object through the relation FK__SiteResou__Resou__60FC61CA
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteResources> SiteResourcesCollection
		{
			get { return entityData.SiteResourcesCollection; }
			set { entityData.SiteResourcesCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ResourceCode", "Resource Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ResourceCode", "Resource Code", 255));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ResourceDescription", "Resource Description"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ResourceDescription", "Resource Description", 255));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "DefaultResources"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"DefaultResourceID", "ResourceCode", "ResourceFileID", "ResourceText", "ResourceDescription", "LastModified", "LastModifiedBy"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as DefaultResourcesEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (DefaultResources) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<DefaultResources>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as DefaultResources);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed DefaultResources Entity 
		///</summary>
		protected virtual DefaultResources Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			DefaultResources copy = new DefaultResources();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.DefaultResourceId = this.DefaultResourceId;
				copy.ResourceCode = this.ResourceCode;
				copy.ResourceFileId = this.ResourceFileId;
				copy.ResourceText = this.ResourceText;
				copy.ResourceDescription = this.ResourceDescription;
				copy.LastModified = this.LastModified;
				copy.LastModifiedBy = this.LastModifiedBy;
			
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				copy.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				copy.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			if (this.ResourceFileIdSource != null && existingCopies.Contains(this.ResourceFileIdSource))
				copy.ResourceFileIdSource = existingCopies[this.ResourceFileIdSource] as Files;
			else
				copy.ResourceFileIdSource = MakeCopyOf(this.ResourceFileIdSource, existingCopies) as Files;
		
			//deep copy nested objects
			copy.SiteResourcesCollection = (TList<SiteResources>) MakeCopyOf(this.SiteResourcesCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed DefaultResources Entity 
		///</summary>
		public virtual DefaultResources Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed DefaultResources Entity which is a deep copy of the current entity.
		///</summary>
		public virtual DefaultResources DeepCopy()
		{
			return EntityHelper.Clone<DefaultResources>(this as DefaultResources);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as DefaultResourcesEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new DefaultResourcesEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as DefaultResourcesEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(DefaultResourcesColumn column)
		{
			switch(column)
			{
					case DefaultResourcesColumn.DefaultResourceId:
					return entityData.DefaultResourceId != _originalData.DefaultResourceId;
					case DefaultResourcesColumn.ResourceCode:
					return entityData.ResourceCode != _originalData.ResourceCode;
					case DefaultResourcesColumn.ResourceFileId:
					return entityData.ResourceFileId != _originalData.ResourceFileId;
					case DefaultResourcesColumn.ResourceText:
					return entityData.ResourceText != _originalData.ResourceText;
					case DefaultResourcesColumn.ResourceDescription:
					return entityData.ResourceDescription != _originalData.ResourceDescription;
					case DefaultResourcesColumn.LastModified:
					return entityData.LastModified != _originalData.LastModified;
					case DefaultResourcesColumn.LastModifiedBy:
					return entityData.LastModifiedBy != _originalData.LastModifiedBy;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< DefaultResourcesColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.DefaultResourceId != _originalData.DefaultResourceId;
			result = result || entityData.ResourceCode != _originalData.ResourceCode;
			result = result || entityData.ResourceFileId != _originalData.ResourceFileId;
			result = result || entityData.ResourceText != _originalData.ResourceText;
			result = result || entityData.ResourceDescription != _originalData.ResourceDescription;
			result = result || entityData.LastModified != _originalData.LastModified;
			result = result || entityData.LastModifiedBy != _originalData.LastModifiedBy;
			return result;
		}	
		
		///<summary>
		///  Returns a DefaultResources Entity with the original data.
		///</summary>
		public DefaultResources GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateDefaultResources(
				_originalData.ResourceCode,
				_originalData.ResourceFileId,
				_originalData.ResourceText,
				_originalData.ResourceDescription,
				_originalData.LastModified,
				_originalData.LastModifiedBy
				);
				
			return (DefaultResources)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="DefaultResourcesBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is DefaultResourcesBase)
				return ValueEquals(this, (DefaultResourcesBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="DefaultResourcesBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.DefaultResourceId.GetHashCode() ^ 
					this.ResourceCode.GetHashCode() ^ 
					((this.ResourceFileId == null) ? string.Empty : this.ResourceFileId.ToString()).GetHashCode() ^ 
					((this.ResourceText == null) ? string.Empty : this.ResourceText.ToString()).GetHashCode() ^ 
					this.ResourceDescription.GetHashCode() ^ 
					this.LastModified.GetHashCode() ^ 
					this.LastModifiedBy.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="DefaultResourcesBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(DefaultResourcesBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="DefaultResourcesBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="DefaultResourcesBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="DefaultResourcesBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(DefaultResourcesBase Object1, DefaultResourcesBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.DefaultResourceId != Object2.DefaultResourceId)
				equal = false;
			if (Object1.ResourceCode != Object2.ResourceCode)
				equal = false;
			if ( Object1.ResourceFileId != null && Object2.ResourceFileId != null )
			{
				if (Object1.ResourceFileId != Object2.ResourceFileId)
					equal = false;
			}
			else if (Object1.ResourceFileId == null ^ Object2.ResourceFileId == null )
			{
				equal = false;
			}
			if ( Object1.ResourceText != null && Object2.ResourceText != null )
			{
				if (Object1.ResourceText != Object2.ResourceText)
					equal = false;
			}
			else if (Object1.ResourceText == null ^ Object2.ResourceText == null )
			{
				equal = false;
			}
			if (Object1.ResourceDescription != Object2.ResourceDescription)
				equal = false;
			if (Object1.LastModified != Object2.LastModified)
				equal = false;
			if (Object1.LastModifiedBy != Object2.LastModifiedBy)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((DefaultResourcesBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static DefaultResourcesComparer GetComparer()
        {
            return new DefaultResourcesComparer();
        }
        */

        // Comparer delegates back to DefaultResources
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(DefaultResources rhs, DefaultResourcesColumn which)
        {
            switch (which)
            {
            	
            	
            	case DefaultResourcesColumn.DefaultResourceId:
            		return this.DefaultResourceId.CompareTo(rhs.DefaultResourceId);
            		
            		                 
            	
            	
            	case DefaultResourcesColumn.ResourceCode:
            		return this.ResourceCode.CompareTo(rhs.ResourceCode);
            		
            		                 
            	
            	
            	case DefaultResourcesColumn.ResourceFileId:
            		return this.ResourceFileId.Value.CompareTo(rhs.ResourceFileId.Value);
            		
            		                 
            	
            	
            	case DefaultResourcesColumn.ResourceText:
            		return this.ResourceText.CompareTo(rhs.ResourceText);
            		
            		                 
            	
            	
            	case DefaultResourcesColumn.ResourceDescription:
            		return this.ResourceDescription.CompareTo(rhs.ResourceDescription);
            		
            		                 
            	
            	
            	case DefaultResourcesColumn.LastModified:
            		return this.LastModified.CompareTo(rhs.LastModified);
            		
            		                 
            	
            	
            	case DefaultResourcesColumn.LastModifiedBy:
            		return this.LastModifiedBy.CompareTo(rhs.LastModifiedBy);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<DefaultResourcesKey> Members
		
		// member variable for the EntityId property
		private DefaultResourcesKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual DefaultResourcesKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new DefaultResourcesKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("DefaultResources")
					.Append("|").Append( this.DefaultResourceId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- DefaultResourceId: {0}{7}- ResourceCode: {1}{7}- ResourceFileId: {2}{7}- ResourceText: {3}{7}- ResourceDescription: {4}{7}- LastModified: {5}{7}- LastModifiedBy: {6}{7}{9}", 
				this.DefaultResourceId,
				this.ResourceCode,
				(this.ResourceFileId == null) ? string.Empty : this.ResourceFileId.ToString(),
				(this.ResourceText == null) ? string.Empty : this.ResourceText.ToString(),
				this.ResourceDescription,
				this.LastModified,
				this.LastModifiedBy,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'DefaultResources' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class DefaultResourcesEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// DefaultResourceID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "DefaultResources"</remarks>
		public System.Int32 DefaultResourceId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ResourceCode : 
		/// </summary>
		public System.String		  ResourceCode = string.Empty;
		
		/// <summary>
		/// ResourceFileID : 
		/// </summary>
		public System.Int32?		  ResourceFileId = null;
		
		/// <summary>
		/// ResourceText : 
		/// </summary>
		public System.String		  ResourceText = null;
		
		/// <summary>
		/// ResourceDescription : 
		/// </summary>
		public System.String		  ResourceDescription = string.Empty;
		
		/// <summary>
		/// LastModified : 
		/// </summary>
		public System.DateTime		  LastModified = DateTime.MinValue;
		
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		public System.Int32		  LastModifiedBy = (int)0;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdminUsers _lastModifiedBySource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return this._lastModifiedBySource; }
            set { this._lastModifiedBySource = value; }
      	}
		private Files _resourceFileIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Files"/>.
		/// </summary>
		/// <value>The source Files for ResourceFileId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Files ResourceFileIdSource
      	{
            get { return this._resourceFileIdSource; }
            set { this._resourceFileIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region SiteResourcesCollection
		
		private TList<SiteResources> _siteResourcesResourceCode;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteResourcesResourceCode
		/// </summary>
		
		public TList<SiteResources> SiteResourcesCollection
		{
			get
			{
				if (_siteResourcesResourceCode == null)
				{
				_siteResourcesResourceCode = new TList<SiteResources>();
				}
	
				return _siteResourcesResourceCode;
			}
			set { _siteResourcesResourceCode = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			DefaultResourcesEntityData _tmp = new DefaultResourcesEntityData();
						
			_tmp.DefaultResourceId = this.DefaultResourceId;
			
			_tmp.ResourceCode = this.ResourceCode;
			_tmp.ResourceFileId = this.ResourceFileId;
			_tmp.ResourceText = this.ResourceText;
			_tmp.ResourceDescription = this.ResourceDescription;
			_tmp.LastModified = this.LastModified;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			
			#region Source Parent Composite Entities
			if (this.LastModifiedBySource != null)
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource) as AdminUsers;
			if (this.ResourceFileIdSource != null)
				_tmp.ResourceFileIdSource = MakeCopyOf(this.ResourceFileIdSource) as Files;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._siteResourcesResourceCode != null)
				_tmp.SiteResourcesCollection = (TList<SiteResources>) MakeCopyOf(this.SiteResourcesCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			DefaultResourcesEntityData _tmp = new DefaultResourcesEntityData();
						
			_tmp.DefaultResourceId = this.DefaultResourceId;
			
			_tmp.ResourceCode = this.ResourceCode;
			_tmp.ResourceFileId = this.ResourceFileId;
			_tmp.ResourceText = this.ResourceText;
			_tmp.ResourceDescription = this.ResourceDescription;
			_tmp.LastModified = this.LastModified;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			
			#region Source Parent Composite Entities
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				_tmp.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			if (this.ResourceFileIdSource != null && existingCopies.Contains(this.ResourceFileIdSource))
				_tmp.ResourceFileIdSource = existingCopies[this.ResourceFileIdSource] as Files;
			else
				_tmp.ResourceFileIdSource = MakeCopyOf(this.ResourceFileIdSource, existingCopies) as Files;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SiteResourcesCollection = (TList<SiteResources>) MakeCopyOf(this.SiteResourcesCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DefaultResourcesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(DefaultResourcesColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DefaultResourcesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(DefaultResourcesColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DefaultResourcesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(DefaultResourcesColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				DefaultResourcesEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new DefaultResourcesEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DefaultResourcesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(DefaultResourcesColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				DefaultResourcesEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new DefaultResourcesEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region DefaultResourcesEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="DefaultResources"/> object.
	/// </remarks>
	public class DefaultResourcesEventArgs : System.EventArgs
	{
		private DefaultResourcesColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the DefaultResourcesEventArgs class.
		///</summary>
		public DefaultResourcesEventArgs(DefaultResourcesColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the DefaultResourcesEventArgs class.
		///</summary>
		public DefaultResourcesEventArgs(DefaultResourcesColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The DefaultResourcesColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="DefaultResourcesColumn" />
		public DefaultResourcesColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all DefaultResources related events.
	///</summary>
	public delegate void DefaultResourcesEventHandler(object sender, DefaultResourcesEventArgs e);
	
	#region DefaultResourcesComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class DefaultResourcesComparer : System.Collections.Generic.IComparer<DefaultResources>
	{
		DefaultResourcesColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:DefaultResourcesComparer"/> class.
        /// </summary>
		public DefaultResourcesComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:DefaultResourcesComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public DefaultResourcesComparer(DefaultResourcesColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="DefaultResources"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="DefaultResources"/> to compare.</param>
        /// <param name="b">The second <c>DefaultResources</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(DefaultResources a, DefaultResources b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(DefaultResources entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(DefaultResources a, DefaultResources b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public DefaultResourcesColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region DefaultResourcesKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="DefaultResources"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class DefaultResourcesKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the DefaultResourcesKey class.
		/// </summary>
		public DefaultResourcesKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the DefaultResourcesKey class.
		/// </summary>
		public DefaultResourcesKey(DefaultResourcesBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.DefaultResourceId = entity.DefaultResourceId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the DefaultResourcesKey class.
		/// </summary>
		public DefaultResourcesKey(System.Int32 _defaultResourceId)
		{
			#region Init Properties

			this.DefaultResourceId = _defaultResourceId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private DefaultResourcesBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public DefaultResourcesBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the DefaultResourceId property
		private System.Int32 _defaultResourceId;
		
		/// <summary>
		/// Gets or sets the DefaultResourceId property.
		/// </summary>
		public System.Int32 DefaultResourceId
		{
			get { return _defaultResourceId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.DefaultResourceId = value;
				
				_defaultResourceId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				DefaultResourceId = ( values["DefaultResourceId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["DefaultResourceId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("DefaultResourceId", DefaultResourceId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("DefaultResourceId: {0}{1}",
								DefaultResourceId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region DefaultResourcesColumn Enum
	
	/// <summary>
	/// Enumerate the DefaultResources columns.
	/// </summary>
	[Serializable]
	public enum DefaultResourcesColumn : int
	{
		/// <summary>
		/// DefaultResourceId : 
		/// </summary>
		[EnumTextValue("DefaultResourceID")]
		[ColumnEnum("DefaultResourceID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		DefaultResourceId = 1,
		/// <summary>
		/// ResourceCode : 
		/// </summary>
		[EnumTextValue("ResourceCode")]
		[ColumnEnum("ResourceCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		ResourceCode = 2,
		/// <summary>
		/// ResourceFileId : 
		/// </summary>
		[EnumTextValue("ResourceFileID")]
		[ColumnEnum("ResourceFileID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ResourceFileId = 3,
		/// <summary>
		/// ResourceText : 
		/// </summary>
		[EnumTextValue("ResourceText")]
		[ColumnEnum("ResourceText", typeof(System.String), System.Data.DbType.String, false, false, true)]
		ResourceText = 4,
		/// <summary>
		/// ResourceDescription : 
		/// </summary>
		[EnumTextValue("ResourceDescription")]
		[ColumnEnum("ResourceDescription", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		ResourceDescription = 5,
		/// <summary>
		/// LastModified : 
		/// </summary>
		[EnumTextValue("LastModified")]
		[ColumnEnum("LastModified", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastModified = 6,
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		[EnumTextValue("LastModifiedBy")]
		[ColumnEnum("LastModifiedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LastModifiedBy = 7
	}//End enum

	#endregion DefaultResourcesColumn Enum

} // end namespace

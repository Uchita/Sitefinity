
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file DynamicPageRevisions.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'DynamicPageRevisions' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class DynamicPageRevisionsBase : EntityBase, IDynamicPageRevisions, IEntityId<DynamicPageRevisionsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private DynamicPageRevisionsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private DynamicPageRevisionsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private DynamicPageRevisionsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<DynamicPageRevisions> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DynamicPageRevisionsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DynamicPageRevisionsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="DynamicPageRevisionsBase"/> instance.
		///</summary>
		public DynamicPageRevisionsBase()
		{
			this.entityData = new DynamicPageRevisionsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="DynamicPageRevisionsBase"/> instance.
		///</summary>
		///<param name="_dynamicPageId"></param>
		///<param name="_siteId"></param>
		///<param name="_languageId"></param>
		///<param name="_parentDynamicPageId"></param>
		///<param name="_pageName"></param>
		///<param name="_pageTitle"></param>
		///<param name="_pageContent"></param>
		///<param name="_dynamicPageWebPartTemplateId"></param>
		///<param name="_hyperLink"></param>
		///<param name="_valid"></param>
		///<param name="_openInNewWindow"></param>
		///<param name="_sequence"></param>
		///<param name="_fullScreen"></param>
		///<param name="_onTopNav"></param>
		///<param name="_onLeftNav"></param>
		///<param name="_onBottomNav"></param>
		///<param name="_onSiteMap"></param>
		///<param name="_searchable"></param>
		///<param name="_metaKeywords"></param>
		///<param name="_metaDescription"></param>
		///<param name="_pageFriendlyName"></param>
		///<param name="_lastModified"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_searchField"></param>
		///<param name="_sourceId"></param>
		///<param name="_secured"></param>
		///<param name="_customUrl"></param>
		///<param name="_metaTitle"></param>
		///<param name="_generateBreadcrumb"></param>
		///<param name="_status"></param>
		///<param name="_visible"></param>
		///<param name="_publishOn"></param>
		///<param name="_mappingId"></param>
		///<param name="_comment"></param>
		///<param name="_pageLog"></param>
		public DynamicPageRevisionsBase(System.Int32 _dynamicPageId, System.Int32 _siteId, 
			System.Int32 _languageId, System.Int32 _parentDynamicPageId, System.String _pageName, 
			System.String _pageTitle, System.String _pageContent, System.Int32? _dynamicPageWebPartTemplateId, 
			System.String _hyperLink, System.Boolean _valid, System.Boolean _openInNewWindow, 
			System.Int32 _sequence, System.Boolean _fullScreen, System.Boolean _onTopNav, 
			System.Boolean _onLeftNav, System.Boolean _onBottomNav, System.Boolean _onSiteMap, 
			System.Boolean _searchable, System.String _metaKeywords, System.String _metaDescription, 
			System.String _pageFriendlyName, System.DateTime _lastModified, System.Int32 _lastModifiedBy, 
			System.String _searchField, System.Int32? _sourceId, System.Boolean _secured, 
			System.String _customUrl, System.String _metaTitle, System.Boolean _generateBreadcrumb, 
			System.Int32 _status, System.Boolean _visible, System.DateTime? _publishOn, 
			System.Guid? _mappingId, System.String _comment, System.String _pageLog)
		{
			this.entityData = new DynamicPageRevisionsEntityData();
			this.backupData = null;

			this.DynamicPageId = _dynamicPageId;
			this.SiteId = _siteId;
			this.LanguageId = _languageId;
			this.ParentDynamicPageId = _parentDynamicPageId;
			this.PageName = _pageName;
			this.PageTitle = _pageTitle;
			this.PageContent = _pageContent;
			this.DynamicPageWebPartTemplateId = _dynamicPageWebPartTemplateId;
			this.HyperLink = _hyperLink;
			this.Valid = _valid;
			this.OpenInNewWindow = _openInNewWindow;
			this.Sequence = _sequence;
			this.FullScreen = _fullScreen;
			this.OnTopNav = _onTopNav;
			this.OnLeftNav = _onLeftNav;
			this.OnBottomNav = _onBottomNav;
			this.OnSiteMap = _onSiteMap;
			this.Searchable = _searchable;
			this.MetaKeywords = _metaKeywords;
			this.MetaDescription = _metaDescription;
			this.PageFriendlyName = _pageFriendlyName;
			this.LastModified = _lastModified;
			this.LastModifiedBy = _lastModifiedBy;
			this.SearchField = _searchField;
			this.SourceId = _sourceId;
			this.Secured = _secured;
			this.CustomUrl = _customUrl;
			this.MetaTitle = _metaTitle;
			this.GenerateBreadcrumb = _generateBreadcrumb;
			this.Status = _status;
			this.Visible = _visible;
			this.PublishOn = _publishOn;
			this.MappingId = _mappingId;
			this.Comment = _comment;
			this.PageLog = _pageLog;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="DynamicPageRevisions"/> instance.
		///</summary>
		///<param name="_dynamicPageId"></param>
		///<param name="_siteId"></param>
		///<param name="_languageId"></param>
		///<param name="_parentDynamicPageId"></param>
		///<param name="_pageName"></param>
		///<param name="_pageTitle"></param>
		///<param name="_pageContent"></param>
		///<param name="_dynamicPageWebPartTemplateId"></param>
		///<param name="_hyperLink"></param>
		///<param name="_valid"></param>
		///<param name="_openInNewWindow"></param>
		///<param name="_sequence"></param>
		///<param name="_fullScreen"></param>
		///<param name="_onTopNav"></param>
		///<param name="_onLeftNav"></param>
		///<param name="_onBottomNav"></param>
		///<param name="_onSiteMap"></param>
		///<param name="_searchable"></param>
		///<param name="_metaKeywords"></param>
		///<param name="_metaDescription"></param>
		///<param name="_pageFriendlyName"></param>
		///<param name="_lastModified"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_searchField"></param>
		///<param name="_sourceId"></param>
		///<param name="_secured"></param>
		///<param name="_customUrl"></param>
		///<param name="_metaTitle"></param>
		///<param name="_generateBreadcrumb"></param>
		///<param name="_status"></param>
		///<param name="_visible"></param>
		///<param name="_publishOn"></param>
		///<param name="_mappingId"></param>
		///<param name="_comment"></param>
		///<param name="_pageLog"></param>
		public static DynamicPageRevisions CreateDynamicPageRevisions(System.Int32 _dynamicPageId, System.Int32 _siteId, 
			System.Int32 _languageId, System.Int32 _parentDynamicPageId, System.String _pageName, 
			System.String _pageTitle, System.String _pageContent, System.Int32? _dynamicPageWebPartTemplateId, 
			System.String _hyperLink, System.Boolean _valid, System.Boolean _openInNewWindow, 
			System.Int32 _sequence, System.Boolean _fullScreen, System.Boolean _onTopNav, 
			System.Boolean _onLeftNav, System.Boolean _onBottomNav, System.Boolean _onSiteMap, 
			System.Boolean _searchable, System.String _metaKeywords, System.String _metaDescription, 
			System.String _pageFriendlyName, System.DateTime _lastModified, System.Int32 _lastModifiedBy, 
			System.String _searchField, System.Int32? _sourceId, System.Boolean _secured, 
			System.String _customUrl, System.String _metaTitle, System.Boolean _generateBreadcrumb, 
			System.Int32 _status, System.Boolean _visible, System.DateTime? _publishOn, 
			System.Guid? _mappingId, System.String _comment, System.String _pageLog)
		{
			DynamicPageRevisions newDynamicPageRevisions = new DynamicPageRevisions();
			newDynamicPageRevisions.DynamicPageId = _dynamicPageId;
			newDynamicPageRevisions.SiteId = _siteId;
			newDynamicPageRevisions.LanguageId = _languageId;
			newDynamicPageRevisions.ParentDynamicPageId = _parentDynamicPageId;
			newDynamicPageRevisions.PageName = _pageName;
			newDynamicPageRevisions.PageTitle = _pageTitle;
			newDynamicPageRevisions.PageContent = _pageContent;
			newDynamicPageRevisions.DynamicPageWebPartTemplateId = _dynamicPageWebPartTemplateId;
			newDynamicPageRevisions.HyperLink = _hyperLink;
			newDynamicPageRevisions.Valid = _valid;
			newDynamicPageRevisions.OpenInNewWindow = _openInNewWindow;
			newDynamicPageRevisions.Sequence = _sequence;
			newDynamicPageRevisions.FullScreen = _fullScreen;
			newDynamicPageRevisions.OnTopNav = _onTopNav;
			newDynamicPageRevisions.OnLeftNav = _onLeftNav;
			newDynamicPageRevisions.OnBottomNav = _onBottomNav;
			newDynamicPageRevisions.OnSiteMap = _onSiteMap;
			newDynamicPageRevisions.Searchable = _searchable;
			newDynamicPageRevisions.MetaKeywords = _metaKeywords;
			newDynamicPageRevisions.MetaDescription = _metaDescription;
			newDynamicPageRevisions.PageFriendlyName = _pageFriendlyName;
			newDynamicPageRevisions.LastModified = _lastModified;
			newDynamicPageRevisions.LastModifiedBy = _lastModifiedBy;
			newDynamicPageRevisions.SearchField = _searchField;
			newDynamicPageRevisions.SourceId = _sourceId;
			newDynamicPageRevisions.Secured = _secured;
			newDynamicPageRevisions.CustomUrl = _customUrl;
			newDynamicPageRevisions.MetaTitle = _metaTitle;
			newDynamicPageRevisions.GenerateBreadcrumb = _generateBreadcrumb;
			newDynamicPageRevisions.Status = _status;
			newDynamicPageRevisions.Visible = _visible;
			newDynamicPageRevisions.PublishOn = _publishOn;
			newDynamicPageRevisions.MappingId = _mappingId;
			newDynamicPageRevisions.Comment = _comment;
			newDynamicPageRevisions.PageLog = _pageLog;
			return newDynamicPageRevisions;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the DynamicPageRevisionId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 DynamicPageRevisionId
		{
			get
			{
				return this.entityData.DynamicPageRevisionId; 
			}
			
			set
			{
				if (this.entityData.DynamicPageRevisionId == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.DynamicPageRevisionId, this.entityData.DynamicPageRevisionId);
				this.entityData.DynamicPageRevisionId = value;
				this.EntityId.DynamicPageRevisionId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.DynamicPageRevisionId, this.entityData.DynamicPageRevisionId);
				OnPropertyChanged("DynamicPageRevisionId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DynamicPageId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 DynamicPageId
		{
			get
			{
				return this.entityData.DynamicPageId; 
			}
			
			set
			{
				if (this.entityData.DynamicPageId == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.DynamicPageId, this.entityData.DynamicPageId);
				this.entityData.DynamicPageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.DynamicPageId, this.entityData.DynamicPageId);
				OnPropertyChanged("DynamicPageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SiteId
		{
			get
			{
				return this.entityData.SiteId; 
			}
			
			set
			{
				if (this.entityData.SiteId == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.SiteId, this.entityData.SiteId);
				this.entityData.SiteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.SiteId, this.entityData.SiteId);
				OnPropertyChanged("SiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LanguageId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LanguageId
		{
			get
			{
				return this.entityData.LanguageId; 
			}
			
			set
			{
				if (this.entityData.LanguageId == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.LanguageId, this.entityData.LanguageId);
				this.entityData.LanguageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.LanguageId, this.entityData.LanguageId);
				OnPropertyChanged("LanguageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ParentDynamicPageId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ParentDynamicPageId
		{
			get
			{
				return this.entityData.ParentDynamicPageId; 
			}
			
			set
			{
				if (this.entityData.ParentDynamicPageId == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.ParentDynamicPageId, this.entityData.ParentDynamicPageId);
				this.entityData.ParentDynamicPageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.ParentDynamicPageId, this.entityData.ParentDynamicPageId);
				OnPropertyChanged("ParentDynamicPageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PageName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String PageName
		{
			get
			{
				return this.entityData.PageName; 
			}
			
			set
			{
				if (this.entityData.PageName == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.PageName, this.entityData.PageName);
				this.entityData.PageName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.PageName, this.entityData.PageName);
				OnPropertyChanged("PageName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PageTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String PageTitle
		{
			get
			{
				return this.entityData.PageTitle; 
			}
			
			set
			{
				if (this.entityData.PageTitle == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.PageTitle, this.entityData.PageTitle);
				this.entityData.PageTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.PageTitle, this.entityData.PageTitle);
				OnPropertyChanged("PageTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PageContent property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.String PageContent
		{
			get
			{
				return this.entityData.PageContent; 
			}
			
			set
			{
				if (this.entityData.PageContent == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.PageContent, this.entityData.PageContent);
				this.entityData.PageContent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.PageContent, this.entityData.PageContent);
				OnPropertyChanged("PageContent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DynamicPageWebPartTemplateId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDynamicPageWebPartTemplateIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DynamicPageWebPartTemplateId
		{
			get
			{
				return this.entityData.DynamicPageWebPartTemplateId; 
			}
			
			set
			{
				if (this.entityData.DynamicPageWebPartTemplateId == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.DynamicPageWebPartTemplateId, this.entityData.DynamicPageWebPartTemplateId);
				this.entityData.DynamicPageWebPartTemplateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.DynamicPageWebPartTemplateId, this.entityData.DynamicPageWebPartTemplateId);
				OnPropertyChanged("DynamicPageWebPartTemplateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HyperLink property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String HyperLink
		{
			get
			{
				return this.entityData.HyperLink; 
			}
			
			set
			{
				if (this.entityData.HyperLink == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.HyperLink, this.entityData.HyperLink);
				this.entityData.HyperLink = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.HyperLink, this.entityData.HyperLink);
				OnPropertyChanged("HyperLink");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Valid property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Valid
		{
			get
			{
				return this.entityData.Valid; 
			}
			
			set
			{
				if (this.entityData.Valid == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.Valid, this.entityData.Valid);
				this.entityData.Valid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.Valid, this.entityData.Valid);
				OnPropertyChanged("Valid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OpenInNewWindow property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean OpenInNewWindow
		{
			get
			{
				return this.entityData.OpenInNewWindow; 
			}
			
			set
			{
				if (this.entityData.OpenInNewWindow == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.OpenInNewWindow, this.entityData.OpenInNewWindow);
				this.entityData.OpenInNewWindow = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.OpenInNewWindow, this.entityData.OpenInNewWindow);
				OnPropertyChanged("OpenInNewWindow");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sequence property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Sequence
		{
			get
			{
				return this.entityData.Sequence; 
			}
			
			set
			{
				if (this.entityData.Sequence == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.Sequence, this.entityData.Sequence);
				this.entityData.Sequence = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.Sequence, this.entityData.Sequence);
				OnPropertyChanged("Sequence");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FullScreen property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean FullScreen
		{
			get
			{
				return this.entityData.FullScreen; 
			}
			
			set
			{
				if (this.entityData.FullScreen == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.FullScreen, this.entityData.FullScreen);
				this.entityData.FullScreen = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.FullScreen, this.entityData.FullScreen);
				OnPropertyChanged("FullScreen");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnTopNav property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean OnTopNav
		{
			get
			{
				return this.entityData.OnTopNav; 
			}
			
			set
			{
				if (this.entityData.OnTopNav == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.OnTopNav, this.entityData.OnTopNav);
				this.entityData.OnTopNav = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.OnTopNav, this.entityData.OnTopNav);
				OnPropertyChanged("OnTopNav");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnLeftNav property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean OnLeftNav
		{
			get
			{
				return this.entityData.OnLeftNav; 
			}
			
			set
			{
				if (this.entityData.OnLeftNav == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.OnLeftNav, this.entityData.OnLeftNav);
				this.entityData.OnLeftNav = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.OnLeftNav, this.entityData.OnLeftNav);
				OnPropertyChanged("OnLeftNav");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnBottomNav property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean OnBottomNav
		{
			get
			{
				return this.entityData.OnBottomNav; 
			}
			
			set
			{
				if (this.entityData.OnBottomNav == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.OnBottomNav, this.entityData.OnBottomNav);
				this.entityData.OnBottomNav = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.OnBottomNav, this.entityData.OnBottomNav);
				OnPropertyChanged("OnBottomNav");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnSiteMap property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean OnSiteMap
		{
			get
			{
				return this.entityData.OnSiteMap; 
			}
			
			set
			{
				if (this.entityData.OnSiteMap == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.OnSiteMap, this.entityData.OnSiteMap);
				this.entityData.OnSiteMap = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.OnSiteMap, this.entityData.OnSiteMap);
				OnPropertyChanged("OnSiteMap");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Searchable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Searchable
		{
			get
			{
				return this.entityData.Searchable; 
			}
			
			set
			{
				if (this.entityData.Searchable == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.Searchable, this.entityData.Searchable);
				this.entityData.Searchable = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.Searchable, this.entityData.Searchable);
				OnPropertyChanged("Searchable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MetaKeywords property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String MetaKeywords
		{
			get
			{
				return this.entityData.MetaKeywords; 
			}
			
			set
			{
				if (this.entityData.MetaKeywords == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.MetaKeywords, this.entityData.MetaKeywords);
				this.entityData.MetaKeywords = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.MetaKeywords, this.entityData.MetaKeywords);
				OnPropertyChanged("MetaKeywords");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MetaDescription property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1024)]
		public virtual System.String MetaDescription
		{
			get
			{
				return this.entityData.MetaDescription; 
			}
			
			set
			{
				if (this.entityData.MetaDescription == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.MetaDescription, this.entityData.MetaDescription);
				this.entityData.MetaDescription = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.MetaDescription, this.entityData.MetaDescription);
				OnPropertyChanged("MetaDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PageFriendlyName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String PageFriendlyName
		{
			get
			{
				return this.entityData.PageFriendlyName; 
			}
			
			set
			{
				if (this.entityData.PageFriendlyName == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.PageFriendlyName, this.entityData.PageFriendlyName);
				this.entityData.PageFriendlyName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.PageFriendlyName, this.entityData.PageFriendlyName);
				OnPropertyChanged("PageFriendlyName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModified property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastModified
		{
			get
			{
				return this.entityData.LastModified; 
			}
			
			set
			{
				if (this.entityData.LastModified == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.LastModified, this.entityData.LastModified);
				this.entityData.LastModified = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.LastModified, this.entityData.LastModified);
				OnPropertyChanged("LastModified");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LastModifiedBy
		{
			get
			{
				return this.entityData.LastModifiedBy; 
			}
			
			set
			{
				if (this.entityData.LastModifiedBy == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				this.entityData.LastModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				OnPropertyChanged("LastModifiedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SearchField property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String SearchField
		{
			get
			{
				return this.entityData.SearchField; 
			}
			
			set
			{
				if (this.entityData.SearchField == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.SearchField, this.entityData.SearchField);
				this.entityData.SearchField = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.SearchField, this.entityData.SearchField);
				OnPropertyChanged("SearchField");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SourceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSourceIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SourceId
		{
			get
			{
				return this.entityData.SourceId; 
			}
			
			set
			{
				if (this.entityData.SourceId == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.SourceId, this.entityData.SourceId);
				this.entityData.SourceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.SourceId, this.entityData.SourceId);
				OnPropertyChanged("SourceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Secured property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Secured
		{
			get
			{
				return this.entityData.Secured; 
			}
			
			set
			{
				if (this.entityData.Secured == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.Secured, this.entityData.Secured);
				this.entityData.Secured = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.Secured, this.entityData.Secured);
				OnPropertyChanged("Secured");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomUrl property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 512)]
		public virtual System.String CustomUrl
		{
			get
			{
				return this.entityData.CustomUrl; 
			}
			
			set
			{
				if (this.entityData.CustomUrl == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.CustomUrl, this.entityData.CustomUrl);
				this.entityData.CustomUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.CustomUrl, this.entityData.CustomUrl);
				OnPropertyChanged("CustomUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MetaTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String MetaTitle
		{
			get
			{
				return this.entityData.MetaTitle; 
			}
			
			set
			{
				if (this.entityData.MetaTitle == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.MetaTitle, this.entityData.MetaTitle);
				this.entityData.MetaTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.MetaTitle, this.entityData.MetaTitle);
				OnPropertyChanged("MetaTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GenerateBreadcrumb property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean GenerateBreadcrumb
		{
			get
			{
				return this.entityData.GenerateBreadcrumb; 
			}
			
			set
			{
				if (this.entityData.GenerateBreadcrumb == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.GenerateBreadcrumb, this.entityData.GenerateBreadcrumb);
				this.entityData.GenerateBreadcrumb = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.GenerateBreadcrumb, this.entityData.GenerateBreadcrumb);
				OnPropertyChanged("GenerateBreadcrumb");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Visible property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Visible
		{
			get
			{
				return this.entityData.Visible; 
			}
			
			set
			{
				if (this.entityData.Visible == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.Visible, this.entityData.Visible);
				this.entityData.Visible = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.Visible, this.entityData.Visible);
				OnPropertyChanged("Visible");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PublishOn property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPublishOnNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PublishOn
		{
			get
			{
				return this.entityData.PublishOn; 
			}
			
			set
			{
				if (this.entityData.PublishOn == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.PublishOn, this.entityData.PublishOn);
				this.entityData.PublishOn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.PublishOn, this.entityData.PublishOn);
				OnPropertyChanged("PublishOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MappingId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return Guid.Empty. It is up to the developer
		/// to check the value of IsMappingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Guid? MappingId
		{
			get
			{
				return this.entityData.MappingId; 
			}
			
			set
			{
				if (this.entityData.MappingId == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.MappingId, this.entityData.MappingId);
				this.entityData.MappingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.MappingId, this.entityData.MappingId);
				OnPropertyChanged("MappingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comment property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2000)]
		public virtual System.String Comment
		{
			get
			{
				return this.entityData.Comment; 
			}
			
			set
			{
				if (this.entityData.Comment == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.Comment, this.entityData.Comment);
				this.entityData.Comment = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.Comment, this.entityData.Comment);
				OnPropertyChanged("Comment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PageLog property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2000)]
		public virtual System.String PageLog
		{
			get
			{
				return this.entityData.PageLog; 
			}
			
			set
			{
				if (this.entityData.PageLog == value)
					return;
					
				OnColumnChanging(DynamicPageRevisionsColumn.PageLog, this.entityData.PageLog);
				this.entityData.PageLog = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPageRevisionsColumn.PageLog, this.entityData.PageLog);
				OnPropertyChanged("PageLog");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PageName", "Page Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PageName", "Page Name", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PageTitle", "Page Title", 510));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PageContent", "Page Content"));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("HyperLink", "Hyper Link"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HyperLink", "Hyper Link", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MetaKeywords", "Meta Keywords", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MetaDescription", "Meta Description", 1024));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PageFriendlyName", "Page Friendly Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PageFriendlyName", "Page Friendly Name", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CustomUrl", "Custom Url", 512));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MetaTitle", "Meta Title", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Comment", "Comment", 2000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PageLog", "Page Log", 2000));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "DynamicPageRevisions"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"DynamicPageRevisionID", "DynamicPageID", "SiteID", "LanguageID", "ParentDynamicPageID", "PageName", "PageTitle", "PageContent", "DynamicPageWebPartTemplateID", "HyperLink", "Valid", "OpenInNewWindow", "Sequence", "FullScreen", "OnTopNav", "OnLeftNav", "OnBottomNav", "OnSiteMap", "Searchable", "MetaKeywords", "MetaDescription", "PageFriendlyName", "LastModified", "LastModifiedBy", "SearchField", "SourceID", "Secured", "CustomUrl", "MetaTitle", "GenerateBreadcrumb", "Status", "Visible", "PublishOn", "MappingID", "Comment", "PageLog"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as DynamicPageRevisionsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (DynamicPageRevisions) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<DynamicPageRevisions>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as DynamicPageRevisions);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed DynamicPageRevisions Entity 
		///</summary>
		protected virtual DynamicPageRevisions Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			DynamicPageRevisions copy = new DynamicPageRevisions();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.DynamicPageRevisionId = this.DynamicPageRevisionId;
				copy.DynamicPageId = this.DynamicPageId;
				copy.SiteId = this.SiteId;
				copy.LanguageId = this.LanguageId;
				copy.ParentDynamicPageId = this.ParentDynamicPageId;
				copy.PageName = this.PageName;
				copy.PageTitle = this.PageTitle;
				copy.PageContent = this.PageContent;
				copy.DynamicPageWebPartTemplateId = this.DynamicPageWebPartTemplateId;
				copy.HyperLink = this.HyperLink;
				copy.Valid = this.Valid;
				copy.OpenInNewWindow = this.OpenInNewWindow;
				copy.Sequence = this.Sequence;
				copy.FullScreen = this.FullScreen;
				copy.OnTopNav = this.OnTopNav;
				copy.OnLeftNav = this.OnLeftNav;
				copy.OnBottomNav = this.OnBottomNav;
				copy.OnSiteMap = this.OnSiteMap;
				copy.Searchable = this.Searchable;
				copy.MetaKeywords = this.MetaKeywords;
				copy.MetaDescription = this.MetaDescription;
				copy.PageFriendlyName = this.PageFriendlyName;
				copy.LastModified = this.LastModified;
				copy.LastModifiedBy = this.LastModifiedBy;
				copy.SearchField = this.SearchField;
				copy.SourceId = this.SourceId;
				copy.Secured = this.Secured;
				copy.CustomUrl = this.CustomUrl;
				copy.MetaTitle = this.MetaTitle;
				copy.GenerateBreadcrumb = this.GenerateBreadcrumb;
				copy.Status = this.Status;
				copy.Visible = this.Visible;
				copy.PublishOn = this.PublishOn;
				copy.MappingId = this.MappingId;
				copy.Comment = this.Comment;
				copy.PageLog = this.PageLog;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed DynamicPageRevisions Entity 
		///</summary>
		public virtual DynamicPageRevisions Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed DynamicPageRevisions Entity which is a deep copy of the current entity.
		///</summary>
		public virtual DynamicPageRevisions DeepCopy()
		{
			return EntityHelper.Clone<DynamicPageRevisions>(this as DynamicPageRevisions);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as DynamicPageRevisionsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new DynamicPageRevisionsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as DynamicPageRevisionsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(DynamicPageRevisionsColumn column)
		{
			switch(column)
			{
					case DynamicPageRevisionsColumn.DynamicPageRevisionId:
					return entityData.DynamicPageRevisionId != _originalData.DynamicPageRevisionId;
					case DynamicPageRevisionsColumn.DynamicPageId:
					return entityData.DynamicPageId != _originalData.DynamicPageId;
					case DynamicPageRevisionsColumn.SiteId:
					return entityData.SiteId != _originalData.SiteId;
					case DynamicPageRevisionsColumn.LanguageId:
					return entityData.LanguageId != _originalData.LanguageId;
					case DynamicPageRevisionsColumn.ParentDynamicPageId:
					return entityData.ParentDynamicPageId != _originalData.ParentDynamicPageId;
					case DynamicPageRevisionsColumn.PageName:
					return entityData.PageName != _originalData.PageName;
					case DynamicPageRevisionsColumn.PageTitle:
					return entityData.PageTitle != _originalData.PageTitle;
					case DynamicPageRevisionsColumn.PageContent:
					return entityData.PageContent != _originalData.PageContent;
					case DynamicPageRevisionsColumn.DynamicPageWebPartTemplateId:
					return entityData.DynamicPageWebPartTemplateId != _originalData.DynamicPageWebPartTemplateId;
					case DynamicPageRevisionsColumn.HyperLink:
					return entityData.HyperLink != _originalData.HyperLink;
					case DynamicPageRevisionsColumn.Valid:
					return entityData.Valid != _originalData.Valid;
					case DynamicPageRevisionsColumn.OpenInNewWindow:
					return entityData.OpenInNewWindow != _originalData.OpenInNewWindow;
					case DynamicPageRevisionsColumn.Sequence:
					return entityData.Sequence != _originalData.Sequence;
					case DynamicPageRevisionsColumn.FullScreen:
					return entityData.FullScreen != _originalData.FullScreen;
					case DynamicPageRevisionsColumn.OnTopNav:
					return entityData.OnTopNav != _originalData.OnTopNav;
					case DynamicPageRevisionsColumn.OnLeftNav:
					return entityData.OnLeftNav != _originalData.OnLeftNav;
					case DynamicPageRevisionsColumn.OnBottomNav:
					return entityData.OnBottomNav != _originalData.OnBottomNav;
					case DynamicPageRevisionsColumn.OnSiteMap:
					return entityData.OnSiteMap != _originalData.OnSiteMap;
					case DynamicPageRevisionsColumn.Searchable:
					return entityData.Searchable != _originalData.Searchable;
					case DynamicPageRevisionsColumn.MetaKeywords:
					return entityData.MetaKeywords != _originalData.MetaKeywords;
					case DynamicPageRevisionsColumn.MetaDescription:
					return entityData.MetaDescription != _originalData.MetaDescription;
					case DynamicPageRevisionsColumn.PageFriendlyName:
					return entityData.PageFriendlyName != _originalData.PageFriendlyName;
					case DynamicPageRevisionsColumn.LastModified:
					return entityData.LastModified != _originalData.LastModified;
					case DynamicPageRevisionsColumn.LastModifiedBy:
					return entityData.LastModifiedBy != _originalData.LastModifiedBy;
					case DynamicPageRevisionsColumn.SearchField:
					return entityData.SearchField != _originalData.SearchField;
					case DynamicPageRevisionsColumn.SourceId:
					return entityData.SourceId != _originalData.SourceId;
					case DynamicPageRevisionsColumn.Secured:
					return entityData.Secured != _originalData.Secured;
					case DynamicPageRevisionsColumn.CustomUrl:
					return entityData.CustomUrl != _originalData.CustomUrl;
					case DynamicPageRevisionsColumn.MetaTitle:
					return entityData.MetaTitle != _originalData.MetaTitle;
					case DynamicPageRevisionsColumn.GenerateBreadcrumb:
					return entityData.GenerateBreadcrumb != _originalData.GenerateBreadcrumb;
					case DynamicPageRevisionsColumn.Status:
					return entityData.Status != _originalData.Status;
					case DynamicPageRevisionsColumn.Visible:
					return entityData.Visible != _originalData.Visible;
					case DynamicPageRevisionsColumn.PublishOn:
					return entityData.PublishOn != _originalData.PublishOn;
					case DynamicPageRevisionsColumn.MappingId:
					return entityData.MappingId != _originalData.MappingId;
					case DynamicPageRevisionsColumn.Comment:
					return entityData.Comment != _originalData.Comment;
					case DynamicPageRevisionsColumn.PageLog:
					return entityData.PageLog != _originalData.PageLog;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< DynamicPageRevisionsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.DynamicPageRevisionId != _originalData.DynamicPageRevisionId;
			result = result || entityData.DynamicPageId != _originalData.DynamicPageId;
			result = result || entityData.SiteId != _originalData.SiteId;
			result = result || entityData.LanguageId != _originalData.LanguageId;
			result = result || entityData.ParentDynamicPageId != _originalData.ParentDynamicPageId;
			result = result || entityData.PageName != _originalData.PageName;
			result = result || entityData.PageTitle != _originalData.PageTitle;
			result = result || entityData.PageContent != _originalData.PageContent;
			result = result || entityData.DynamicPageWebPartTemplateId != _originalData.DynamicPageWebPartTemplateId;
			result = result || entityData.HyperLink != _originalData.HyperLink;
			result = result || entityData.Valid != _originalData.Valid;
			result = result || entityData.OpenInNewWindow != _originalData.OpenInNewWindow;
			result = result || entityData.Sequence != _originalData.Sequence;
			result = result || entityData.FullScreen != _originalData.FullScreen;
			result = result || entityData.OnTopNav != _originalData.OnTopNav;
			result = result || entityData.OnLeftNav != _originalData.OnLeftNav;
			result = result || entityData.OnBottomNav != _originalData.OnBottomNav;
			result = result || entityData.OnSiteMap != _originalData.OnSiteMap;
			result = result || entityData.Searchable != _originalData.Searchable;
			result = result || entityData.MetaKeywords != _originalData.MetaKeywords;
			result = result || entityData.MetaDescription != _originalData.MetaDescription;
			result = result || entityData.PageFriendlyName != _originalData.PageFriendlyName;
			result = result || entityData.LastModified != _originalData.LastModified;
			result = result || entityData.LastModifiedBy != _originalData.LastModifiedBy;
			result = result || entityData.SearchField != _originalData.SearchField;
			result = result || entityData.SourceId != _originalData.SourceId;
			result = result || entityData.Secured != _originalData.Secured;
			result = result || entityData.CustomUrl != _originalData.CustomUrl;
			result = result || entityData.MetaTitle != _originalData.MetaTitle;
			result = result || entityData.GenerateBreadcrumb != _originalData.GenerateBreadcrumb;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.Visible != _originalData.Visible;
			result = result || entityData.PublishOn != _originalData.PublishOn;
			result = result || entityData.MappingId != _originalData.MappingId;
			result = result || entityData.Comment != _originalData.Comment;
			result = result || entityData.PageLog != _originalData.PageLog;
			return result;
		}	
		
		///<summary>
		///  Returns a DynamicPageRevisions Entity with the original data.
		///</summary>
		public DynamicPageRevisions GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateDynamicPageRevisions(
				_originalData.DynamicPageId,
				_originalData.SiteId,
				_originalData.LanguageId,
				_originalData.ParentDynamicPageId,
				_originalData.PageName,
				_originalData.PageTitle,
				_originalData.PageContent,
				_originalData.DynamicPageWebPartTemplateId,
				_originalData.HyperLink,
				_originalData.Valid,
				_originalData.OpenInNewWindow,
				_originalData.Sequence,
				_originalData.FullScreen,
				_originalData.OnTopNav,
				_originalData.OnLeftNav,
				_originalData.OnBottomNav,
				_originalData.OnSiteMap,
				_originalData.Searchable,
				_originalData.MetaKeywords,
				_originalData.MetaDescription,
				_originalData.PageFriendlyName,
				_originalData.LastModified,
				_originalData.LastModifiedBy,
				_originalData.SearchField,
				_originalData.SourceId,
				_originalData.Secured,
				_originalData.CustomUrl,
				_originalData.MetaTitle,
				_originalData.GenerateBreadcrumb,
				_originalData.Status,
				_originalData.Visible,
				_originalData.PublishOn,
				_originalData.MappingId,
				_originalData.Comment,
				_originalData.PageLog
				);
				
			return (DynamicPageRevisions)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="DynamicPageRevisionsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is DynamicPageRevisionsBase)
				return ValueEquals(this, (DynamicPageRevisionsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="DynamicPageRevisionsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.DynamicPageRevisionId.GetHashCode() ^ 
					this.DynamicPageId.GetHashCode() ^ 
					this.SiteId.GetHashCode() ^ 
					this.LanguageId.GetHashCode() ^ 
					this.ParentDynamicPageId.GetHashCode() ^ 
					this.PageName.GetHashCode() ^ 
					((this.PageTitle == null) ? string.Empty : this.PageTitle.ToString()).GetHashCode() ^ 
					this.PageContent.GetHashCode() ^ 
					((this.DynamicPageWebPartTemplateId == null) ? string.Empty : this.DynamicPageWebPartTemplateId.ToString()).GetHashCode() ^ 
					this.HyperLink.GetHashCode() ^ 
					this.Valid.GetHashCode() ^ 
					this.OpenInNewWindow.GetHashCode() ^ 
					this.Sequence.GetHashCode() ^ 
					this.FullScreen.GetHashCode() ^ 
					this.OnTopNav.GetHashCode() ^ 
					this.OnLeftNav.GetHashCode() ^ 
					this.OnBottomNav.GetHashCode() ^ 
					this.OnSiteMap.GetHashCode() ^ 
					this.Searchable.GetHashCode() ^ 
					((this.MetaKeywords == null) ? string.Empty : this.MetaKeywords.ToString()).GetHashCode() ^ 
					((this.MetaDescription == null) ? string.Empty : this.MetaDescription.ToString()).GetHashCode() ^ 
					this.PageFriendlyName.GetHashCode() ^ 
					this.LastModified.GetHashCode() ^ 
					this.LastModifiedBy.GetHashCode() ^ 
					((this.SearchField == null) ? string.Empty : this.SearchField.ToString()).GetHashCode() ^ 
					((this.SourceId == null) ? string.Empty : this.SourceId.ToString()).GetHashCode() ^ 
					this.Secured.GetHashCode() ^ 
					((this.CustomUrl == null) ? string.Empty : this.CustomUrl.ToString()).GetHashCode() ^ 
					((this.MetaTitle == null) ? string.Empty : this.MetaTitle.ToString()).GetHashCode() ^ 
					this.GenerateBreadcrumb.GetHashCode() ^ 
					this.Status.GetHashCode() ^ 
					this.Visible.GetHashCode() ^ 
					((this.PublishOn == null) ? string.Empty : this.PublishOn.ToString()).GetHashCode() ^ 
					((this.MappingId == null) ? string.Empty : this.MappingId.ToString()).GetHashCode() ^ 
					((this.Comment == null) ? string.Empty : this.Comment.ToString()).GetHashCode() ^ 
					((this.PageLog == null) ? string.Empty : this.PageLog.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="DynamicPageRevisionsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(DynamicPageRevisionsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="DynamicPageRevisionsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="DynamicPageRevisionsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="DynamicPageRevisionsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(DynamicPageRevisionsBase Object1, DynamicPageRevisionsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.DynamicPageRevisionId != Object2.DynamicPageRevisionId)
				equal = false;
			if (Object1.DynamicPageId != Object2.DynamicPageId)
				equal = false;
			if (Object1.SiteId != Object2.SiteId)
				equal = false;
			if (Object1.LanguageId != Object2.LanguageId)
				equal = false;
			if (Object1.ParentDynamicPageId != Object2.ParentDynamicPageId)
				equal = false;
			if (Object1.PageName != Object2.PageName)
				equal = false;
			if ( Object1.PageTitle != null && Object2.PageTitle != null )
			{
				if (Object1.PageTitle != Object2.PageTitle)
					equal = false;
			}
			else if (Object1.PageTitle == null ^ Object2.PageTitle == null )
			{
				equal = false;
			}
			if (Object1.PageContent != Object2.PageContent)
				equal = false;
			if ( Object1.DynamicPageWebPartTemplateId != null && Object2.DynamicPageWebPartTemplateId != null )
			{
				if (Object1.DynamicPageWebPartTemplateId != Object2.DynamicPageWebPartTemplateId)
					equal = false;
			}
			else if (Object1.DynamicPageWebPartTemplateId == null ^ Object2.DynamicPageWebPartTemplateId == null )
			{
				equal = false;
			}
			if (Object1.HyperLink != Object2.HyperLink)
				equal = false;
			if (Object1.Valid != Object2.Valid)
				equal = false;
			if (Object1.OpenInNewWindow != Object2.OpenInNewWindow)
				equal = false;
			if (Object1.Sequence != Object2.Sequence)
				equal = false;
			if (Object1.FullScreen != Object2.FullScreen)
				equal = false;
			if (Object1.OnTopNav != Object2.OnTopNav)
				equal = false;
			if (Object1.OnLeftNav != Object2.OnLeftNav)
				equal = false;
			if (Object1.OnBottomNav != Object2.OnBottomNav)
				equal = false;
			if (Object1.OnSiteMap != Object2.OnSiteMap)
				equal = false;
			if (Object1.Searchable != Object2.Searchable)
				equal = false;
			if ( Object1.MetaKeywords != null && Object2.MetaKeywords != null )
			{
				if (Object1.MetaKeywords != Object2.MetaKeywords)
					equal = false;
			}
			else if (Object1.MetaKeywords == null ^ Object2.MetaKeywords == null )
			{
				equal = false;
			}
			if ( Object1.MetaDescription != null && Object2.MetaDescription != null )
			{
				if (Object1.MetaDescription != Object2.MetaDescription)
					equal = false;
			}
			else if (Object1.MetaDescription == null ^ Object2.MetaDescription == null )
			{
				equal = false;
			}
			if (Object1.PageFriendlyName != Object2.PageFriendlyName)
				equal = false;
			if (Object1.LastModified != Object2.LastModified)
				equal = false;
			if (Object1.LastModifiedBy != Object2.LastModifiedBy)
				equal = false;
			if ( Object1.SearchField != null && Object2.SearchField != null )
			{
				if (Object1.SearchField != Object2.SearchField)
					equal = false;
			}
			else if (Object1.SearchField == null ^ Object2.SearchField == null )
			{
				equal = false;
			}
			if ( Object1.SourceId != null && Object2.SourceId != null )
			{
				if (Object1.SourceId != Object2.SourceId)
					equal = false;
			}
			else if (Object1.SourceId == null ^ Object2.SourceId == null )
			{
				equal = false;
			}
			if (Object1.Secured != Object2.Secured)
				equal = false;
			if ( Object1.CustomUrl != null && Object2.CustomUrl != null )
			{
				if (Object1.CustomUrl != Object2.CustomUrl)
					equal = false;
			}
			else if (Object1.CustomUrl == null ^ Object2.CustomUrl == null )
			{
				equal = false;
			}
			if ( Object1.MetaTitle != null && Object2.MetaTitle != null )
			{
				if (Object1.MetaTitle != Object2.MetaTitle)
					equal = false;
			}
			else if (Object1.MetaTitle == null ^ Object2.MetaTitle == null )
			{
				equal = false;
			}
			if (Object1.GenerateBreadcrumb != Object2.GenerateBreadcrumb)
				equal = false;
			if (Object1.Status != Object2.Status)
				equal = false;
			if (Object1.Visible != Object2.Visible)
				equal = false;
			if ( Object1.PublishOn != null && Object2.PublishOn != null )
			{
				if (Object1.PublishOn != Object2.PublishOn)
					equal = false;
			}
			else if (Object1.PublishOn == null ^ Object2.PublishOn == null )
			{
				equal = false;
			}
			if ( Object1.MappingId != null && Object2.MappingId != null )
			{
				if (Object1.MappingId != Object2.MappingId)
					equal = false;
			}
			else if (Object1.MappingId == null ^ Object2.MappingId == null )
			{
				equal = false;
			}
			if ( Object1.Comment != null && Object2.Comment != null )
			{
				if (Object1.Comment != Object2.Comment)
					equal = false;
			}
			else if (Object1.Comment == null ^ Object2.Comment == null )
			{
				equal = false;
			}
			if ( Object1.PageLog != null && Object2.PageLog != null )
			{
				if (Object1.PageLog != Object2.PageLog)
					equal = false;
			}
			else if (Object1.PageLog == null ^ Object2.PageLog == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((DynamicPageRevisionsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static DynamicPageRevisionsComparer GetComparer()
        {
            return new DynamicPageRevisionsComparer();
        }
        */

        // Comparer delegates back to DynamicPageRevisions
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(DynamicPageRevisions rhs, DynamicPageRevisionsColumn which)
        {
            switch (which)
            {
            	
            	
            	case DynamicPageRevisionsColumn.DynamicPageRevisionId:
            		return this.DynamicPageRevisionId.CompareTo(rhs.DynamicPageRevisionId);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.DynamicPageId:
            		return this.DynamicPageId.CompareTo(rhs.DynamicPageId);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.SiteId:
            		return this.SiteId.CompareTo(rhs.SiteId);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.LanguageId:
            		return this.LanguageId.CompareTo(rhs.LanguageId);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.ParentDynamicPageId:
            		return this.ParentDynamicPageId.CompareTo(rhs.ParentDynamicPageId);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.PageName:
            		return this.PageName.CompareTo(rhs.PageName);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.PageTitle:
            		return this.PageTitle.CompareTo(rhs.PageTitle);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.PageContent:
            		return this.PageContent.CompareTo(rhs.PageContent);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.DynamicPageWebPartTemplateId:
            		return this.DynamicPageWebPartTemplateId.Value.CompareTo(rhs.DynamicPageWebPartTemplateId.Value);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.HyperLink:
            		return this.HyperLink.CompareTo(rhs.HyperLink);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.Valid:
            		return this.Valid.CompareTo(rhs.Valid);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.OpenInNewWindow:
            		return this.OpenInNewWindow.CompareTo(rhs.OpenInNewWindow);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.Sequence:
            		return this.Sequence.CompareTo(rhs.Sequence);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.FullScreen:
            		return this.FullScreen.CompareTo(rhs.FullScreen);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.OnTopNav:
            		return this.OnTopNav.CompareTo(rhs.OnTopNav);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.OnLeftNav:
            		return this.OnLeftNav.CompareTo(rhs.OnLeftNav);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.OnBottomNav:
            		return this.OnBottomNav.CompareTo(rhs.OnBottomNav);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.OnSiteMap:
            		return this.OnSiteMap.CompareTo(rhs.OnSiteMap);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.Searchable:
            		return this.Searchable.CompareTo(rhs.Searchable);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.MetaKeywords:
            		return this.MetaKeywords.CompareTo(rhs.MetaKeywords);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.MetaDescription:
            		return this.MetaDescription.CompareTo(rhs.MetaDescription);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.PageFriendlyName:
            		return this.PageFriendlyName.CompareTo(rhs.PageFriendlyName);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.LastModified:
            		return this.LastModified.CompareTo(rhs.LastModified);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.LastModifiedBy:
            		return this.LastModifiedBy.CompareTo(rhs.LastModifiedBy);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.SearchField:
            		return this.SearchField.CompareTo(rhs.SearchField);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.SourceId:
            		return this.SourceId.Value.CompareTo(rhs.SourceId.Value);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.Secured:
            		return this.Secured.CompareTo(rhs.Secured);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.CustomUrl:
            		return this.CustomUrl.CompareTo(rhs.CustomUrl);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.MetaTitle:
            		return this.MetaTitle.CompareTo(rhs.MetaTitle);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.GenerateBreadcrumb:
            		return this.GenerateBreadcrumb.CompareTo(rhs.GenerateBreadcrumb);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.Status:
            		return this.Status.CompareTo(rhs.Status);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.Visible:
            		return this.Visible.CompareTo(rhs.Visible);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.PublishOn:
            		return this.PublishOn.Value.CompareTo(rhs.PublishOn.Value);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.MappingId:
            		return this.MappingId.Value.CompareTo(rhs.MappingId.Value);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.Comment:
            		return this.Comment.CompareTo(rhs.Comment);
            		
            		                 
            	
            	
            	case DynamicPageRevisionsColumn.PageLog:
            		return this.PageLog.CompareTo(rhs.PageLog);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<DynamicPageRevisionsKey> Members
		
		// member variable for the EntityId property
		private DynamicPageRevisionsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual DynamicPageRevisionsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new DynamicPageRevisionsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("DynamicPageRevisions")
					.Append("|").Append( this.DynamicPageRevisionId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{37}{36}- DynamicPageRevisionId: {0}{36}- DynamicPageId: {1}{36}- SiteId: {2}{36}- LanguageId: {3}{36}- ParentDynamicPageId: {4}{36}- PageName: {5}{36}- PageTitle: {6}{36}- PageContent: {7}{36}- DynamicPageWebPartTemplateId: {8}{36}- HyperLink: {9}{36}- Valid: {10}{36}- OpenInNewWindow: {11}{36}- Sequence: {12}{36}- FullScreen: {13}{36}- OnTopNav: {14}{36}- OnLeftNav: {15}{36}- OnBottomNav: {16}{36}- OnSiteMap: {17}{36}- Searchable: {18}{36}- MetaKeywords: {19}{36}- MetaDescription: {20}{36}- PageFriendlyName: {21}{36}- LastModified: {22}{36}- LastModifiedBy: {23}{36}- SearchField: {24}{36}- SourceId: {25}{36}- Secured: {26}{36}- CustomUrl: {27}{36}- MetaTitle: {28}{36}- GenerateBreadcrumb: {29}{36}- Status: {30}{36}- Visible: {31}{36}- PublishOn: {32}{36}- MappingId: {33}{36}- Comment: {34}{36}- PageLog: {35}{36}{38}", 
				this.DynamicPageRevisionId,
				this.DynamicPageId,
				this.SiteId,
				this.LanguageId,
				this.ParentDynamicPageId,
				this.PageName,
				(this.PageTitle == null) ? string.Empty : this.PageTitle.ToString(),
				this.PageContent,
				(this.DynamicPageWebPartTemplateId == null) ? string.Empty : this.DynamicPageWebPartTemplateId.ToString(),
				this.HyperLink,
				this.Valid,
				this.OpenInNewWindow,
				this.Sequence,
				this.FullScreen,
				this.OnTopNav,
				this.OnLeftNav,
				this.OnBottomNav,
				this.OnSiteMap,
				this.Searchable,
				(this.MetaKeywords == null) ? string.Empty : this.MetaKeywords.ToString(),
				(this.MetaDescription == null) ? string.Empty : this.MetaDescription.ToString(),
				this.PageFriendlyName,
				this.LastModified,
				this.LastModifiedBy,
				(this.SearchField == null) ? string.Empty : this.SearchField.ToString(),
				(this.SourceId == null) ? string.Empty : this.SourceId.ToString(),
				this.Secured,
				(this.CustomUrl == null) ? string.Empty : this.CustomUrl.ToString(),
				(this.MetaTitle == null) ? string.Empty : this.MetaTitle.ToString(),
				this.GenerateBreadcrumb,
				this.Status,
				this.Visible,
				(this.PublishOn == null) ? string.Empty : this.PublishOn.ToString(),
				(this.MappingId == null) ? string.Empty : this.MappingId.ToString(),
				(this.Comment == null) ? string.Empty : this.Comment.ToString(),
				(this.PageLog == null) ? string.Empty : this.PageLog.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'DynamicPageRevisions' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class DynamicPageRevisionsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// DynamicPageRevisionID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "DynamicPageRevisions"</remarks>
		public System.Int32 DynamicPageRevisionId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DynamicPageID : 
		/// </summary>
		public System.Int32		  DynamicPageId = (int)0;
		
		/// <summary>
		/// SiteID : 
		/// </summary>
		public System.Int32		  SiteId = (int)0;
		
		/// <summary>
		/// LanguageID : 
		/// </summary>
		public System.Int32		  LanguageId = (int)0;
		
		/// <summary>
		/// ParentDynamicPageID : 
		/// </summary>
		public System.Int32		  ParentDynamicPageId = (int)0;
		
		/// <summary>
		/// PageName : 
		/// </summary>
		public System.String		  PageName = string.Empty;
		
		/// <summary>
		/// PageTitle : 
		/// </summary>
		public System.String		  PageTitle = null;
		
		/// <summary>
		/// PageContent : 
		/// </summary>
		public System.String		  PageContent = string.Empty;
		
		/// <summary>
		/// DynamicPageWebPartTemplateID : 
		/// </summary>
		public System.Int32?		  DynamicPageWebPartTemplateId = null;
		
		/// <summary>
		/// HyperLink : 
		/// </summary>
		public System.String		  HyperLink = string.Empty;
		
		/// <summary>
		/// Valid : 
		/// </summary>
		public System.Boolean		  Valid = false;
		
		/// <summary>
		/// OpenInNewWindow : 
		/// </summary>
		public System.Boolean		  OpenInNewWindow = false;
		
		/// <summary>
		/// Sequence : 
		/// </summary>
		public System.Int32		  Sequence = (int)0;
		
		/// <summary>
		/// FullScreen : 
		/// </summary>
		public System.Boolean		  FullScreen = false;
		
		/// <summary>
		/// OnTopNav : 
		/// </summary>
		public System.Boolean		  OnTopNav = false;
		
		/// <summary>
		/// OnLeftNav : 
		/// </summary>
		public System.Boolean		  OnLeftNav = false;
		
		/// <summary>
		/// OnBottomNav : 
		/// </summary>
		public System.Boolean		  OnBottomNav = false;
		
		/// <summary>
		/// OnSiteMap : 
		/// </summary>
		public System.Boolean		  OnSiteMap = false;
		
		/// <summary>
		/// Searchable : 
		/// </summary>
		public System.Boolean		  Searchable = false;
		
		/// <summary>
		/// MetaKeywords : 
		/// </summary>
		public System.String		  MetaKeywords = null;
		
		/// <summary>
		/// MetaDescription : 
		/// </summary>
		public System.String		  MetaDescription = null;
		
		/// <summary>
		/// PageFriendlyName : 
		/// </summary>
		public System.String		  PageFriendlyName = string.Empty;
		
		/// <summary>
		/// LastModified : 
		/// </summary>
		public System.DateTime		  LastModified = DateTime.MinValue;
		
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		public System.Int32		  LastModifiedBy = (int)0;
		
		/// <summary>
		/// SearchField : 
		/// </summary>
		public System.String		  SearchField = null;
		
		/// <summary>
		/// SourceID : 
		/// </summary>
		public System.Int32?		  SourceId = null;
		
		/// <summary>
		/// Secured : 
		/// </summary>
		public System.Boolean		  Secured = false;
		
		/// <summary>
		/// CustomUrl : 
		/// </summary>
		public System.String		  CustomUrl = null;
		
		/// <summary>
		/// MetaTitle : 
		/// </summary>
		public System.String		  MetaTitle = null;
		
		/// <summary>
		/// GenerateBreadcrumb : 
		/// </summary>
		public System.Boolean		  GenerateBreadcrumb = false;
		
		/// <summary>
		/// Status : 
		/// </summary>
		public System.Int32		  Status = (int)0;
		
		/// <summary>
		/// Visible : 
		/// </summary>
		public System.Boolean		  Visible = false;
		
		/// <summary>
		/// PublishOn : 
		/// </summary>
		public System.DateTime?		  PublishOn = null;
		
		/// <summary>
		/// MappingID : 
		/// </summary>
		public System.Guid?		  MappingId = null;
		
		/// <summary>
		/// Comment : 
		/// </summary>
		public System.String		  Comment = null;
		
		/// <summary>
		/// PageLog : 
		/// </summary>
		public System.String		  PageLog = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			DynamicPageRevisionsEntityData _tmp = new DynamicPageRevisionsEntityData();
						
			_tmp.DynamicPageRevisionId = this.DynamicPageRevisionId;
			
			_tmp.DynamicPageId = this.DynamicPageId;
			_tmp.SiteId = this.SiteId;
			_tmp.LanguageId = this.LanguageId;
			_tmp.ParentDynamicPageId = this.ParentDynamicPageId;
			_tmp.PageName = this.PageName;
			_tmp.PageTitle = this.PageTitle;
			_tmp.PageContent = this.PageContent;
			_tmp.DynamicPageWebPartTemplateId = this.DynamicPageWebPartTemplateId;
			_tmp.HyperLink = this.HyperLink;
			_tmp.Valid = this.Valid;
			_tmp.OpenInNewWindow = this.OpenInNewWindow;
			_tmp.Sequence = this.Sequence;
			_tmp.FullScreen = this.FullScreen;
			_tmp.OnTopNav = this.OnTopNav;
			_tmp.OnLeftNav = this.OnLeftNav;
			_tmp.OnBottomNav = this.OnBottomNav;
			_tmp.OnSiteMap = this.OnSiteMap;
			_tmp.Searchable = this.Searchable;
			_tmp.MetaKeywords = this.MetaKeywords;
			_tmp.MetaDescription = this.MetaDescription;
			_tmp.PageFriendlyName = this.PageFriendlyName;
			_tmp.LastModified = this.LastModified;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.SearchField = this.SearchField;
			_tmp.SourceId = this.SourceId;
			_tmp.Secured = this.Secured;
			_tmp.CustomUrl = this.CustomUrl;
			_tmp.MetaTitle = this.MetaTitle;
			_tmp.GenerateBreadcrumb = this.GenerateBreadcrumb;
			_tmp.Status = this.Status;
			_tmp.Visible = this.Visible;
			_tmp.PublishOn = this.PublishOn;
			_tmp.MappingId = this.MappingId;
			_tmp.Comment = this.Comment;
			_tmp.PageLog = this.PageLog;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			DynamicPageRevisionsEntityData _tmp = new DynamicPageRevisionsEntityData();
						
			_tmp.DynamicPageRevisionId = this.DynamicPageRevisionId;
			
			_tmp.DynamicPageId = this.DynamicPageId;
			_tmp.SiteId = this.SiteId;
			_tmp.LanguageId = this.LanguageId;
			_tmp.ParentDynamicPageId = this.ParentDynamicPageId;
			_tmp.PageName = this.PageName;
			_tmp.PageTitle = this.PageTitle;
			_tmp.PageContent = this.PageContent;
			_tmp.DynamicPageWebPartTemplateId = this.DynamicPageWebPartTemplateId;
			_tmp.HyperLink = this.HyperLink;
			_tmp.Valid = this.Valid;
			_tmp.OpenInNewWindow = this.OpenInNewWindow;
			_tmp.Sequence = this.Sequence;
			_tmp.FullScreen = this.FullScreen;
			_tmp.OnTopNav = this.OnTopNav;
			_tmp.OnLeftNav = this.OnLeftNav;
			_tmp.OnBottomNav = this.OnBottomNav;
			_tmp.OnSiteMap = this.OnSiteMap;
			_tmp.Searchable = this.Searchable;
			_tmp.MetaKeywords = this.MetaKeywords;
			_tmp.MetaDescription = this.MetaDescription;
			_tmp.PageFriendlyName = this.PageFriendlyName;
			_tmp.LastModified = this.LastModified;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.SearchField = this.SearchField;
			_tmp.SourceId = this.SourceId;
			_tmp.Secured = this.Secured;
			_tmp.CustomUrl = this.CustomUrl;
			_tmp.MetaTitle = this.MetaTitle;
			_tmp.GenerateBreadcrumb = this.GenerateBreadcrumb;
			_tmp.Status = this.Status;
			_tmp.Visible = this.Visible;
			_tmp.PublishOn = this.PublishOn;
			_tmp.MappingId = this.MappingId;
			_tmp.Comment = this.Comment;
			_tmp.PageLog = this.PageLog;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DynamicPageRevisionsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(DynamicPageRevisionsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DynamicPageRevisionsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(DynamicPageRevisionsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DynamicPageRevisionsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(DynamicPageRevisionsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				DynamicPageRevisionsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new DynamicPageRevisionsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DynamicPageRevisionsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(DynamicPageRevisionsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				DynamicPageRevisionsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new DynamicPageRevisionsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region DynamicPageRevisionsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="DynamicPageRevisions"/> object.
	/// </remarks>
	public class DynamicPageRevisionsEventArgs : System.EventArgs
	{
		private DynamicPageRevisionsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the DynamicPageRevisionsEventArgs class.
		///</summary>
		public DynamicPageRevisionsEventArgs(DynamicPageRevisionsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the DynamicPageRevisionsEventArgs class.
		///</summary>
		public DynamicPageRevisionsEventArgs(DynamicPageRevisionsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The DynamicPageRevisionsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="DynamicPageRevisionsColumn" />
		public DynamicPageRevisionsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all DynamicPageRevisions related events.
	///</summary>
	public delegate void DynamicPageRevisionsEventHandler(object sender, DynamicPageRevisionsEventArgs e);
	
	#region DynamicPageRevisionsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class DynamicPageRevisionsComparer : System.Collections.Generic.IComparer<DynamicPageRevisions>
	{
		DynamicPageRevisionsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:DynamicPageRevisionsComparer"/> class.
        /// </summary>
		public DynamicPageRevisionsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:DynamicPageRevisionsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public DynamicPageRevisionsComparer(DynamicPageRevisionsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="DynamicPageRevisions"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="DynamicPageRevisions"/> to compare.</param>
        /// <param name="b">The second <c>DynamicPageRevisions</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(DynamicPageRevisions a, DynamicPageRevisions b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(DynamicPageRevisions entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(DynamicPageRevisions a, DynamicPageRevisions b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public DynamicPageRevisionsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region DynamicPageRevisionsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="DynamicPageRevisions"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class DynamicPageRevisionsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the DynamicPageRevisionsKey class.
		/// </summary>
		public DynamicPageRevisionsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the DynamicPageRevisionsKey class.
		/// </summary>
		public DynamicPageRevisionsKey(DynamicPageRevisionsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.DynamicPageRevisionId = entity.DynamicPageRevisionId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the DynamicPageRevisionsKey class.
		/// </summary>
		public DynamicPageRevisionsKey(System.Int32 _dynamicPageRevisionId)
		{
			#region Init Properties

			this.DynamicPageRevisionId = _dynamicPageRevisionId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private DynamicPageRevisionsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public DynamicPageRevisionsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the DynamicPageRevisionId property
		private System.Int32 _dynamicPageRevisionId;
		
		/// <summary>
		/// Gets or sets the DynamicPageRevisionId property.
		/// </summary>
		public System.Int32 DynamicPageRevisionId
		{
			get { return _dynamicPageRevisionId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.DynamicPageRevisionId = value;
				
				_dynamicPageRevisionId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				DynamicPageRevisionId = ( values["DynamicPageRevisionId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["DynamicPageRevisionId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("DynamicPageRevisionId", DynamicPageRevisionId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("DynamicPageRevisionId: {0}{1}",
								DynamicPageRevisionId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region DynamicPageRevisionsColumn Enum
	
	/// <summary>
	/// Enumerate the DynamicPageRevisions columns.
	/// </summary>
	[Serializable]
	public enum DynamicPageRevisionsColumn : int
	{
		/// <summary>
		/// DynamicPageRevisionId : 
		/// </summary>
		[EnumTextValue("DynamicPageRevisionID")]
		[ColumnEnum("DynamicPageRevisionID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		DynamicPageRevisionId = 1,
		/// <summary>
		/// DynamicPageId : 
		/// </summary>
		[EnumTextValue("DynamicPageID")]
		[ColumnEnum("DynamicPageID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DynamicPageId = 2,
		/// <summary>
		/// SiteId : 
		/// </summary>
		[EnumTextValue("SiteID")]
		[ColumnEnum("SiteID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteId = 3,
		/// <summary>
		/// LanguageId : 
		/// </summary>
		[EnumTextValue("LanguageID")]
		[ColumnEnum("LanguageID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LanguageId = 4,
		/// <summary>
		/// ParentDynamicPageId : 
		/// </summary>
		[EnumTextValue("ParentDynamicPageID")]
		[ColumnEnum("ParentDynamicPageID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ParentDynamicPageId = 5,
		/// <summary>
		/// PageName : 
		/// </summary>
		[EnumTextValue("PageName")]
		[ColumnEnum("PageName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		PageName = 6,
		/// <summary>
		/// PageTitle : 
		/// </summary>
		[EnumTextValue("PageTitle")]
		[ColumnEnum("PageTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		PageTitle = 7,
		/// <summary>
		/// PageContent : 
		/// </summary>
		[EnumTextValue("PageContent")]
		[ColumnEnum("PageContent", typeof(System.String), System.Data.DbType.String, false, false, false)]
		PageContent = 8,
		/// <summary>
		/// DynamicPageWebPartTemplateId : 
		/// </summary>
		[EnumTextValue("DynamicPageWebPartTemplateID")]
		[ColumnEnum("DynamicPageWebPartTemplateID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DynamicPageWebPartTemplateId = 9,
		/// <summary>
		/// HyperLink : 
		/// </summary>
		[EnumTextValue("HyperLink")]
		[ColumnEnum("HyperLink", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		HyperLink = 10,
		/// <summary>
		/// Valid : 
		/// </summary>
		[EnumTextValue("Valid")]
		[ColumnEnum("Valid", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Valid = 11,
		/// <summary>
		/// OpenInNewWindow : 
		/// </summary>
		[EnumTextValue("OpenInNewWindow")]
		[ColumnEnum("OpenInNewWindow", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		OpenInNewWindow = 12,
		/// <summary>
		/// Sequence : 
		/// </summary>
		[EnumTextValue("Sequence")]
		[ColumnEnum("Sequence", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Sequence = 13,
		/// <summary>
		/// FullScreen : 
		/// </summary>
		[EnumTextValue("FullScreen")]
		[ColumnEnum("FullScreen", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		FullScreen = 14,
		/// <summary>
		/// OnTopNav : 
		/// </summary>
		[EnumTextValue("OnTopNav")]
		[ColumnEnum("OnTopNav", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		OnTopNav = 15,
		/// <summary>
		/// OnLeftNav : 
		/// </summary>
		[EnumTextValue("OnLeftNav")]
		[ColumnEnum("OnLeftNav", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		OnLeftNav = 16,
		/// <summary>
		/// OnBottomNav : 
		/// </summary>
		[EnumTextValue("OnBottomNav")]
		[ColumnEnum("OnBottomNav", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		OnBottomNav = 17,
		/// <summary>
		/// OnSiteMap : 
		/// </summary>
		[EnumTextValue("OnSiteMap")]
		[ColumnEnum("OnSiteMap", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		OnSiteMap = 18,
		/// <summary>
		/// Searchable : 
		/// </summary>
		[EnumTextValue("Searchable")]
		[ColumnEnum("Searchable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Searchable = 19,
		/// <summary>
		/// MetaKeywords : 
		/// </summary>
		[EnumTextValue("MetaKeywords")]
		[ColumnEnum("MetaKeywords", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		MetaKeywords = 20,
		/// <summary>
		/// MetaDescription : 
		/// </summary>
		[EnumTextValue("MetaDescription")]
		[ColumnEnum("MetaDescription", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		MetaDescription = 21,
		/// <summary>
		/// PageFriendlyName : 
		/// </summary>
		[EnumTextValue("PageFriendlyName")]
		[ColumnEnum("PageFriendlyName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		PageFriendlyName = 22,
		/// <summary>
		/// LastModified : 
		/// </summary>
		[EnumTextValue("LastModified")]
		[ColumnEnum("LastModified", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastModified = 23,
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		[EnumTextValue("LastModifiedBy")]
		[ColumnEnum("LastModifiedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LastModifiedBy = 24,
		/// <summary>
		/// SearchField : 
		/// </summary>
		[EnumTextValue("SearchField")]
		[ColumnEnum("SearchField", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SearchField = 25,
		/// <summary>
		/// SourceId : 
		/// </summary>
		[EnumTextValue("SourceID")]
		[ColumnEnum("SourceID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SourceId = 26,
		/// <summary>
		/// Secured : 
		/// </summary>
		[EnumTextValue("Secured")]
		[ColumnEnum("Secured", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Secured = 27,
		/// <summary>
		/// CustomUrl : 
		/// </summary>
		[EnumTextValue("CustomUrl")]
		[ColumnEnum("CustomUrl", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 512)]
		CustomUrl = 28,
		/// <summary>
		/// MetaTitle : 
		/// </summary>
		[EnumTextValue("MetaTitle")]
		[ColumnEnum("MetaTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		MetaTitle = 29,
		/// <summary>
		/// GenerateBreadcrumb : 
		/// </summary>
		[EnumTextValue("GenerateBreadcrumb")]
		[ColumnEnum("GenerateBreadcrumb", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		GenerateBreadcrumb = 30,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Status = 31,
		/// <summary>
		/// Visible : 
		/// </summary>
		[EnumTextValue("Visible")]
		[ColumnEnum("Visible", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Visible = 32,
		/// <summary>
		/// PublishOn : 
		/// </summary>
		[EnumTextValue("PublishOn")]
		[ColumnEnum("PublishOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		PublishOn = 33,
		/// <summary>
		/// MappingId : 
		/// </summary>
		[EnumTextValue("MappingID")]
		[ColumnEnum("MappingID", typeof(System.Guid), System.Data.DbType.Guid, false, false, true)]
		MappingId = 34,
		/// <summary>
		/// Comment : 
		/// </summary>
		[EnumTextValue("Comment")]
		[ColumnEnum("Comment", typeof(System.String), System.Data.DbType.String, false, false, true, 2000)]
		Comment = 35,
		/// <summary>
		/// PageLog : 
		/// </summary>
		[EnumTextValue("PageLog")]
		[ColumnEnum("PageLog", typeof(System.String), System.Data.DbType.String, false, false, true, 2000)]
		PageLog = 36
	}//End enum

	#endregion DynamicPageRevisionsColumn Enum

} // end namespace

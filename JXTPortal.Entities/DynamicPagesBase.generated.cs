
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file DynamicPages.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'DynamicPages' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class DynamicPagesBase : EntityBase, IDynamicPages, IEntityId<DynamicPagesKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private DynamicPagesEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private DynamicPagesEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private DynamicPagesEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<DynamicPages> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DynamicPagesEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DynamicPagesEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="DynamicPagesBase"/> instance.
		///</summary>
		public DynamicPagesBase()
		{
			this.entityData = new DynamicPagesEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="DynamicPagesBase"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_languageId"></param>
		///<param name="_parentDynamicPageId"></param>
		///<param name="_pageName"></param>
		///<param name="_pageTitle"></param>
		///<param name="_pageContent"></param>
		///<param name="_dynamicPageWebPartTemplateId"></param>
		///<param name="_hyperLink"></param>
		///<param name="_valid"></param>
		///<param name="_openInNewWindow"></param>
		///<param name="_sequence"></param>
		///<param name="_fullScreen"></param>
		///<param name="_onTopNav"></param>
		///<param name="_onLeftNav"></param>
		///<param name="_onBottomNav"></param>
		///<param name="_onSiteMap"></param>
		///<param name="_searchable"></param>
		///<param name="_metaKeywords"></param>
		///<param name="_metaDescription"></param>
		///<param name="_pageFriendlyName"></param>
		///<param name="_lastModified"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_searchField"></param>
		///<param name="_sourceId"></param>
		///<param name="_secured"></param>
		///<param name="_customUrl"></param>
		///<param name="_metaTitle"></param>
		///<param name="_generateBreadcrumb"></param>
		///<param name="_publishOn"></param>
		///<param name="_visible"></param>
		public DynamicPagesBase(System.Int32 _siteId, System.Int32 _languageId, System.Int32 _parentDynamicPageId, 
			System.String _pageName, System.String _pageTitle, System.String _pageContent, System.Int32? _dynamicPageWebPartTemplateId, 
			System.String _hyperLink, System.Boolean _valid, System.Boolean _openInNewWindow, System.Int32 _sequence, 
			System.Boolean _fullScreen, System.Boolean _onTopNav, System.Boolean _onLeftNav, System.Boolean _onBottomNav, 
			System.Boolean _onSiteMap, System.Boolean _searchable, System.String _metaKeywords, System.String _metaDescription, 
			System.String _pageFriendlyName, System.DateTime _lastModified, System.Int32 _lastModifiedBy, 
			System.String _searchField, System.Int32? _sourceId, System.Boolean _secured, System.String _customUrl, 
			System.String _metaTitle, System.Boolean _generateBreadcrumb, System.DateTime? _publishOn, 
			System.Boolean _visible)
		{
			this.entityData = new DynamicPagesEntityData();
			this.backupData = null;

			this.SiteId = _siteId;
			this.LanguageId = _languageId;
			this.ParentDynamicPageId = _parentDynamicPageId;
			this.PageName = _pageName;
			this.PageTitle = _pageTitle;
			this.PageContent = _pageContent;
			this.DynamicPageWebPartTemplateId = _dynamicPageWebPartTemplateId;
			this.HyperLink = _hyperLink;
			this.Valid = _valid;
			this.OpenInNewWindow = _openInNewWindow;
			this.Sequence = _sequence;
			this.FullScreen = _fullScreen;
			this.OnTopNav = _onTopNav;
			this.OnLeftNav = _onLeftNav;
			this.OnBottomNav = _onBottomNav;
			this.OnSiteMap = _onSiteMap;
			this.Searchable = _searchable;
			this.MetaKeywords = _metaKeywords;
			this.MetaDescription = _metaDescription;
			this.PageFriendlyName = _pageFriendlyName;
			this.LastModified = _lastModified;
			this.LastModifiedBy = _lastModifiedBy;
			this.SearchField = _searchField;
			this.SourceId = _sourceId;
			this.Secured = _secured;
			this.CustomUrl = _customUrl;
			this.MetaTitle = _metaTitle;
			this.GenerateBreadcrumb = _generateBreadcrumb;
			this.PublishOn = _publishOn;
			this.Visible = _visible;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="DynamicPages"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_languageId"></param>
		///<param name="_parentDynamicPageId"></param>
		///<param name="_pageName"></param>
		///<param name="_pageTitle"></param>
		///<param name="_pageContent"></param>
		///<param name="_dynamicPageWebPartTemplateId"></param>
		///<param name="_hyperLink"></param>
		///<param name="_valid"></param>
		///<param name="_openInNewWindow"></param>
		///<param name="_sequence"></param>
		///<param name="_fullScreen"></param>
		///<param name="_onTopNav"></param>
		///<param name="_onLeftNav"></param>
		///<param name="_onBottomNav"></param>
		///<param name="_onSiteMap"></param>
		///<param name="_searchable"></param>
		///<param name="_metaKeywords"></param>
		///<param name="_metaDescription"></param>
		///<param name="_pageFriendlyName"></param>
		///<param name="_lastModified"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_searchField"></param>
		///<param name="_sourceId"></param>
		///<param name="_secured"></param>
		///<param name="_customUrl"></param>
		///<param name="_metaTitle"></param>
		///<param name="_generateBreadcrumb"></param>
		///<param name="_publishOn"></param>
		///<param name="_visible"></param>
		public static DynamicPages CreateDynamicPages(System.Int32 _siteId, System.Int32 _languageId, System.Int32 _parentDynamicPageId, 
			System.String _pageName, System.String _pageTitle, System.String _pageContent, System.Int32? _dynamicPageWebPartTemplateId, 
			System.String _hyperLink, System.Boolean _valid, System.Boolean _openInNewWindow, System.Int32 _sequence, 
			System.Boolean _fullScreen, System.Boolean _onTopNav, System.Boolean _onLeftNav, System.Boolean _onBottomNav, 
			System.Boolean _onSiteMap, System.Boolean _searchable, System.String _metaKeywords, System.String _metaDescription, 
			System.String _pageFriendlyName, System.DateTime _lastModified, System.Int32 _lastModifiedBy, 
			System.String _searchField, System.Int32? _sourceId, System.Boolean _secured, System.String _customUrl, 
			System.String _metaTitle, System.Boolean _generateBreadcrumb, System.DateTime? _publishOn, 
			System.Boolean _visible)
		{
			DynamicPages newDynamicPages = new DynamicPages();
			newDynamicPages.SiteId = _siteId;
			newDynamicPages.LanguageId = _languageId;
			newDynamicPages.ParentDynamicPageId = _parentDynamicPageId;
			newDynamicPages.PageName = _pageName;
			newDynamicPages.PageTitle = _pageTitle;
			newDynamicPages.PageContent = _pageContent;
			newDynamicPages.DynamicPageWebPartTemplateId = _dynamicPageWebPartTemplateId;
			newDynamicPages.HyperLink = _hyperLink;
			newDynamicPages.Valid = _valid;
			newDynamicPages.OpenInNewWindow = _openInNewWindow;
			newDynamicPages.Sequence = _sequence;
			newDynamicPages.FullScreen = _fullScreen;
			newDynamicPages.OnTopNav = _onTopNav;
			newDynamicPages.OnLeftNav = _onLeftNav;
			newDynamicPages.OnBottomNav = _onBottomNav;
			newDynamicPages.OnSiteMap = _onSiteMap;
			newDynamicPages.Searchable = _searchable;
			newDynamicPages.MetaKeywords = _metaKeywords;
			newDynamicPages.MetaDescription = _metaDescription;
			newDynamicPages.PageFriendlyName = _pageFriendlyName;
			newDynamicPages.LastModified = _lastModified;
			newDynamicPages.LastModifiedBy = _lastModifiedBy;
			newDynamicPages.SearchField = _searchField;
			newDynamicPages.SourceId = _sourceId;
			newDynamicPages.Secured = _secured;
			newDynamicPages.CustomUrl = _customUrl;
			newDynamicPages.MetaTitle = _metaTitle;
			newDynamicPages.GenerateBreadcrumb = _generateBreadcrumb;
			newDynamicPages.PublishOn = _publishOn;
			newDynamicPages.Visible = _visible;
			return newDynamicPages;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the DynamicPageId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 DynamicPageId
		{
			get
			{
				return this.entityData.DynamicPageId; 
			}
			
			set
			{
				if (this.entityData.DynamicPageId == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.DynamicPageId, this.entityData.DynamicPageId);
				this.entityData.DynamicPageId = value;
				this.EntityId.DynamicPageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.DynamicPageId, this.entityData.DynamicPageId);
				OnPropertyChanged("DynamicPageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SiteId
		{
			get
			{
				return this.entityData.SiteId; 
			}
			
			set
			{
				if (this.entityData.SiteId == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.SiteId, this.entityData.SiteId);
				this.entityData.SiteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.SiteId, this.entityData.SiteId);
				OnPropertyChanged("SiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LanguageId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LanguageId
		{
			get
			{
				return this.entityData.LanguageId; 
			}
			
			set
			{
				if (this.entityData.LanguageId == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.LanguageId, this.entityData.LanguageId);
				this.entityData.LanguageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.LanguageId, this.entityData.LanguageId);
				OnPropertyChanged("LanguageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ParentDynamicPageId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ParentDynamicPageId
		{
			get
			{
				return this.entityData.ParentDynamicPageId; 
			}
			
			set
			{
				if (this.entityData.ParentDynamicPageId == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.ParentDynamicPageId, this.entityData.ParentDynamicPageId);
				this.entityData.ParentDynamicPageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.ParentDynamicPageId, this.entityData.ParentDynamicPageId);
				OnPropertyChanged("ParentDynamicPageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PageName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String PageName
		{
			get
			{
				return this.entityData.PageName; 
			}
			
			set
			{
				if (this.entityData.PageName == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.PageName, this.entityData.PageName);
				this.entityData.PageName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.PageName, this.entityData.PageName);
				OnPropertyChanged("PageName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PageTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String PageTitle
		{
			get
			{
				return this.entityData.PageTitle; 
			}
			
			set
			{
				if (this.entityData.PageTitle == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.PageTitle, this.entityData.PageTitle);
				this.entityData.PageTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.PageTitle, this.entityData.PageTitle);
				OnPropertyChanged("PageTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PageContent property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.String PageContent
		{
			get
			{
				return this.entityData.PageContent; 
			}
			
			set
			{
				if (this.entityData.PageContent == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.PageContent, this.entityData.PageContent);
				this.entityData.PageContent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.PageContent, this.entityData.PageContent);
				OnPropertyChanged("PageContent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DynamicPageWebPartTemplateId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDynamicPageWebPartTemplateIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DynamicPageWebPartTemplateId
		{
			get
			{
				return this.entityData.DynamicPageWebPartTemplateId; 
			}
			
			set
			{
				if (this.entityData.DynamicPageWebPartTemplateId == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.DynamicPageWebPartTemplateId, this.entityData.DynamicPageWebPartTemplateId);
				this.entityData.DynamicPageWebPartTemplateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.DynamicPageWebPartTemplateId, this.entityData.DynamicPageWebPartTemplateId);
				OnPropertyChanged("DynamicPageWebPartTemplateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HyperLink property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String HyperLink
		{
			get
			{
				return this.entityData.HyperLink; 
			}
			
			set
			{
				if (this.entityData.HyperLink == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.HyperLink, this.entityData.HyperLink);
				this.entityData.HyperLink = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.HyperLink, this.entityData.HyperLink);
				OnPropertyChanged("HyperLink");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Valid property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Valid
		{
			get
			{
				return this.entityData.Valid; 
			}
			
			set
			{
				if (this.entityData.Valid == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.Valid, this.entityData.Valid);
				this.entityData.Valid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.Valid, this.entityData.Valid);
				OnPropertyChanged("Valid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OpenInNewWindow property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean OpenInNewWindow
		{
			get
			{
				return this.entityData.OpenInNewWindow; 
			}
			
			set
			{
				if (this.entityData.OpenInNewWindow == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.OpenInNewWindow, this.entityData.OpenInNewWindow);
				this.entityData.OpenInNewWindow = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.OpenInNewWindow, this.entityData.OpenInNewWindow);
				OnPropertyChanged("OpenInNewWindow");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sequence property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Sequence
		{
			get
			{
				return this.entityData.Sequence; 
			}
			
			set
			{
				if (this.entityData.Sequence == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.Sequence, this.entityData.Sequence);
				this.entityData.Sequence = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.Sequence, this.entityData.Sequence);
				OnPropertyChanged("Sequence");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FullScreen property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean FullScreen
		{
			get
			{
				return this.entityData.FullScreen; 
			}
			
			set
			{
				if (this.entityData.FullScreen == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.FullScreen, this.entityData.FullScreen);
				this.entityData.FullScreen = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.FullScreen, this.entityData.FullScreen);
				OnPropertyChanged("FullScreen");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnTopNav property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean OnTopNav
		{
			get
			{
				return this.entityData.OnTopNav; 
			}
			
			set
			{
				if (this.entityData.OnTopNav == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.OnTopNav, this.entityData.OnTopNav);
				this.entityData.OnTopNav = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.OnTopNav, this.entityData.OnTopNav);
				OnPropertyChanged("OnTopNav");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnLeftNav property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean OnLeftNav
		{
			get
			{
				return this.entityData.OnLeftNav; 
			}
			
			set
			{
				if (this.entityData.OnLeftNav == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.OnLeftNav, this.entityData.OnLeftNav);
				this.entityData.OnLeftNav = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.OnLeftNav, this.entityData.OnLeftNav);
				OnPropertyChanged("OnLeftNav");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnBottomNav property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean OnBottomNav
		{
			get
			{
				return this.entityData.OnBottomNav; 
			}
			
			set
			{
				if (this.entityData.OnBottomNav == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.OnBottomNav, this.entityData.OnBottomNav);
				this.entityData.OnBottomNav = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.OnBottomNav, this.entityData.OnBottomNav);
				OnPropertyChanged("OnBottomNav");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnSiteMap property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean OnSiteMap
		{
			get
			{
				return this.entityData.OnSiteMap; 
			}
			
			set
			{
				if (this.entityData.OnSiteMap == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.OnSiteMap, this.entityData.OnSiteMap);
				this.entityData.OnSiteMap = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.OnSiteMap, this.entityData.OnSiteMap);
				OnPropertyChanged("OnSiteMap");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Searchable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Searchable
		{
			get
			{
				return this.entityData.Searchable; 
			}
			
			set
			{
				if (this.entityData.Searchable == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.Searchable, this.entityData.Searchable);
				this.entityData.Searchable = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.Searchable, this.entityData.Searchable);
				OnPropertyChanged("Searchable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MetaKeywords property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String MetaKeywords
		{
			get
			{
				return this.entityData.MetaKeywords; 
			}
			
			set
			{
				if (this.entityData.MetaKeywords == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.MetaKeywords, this.entityData.MetaKeywords);
				this.entityData.MetaKeywords = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.MetaKeywords, this.entityData.MetaKeywords);
				OnPropertyChanged("MetaKeywords");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MetaDescription property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1024)]
		public virtual System.String MetaDescription
		{
			get
			{
				return this.entityData.MetaDescription; 
			}
			
			set
			{
				if (this.entityData.MetaDescription == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.MetaDescription, this.entityData.MetaDescription);
				this.entityData.MetaDescription = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.MetaDescription, this.entityData.MetaDescription);
				OnPropertyChanged("MetaDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PageFriendlyName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String PageFriendlyName
		{
			get
			{
				return this.entityData.PageFriendlyName; 
			}
			
			set
			{
				if (this.entityData.PageFriendlyName == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.PageFriendlyName, this.entityData.PageFriendlyName);
				this.entityData.PageFriendlyName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.PageFriendlyName, this.entityData.PageFriendlyName);
				OnPropertyChanged("PageFriendlyName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModified property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastModified
		{
			get
			{
				return this.entityData.LastModified; 
			}
			
			set
			{
				if (this.entityData.LastModified == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.LastModified, this.entityData.LastModified);
				this.entityData.LastModified = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.LastModified, this.entityData.LastModified);
				OnPropertyChanged("LastModified");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LastModifiedBy
		{
			get
			{
				return this.entityData.LastModifiedBy; 
			}
			
			set
			{
				if (this.entityData.LastModifiedBy == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				this.entityData.LastModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				OnPropertyChanged("LastModifiedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SearchField property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String SearchField
		{
			get
			{
				return this.entityData.SearchField; 
			}
			
			set
			{
				if (this.entityData.SearchField == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.SearchField, this.entityData.SearchField);
				this.entityData.SearchField = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.SearchField, this.entityData.SearchField);
				OnPropertyChanged("SearchField");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SourceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSourceIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SourceId
		{
			get
			{
				return this.entityData.SourceId; 
			}
			
			set
			{
				if (this.entityData.SourceId == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.SourceId, this.entityData.SourceId);
				this.entityData.SourceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.SourceId, this.entityData.SourceId);
				OnPropertyChanged("SourceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Secured property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Secured
		{
			get
			{
				return this.entityData.Secured; 
			}
			
			set
			{
				if (this.entityData.Secured == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.Secured, this.entityData.Secured);
				this.entityData.Secured = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.Secured, this.entityData.Secured);
				OnPropertyChanged("Secured");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomUrl property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 512)]
		public virtual System.String CustomUrl
		{
			get
			{
				return this.entityData.CustomUrl; 
			}
			
			set
			{
				if (this.entityData.CustomUrl == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.CustomUrl, this.entityData.CustomUrl);
				this.entityData.CustomUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.CustomUrl, this.entityData.CustomUrl);
				OnPropertyChanged("CustomUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MetaTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String MetaTitle
		{
			get
			{
				return this.entityData.MetaTitle; 
			}
			
			set
			{
				if (this.entityData.MetaTitle == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.MetaTitle, this.entityData.MetaTitle);
				this.entityData.MetaTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.MetaTitle, this.entityData.MetaTitle);
				OnPropertyChanged("MetaTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GenerateBreadcrumb property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean GenerateBreadcrumb
		{
			get
			{
				return this.entityData.GenerateBreadcrumb; 
			}
			
			set
			{
				if (this.entityData.GenerateBreadcrumb == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.GenerateBreadcrumb, this.entityData.GenerateBreadcrumb);
				this.entityData.GenerateBreadcrumb = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.GenerateBreadcrumb, this.entityData.GenerateBreadcrumb);
				OnPropertyChanged("GenerateBreadcrumb");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PublishOn property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPublishOnNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PublishOn
		{
			get
			{
				return this.entityData.PublishOn; 
			}
			
			set
			{
				if (this.entityData.PublishOn == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.PublishOn, this.entityData.PublishOn);
				this.entityData.PublishOn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.PublishOn, this.entityData.PublishOn);
				OnPropertyChanged("PublishOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Visible property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Visible
		{
			get
			{
				return this.entityData.Visible; 
			}
			
			set
			{
				if (this.entityData.Visible == value)
					return;
					
				OnColumnChanging(DynamicPagesColumn.Visible, this.entityData.Visible);
				this.entityData.Visible = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DynamicPagesColumn.Visible, this.entityData.Visible);
				OnPropertyChanged("Visible");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="DynamicPageWebPartTemplates"/>.
		/// </summary>
		/// <value>The source DynamicPageWebPartTemplates for DynamicPageWebPartTemplateId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual DynamicPageWebPartTemplates DynamicPageWebPartTemplateIdSource
      	{
            get { return entityData.DynamicPageWebPartTemplateIdSource; }
            set { entityData.DynamicPageWebPartTemplateIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Languages"/>.
		/// </summary>
		/// <value>The source Languages for LanguageId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Languages LanguageIdSource
      	{
            get { return entityData.LanguageIdSource; }
            set { entityData.LanguageIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return entityData.LastModifiedBySource; }
            set { entityData.LastModifiedBySource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Sites SiteIdSource
      	{
            get { return entityData.SiteIdSource; }
            set { entityData.SiteIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of RelatedDynamicPages objects
		///	which are related to this object through the relation FK__RelatedDy__Dynam__1B3A99B8
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<RelatedDynamicPages> RelatedDynamicPagesCollectionGetByDynamicPageId
		{
			get { return entityData.RelatedDynamicPagesCollectionGetByDynamicPageId; }
			set { entityData.RelatedDynamicPagesCollectionGetByDynamicPageId = value; }	
		}

		/// <summary>
		///	Holds a collection of DynamicPagesFromRelatedDynamicPages objects
		///	which are related to this object through the junction table RelatedDynamicPages
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DynamicPages> DynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages
		{
			get { return entityData.DynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages; }
			set { entityData.DynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages = value; }	
		}

		/// <summary>
		///	Holds a collection of DynamicPagesFromRelatedDynamicPages objects
		///	which are related to this object through the junction table RelatedDynamicPages
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DynamicPages> RelatedDynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages
		{
			get { return entityData.RelatedDynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages; }
			set { entityData.RelatedDynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GlobalSettings objects
		///	which are related to this object through the relation FK__GlobalSet__Defau__58671BC9
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GlobalSettings> GlobalSettingsCollection
		{
			get { return entityData.GlobalSettingsCollection; }
			set { entityData.GlobalSettingsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of DynamicpagesCustomWidget objects
		///	which are related to this object through the relation FK__Dynamicpa__Dynam__120E1E41
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DynamicpagesCustomWidget> DynamicpagesCustomWidgetCollection
		{
			get { return entityData.DynamicpagesCustomWidgetCollection; }
			set { entityData.DynamicpagesCustomWidgetCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of RelatedDynamicPages objects
		///	which are related to this object through the relation FK__RelatedDy__Relat__1C2EBDF1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<RelatedDynamicPages> RelatedDynamicPagesCollectionGetByRelatedDynamicPageId
		{
			get { return entityData.RelatedDynamicPagesCollectionGetByRelatedDynamicPageId; }
			set { entityData.RelatedDynamicPagesCollectionGetByRelatedDynamicPageId = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PageName", "Page Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PageName", "Page Name", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PageTitle", "Page Title", 510));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PageContent", "Page Content"));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("HyperLink", "Hyper Link"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HyperLink", "Hyper Link", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MetaKeywords", "Meta Keywords", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MetaDescription", "Meta Description", 1024));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PageFriendlyName", "Page Friendly Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PageFriendlyName", "Page Friendly Name", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CustomUrl", "Custom Url", 512));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MetaTitle", "Meta Title", 510));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "DynamicPages"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"DynamicPageID", "SiteID", "LanguageID", "ParentDynamicPageID", "PageName", "PageTitle", "PageContent", "DynamicPageWebPartTemplateID", "HyperLink", "Valid", "OpenInNewWindow", "Sequence", "FullScreen", "OnTopNav", "OnLeftNav", "OnBottomNav", "OnSiteMap", "Searchable", "MetaKeywords", "MetaDescription", "PageFriendlyName", "LastModified", "LastModifiedBy", "SearchField", "SourceID", "Secured", "CustomUrl", "MetaTitle", "GenerateBreadcrumb", "PublishOn", "Visible"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as DynamicPagesEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (DynamicPages) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<DynamicPages>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as DynamicPages);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed DynamicPages Entity 
		///</summary>
		protected virtual DynamicPages Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			DynamicPages copy = new DynamicPages();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.DynamicPageId = this.DynamicPageId;
				copy.SiteId = this.SiteId;
				copy.LanguageId = this.LanguageId;
				copy.ParentDynamicPageId = this.ParentDynamicPageId;
				copy.PageName = this.PageName;
				copy.PageTitle = this.PageTitle;
				copy.PageContent = this.PageContent;
				copy.DynamicPageWebPartTemplateId = this.DynamicPageWebPartTemplateId;
				copy.HyperLink = this.HyperLink;
				copy.Valid = this.Valid;
				copy.OpenInNewWindow = this.OpenInNewWindow;
				copy.Sequence = this.Sequence;
				copy.FullScreen = this.FullScreen;
				copy.OnTopNav = this.OnTopNav;
				copy.OnLeftNav = this.OnLeftNav;
				copy.OnBottomNav = this.OnBottomNav;
				copy.OnSiteMap = this.OnSiteMap;
				copy.Searchable = this.Searchable;
				copy.MetaKeywords = this.MetaKeywords;
				copy.MetaDescription = this.MetaDescription;
				copy.PageFriendlyName = this.PageFriendlyName;
				copy.LastModified = this.LastModified;
				copy.LastModifiedBy = this.LastModifiedBy;
				copy.SearchField = this.SearchField;
				copy.SourceId = this.SourceId;
				copy.Secured = this.Secured;
				copy.CustomUrl = this.CustomUrl;
				copy.MetaTitle = this.MetaTitle;
				copy.GenerateBreadcrumb = this.GenerateBreadcrumb;
				copy.PublishOn = this.PublishOn;
				copy.Visible = this.Visible;
			
			if (this.DynamicPageWebPartTemplateIdSource != null && existingCopies.Contains(this.DynamicPageWebPartTemplateIdSource))
				copy.DynamicPageWebPartTemplateIdSource = existingCopies[this.DynamicPageWebPartTemplateIdSource] as DynamicPageWebPartTemplates;
			else
				copy.DynamicPageWebPartTemplateIdSource = MakeCopyOf(this.DynamicPageWebPartTemplateIdSource, existingCopies) as DynamicPageWebPartTemplates;
			if (this.LanguageIdSource != null && existingCopies.Contains(this.LanguageIdSource))
				copy.LanguageIdSource = existingCopies[this.LanguageIdSource] as Languages;
			else
				copy.LanguageIdSource = MakeCopyOf(this.LanguageIdSource, existingCopies) as Languages;
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				copy.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				copy.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				copy.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				copy.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
		
			//deep copy nested objects
			copy.RelatedDynamicPagesCollectionGetByDynamicPageId = (TList<RelatedDynamicPages>) MakeCopyOf(this.RelatedDynamicPagesCollectionGetByDynamicPageId, existingCopies); 
			copy.DynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages = (TList<DynamicPages>) MakeCopyOf(this.DynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages, existingCopies); 
			copy.RelatedDynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages = (TList<DynamicPages>) MakeCopyOf(this.RelatedDynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages, existingCopies); 
			copy.GlobalSettingsCollection = (TList<GlobalSettings>) MakeCopyOf(this.GlobalSettingsCollection, existingCopies); 
			copy.DynamicpagesCustomWidgetCollection = (TList<DynamicpagesCustomWidget>) MakeCopyOf(this.DynamicpagesCustomWidgetCollection, existingCopies); 
			copy.RelatedDynamicPagesCollectionGetByRelatedDynamicPageId = (TList<RelatedDynamicPages>) MakeCopyOf(this.RelatedDynamicPagesCollectionGetByRelatedDynamicPageId, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed DynamicPages Entity 
		///</summary>
		public virtual DynamicPages Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed DynamicPages Entity which is a deep copy of the current entity.
		///</summary>
		public virtual DynamicPages DeepCopy()
		{
			return EntityHelper.Clone<DynamicPages>(this as DynamicPages);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as DynamicPagesEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new DynamicPagesEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as DynamicPagesEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(DynamicPagesColumn column)
		{
			switch(column)
			{
					case DynamicPagesColumn.DynamicPageId:
					return entityData.DynamicPageId != _originalData.DynamicPageId;
					case DynamicPagesColumn.SiteId:
					return entityData.SiteId != _originalData.SiteId;
					case DynamicPagesColumn.LanguageId:
					return entityData.LanguageId != _originalData.LanguageId;
					case DynamicPagesColumn.ParentDynamicPageId:
					return entityData.ParentDynamicPageId != _originalData.ParentDynamicPageId;
					case DynamicPagesColumn.PageName:
					return entityData.PageName != _originalData.PageName;
					case DynamicPagesColumn.PageTitle:
					return entityData.PageTitle != _originalData.PageTitle;
					case DynamicPagesColumn.PageContent:
					return entityData.PageContent != _originalData.PageContent;
					case DynamicPagesColumn.DynamicPageWebPartTemplateId:
					return entityData.DynamicPageWebPartTemplateId != _originalData.DynamicPageWebPartTemplateId;
					case DynamicPagesColumn.HyperLink:
					return entityData.HyperLink != _originalData.HyperLink;
					case DynamicPagesColumn.Valid:
					return entityData.Valid != _originalData.Valid;
					case DynamicPagesColumn.OpenInNewWindow:
					return entityData.OpenInNewWindow != _originalData.OpenInNewWindow;
					case DynamicPagesColumn.Sequence:
					return entityData.Sequence != _originalData.Sequence;
					case DynamicPagesColumn.FullScreen:
					return entityData.FullScreen != _originalData.FullScreen;
					case DynamicPagesColumn.OnTopNav:
					return entityData.OnTopNav != _originalData.OnTopNav;
					case DynamicPagesColumn.OnLeftNav:
					return entityData.OnLeftNav != _originalData.OnLeftNav;
					case DynamicPagesColumn.OnBottomNav:
					return entityData.OnBottomNav != _originalData.OnBottomNav;
					case DynamicPagesColumn.OnSiteMap:
					return entityData.OnSiteMap != _originalData.OnSiteMap;
					case DynamicPagesColumn.Searchable:
					return entityData.Searchable != _originalData.Searchable;
					case DynamicPagesColumn.MetaKeywords:
					return entityData.MetaKeywords != _originalData.MetaKeywords;
					case DynamicPagesColumn.MetaDescription:
					return entityData.MetaDescription != _originalData.MetaDescription;
					case DynamicPagesColumn.PageFriendlyName:
					return entityData.PageFriendlyName != _originalData.PageFriendlyName;
					case DynamicPagesColumn.LastModified:
					return entityData.LastModified != _originalData.LastModified;
					case DynamicPagesColumn.LastModifiedBy:
					return entityData.LastModifiedBy != _originalData.LastModifiedBy;
					case DynamicPagesColumn.SearchField:
					return entityData.SearchField != _originalData.SearchField;
					case DynamicPagesColumn.SourceId:
					return entityData.SourceId != _originalData.SourceId;
					case DynamicPagesColumn.Secured:
					return entityData.Secured != _originalData.Secured;
					case DynamicPagesColumn.CustomUrl:
					return entityData.CustomUrl != _originalData.CustomUrl;
					case DynamicPagesColumn.MetaTitle:
					return entityData.MetaTitle != _originalData.MetaTitle;
					case DynamicPagesColumn.GenerateBreadcrumb:
					return entityData.GenerateBreadcrumb != _originalData.GenerateBreadcrumb;
					case DynamicPagesColumn.PublishOn:
					return entityData.PublishOn != _originalData.PublishOn;
					case DynamicPagesColumn.Visible:
					return entityData.Visible != _originalData.Visible;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< DynamicPagesColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.DynamicPageId != _originalData.DynamicPageId;
			result = result || entityData.SiteId != _originalData.SiteId;
			result = result || entityData.LanguageId != _originalData.LanguageId;
			result = result || entityData.ParentDynamicPageId != _originalData.ParentDynamicPageId;
			result = result || entityData.PageName != _originalData.PageName;
			result = result || entityData.PageTitle != _originalData.PageTitle;
			result = result || entityData.PageContent != _originalData.PageContent;
			result = result || entityData.DynamicPageWebPartTemplateId != _originalData.DynamicPageWebPartTemplateId;
			result = result || entityData.HyperLink != _originalData.HyperLink;
			result = result || entityData.Valid != _originalData.Valid;
			result = result || entityData.OpenInNewWindow != _originalData.OpenInNewWindow;
			result = result || entityData.Sequence != _originalData.Sequence;
			result = result || entityData.FullScreen != _originalData.FullScreen;
			result = result || entityData.OnTopNav != _originalData.OnTopNav;
			result = result || entityData.OnLeftNav != _originalData.OnLeftNav;
			result = result || entityData.OnBottomNav != _originalData.OnBottomNav;
			result = result || entityData.OnSiteMap != _originalData.OnSiteMap;
			result = result || entityData.Searchable != _originalData.Searchable;
			result = result || entityData.MetaKeywords != _originalData.MetaKeywords;
			result = result || entityData.MetaDescription != _originalData.MetaDescription;
			result = result || entityData.PageFriendlyName != _originalData.PageFriendlyName;
			result = result || entityData.LastModified != _originalData.LastModified;
			result = result || entityData.LastModifiedBy != _originalData.LastModifiedBy;
			result = result || entityData.SearchField != _originalData.SearchField;
			result = result || entityData.SourceId != _originalData.SourceId;
			result = result || entityData.Secured != _originalData.Secured;
			result = result || entityData.CustomUrl != _originalData.CustomUrl;
			result = result || entityData.MetaTitle != _originalData.MetaTitle;
			result = result || entityData.GenerateBreadcrumb != _originalData.GenerateBreadcrumb;
			result = result || entityData.PublishOn != _originalData.PublishOn;
			result = result || entityData.Visible != _originalData.Visible;
			return result;
		}	
		
		///<summary>
		///  Returns a DynamicPages Entity with the original data.
		///</summary>
		public DynamicPages GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateDynamicPages(
				_originalData.SiteId,
				_originalData.LanguageId,
				_originalData.ParentDynamicPageId,
				_originalData.PageName,
				_originalData.PageTitle,
				_originalData.PageContent,
				_originalData.DynamicPageWebPartTemplateId,
				_originalData.HyperLink,
				_originalData.Valid,
				_originalData.OpenInNewWindow,
				_originalData.Sequence,
				_originalData.FullScreen,
				_originalData.OnTopNav,
				_originalData.OnLeftNav,
				_originalData.OnBottomNav,
				_originalData.OnSiteMap,
				_originalData.Searchable,
				_originalData.MetaKeywords,
				_originalData.MetaDescription,
				_originalData.PageFriendlyName,
				_originalData.LastModified,
				_originalData.LastModifiedBy,
				_originalData.SearchField,
				_originalData.SourceId,
				_originalData.Secured,
				_originalData.CustomUrl,
				_originalData.MetaTitle,
				_originalData.GenerateBreadcrumb,
				_originalData.PublishOn,
				_originalData.Visible
				);
				
			return (DynamicPages)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="DynamicPagesBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is DynamicPagesBase)
				return ValueEquals(this, (DynamicPagesBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="DynamicPagesBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.DynamicPageId.GetHashCode() ^ 
					this.SiteId.GetHashCode() ^ 
					this.LanguageId.GetHashCode() ^ 
					this.ParentDynamicPageId.GetHashCode() ^ 
					this.PageName.GetHashCode() ^ 
					((this.PageTitle == null) ? string.Empty : this.PageTitle.ToString()).GetHashCode() ^ 
					this.PageContent.GetHashCode() ^ 
					((this.DynamicPageWebPartTemplateId == null) ? string.Empty : this.DynamicPageWebPartTemplateId.ToString()).GetHashCode() ^ 
					this.HyperLink.GetHashCode() ^ 
					this.Valid.GetHashCode() ^ 
					this.OpenInNewWindow.GetHashCode() ^ 
					this.Sequence.GetHashCode() ^ 
					this.FullScreen.GetHashCode() ^ 
					this.OnTopNav.GetHashCode() ^ 
					this.OnLeftNav.GetHashCode() ^ 
					this.OnBottomNav.GetHashCode() ^ 
					this.OnSiteMap.GetHashCode() ^ 
					this.Searchable.GetHashCode() ^ 
					((this.MetaKeywords == null) ? string.Empty : this.MetaKeywords.ToString()).GetHashCode() ^ 
					((this.MetaDescription == null) ? string.Empty : this.MetaDescription.ToString()).GetHashCode() ^ 
					this.PageFriendlyName.GetHashCode() ^ 
					this.LastModified.GetHashCode() ^ 
					this.LastModifiedBy.GetHashCode() ^ 
					((this.SearchField == null) ? string.Empty : this.SearchField.ToString()).GetHashCode() ^ 
					((this.SourceId == null) ? string.Empty : this.SourceId.ToString()).GetHashCode() ^ 
					this.Secured.GetHashCode() ^ 
					((this.CustomUrl == null) ? string.Empty : this.CustomUrl.ToString()).GetHashCode() ^ 
					((this.MetaTitle == null) ? string.Empty : this.MetaTitle.ToString()).GetHashCode() ^ 
					this.GenerateBreadcrumb.GetHashCode() ^ 
					((this.PublishOn == null) ? string.Empty : this.PublishOn.ToString()).GetHashCode() ^ 
					this.Visible.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="DynamicPagesBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(DynamicPagesBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="DynamicPagesBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="DynamicPagesBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="DynamicPagesBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(DynamicPagesBase Object1, DynamicPagesBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.DynamicPageId != Object2.DynamicPageId)
				equal = false;
			if (Object1.SiteId != Object2.SiteId)
				equal = false;
			if (Object1.LanguageId != Object2.LanguageId)
				equal = false;
			if (Object1.ParentDynamicPageId != Object2.ParentDynamicPageId)
				equal = false;
			if (Object1.PageName != Object2.PageName)
				equal = false;
			if ( Object1.PageTitle != null && Object2.PageTitle != null )
			{
				if (Object1.PageTitle != Object2.PageTitle)
					equal = false;
			}
			else if (Object1.PageTitle == null ^ Object2.PageTitle == null )
			{
				equal = false;
			}
			if (Object1.PageContent != Object2.PageContent)
				equal = false;
			if ( Object1.DynamicPageWebPartTemplateId != null && Object2.DynamicPageWebPartTemplateId != null )
			{
				if (Object1.DynamicPageWebPartTemplateId != Object2.DynamicPageWebPartTemplateId)
					equal = false;
			}
			else if (Object1.DynamicPageWebPartTemplateId == null ^ Object2.DynamicPageWebPartTemplateId == null )
			{
				equal = false;
			}
			if (Object1.HyperLink != Object2.HyperLink)
				equal = false;
			if (Object1.Valid != Object2.Valid)
				equal = false;
			if (Object1.OpenInNewWindow != Object2.OpenInNewWindow)
				equal = false;
			if (Object1.Sequence != Object2.Sequence)
				equal = false;
			if (Object1.FullScreen != Object2.FullScreen)
				equal = false;
			if (Object1.OnTopNav != Object2.OnTopNav)
				equal = false;
			if (Object1.OnLeftNav != Object2.OnLeftNav)
				equal = false;
			if (Object1.OnBottomNav != Object2.OnBottomNav)
				equal = false;
			if (Object1.OnSiteMap != Object2.OnSiteMap)
				equal = false;
			if (Object1.Searchable != Object2.Searchable)
				equal = false;
			if ( Object1.MetaKeywords != null && Object2.MetaKeywords != null )
			{
				if (Object1.MetaKeywords != Object2.MetaKeywords)
					equal = false;
			}
			else if (Object1.MetaKeywords == null ^ Object2.MetaKeywords == null )
			{
				equal = false;
			}
			if ( Object1.MetaDescription != null && Object2.MetaDescription != null )
			{
				if (Object1.MetaDescription != Object2.MetaDescription)
					equal = false;
			}
			else if (Object1.MetaDescription == null ^ Object2.MetaDescription == null )
			{
				equal = false;
			}
			if (Object1.PageFriendlyName != Object2.PageFriendlyName)
				equal = false;
			if (Object1.LastModified != Object2.LastModified)
				equal = false;
			if (Object1.LastModifiedBy != Object2.LastModifiedBy)
				equal = false;
			if ( Object1.SearchField != null && Object2.SearchField != null )
			{
				if (Object1.SearchField != Object2.SearchField)
					equal = false;
			}
			else if (Object1.SearchField == null ^ Object2.SearchField == null )
			{
				equal = false;
			}
			if ( Object1.SourceId != null && Object2.SourceId != null )
			{
				if (Object1.SourceId != Object2.SourceId)
					equal = false;
			}
			else if (Object1.SourceId == null ^ Object2.SourceId == null )
			{
				equal = false;
			}
			if (Object1.Secured != Object2.Secured)
				equal = false;
			if ( Object1.CustomUrl != null && Object2.CustomUrl != null )
			{
				if (Object1.CustomUrl != Object2.CustomUrl)
					equal = false;
			}
			else if (Object1.CustomUrl == null ^ Object2.CustomUrl == null )
			{
				equal = false;
			}
			if ( Object1.MetaTitle != null && Object2.MetaTitle != null )
			{
				if (Object1.MetaTitle != Object2.MetaTitle)
					equal = false;
			}
			else if (Object1.MetaTitle == null ^ Object2.MetaTitle == null )
			{
				equal = false;
			}
			if (Object1.GenerateBreadcrumb != Object2.GenerateBreadcrumb)
				equal = false;
			if ( Object1.PublishOn != null && Object2.PublishOn != null )
			{
				if (Object1.PublishOn != Object2.PublishOn)
					equal = false;
			}
			else if (Object1.PublishOn == null ^ Object2.PublishOn == null )
			{
				equal = false;
			}
			if (Object1.Visible != Object2.Visible)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((DynamicPagesBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static DynamicPagesComparer GetComparer()
        {
            return new DynamicPagesComparer();
        }
        */

        // Comparer delegates back to DynamicPages
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(DynamicPages rhs, DynamicPagesColumn which)
        {
            switch (which)
            {
            	
            	
            	case DynamicPagesColumn.DynamicPageId:
            		return this.DynamicPageId.CompareTo(rhs.DynamicPageId);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.SiteId:
            		return this.SiteId.CompareTo(rhs.SiteId);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.LanguageId:
            		return this.LanguageId.CompareTo(rhs.LanguageId);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.ParentDynamicPageId:
            		return this.ParentDynamicPageId.CompareTo(rhs.ParentDynamicPageId);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.PageName:
            		return this.PageName.CompareTo(rhs.PageName);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.PageTitle:
            		return this.PageTitle.CompareTo(rhs.PageTitle);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.PageContent:
            		return this.PageContent.CompareTo(rhs.PageContent);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.DynamicPageWebPartTemplateId:
            		return this.DynamicPageWebPartTemplateId.Value.CompareTo(rhs.DynamicPageWebPartTemplateId.Value);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.HyperLink:
            		return this.HyperLink.CompareTo(rhs.HyperLink);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.Valid:
            		return this.Valid.CompareTo(rhs.Valid);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.OpenInNewWindow:
            		return this.OpenInNewWindow.CompareTo(rhs.OpenInNewWindow);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.Sequence:
            		return this.Sequence.CompareTo(rhs.Sequence);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.FullScreen:
            		return this.FullScreen.CompareTo(rhs.FullScreen);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.OnTopNav:
            		return this.OnTopNav.CompareTo(rhs.OnTopNav);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.OnLeftNav:
            		return this.OnLeftNav.CompareTo(rhs.OnLeftNav);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.OnBottomNav:
            		return this.OnBottomNav.CompareTo(rhs.OnBottomNav);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.OnSiteMap:
            		return this.OnSiteMap.CompareTo(rhs.OnSiteMap);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.Searchable:
            		return this.Searchable.CompareTo(rhs.Searchable);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.MetaKeywords:
            		return this.MetaKeywords.CompareTo(rhs.MetaKeywords);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.MetaDescription:
            		return this.MetaDescription.CompareTo(rhs.MetaDescription);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.PageFriendlyName:
            		return this.PageFriendlyName.CompareTo(rhs.PageFriendlyName);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.LastModified:
            		return this.LastModified.CompareTo(rhs.LastModified);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.LastModifiedBy:
            		return this.LastModifiedBy.CompareTo(rhs.LastModifiedBy);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.SearchField:
            		return this.SearchField.CompareTo(rhs.SearchField);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.SourceId:
            		return this.SourceId.Value.CompareTo(rhs.SourceId.Value);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.Secured:
            		return this.Secured.CompareTo(rhs.Secured);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.CustomUrl:
            		return this.CustomUrl.CompareTo(rhs.CustomUrl);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.MetaTitle:
            		return this.MetaTitle.CompareTo(rhs.MetaTitle);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.GenerateBreadcrumb:
            		return this.GenerateBreadcrumb.CompareTo(rhs.GenerateBreadcrumb);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.PublishOn:
            		return this.PublishOn.Value.CompareTo(rhs.PublishOn.Value);
            		
            		                 
            	
            	
            	case DynamicPagesColumn.Visible:
            		return this.Visible.CompareTo(rhs.Visible);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<DynamicPagesKey> Members
		
		// member variable for the EntityId property
		private DynamicPagesKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual DynamicPagesKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new DynamicPagesKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("DynamicPages")
					.Append("|").Append( this.DynamicPageId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{32}{31}- DynamicPageId: {0}{31}- SiteId: {1}{31}- LanguageId: {2}{31}- ParentDynamicPageId: {3}{31}- PageName: {4}{31}- PageTitle: {5}{31}- PageContent: {6}{31}- DynamicPageWebPartTemplateId: {7}{31}- HyperLink: {8}{31}- Valid: {9}{31}- OpenInNewWindow: {10}{31}- Sequence: {11}{31}- FullScreen: {12}{31}- OnTopNav: {13}{31}- OnLeftNav: {14}{31}- OnBottomNav: {15}{31}- OnSiteMap: {16}{31}- Searchable: {17}{31}- MetaKeywords: {18}{31}- MetaDescription: {19}{31}- PageFriendlyName: {20}{31}- LastModified: {21}{31}- LastModifiedBy: {22}{31}- SearchField: {23}{31}- SourceId: {24}{31}- Secured: {25}{31}- CustomUrl: {26}{31}- MetaTitle: {27}{31}- GenerateBreadcrumb: {28}{31}- PublishOn: {29}{31}- Visible: {30}{31}{33}", 
				this.DynamicPageId,
				this.SiteId,
				this.LanguageId,
				this.ParentDynamicPageId,
				this.PageName,
				(this.PageTitle == null) ? string.Empty : this.PageTitle.ToString(),
				this.PageContent,
				(this.DynamicPageWebPartTemplateId == null) ? string.Empty : this.DynamicPageWebPartTemplateId.ToString(),
				this.HyperLink,
				this.Valid,
				this.OpenInNewWindow,
				this.Sequence,
				this.FullScreen,
				this.OnTopNav,
				this.OnLeftNav,
				this.OnBottomNav,
				this.OnSiteMap,
				this.Searchable,
				(this.MetaKeywords == null) ? string.Empty : this.MetaKeywords.ToString(),
				(this.MetaDescription == null) ? string.Empty : this.MetaDescription.ToString(),
				this.PageFriendlyName,
				this.LastModified,
				this.LastModifiedBy,
				(this.SearchField == null) ? string.Empty : this.SearchField.ToString(),
				(this.SourceId == null) ? string.Empty : this.SourceId.ToString(),
				this.Secured,
				(this.CustomUrl == null) ? string.Empty : this.CustomUrl.ToString(),
				(this.MetaTitle == null) ? string.Empty : this.MetaTitle.ToString(),
				this.GenerateBreadcrumb,
				(this.PublishOn == null) ? string.Empty : this.PublishOn.ToString(),
				this.Visible,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'DynamicPages' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class DynamicPagesEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// DynamicPageID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "DynamicPages"</remarks>
		public System.Int32 DynamicPageId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SiteID : 
		/// </summary>
		public System.Int32		  SiteId = (int)0;
		
		/// <summary>
		/// LanguageID : 
		/// </summary>
		public System.Int32		  LanguageId = (int)0;
		
		/// <summary>
		/// ParentDynamicPageID : 
		/// </summary>
		public System.Int32		  ParentDynamicPageId = (int)0;
		
		/// <summary>
		/// PageName : 
		/// </summary>
		public System.String		  PageName = string.Empty;
		
		/// <summary>
		/// PageTitle : 
		/// </summary>
		public System.String		  PageTitle = null;
		
		/// <summary>
		/// PageContent : 
		/// </summary>
		public System.String		  PageContent = string.Empty;
		
		/// <summary>
		/// DynamicPageWebPartTemplateID : 
		/// </summary>
		public System.Int32?		  DynamicPageWebPartTemplateId = null;
		
		/// <summary>
		/// HyperLink : 
		/// </summary>
		public System.String		  HyperLink = string.Empty;
		
		/// <summary>
		/// Valid : 
		/// </summary>
		public System.Boolean		  Valid = false;
		
		/// <summary>
		/// OpenInNewWindow : 
		/// </summary>
		public System.Boolean		  OpenInNewWindow = false;
		
		/// <summary>
		/// Sequence : 
		/// </summary>
		public System.Int32		  Sequence = (int)0;
		
		/// <summary>
		/// FullScreen : 
		/// </summary>
		public System.Boolean		  FullScreen = false;
		
		/// <summary>
		/// OnTopNav : 
		/// </summary>
		public System.Boolean		  OnTopNav = false;
		
		/// <summary>
		/// OnLeftNav : 
		/// </summary>
		public System.Boolean		  OnLeftNav = false;
		
		/// <summary>
		/// OnBottomNav : 
		/// </summary>
		public System.Boolean		  OnBottomNav = false;
		
		/// <summary>
		/// OnSiteMap : 
		/// </summary>
		public System.Boolean		  OnSiteMap = false;
		
		/// <summary>
		/// Searchable : 
		/// </summary>
		public System.Boolean		  Searchable = false;
		
		/// <summary>
		/// MetaKeywords : 
		/// </summary>
		public System.String		  MetaKeywords = null;
		
		/// <summary>
		/// MetaDescription : 
		/// </summary>
		public System.String		  MetaDescription = null;
		
		/// <summary>
		/// PageFriendlyName : 
		/// </summary>
		public System.String		  PageFriendlyName = string.Empty;
		
		/// <summary>
		/// LastModified : 
		/// </summary>
		public System.DateTime		  LastModified = DateTime.MinValue;
		
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		public System.Int32		  LastModifiedBy = (int)0;
		
		/// <summary>
		/// SearchField : 
		/// </summary>
		public System.String		  SearchField = null;
		
		/// <summary>
		/// SourceID : 
		/// </summary>
		public System.Int32?		  SourceId = null;
		
		/// <summary>
		/// Secured : 
		/// </summary>
		public System.Boolean		  Secured = false;
		
		/// <summary>
		/// CustomUrl : 
		/// </summary>
		public System.String		  CustomUrl = null;
		
		/// <summary>
		/// MetaTitle : 
		/// </summary>
		public System.String		  MetaTitle = null;
		
		/// <summary>
		/// GenerateBreadcrumb : 
		/// </summary>
		public System.Boolean		  GenerateBreadcrumb = false;
		
		/// <summary>
		/// PublishOn : 
		/// </summary>
		public System.DateTime?		  PublishOn = null;
		
		/// <summary>
		/// Visible : 
		/// </summary>
		public System.Boolean		  Visible = false;
		#endregion
			
		#region Source Foreign Key Property
				
		private DynamicPageWebPartTemplates _dynamicPageWebPartTemplateIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="DynamicPageWebPartTemplates"/>.
		/// </summary>
		/// <value>The source DynamicPageWebPartTemplates for DynamicPageWebPartTemplateId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual DynamicPageWebPartTemplates DynamicPageWebPartTemplateIdSource
      	{
            get { return this._dynamicPageWebPartTemplateIdSource; }
            set { this._dynamicPageWebPartTemplateIdSource = value; }
      	}
		private Languages _languageIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Languages"/>.
		/// </summary>
		/// <value>The source Languages for LanguageId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Languages LanguageIdSource
      	{
            get { return this._languageIdSource; }
            set { this._languageIdSource = value; }
      	}
		private AdminUsers _lastModifiedBySource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return this._lastModifiedBySource; }
            set { this._lastModifiedBySource = value; }
      	}
		private Sites _siteIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Sites SiteIdSource
      	{
            get { return this._siteIdSource; }
            set { this._siteIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region RelatedDynamicPagesCollectionGetByDynamicPageId
		
		private TList<RelatedDynamicPages> _relatedDynamicPagesRelatedDynamicPageIdGetByDynamicPageId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _relatedDynamicPagesRelatedDynamicPageIdGetByDynamicPageId
		/// </summary>
		
		public TList<RelatedDynamicPages> RelatedDynamicPagesCollectionGetByDynamicPageId
		{
			get
			{
				if (_relatedDynamicPagesRelatedDynamicPageIdGetByDynamicPageId == null)
				{
				_relatedDynamicPagesRelatedDynamicPageIdGetByDynamicPageId = new TList<RelatedDynamicPages>();
				}
	
				return _relatedDynamicPagesRelatedDynamicPageIdGetByDynamicPageId;
			}
			set { _relatedDynamicPagesRelatedDynamicPageIdGetByDynamicPageId = value; }
		}
		
		#endregion

		#region DynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages
		
		private TList<DynamicPages> dynamicPageIdDynamicPagesCollectionFromRelatedDynamicPages;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table dynamicPageIdDynamicPagesCollectionFromRelatedDynamicPages
		/// </summary>
		
		public TList<DynamicPages> DynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages
		{
			get
			{
				if (dynamicPageIdDynamicPagesCollectionFromRelatedDynamicPages == null)
				{
				dynamicPageIdDynamicPagesCollectionFromRelatedDynamicPages = new TList<DynamicPages>();
				}
	
				return dynamicPageIdDynamicPagesCollectionFromRelatedDynamicPages;
			}
			set { dynamicPageIdDynamicPagesCollectionFromRelatedDynamicPages = value; }
		}
		
		#endregion 

		#region RelatedDynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages
		
		private TList<DynamicPages> relatedDynamicPageIdDynamicPagesCollectionFromRelatedDynamicPages;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table relatedDynamicPageIdDynamicPagesCollectionFromRelatedDynamicPages
		/// </summary>
		
		public TList<DynamicPages> RelatedDynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages
		{
			get
			{
				if (relatedDynamicPageIdDynamicPagesCollectionFromRelatedDynamicPages == null)
				{
				relatedDynamicPageIdDynamicPagesCollectionFromRelatedDynamicPages = new TList<DynamicPages>();
				}
	
				return relatedDynamicPageIdDynamicPagesCollectionFromRelatedDynamicPages;
			}
			set { relatedDynamicPageIdDynamicPagesCollectionFromRelatedDynamicPages = value; }
		}
		
		#endregion 

		#region GlobalSettingsCollection
		
		private TList<GlobalSettings> _globalSettingsDefaultDynamicPageId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _globalSettingsDefaultDynamicPageId
		/// </summary>
		
		public TList<GlobalSettings> GlobalSettingsCollection
		{
			get
			{
				if (_globalSettingsDefaultDynamicPageId == null)
				{
				_globalSettingsDefaultDynamicPageId = new TList<GlobalSettings>();
				}
	
				return _globalSettingsDefaultDynamicPageId;
			}
			set { _globalSettingsDefaultDynamicPageId = value; }
		}
		
		#endregion

		#region DynamicpagesCustomWidgetCollection
		
		private TList<DynamicpagesCustomWidget> _dynamicpagesCustomWidgetDynamicPageId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dynamicpagesCustomWidgetDynamicPageId
		/// </summary>
		
		public TList<DynamicpagesCustomWidget> DynamicpagesCustomWidgetCollection
		{
			get
			{
				if (_dynamicpagesCustomWidgetDynamicPageId == null)
				{
				_dynamicpagesCustomWidgetDynamicPageId = new TList<DynamicpagesCustomWidget>();
				}
	
				return _dynamicpagesCustomWidgetDynamicPageId;
			}
			set { _dynamicpagesCustomWidgetDynamicPageId = value; }
		}
		
		#endregion

		#region RelatedDynamicPagesCollectionGetByRelatedDynamicPageId
		
		private TList<RelatedDynamicPages> _relatedDynamicPagesRelatedDynamicPageIdGetByRelatedDynamicPageId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _relatedDynamicPagesRelatedDynamicPageIdGetByRelatedDynamicPageId
		/// </summary>
		
		public TList<RelatedDynamicPages> RelatedDynamicPagesCollectionGetByRelatedDynamicPageId
		{
			get
			{
				if (_relatedDynamicPagesRelatedDynamicPageIdGetByRelatedDynamicPageId == null)
				{
				_relatedDynamicPagesRelatedDynamicPageIdGetByRelatedDynamicPageId = new TList<RelatedDynamicPages>();
				}
	
				return _relatedDynamicPagesRelatedDynamicPageIdGetByRelatedDynamicPageId;
			}
			set { _relatedDynamicPagesRelatedDynamicPageIdGetByRelatedDynamicPageId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			DynamicPagesEntityData _tmp = new DynamicPagesEntityData();
						
			_tmp.DynamicPageId = this.DynamicPageId;
			
			_tmp.SiteId = this.SiteId;
			_tmp.LanguageId = this.LanguageId;
			_tmp.ParentDynamicPageId = this.ParentDynamicPageId;
			_tmp.PageName = this.PageName;
			_tmp.PageTitle = this.PageTitle;
			_tmp.PageContent = this.PageContent;
			_tmp.DynamicPageWebPartTemplateId = this.DynamicPageWebPartTemplateId;
			_tmp.HyperLink = this.HyperLink;
			_tmp.Valid = this.Valid;
			_tmp.OpenInNewWindow = this.OpenInNewWindow;
			_tmp.Sequence = this.Sequence;
			_tmp.FullScreen = this.FullScreen;
			_tmp.OnTopNav = this.OnTopNav;
			_tmp.OnLeftNav = this.OnLeftNav;
			_tmp.OnBottomNav = this.OnBottomNav;
			_tmp.OnSiteMap = this.OnSiteMap;
			_tmp.Searchable = this.Searchable;
			_tmp.MetaKeywords = this.MetaKeywords;
			_tmp.MetaDescription = this.MetaDescription;
			_tmp.PageFriendlyName = this.PageFriendlyName;
			_tmp.LastModified = this.LastModified;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.SearchField = this.SearchField;
			_tmp.SourceId = this.SourceId;
			_tmp.Secured = this.Secured;
			_tmp.CustomUrl = this.CustomUrl;
			_tmp.MetaTitle = this.MetaTitle;
			_tmp.GenerateBreadcrumb = this.GenerateBreadcrumb;
			_tmp.PublishOn = this.PublishOn;
			_tmp.Visible = this.Visible;
			
			#region Source Parent Composite Entities
			if (this.DynamicPageWebPartTemplateIdSource != null)
				_tmp.DynamicPageWebPartTemplateIdSource = MakeCopyOf(this.DynamicPageWebPartTemplateIdSource) as DynamicPageWebPartTemplates;
			if (this.LanguageIdSource != null)
				_tmp.LanguageIdSource = MakeCopyOf(this.LanguageIdSource) as Languages;
			if (this.LastModifiedBySource != null)
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource) as AdminUsers;
			if (this.SiteIdSource != null)
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource) as Sites;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._relatedDynamicPagesRelatedDynamicPageIdGetByDynamicPageId != null)
				_tmp.RelatedDynamicPagesCollectionGetByDynamicPageId = (TList<RelatedDynamicPages>) MakeCopyOf(this.RelatedDynamicPagesCollectionGetByDynamicPageId); 
			if (this.dynamicPageIdDynamicPagesCollectionFromRelatedDynamicPages != null)
				_tmp.DynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages = (TList<DynamicPages>) MakeCopyOf(this.DynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages); 
			if (this.relatedDynamicPageIdDynamicPagesCollectionFromRelatedDynamicPages != null)
				_tmp.RelatedDynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages = (TList<DynamicPages>) MakeCopyOf(this.RelatedDynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages); 
			if (this._globalSettingsDefaultDynamicPageId != null)
				_tmp.GlobalSettingsCollection = (TList<GlobalSettings>) MakeCopyOf(this.GlobalSettingsCollection); 
			if (this._dynamicpagesCustomWidgetDynamicPageId != null)
				_tmp.DynamicpagesCustomWidgetCollection = (TList<DynamicpagesCustomWidget>) MakeCopyOf(this.DynamicpagesCustomWidgetCollection); 
			if (this._relatedDynamicPagesRelatedDynamicPageIdGetByRelatedDynamicPageId != null)
				_tmp.RelatedDynamicPagesCollectionGetByRelatedDynamicPageId = (TList<RelatedDynamicPages>) MakeCopyOf(this.RelatedDynamicPagesCollectionGetByRelatedDynamicPageId); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			DynamicPagesEntityData _tmp = new DynamicPagesEntityData();
						
			_tmp.DynamicPageId = this.DynamicPageId;
			
			_tmp.SiteId = this.SiteId;
			_tmp.LanguageId = this.LanguageId;
			_tmp.ParentDynamicPageId = this.ParentDynamicPageId;
			_tmp.PageName = this.PageName;
			_tmp.PageTitle = this.PageTitle;
			_tmp.PageContent = this.PageContent;
			_tmp.DynamicPageWebPartTemplateId = this.DynamicPageWebPartTemplateId;
			_tmp.HyperLink = this.HyperLink;
			_tmp.Valid = this.Valid;
			_tmp.OpenInNewWindow = this.OpenInNewWindow;
			_tmp.Sequence = this.Sequence;
			_tmp.FullScreen = this.FullScreen;
			_tmp.OnTopNav = this.OnTopNav;
			_tmp.OnLeftNav = this.OnLeftNav;
			_tmp.OnBottomNav = this.OnBottomNav;
			_tmp.OnSiteMap = this.OnSiteMap;
			_tmp.Searchable = this.Searchable;
			_tmp.MetaKeywords = this.MetaKeywords;
			_tmp.MetaDescription = this.MetaDescription;
			_tmp.PageFriendlyName = this.PageFriendlyName;
			_tmp.LastModified = this.LastModified;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.SearchField = this.SearchField;
			_tmp.SourceId = this.SourceId;
			_tmp.Secured = this.Secured;
			_tmp.CustomUrl = this.CustomUrl;
			_tmp.MetaTitle = this.MetaTitle;
			_tmp.GenerateBreadcrumb = this.GenerateBreadcrumb;
			_tmp.PublishOn = this.PublishOn;
			_tmp.Visible = this.Visible;
			
			#region Source Parent Composite Entities
			if (this.DynamicPageWebPartTemplateIdSource != null && existingCopies.Contains(this.DynamicPageWebPartTemplateIdSource))
				_tmp.DynamicPageWebPartTemplateIdSource = existingCopies[this.DynamicPageWebPartTemplateIdSource] as DynamicPageWebPartTemplates;
			else
				_tmp.DynamicPageWebPartTemplateIdSource = MakeCopyOf(this.DynamicPageWebPartTemplateIdSource, existingCopies) as DynamicPageWebPartTemplates;
			if (this.LanguageIdSource != null && existingCopies.Contains(this.LanguageIdSource))
				_tmp.LanguageIdSource = existingCopies[this.LanguageIdSource] as Languages;
			else
				_tmp.LanguageIdSource = MakeCopyOf(this.LanguageIdSource, existingCopies) as Languages;
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				_tmp.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				_tmp.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.RelatedDynamicPagesCollectionGetByDynamicPageId = (TList<RelatedDynamicPages>) MakeCopyOf(this.RelatedDynamicPagesCollectionGetByDynamicPageId, existingCopies); 
			_tmp.DynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages = (TList<DynamicPages>) MakeCopyOf(this.DynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages, existingCopies); 
			_tmp.RelatedDynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages = (TList<DynamicPages>) MakeCopyOf(this.RelatedDynamicPageIdDynamicPagesCollection_From_RelatedDynamicPages, existingCopies); 
			_tmp.GlobalSettingsCollection = (TList<GlobalSettings>) MakeCopyOf(this.GlobalSettingsCollection, existingCopies); 
			_tmp.DynamicpagesCustomWidgetCollection = (TList<DynamicpagesCustomWidget>) MakeCopyOf(this.DynamicpagesCustomWidgetCollection, existingCopies); 
			_tmp.RelatedDynamicPagesCollectionGetByRelatedDynamicPageId = (TList<RelatedDynamicPages>) MakeCopyOf(this.RelatedDynamicPagesCollectionGetByRelatedDynamicPageId, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DynamicPagesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(DynamicPagesColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DynamicPagesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(DynamicPagesColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DynamicPagesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(DynamicPagesColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				DynamicPagesEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new DynamicPagesEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DynamicPagesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(DynamicPagesColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				DynamicPagesEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new DynamicPagesEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region DynamicPagesEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="DynamicPages"/> object.
	/// </remarks>
	public class DynamicPagesEventArgs : System.EventArgs
	{
		private DynamicPagesColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the DynamicPagesEventArgs class.
		///</summary>
		public DynamicPagesEventArgs(DynamicPagesColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the DynamicPagesEventArgs class.
		///</summary>
		public DynamicPagesEventArgs(DynamicPagesColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The DynamicPagesColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="DynamicPagesColumn" />
		public DynamicPagesColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all DynamicPages related events.
	///</summary>
	public delegate void DynamicPagesEventHandler(object sender, DynamicPagesEventArgs e);
	
	#region DynamicPagesComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class DynamicPagesComparer : System.Collections.Generic.IComparer<DynamicPages>
	{
		DynamicPagesColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:DynamicPagesComparer"/> class.
        /// </summary>
		public DynamicPagesComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:DynamicPagesComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public DynamicPagesComparer(DynamicPagesColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="DynamicPages"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="DynamicPages"/> to compare.</param>
        /// <param name="b">The second <c>DynamicPages</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(DynamicPages a, DynamicPages b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(DynamicPages entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(DynamicPages a, DynamicPages b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public DynamicPagesColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region DynamicPagesKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="DynamicPages"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class DynamicPagesKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the DynamicPagesKey class.
		/// </summary>
		public DynamicPagesKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the DynamicPagesKey class.
		/// </summary>
		public DynamicPagesKey(DynamicPagesBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.DynamicPageId = entity.DynamicPageId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the DynamicPagesKey class.
		/// </summary>
		public DynamicPagesKey(System.Int32 _dynamicPageId)
		{
			#region Init Properties

			this.DynamicPageId = _dynamicPageId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private DynamicPagesBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public DynamicPagesBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the DynamicPageId property
		private System.Int32 _dynamicPageId;
		
		/// <summary>
		/// Gets or sets the DynamicPageId property.
		/// </summary>
		public System.Int32 DynamicPageId
		{
			get { return _dynamicPageId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.DynamicPageId = value;
				
				_dynamicPageId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				DynamicPageId = ( values["DynamicPageId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["DynamicPageId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("DynamicPageId", DynamicPageId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("DynamicPageId: {0}{1}",
								DynamicPageId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region DynamicPagesColumn Enum
	
	/// <summary>
	/// Enumerate the DynamicPages columns.
	/// </summary>
	[Serializable]
	public enum DynamicPagesColumn : int
	{
		/// <summary>
		/// DynamicPageId : 
		/// </summary>
		[EnumTextValue("DynamicPageID")]
		[ColumnEnum("DynamicPageID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		DynamicPageId = 1,
		/// <summary>
		/// SiteId : 
		/// </summary>
		[EnumTextValue("SiteID")]
		[ColumnEnum("SiteID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteId = 2,
		/// <summary>
		/// LanguageId : 
		/// </summary>
		[EnumTextValue("LanguageID")]
		[ColumnEnum("LanguageID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LanguageId = 3,
		/// <summary>
		/// ParentDynamicPageId : 
		/// </summary>
		[EnumTextValue("ParentDynamicPageID")]
		[ColumnEnum("ParentDynamicPageID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ParentDynamicPageId = 4,
		/// <summary>
		/// PageName : 
		/// </summary>
		[EnumTextValue("PageName")]
		[ColumnEnum("PageName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		PageName = 5,
		/// <summary>
		/// PageTitle : 
		/// </summary>
		[EnumTextValue("PageTitle")]
		[ColumnEnum("PageTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		PageTitle = 6,
		/// <summary>
		/// PageContent : 
		/// </summary>
		[EnumTextValue("PageContent")]
		[ColumnEnum("PageContent", typeof(System.String), System.Data.DbType.String, false, false, false)]
		PageContent = 7,
		/// <summary>
		/// DynamicPageWebPartTemplateId : 
		/// </summary>
		[EnumTextValue("DynamicPageWebPartTemplateID")]
		[ColumnEnum("DynamicPageWebPartTemplateID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DynamicPageWebPartTemplateId = 8,
		/// <summary>
		/// HyperLink : 
		/// </summary>
		[EnumTextValue("HyperLink")]
		[ColumnEnum("HyperLink", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		HyperLink = 9,
		/// <summary>
		/// Valid : 
		/// </summary>
		[EnumTextValue("Valid")]
		[ColumnEnum("Valid", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Valid = 10,
		/// <summary>
		/// OpenInNewWindow : 
		/// </summary>
		[EnumTextValue("OpenInNewWindow")]
		[ColumnEnum("OpenInNewWindow", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		OpenInNewWindow = 11,
		/// <summary>
		/// Sequence : 
		/// </summary>
		[EnumTextValue("Sequence")]
		[ColumnEnum("Sequence", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Sequence = 12,
		/// <summary>
		/// FullScreen : 
		/// </summary>
		[EnumTextValue("FullScreen")]
		[ColumnEnum("FullScreen", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		FullScreen = 13,
		/// <summary>
		/// OnTopNav : 
		/// </summary>
		[EnumTextValue("OnTopNav")]
		[ColumnEnum("OnTopNav", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		OnTopNav = 14,
		/// <summary>
		/// OnLeftNav : 
		/// </summary>
		[EnumTextValue("OnLeftNav")]
		[ColumnEnum("OnLeftNav", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		OnLeftNav = 15,
		/// <summary>
		/// OnBottomNav : 
		/// </summary>
		[EnumTextValue("OnBottomNav")]
		[ColumnEnum("OnBottomNav", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		OnBottomNav = 16,
		/// <summary>
		/// OnSiteMap : 
		/// </summary>
		[EnumTextValue("OnSiteMap")]
		[ColumnEnum("OnSiteMap", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		OnSiteMap = 17,
		/// <summary>
		/// Searchable : 
		/// </summary>
		[EnumTextValue("Searchable")]
		[ColumnEnum("Searchable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Searchable = 18,
		/// <summary>
		/// MetaKeywords : 
		/// </summary>
		[EnumTextValue("MetaKeywords")]
		[ColumnEnum("MetaKeywords", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		MetaKeywords = 19,
		/// <summary>
		/// MetaDescription : 
		/// </summary>
		[EnumTextValue("MetaDescription")]
		[ColumnEnum("MetaDescription", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		MetaDescription = 20,
		/// <summary>
		/// PageFriendlyName : 
		/// </summary>
		[EnumTextValue("PageFriendlyName")]
		[ColumnEnum("PageFriendlyName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		PageFriendlyName = 21,
		/// <summary>
		/// LastModified : 
		/// </summary>
		[EnumTextValue("LastModified")]
		[ColumnEnum("LastModified", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastModified = 22,
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		[EnumTextValue("LastModifiedBy")]
		[ColumnEnum("LastModifiedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LastModifiedBy = 23,
		/// <summary>
		/// SearchField : 
		/// </summary>
		[EnumTextValue("SearchField")]
		[ColumnEnum("SearchField", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SearchField = 24,
		/// <summary>
		/// SourceId : 
		/// </summary>
		[EnumTextValue("SourceID")]
		[ColumnEnum("SourceID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SourceId = 25,
		/// <summary>
		/// Secured : 
		/// </summary>
		[EnumTextValue("Secured")]
		[ColumnEnum("Secured", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Secured = 26,
		/// <summary>
		/// CustomUrl : 
		/// </summary>
		[EnumTextValue("CustomUrl")]
		[ColumnEnum("CustomUrl", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 512)]
		CustomUrl = 27,
		/// <summary>
		/// MetaTitle : 
		/// </summary>
		[EnumTextValue("MetaTitle")]
		[ColumnEnum("MetaTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		MetaTitle = 28,
		/// <summary>
		/// GenerateBreadcrumb : 
		/// </summary>
		[EnumTextValue("GenerateBreadcrumb")]
		[ColumnEnum("GenerateBreadcrumb", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		GenerateBreadcrumb = 29,
		/// <summary>
		/// PublishOn : 
		/// </summary>
		[EnumTextValue("PublishOn")]
		[ColumnEnum("PublishOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		PublishOn = 30,
		/// <summary>
		/// Visible : 
		/// </summary>
		[EnumTextValue("Visible")]
		[ColumnEnum("Visible", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Visible = 31
	}//End enum

	#endregion DynamicPagesColumn Enum

} // end namespace

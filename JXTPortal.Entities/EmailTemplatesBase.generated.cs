
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EmailTemplates.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'EmailTemplates' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EmailTemplatesBase : EntityBase, IEmailTemplates, IEntityId<EmailTemplatesKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EmailTemplatesEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EmailTemplatesEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EmailTemplatesEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EmailTemplates> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EmailTemplatesEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EmailTemplatesEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EmailTemplatesBase"/> instance.
		///</summary>
		public EmailTemplatesBase()
		{
			this.entityData = new EmailTemplatesEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EmailTemplatesBase"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_emailTemplateParentId"></param>
		///<param name="_emailCode"></param>
		///<param name="_emailDescription"></param>
		///<param name="_emailSubject"></param>
		///<param name="_emailBodyText"></param>
		///<param name="_emailBodyHtml"></param>
		///<param name="_emailFields"></param>
		///<param name="_emailAddressName"></param>
		///<param name="_emailAddressFrom"></param>
		///<param name="_emailAddressCc"></param>
		///<param name="_emailAddressBcc"></param>
		///<param name="_globalTemplate"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_lastModified"></param>
		///<param name="_emailAddressTo"></param>
		///<param name="_emailAddressToName"></param>
		///<param name="_emailAddressToMandatory"></param>
		///<param name="_languageId"></param>
		public EmailTemplatesBase(System.Int32 _siteId, System.Int32 _emailTemplateParentId, 
			System.String _emailCode, System.String _emailDescription, System.String _emailSubject, 
			System.String _emailBodyText, System.String _emailBodyHtml, System.String _emailFields, 
			System.String _emailAddressName, System.String _emailAddressFrom, System.String _emailAddressCc, 
			System.String _emailAddressBcc, System.Boolean _globalTemplate, System.Int32 _lastModifiedBy, 
			System.DateTime _lastModified, System.String _emailAddressTo, System.String _emailAddressToName, 
			System.Boolean? _emailAddressToMandatory, System.Int32? _languageId)
		{
			this.entityData = new EmailTemplatesEntityData();
			this.backupData = null;

			this.SiteId = _siteId;
			this.EmailTemplateParentId = _emailTemplateParentId;
			this.EmailCode = _emailCode;
			this.EmailDescription = _emailDescription;
			this.EmailSubject = _emailSubject;
			this.EmailBodyText = _emailBodyText;
			this.EmailBodyHtml = _emailBodyHtml;
			this.EmailFields = _emailFields;
			this.EmailAddressName = _emailAddressName;
			this.EmailAddressFrom = _emailAddressFrom;
			this.EmailAddressCc = _emailAddressCc;
			this.EmailAddressBcc = _emailAddressBcc;
			this.GlobalTemplate = _globalTemplate;
			this.LastModifiedBy = _lastModifiedBy;
			this.LastModified = _lastModified;
			this.EmailAddressTo = _emailAddressTo;
			this.EmailAddressToName = _emailAddressToName;
			this.EmailAddressToMandatory = _emailAddressToMandatory;
			this.LanguageId = _languageId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EmailTemplates"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_emailTemplateParentId"></param>
		///<param name="_emailCode"></param>
		///<param name="_emailDescription"></param>
		///<param name="_emailSubject"></param>
		///<param name="_emailBodyText"></param>
		///<param name="_emailBodyHtml"></param>
		///<param name="_emailFields"></param>
		///<param name="_emailAddressName"></param>
		///<param name="_emailAddressFrom"></param>
		///<param name="_emailAddressCc"></param>
		///<param name="_emailAddressBcc"></param>
		///<param name="_globalTemplate"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_lastModified"></param>
		///<param name="_emailAddressTo"></param>
		///<param name="_emailAddressToName"></param>
		///<param name="_emailAddressToMandatory"></param>
		///<param name="_languageId"></param>
		public static EmailTemplates CreateEmailTemplates(System.Int32 _siteId, System.Int32 _emailTemplateParentId, 
			System.String _emailCode, System.String _emailDescription, System.String _emailSubject, 
			System.String _emailBodyText, System.String _emailBodyHtml, System.String _emailFields, 
			System.String _emailAddressName, System.String _emailAddressFrom, System.String _emailAddressCc, 
			System.String _emailAddressBcc, System.Boolean _globalTemplate, System.Int32 _lastModifiedBy, 
			System.DateTime _lastModified, System.String _emailAddressTo, System.String _emailAddressToName, 
			System.Boolean? _emailAddressToMandatory, System.Int32? _languageId)
		{
			EmailTemplates newEmailTemplates = new EmailTemplates();
			newEmailTemplates.SiteId = _siteId;
			newEmailTemplates.EmailTemplateParentId = _emailTemplateParentId;
			newEmailTemplates.EmailCode = _emailCode;
			newEmailTemplates.EmailDescription = _emailDescription;
			newEmailTemplates.EmailSubject = _emailSubject;
			newEmailTemplates.EmailBodyText = _emailBodyText;
			newEmailTemplates.EmailBodyHtml = _emailBodyHtml;
			newEmailTemplates.EmailFields = _emailFields;
			newEmailTemplates.EmailAddressName = _emailAddressName;
			newEmailTemplates.EmailAddressFrom = _emailAddressFrom;
			newEmailTemplates.EmailAddressCc = _emailAddressCc;
			newEmailTemplates.EmailAddressBcc = _emailAddressBcc;
			newEmailTemplates.GlobalTemplate = _globalTemplate;
			newEmailTemplates.LastModifiedBy = _lastModifiedBy;
			newEmailTemplates.LastModified = _lastModified;
			newEmailTemplates.EmailAddressTo = _emailAddressTo;
			newEmailTemplates.EmailAddressToName = _emailAddressToName;
			newEmailTemplates.EmailAddressToMandatory = _emailAddressToMandatory;
			newEmailTemplates.LanguageId = _languageId;
			return newEmailTemplates;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EmailTemplateId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 EmailTemplateId
		{
			get
			{
				return this.entityData.EmailTemplateId; 
			}
			
			set
			{
				if (this.entityData.EmailTemplateId == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.EmailTemplateId, this.entityData.EmailTemplateId);
				this.entityData.EmailTemplateId = value;
				this.EntityId.EmailTemplateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.EmailTemplateId, this.entityData.EmailTemplateId);
				OnPropertyChanged("EmailTemplateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SiteId
		{
			get
			{
				return this.entityData.SiteId; 
			}
			
			set
			{
				if (this.entityData.SiteId == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.SiteId, this.entityData.SiteId);
				this.entityData.SiteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.SiteId, this.entityData.SiteId);
				OnPropertyChanged("SiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailTemplateParentId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 EmailTemplateParentId
		{
			get
			{
				return this.entityData.EmailTemplateParentId; 
			}
			
			set
			{
				if (this.entityData.EmailTemplateParentId == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.EmailTemplateParentId, this.entityData.EmailTemplateParentId);
				this.entityData.EmailTemplateParentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.EmailTemplateParentId, this.entityData.EmailTemplateParentId);
				OnPropertyChanged("EmailTemplateParentId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String EmailCode
		{
			get
			{
				return this.entityData.EmailCode; 
			}
			
			set
			{
				if (this.entityData.EmailCode == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.EmailCode, this.entityData.EmailCode);
				this.entityData.EmailCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.EmailCode, this.entityData.EmailCode);
				OnPropertyChanged("EmailCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailDescription property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String EmailDescription
		{
			get
			{
				return this.entityData.EmailDescription; 
			}
			
			set
			{
				if (this.entityData.EmailDescription == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.EmailDescription, this.entityData.EmailDescription);
				this.entityData.EmailDescription = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.EmailDescription, this.entityData.EmailDescription);
				OnPropertyChanged("EmailDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailSubject property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 510)]
		public virtual System.String EmailSubject
		{
			get
			{
				return this.entityData.EmailSubject; 
			}
			
			set
			{
				if (this.entityData.EmailSubject == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.EmailSubject, this.entityData.EmailSubject);
				this.entityData.EmailSubject = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.EmailSubject, this.entityData.EmailSubject);
				OnPropertyChanged("EmailSubject");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailBodyText property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String EmailBodyText
		{
			get
			{
				return this.entityData.EmailBodyText; 
			}
			
			set
			{
				if (this.entityData.EmailBodyText == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.EmailBodyText, this.entityData.EmailBodyText);
				this.entityData.EmailBodyText = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.EmailBodyText, this.entityData.EmailBodyText);
				OnPropertyChanged("EmailBodyText");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailBodyHtml property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String EmailBodyHtml
		{
			get
			{
				return this.entityData.EmailBodyHtml; 
			}
			
			set
			{
				if (this.entityData.EmailBodyHtml == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.EmailBodyHtml, this.entityData.EmailBodyHtml);
				this.entityData.EmailBodyHtml = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.EmailBodyHtml, this.entityData.EmailBodyHtml);
				OnPropertyChanged("EmailBodyHtml");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailFields property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String EmailFields
		{
			get
			{
				return this.entityData.EmailFields; 
			}
			
			set
			{
				if (this.entityData.EmailFields == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.EmailFields, this.entityData.EmailFields);
				this.entityData.EmailFields = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.EmailFields, this.entityData.EmailFields);
				OnPropertyChanged("EmailFields");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailAddressName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String EmailAddressName
		{
			get
			{
				return this.entityData.EmailAddressName; 
			}
			
			set
			{
				if (this.entityData.EmailAddressName == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.EmailAddressName, this.entityData.EmailAddressName);
				this.entityData.EmailAddressName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.EmailAddressName, this.entityData.EmailAddressName);
				OnPropertyChanged("EmailAddressName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailAddressFrom property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String EmailAddressFrom
		{
			get
			{
				return this.entityData.EmailAddressFrom; 
			}
			
			set
			{
				if (this.entityData.EmailAddressFrom == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.EmailAddressFrom, this.entityData.EmailAddressFrom);
				this.entityData.EmailAddressFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.EmailAddressFrom, this.entityData.EmailAddressFrom);
				OnPropertyChanged("EmailAddressFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailAddressCc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 512)]
		public virtual System.String EmailAddressCc
		{
			get
			{
				return this.entityData.EmailAddressCc; 
			}
			
			set
			{
				if (this.entityData.EmailAddressCc == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.EmailAddressCc, this.entityData.EmailAddressCc);
				this.entityData.EmailAddressCc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.EmailAddressCc, this.entityData.EmailAddressCc);
				OnPropertyChanged("EmailAddressCc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailAddressBcc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 512)]
		public virtual System.String EmailAddressBcc
		{
			get
			{
				return this.entityData.EmailAddressBcc; 
			}
			
			set
			{
				if (this.entityData.EmailAddressBcc == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.EmailAddressBcc, this.entityData.EmailAddressBcc);
				this.entityData.EmailAddressBcc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.EmailAddressBcc, this.entityData.EmailAddressBcc);
				OnPropertyChanged("EmailAddressBcc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GlobalTemplate property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean GlobalTemplate
		{
			get
			{
				return this.entityData.GlobalTemplate; 
			}
			
			set
			{
				if (this.entityData.GlobalTemplate == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.GlobalTemplate, this.entityData.GlobalTemplate);
				this.entityData.GlobalTemplate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.GlobalTemplate, this.entityData.GlobalTemplate);
				OnPropertyChanged("GlobalTemplate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LastModifiedBy
		{
			get
			{
				return this.entityData.LastModifiedBy; 
			}
			
			set
			{
				if (this.entityData.LastModifiedBy == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				this.entityData.LastModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				OnPropertyChanged("LastModifiedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModified property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastModified
		{
			get
			{
				return this.entityData.LastModified; 
			}
			
			set
			{
				if (this.entityData.LastModified == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.LastModified, this.entityData.LastModified);
				this.entityData.LastModified = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.LastModified, this.entityData.LastModified);
				OnPropertyChanged("LastModified");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailAddressTo property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String EmailAddressTo
		{
			get
			{
				return this.entityData.EmailAddressTo; 
			}
			
			set
			{
				if (this.entityData.EmailAddressTo == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.EmailAddressTo, this.entityData.EmailAddressTo);
				this.entityData.EmailAddressTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.EmailAddressTo, this.entityData.EmailAddressTo);
				OnPropertyChanged("EmailAddressTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailAddressToName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String EmailAddressToName
		{
			get
			{
				return this.entityData.EmailAddressToName; 
			}
			
			set
			{
				if (this.entityData.EmailAddressToName == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.EmailAddressToName, this.entityData.EmailAddressToName);
				this.entityData.EmailAddressToName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.EmailAddressToName, this.entityData.EmailAddressToName);
				OnPropertyChanged("EmailAddressToName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailAddressToMandatory property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEmailAddressToMandatoryNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? EmailAddressToMandatory
		{
			get
			{
				return this.entityData.EmailAddressToMandatory; 
			}
			
			set
			{
				if (this.entityData.EmailAddressToMandatory == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.EmailAddressToMandatory, this.entityData.EmailAddressToMandatory);
				this.entityData.EmailAddressToMandatory = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.EmailAddressToMandatory, this.entityData.EmailAddressToMandatory);
				OnPropertyChanged("EmailAddressToMandatory");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LanguageId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLanguageIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LanguageId
		{
			get
			{
				return this.entityData.LanguageId; 
			}
			
			set
			{
				if (this.entityData.LanguageId == value)
					return;
					
				OnColumnChanging(EmailTemplatesColumn.LanguageId, this.entityData.LanguageId);
				this.entityData.LanguageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplatesColumn.LanguageId, this.entityData.LanguageId);
				OnPropertyChanged("LanguageId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return entityData.LastModifiedBySource; }
            set { entityData.LastModifiedBySource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Sites SiteIdSource
      	{
            get { return entityData.SiteIdSource; }
            set { entityData.SiteIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Languages"/>.
		/// </summary>
		/// <value>The source Languages for LanguageId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Languages LanguageIdSource
      	{
            get { return entityData.LanguageIdSource; }
            set { entityData.LanguageIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("EmailCode", "Email Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmailCode", "Email Code", 255));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("EmailDescription", "Email Description"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmailDescription", "Email Description", 255));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("EmailSubject", "Email Subject"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmailSubject", "Email Subject", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmailAddressName", "Email Address Name", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmailAddressFrom", "Email Address From", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmailAddressCc", "Email Address Cc", 512));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmailAddressBcc", "Email Address Bcc", 512));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmailAddressTo", "Email Address To", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmailAddressToName", "Email Address To Name", 510));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "EmailTemplates"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"EmailTemplateID", "SiteID", "EmailTemplateParentID", "EmailCode", "EmailDescription", "EmailSubject", "EmailBodyText", "EmailBodyHTML", "EmailFields", "EmailAddressName", "EmailAddressFrom", "EmailAddressCC", "EmailAddressBCC", "GlobalTemplate", "LastModifiedBy", "LastModified", "EmailAddressTo", "EmailAddressToName", "EmailAddressToMandatory", "LanguageID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EmailTemplatesEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EmailTemplates) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EmailTemplates>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EmailTemplates);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EmailTemplates Entity 
		///</summary>
		protected virtual EmailTemplates Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EmailTemplates copy = new EmailTemplates();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EmailTemplateId = this.EmailTemplateId;
				copy.SiteId = this.SiteId;
				copy.EmailTemplateParentId = this.EmailTemplateParentId;
				copy.EmailCode = this.EmailCode;
				copy.EmailDescription = this.EmailDescription;
				copy.EmailSubject = this.EmailSubject;
				copy.EmailBodyText = this.EmailBodyText;
				copy.EmailBodyHtml = this.EmailBodyHtml;
				copy.EmailFields = this.EmailFields;
				copy.EmailAddressName = this.EmailAddressName;
				copy.EmailAddressFrom = this.EmailAddressFrom;
				copy.EmailAddressCc = this.EmailAddressCc;
				copy.EmailAddressBcc = this.EmailAddressBcc;
				copy.GlobalTemplate = this.GlobalTemplate;
				copy.LastModifiedBy = this.LastModifiedBy;
				copy.LastModified = this.LastModified;
				copy.EmailAddressTo = this.EmailAddressTo;
				copy.EmailAddressToName = this.EmailAddressToName;
				copy.EmailAddressToMandatory = this.EmailAddressToMandatory;
				copy.LanguageId = this.LanguageId;
			
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				copy.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				copy.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				copy.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				copy.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
			if (this.LanguageIdSource != null && existingCopies.Contains(this.LanguageIdSource))
				copy.LanguageIdSource = existingCopies[this.LanguageIdSource] as Languages;
			else
				copy.LanguageIdSource = MakeCopyOf(this.LanguageIdSource, existingCopies) as Languages;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EmailTemplates Entity 
		///</summary>
		public virtual EmailTemplates Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EmailTemplates Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EmailTemplates DeepCopy()
		{
			return EntityHelper.Clone<EmailTemplates>(this as EmailTemplates);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EmailTemplatesEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EmailTemplatesEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EmailTemplatesEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EmailTemplatesColumn column)
		{
			switch(column)
			{
					case EmailTemplatesColumn.EmailTemplateId:
					return entityData.EmailTemplateId != _originalData.EmailTemplateId;
					case EmailTemplatesColumn.SiteId:
					return entityData.SiteId != _originalData.SiteId;
					case EmailTemplatesColumn.EmailTemplateParentId:
					return entityData.EmailTemplateParentId != _originalData.EmailTemplateParentId;
					case EmailTemplatesColumn.EmailCode:
					return entityData.EmailCode != _originalData.EmailCode;
					case EmailTemplatesColumn.EmailDescription:
					return entityData.EmailDescription != _originalData.EmailDescription;
					case EmailTemplatesColumn.EmailSubject:
					return entityData.EmailSubject != _originalData.EmailSubject;
					case EmailTemplatesColumn.EmailBodyText:
					return entityData.EmailBodyText != _originalData.EmailBodyText;
					case EmailTemplatesColumn.EmailBodyHtml:
					return entityData.EmailBodyHtml != _originalData.EmailBodyHtml;
					case EmailTemplatesColumn.EmailFields:
					return entityData.EmailFields != _originalData.EmailFields;
					case EmailTemplatesColumn.EmailAddressName:
					return entityData.EmailAddressName != _originalData.EmailAddressName;
					case EmailTemplatesColumn.EmailAddressFrom:
					return entityData.EmailAddressFrom != _originalData.EmailAddressFrom;
					case EmailTemplatesColumn.EmailAddressCc:
					return entityData.EmailAddressCc != _originalData.EmailAddressCc;
					case EmailTemplatesColumn.EmailAddressBcc:
					return entityData.EmailAddressBcc != _originalData.EmailAddressBcc;
					case EmailTemplatesColumn.GlobalTemplate:
					return entityData.GlobalTemplate != _originalData.GlobalTemplate;
					case EmailTemplatesColumn.LastModifiedBy:
					return entityData.LastModifiedBy != _originalData.LastModifiedBy;
					case EmailTemplatesColumn.LastModified:
					return entityData.LastModified != _originalData.LastModified;
					case EmailTemplatesColumn.EmailAddressTo:
					return entityData.EmailAddressTo != _originalData.EmailAddressTo;
					case EmailTemplatesColumn.EmailAddressToName:
					return entityData.EmailAddressToName != _originalData.EmailAddressToName;
					case EmailTemplatesColumn.EmailAddressToMandatory:
					return entityData.EmailAddressToMandatory != _originalData.EmailAddressToMandatory;
					case EmailTemplatesColumn.LanguageId:
					return entityData.LanguageId != _originalData.LanguageId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EmailTemplatesColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EmailTemplateId != _originalData.EmailTemplateId;
			result = result || entityData.SiteId != _originalData.SiteId;
			result = result || entityData.EmailTemplateParentId != _originalData.EmailTemplateParentId;
			result = result || entityData.EmailCode != _originalData.EmailCode;
			result = result || entityData.EmailDescription != _originalData.EmailDescription;
			result = result || entityData.EmailSubject != _originalData.EmailSubject;
			result = result || entityData.EmailBodyText != _originalData.EmailBodyText;
			result = result || entityData.EmailBodyHtml != _originalData.EmailBodyHtml;
			result = result || entityData.EmailFields != _originalData.EmailFields;
			result = result || entityData.EmailAddressName != _originalData.EmailAddressName;
			result = result || entityData.EmailAddressFrom != _originalData.EmailAddressFrom;
			result = result || entityData.EmailAddressCc != _originalData.EmailAddressCc;
			result = result || entityData.EmailAddressBcc != _originalData.EmailAddressBcc;
			result = result || entityData.GlobalTemplate != _originalData.GlobalTemplate;
			result = result || entityData.LastModifiedBy != _originalData.LastModifiedBy;
			result = result || entityData.LastModified != _originalData.LastModified;
			result = result || entityData.EmailAddressTo != _originalData.EmailAddressTo;
			result = result || entityData.EmailAddressToName != _originalData.EmailAddressToName;
			result = result || entityData.EmailAddressToMandatory != _originalData.EmailAddressToMandatory;
			result = result || entityData.LanguageId != _originalData.LanguageId;
			return result;
		}	
		
		///<summary>
		///  Returns a EmailTemplates Entity with the original data.
		///</summary>
		public EmailTemplates GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEmailTemplates(
				_originalData.SiteId,
				_originalData.EmailTemplateParentId,
				_originalData.EmailCode,
				_originalData.EmailDescription,
				_originalData.EmailSubject,
				_originalData.EmailBodyText,
				_originalData.EmailBodyHtml,
				_originalData.EmailFields,
				_originalData.EmailAddressName,
				_originalData.EmailAddressFrom,
				_originalData.EmailAddressCc,
				_originalData.EmailAddressBcc,
				_originalData.GlobalTemplate,
				_originalData.LastModifiedBy,
				_originalData.LastModified,
				_originalData.EmailAddressTo,
				_originalData.EmailAddressToName,
				_originalData.EmailAddressToMandatory,
				_originalData.LanguageId
				);
				
			return (EmailTemplates)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EmailTemplatesBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EmailTemplatesBase)
				return ValueEquals(this, (EmailTemplatesBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EmailTemplatesBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EmailTemplateId.GetHashCode() ^ 
					this.SiteId.GetHashCode() ^ 
					this.EmailTemplateParentId.GetHashCode() ^ 
					this.EmailCode.GetHashCode() ^ 
					this.EmailDescription.GetHashCode() ^ 
					this.EmailSubject.GetHashCode() ^ 
					((this.EmailBodyText == null) ? string.Empty : this.EmailBodyText.ToString()).GetHashCode() ^ 
					((this.EmailBodyHtml == null) ? string.Empty : this.EmailBodyHtml.ToString()).GetHashCode() ^ 
					((this.EmailFields == null) ? string.Empty : this.EmailFields.ToString()).GetHashCode() ^ 
					((this.EmailAddressName == null) ? string.Empty : this.EmailAddressName.ToString()).GetHashCode() ^ 
					((this.EmailAddressFrom == null) ? string.Empty : this.EmailAddressFrom.ToString()).GetHashCode() ^ 
					((this.EmailAddressCc == null) ? string.Empty : this.EmailAddressCc.ToString()).GetHashCode() ^ 
					((this.EmailAddressBcc == null) ? string.Empty : this.EmailAddressBcc.ToString()).GetHashCode() ^ 
					this.GlobalTemplate.GetHashCode() ^ 
					this.LastModifiedBy.GetHashCode() ^ 
					this.LastModified.GetHashCode() ^ 
					((this.EmailAddressTo == null) ? string.Empty : this.EmailAddressTo.ToString()).GetHashCode() ^ 
					((this.EmailAddressToName == null) ? string.Empty : this.EmailAddressToName.ToString()).GetHashCode() ^ 
					((this.EmailAddressToMandatory == null) ? string.Empty : this.EmailAddressToMandatory.ToString()).GetHashCode() ^ 
					((this.LanguageId == null) ? string.Empty : this.LanguageId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EmailTemplatesBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EmailTemplatesBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EmailTemplatesBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EmailTemplatesBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EmailTemplatesBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EmailTemplatesBase Object1, EmailTemplatesBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EmailTemplateId != Object2.EmailTemplateId)
				equal = false;
			if (Object1.SiteId != Object2.SiteId)
				equal = false;
			if (Object1.EmailTemplateParentId != Object2.EmailTemplateParentId)
				equal = false;
			if (Object1.EmailCode != Object2.EmailCode)
				equal = false;
			if (Object1.EmailDescription != Object2.EmailDescription)
				equal = false;
			if (Object1.EmailSubject != Object2.EmailSubject)
				equal = false;
			if ( Object1.EmailBodyText != null && Object2.EmailBodyText != null )
			{
				if (Object1.EmailBodyText != Object2.EmailBodyText)
					equal = false;
			}
			else if (Object1.EmailBodyText == null ^ Object2.EmailBodyText == null )
			{
				equal = false;
			}
			if ( Object1.EmailBodyHtml != null && Object2.EmailBodyHtml != null )
			{
				if (Object1.EmailBodyHtml != Object2.EmailBodyHtml)
					equal = false;
			}
			else if (Object1.EmailBodyHtml == null ^ Object2.EmailBodyHtml == null )
			{
				equal = false;
			}
			if ( Object1.EmailFields != null && Object2.EmailFields != null )
			{
				if (Object1.EmailFields != Object2.EmailFields)
					equal = false;
			}
			else if (Object1.EmailFields == null ^ Object2.EmailFields == null )
			{
				equal = false;
			}
			if ( Object1.EmailAddressName != null && Object2.EmailAddressName != null )
			{
				if (Object1.EmailAddressName != Object2.EmailAddressName)
					equal = false;
			}
			else if (Object1.EmailAddressName == null ^ Object2.EmailAddressName == null )
			{
				equal = false;
			}
			if ( Object1.EmailAddressFrom != null && Object2.EmailAddressFrom != null )
			{
				if (Object1.EmailAddressFrom != Object2.EmailAddressFrom)
					equal = false;
			}
			else if (Object1.EmailAddressFrom == null ^ Object2.EmailAddressFrom == null )
			{
				equal = false;
			}
			if ( Object1.EmailAddressCc != null && Object2.EmailAddressCc != null )
			{
				if (Object1.EmailAddressCc != Object2.EmailAddressCc)
					equal = false;
			}
			else if (Object1.EmailAddressCc == null ^ Object2.EmailAddressCc == null )
			{
				equal = false;
			}
			if ( Object1.EmailAddressBcc != null && Object2.EmailAddressBcc != null )
			{
				if (Object1.EmailAddressBcc != Object2.EmailAddressBcc)
					equal = false;
			}
			else if (Object1.EmailAddressBcc == null ^ Object2.EmailAddressBcc == null )
			{
				equal = false;
			}
			if (Object1.GlobalTemplate != Object2.GlobalTemplate)
				equal = false;
			if (Object1.LastModifiedBy != Object2.LastModifiedBy)
				equal = false;
			if (Object1.LastModified != Object2.LastModified)
				equal = false;
			if ( Object1.EmailAddressTo != null && Object2.EmailAddressTo != null )
			{
				if (Object1.EmailAddressTo != Object2.EmailAddressTo)
					equal = false;
			}
			else if (Object1.EmailAddressTo == null ^ Object2.EmailAddressTo == null )
			{
				equal = false;
			}
			if ( Object1.EmailAddressToName != null && Object2.EmailAddressToName != null )
			{
				if (Object1.EmailAddressToName != Object2.EmailAddressToName)
					equal = false;
			}
			else if (Object1.EmailAddressToName == null ^ Object2.EmailAddressToName == null )
			{
				equal = false;
			}
			if ( Object1.EmailAddressToMandatory != null && Object2.EmailAddressToMandatory != null )
			{
				if (Object1.EmailAddressToMandatory != Object2.EmailAddressToMandatory)
					equal = false;
			}
			else if (Object1.EmailAddressToMandatory == null ^ Object2.EmailAddressToMandatory == null )
			{
				equal = false;
			}
			if ( Object1.LanguageId != null && Object2.LanguageId != null )
			{
				if (Object1.LanguageId != Object2.LanguageId)
					equal = false;
			}
			else if (Object1.LanguageId == null ^ Object2.LanguageId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EmailTemplatesBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EmailTemplatesComparer GetComparer()
        {
            return new EmailTemplatesComparer();
        }
        */

        // Comparer delegates back to EmailTemplates
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EmailTemplates rhs, EmailTemplatesColumn which)
        {
            switch (which)
            {
            	
            	
            	case EmailTemplatesColumn.EmailTemplateId:
            		return this.EmailTemplateId.CompareTo(rhs.EmailTemplateId);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.SiteId:
            		return this.SiteId.CompareTo(rhs.SiteId);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.EmailTemplateParentId:
            		return this.EmailTemplateParentId.CompareTo(rhs.EmailTemplateParentId);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.EmailCode:
            		return this.EmailCode.CompareTo(rhs.EmailCode);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.EmailDescription:
            		return this.EmailDescription.CompareTo(rhs.EmailDescription);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.EmailSubject:
            		return this.EmailSubject.CompareTo(rhs.EmailSubject);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.EmailBodyText:
            		return this.EmailBodyText.CompareTo(rhs.EmailBodyText);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.EmailBodyHtml:
            		return this.EmailBodyHtml.CompareTo(rhs.EmailBodyHtml);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.EmailFields:
            		return this.EmailFields.CompareTo(rhs.EmailFields);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.EmailAddressName:
            		return this.EmailAddressName.CompareTo(rhs.EmailAddressName);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.EmailAddressFrom:
            		return this.EmailAddressFrom.CompareTo(rhs.EmailAddressFrom);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.EmailAddressCc:
            		return this.EmailAddressCc.CompareTo(rhs.EmailAddressCc);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.EmailAddressBcc:
            		return this.EmailAddressBcc.CompareTo(rhs.EmailAddressBcc);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.GlobalTemplate:
            		return this.GlobalTemplate.CompareTo(rhs.GlobalTemplate);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.LastModifiedBy:
            		return this.LastModifiedBy.CompareTo(rhs.LastModifiedBy);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.LastModified:
            		return this.LastModified.CompareTo(rhs.LastModified);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.EmailAddressTo:
            		return this.EmailAddressTo.CompareTo(rhs.EmailAddressTo);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.EmailAddressToName:
            		return this.EmailAddressToName.CompareTo(rhs.EmailAddressToName);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.EmailAddressToMandatory:
            		return this.EmailAddressToMandatory.Value.CompareTo(rhs.EmailAddressToMandatory.Value);
            		
            		                 
            	
            	
            	case EmailTemplatesColumn.LanguageId:
            		return this.LanguageId.Value.CompareTo(rhs.LanguageId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EmailTemplatesKey> Members
		
		// member variable for the EntityId property
		private EmailTemplatesKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EmailTemplatesKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EmailTemplatesKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EmailTemplates")
					.Append("|").Append( this.EmailTemplateId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- EmailTemplateId: {0}{20}- SiteId: {1}{20}- EmailTemplateParentId: {2}{20}- EmailCode: {3}{20}- EmailDescription: {4}{20}- EmailSubject: {5}{20}- EmailBodyText: {6}{20}- EmailBodyHtml: {7}{20}- EmailFields: {8}{20}- EmailAddressName: {9}{20}- EmailAddressFrom: {10}{20}- EmailAddressCc: {11}{20}- EmailAddressBcc: {12}{20}- GlobalTemplate: {13}{20}- LastModifiedBy: {14}{20}- LastModified: {15}{20}- EmailAddressTo: {16}{20}- EmailAddressToName: {17}{20}- EmailAddressToMandatory: {18}{20}- LanguageId: {19}{20}{22}", 
				this.EmailTemplateId,
				this.SiteId,
				this.EmailTemplateParentId,
				this.EmailCode,
				this.EmailDescription,
				this.EmailSubject,
				(this.EmailBodyText == null) ? string.Empty : this.EmailBodyText.ToString(),
				(this.EmailBodyHtml == null) ? string.Empty : this.EmailBodyHtml.ToString(),
				(this.EmailFields == null) ? string.Empty : this.EmailFields.ToString(),
				(this.EmailAddressName == null) ? string.Empty : this.EmailAddressName.ToString(),
				(this.EmailAddressFrom == null) ? string.Empty : this.EmailAddressFrom.ToString(),
				(this.EmailAddressCc == null) ? string.Empty : this.EmailAddressCc.ToString(),
				(this.EmailAddressBcc == null) ? string.Empty : this.EmailAddressBcc.ToString(),
				this.GlobalTemplate,
				this.LastModifiedBy,
				this.LastModified,
				(this.EmailAddressTo == null) ? string.Empty : this.EmailAddressTo.ToString(),
				(this.EmailAddressToName == null) ? string.Empty : this.EmailAddressToName.ToString(),
				(this.EmailAddressToMandatory == null) ? string.Empty : this.EmailAddressToMandatory.ToString(),
				(this.LanguageId == null) ? string.Empty : this.LanguageId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'EmailTemplates' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EmailTemplatesEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// EmailTemplateID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "EmailTemplates"</remarks>
		public System.Int32 EmailTemplateId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SiteID : 
		/// </summary>
		public System.Int32		  SiteId = (int)0;
		
		/// <summary>
		/// EmailTemplateParentID : 
		/// </summary>
		public System.Int32		  EmailTemplateParentId = (int)0;
		
		/// <summary>
		/// EmailCode : 
		/// </summary>
		public System.String		  EmailCode = string.Empty;
		
		/// <summary>
		/// EmailDescription : 
		/// </summary>
		public System.String		  EmailDescription = string.Empty;
		
		/// <summary>
		/// EmailSubject : 
		/// </summary>
		public System.String		  EmailSubject = string.Empty;
		
		/// <summary>
		/// EmailBodyText : 
		/// </summary>
		public System.String		  EmailBodyText = null;
		
		/// <summary>
		/// EmailBodyHTML : 
		/// </summary>
		public System.String		  EmailBodyHtml = null;
		
		/// <summary>
		/// EmailFields : 
		/// </summary>
		public System.String		  EmailFields = null;
		
		/// <summary>
		/// EmailAddressName : 
		/// </summary>
		public System.String		  EmailAddressName = null;
		
		/// <summary>
		/// EmailAddressFrom : 
		/// </summary>
		public System.String		  EmailAddressFrom = null;
		
		/// <summary>
		/// EmailAddressCC : 
		/// </summary>
		public System.String		  EmailAddressCc = null;
		
		/// <summary>
		/// EmailAddressBCC : 
		/// </summary>
		public System.String		  EmailAddressBcc = null;
		
		/// <summary>
		/// GlobalTemplate : 
		/// </summary>
		public System.Boolean		  GlobalTemplate = false;
		
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		public System.Int32		  LastModifiedBy = (int)0;
		
		/// <summary>
		/// LastModified : 
		/// </summary>
		public System.DateTime		  LastModified = DateTime.MinValue;
		
		/// <summary>
		/// EmailAddressTo : 
		/// </summary>
		public System.String		  EmailAddressTo = null;
		
		/// <summary>
		/// EmailAddressToName : 
		/// </summary>
		public System.String		  EmailAddressToName = null;
		
		/// <summary>
		/// EmailAddressToMandatory : 
		/// </summary>
		public System.Boolean?		  EmailAddressToMandatory = null;
		
		/// <summary>
		/// LanguageID : 
		/// </summary>
		public System.Int32?		  LanguageId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdminUsers _lastModifiedBySource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return this._lastModifiedBySource; }
            set { this._lastModifiedBySource = value; }
      	}
		private Sites _siteIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Sites SiteIdSource
      	{
            get { return this._siteIdSource; }
            set { this._siteIdSource = value; }
      	}
		private Languages _languageIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Languages"/>.
		/// </summary>
		/// <value>The source Languages for LanguageId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Languages LanguageIdSource
      	{
            get { return this._languageIdSource; }
            set { this._languageIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EmailTemplatesEntityData _tmp = new EmailTemplatesEntityData();
						
			_tmp.EmailTemplateId = this.EmailTemplateId;
			
			_tmp.SiteId = this.SiteId;
			_tmp.EmailTemplateParentId = this.EmailTemplateParentId;
			_tmp.EmailCode = this.EmailCode;
			_tmp.EmailDescription = this.EmailDescription;
			_tmp.EmailSubject = this.EmailSubject;
			_tmp.EmailBodyText = this.EmailBodyText;
			_tmp.EmailBodyHtml = this.EmailBodyHtml;
			_tmp.EmailFields = this.EmailFields;
			_tmp.EmailAddressName = this.EmailAddressName;
			_tmp.EmailAddressFrom = this.EmailAddressFrom;
			_tmp.EmailAddressCc = this.EmailAddressCc;
			_tmp.EmailAddressBcc = this.EmailAddressBcc;
			_tmp.GlobalTemplate = this.GlobalTemplate;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.LastModified = this.LastModified;
			_tmp.EmailAddressTo = this.EmailAddressTo;
			_tmp.EmailAddressToName = this.EmailAddressToName;
			_tmp.EmailAddressToMandatory = this.EmailAddressToMandatory;
			_tmp.LanguageId = this.LanguageId;
			
			#region Source Parent Composite Entities
			if (this.LastModifiedBySource != null)
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource) as AdminUsers;
			if (this.SiteIdSource != null)
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource) as Sites;
			if (this.LanguageIdSource != null)
				_tmp.LanguageIdSource = MakeCopyOf(this.LanguageIdSource) as Languages;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EmailTemplatesEntityData _tmp = new EmailTemplatesEntityData();
						
			_tmp.EmailTemplateId = this.EmailTemplateId;
			
			_tmp.SiteId = this.SiteId;
			_tmp.EmailTemplateParentId = this.EmailTemplateParentId;
			_tmp.EmailCode = this.EmailCode;
			_tmp.EmailDescription = this.EmailDescription;
			_tmp.EmailSubject = this.EmailSubject;
			_tmp.EmailBodyText = this.EmailBodyText;
			_tmp.EmailBodyHtml = this.EmailBodyHtml;
			_tmp.EmailFields = this.EmailFields;
			_tmp.EmailAddressName = this.EmailAddressName;
			_tmp.EmailAddressFrom = this.EmailAddressFrom;
			_tmp.EmailAddressCc = this.EmailAddressCc;
			_tmp.EmailAddressBcc = this.EmailAddressBcc;
			_tmp.GlobalTemplate = this.GlobalTemplate;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.LastModified = this.LastModified;
			_tmp.EmailAddressTo = this.EmailAddressTo;
			_tmp.EmailAddressToName = this.EmailAddressToName;
			_tmp.EmailAddressToMandatory = this.EmailAddressToMandatory;
			_tmp.LanguageId = this.LanguageId;
			
			#region Source Parent Composite Entities
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				_tmp.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				_tmp.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
			if (this.LanguageIdSource != null && existingCopies.Contains(this.LanguageIdSource))
				_tmp.LanguageIdSource = existingCopies[this.LanguageIdSource] as Languages;
			else
				_tmp.LanguageIdSource = MakeCopyOf(this.LanguageIdSource, existingCopies) as Languages;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmailTemplatesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EmailTemplatesColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmailTemplatesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EmailTemplatesColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmailTemplatesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EmailTemplatesColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EmailTemplatesEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EmailTemplatesEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmailTemplatesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EmailTemplatesColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EmailTemplatesEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EmailTemplatesEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EmailTemplatesEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EmailTemplates"/> object.
	/// </remarks>
	public class EmailTemplatesEventArgs : System.EventArgs
	{
		private EmailTemplatesColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EmailTemplatesEventArgs class.
		///</summary>
		public EmailTemplatesEventArgs(EmailTemplatesColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EmailTemplatesEventArgs class.
		///</summary>
		public EmailTemplatesEventArgs(EmailTemplatesColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EmailTemplatesColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EmailTemplatesColumn" />
		public EmailTemplatesColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EmailTemplates related events.
	///</summary>
	public delegate void EmailTemplatesEventHandler(object sender, EmailTemplatesEventArgs e);
	
	#region EmailTemplatesComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EmailTemplatesComparer : System.Collections.Generic.IComparer<EmailTemplates>
	{
		EmailTemplatesColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EmailTemplatesComparer"/> class.
        /// </summary>
		public EmailTemplatesComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EmailTemplatesComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EmailTemplatesComparer(EmailTemplatesColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EmailTemplates"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EmailTemplates"/> to compare.</param>
        /// <param name="b">The second <c>EmailTemplates</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EmailTemplates a, EmailTemplates b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EmailTemplates entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EmailTemplates a, EmailTemplates b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EmailTemplatesColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EmailTemplatesKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EmailTemplates"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EmailTemplatesKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EmailTemplatesKey class.
		/// </summary>
		public EmailTemplatesKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EmailTemplatesKey class.
		/// </summary>
		public EmailTemplatesKey(EmailTemplatesBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EmailTemplateId = entity.EmailTemplateId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EmailTemplatesKey class.
		/// </summary>
		public EmailTemplatesKey(System.Int32 _emailTemplateId)
		{
			#region Init Properties

			this.EmailTemplateId = _emailTemplateId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EmailTemplatesBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EmailTemplatesBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EmailTemplateId property
		private System.Int32 _emailTemplateId;
		
		/// <summary>
		/// Gets or sets the EmailTemplateId property.
		/// </summary>
		public System.Int32 EmailTemplateId
		{
			get { return _emailTemplateId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EmailTemplateId = value;
				
				_emailTemplateId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EmailTemplateId = ( values["EmailTemplateId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["EmailTemplateId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EmailTemplateId", EmailTemplateId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EmailTemplateId: {0}{1}",
								EmailTemplateId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EmailTemplatesColumn Enum
	
	/// <summary>
	/// Enumerate the EmailTemplates columns.
	/// </summary>
	[Serializable]
	public enum EmailTemplatesColumn : int
	{
		/// <summary>
		/// EmailTemplateId : 
		/// </summary>
		[EnumTextValue("EmailTemplateID")]
		[ColumnEnum("EmailTemplateID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		EmailTemplateId = 1,
		/// <summary>
		/// SiteId : 
		/// </summary>
		[EnumTextValue("SiteID")]
		[ColumnEnum("SiteID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteId = 2,
		/// <summary>
		/// EmailTemplateParentId : 
		/// </summary>
		[EnumTextValue("EmailTemplateParentID")]
		[ColumnEnum("EmailTemplateParentID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		EmailTemplateParentId = 3,
		/// <summary>
		/// EmailCode : 
		/// </summary>
		[EnumTextValue("EmailCode")]
		[ColumnEnum("EmailCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		EmailCode = 4,
		/// <summary>
		/// EmailDescription : 
		/// </summary>
		[EnumTextValue("EmailDescription")]
		[ColumnEnum("EmailDescription", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		EmailDescription = 5,
		/// <summary>
		/// EmailSubject : 
		/// </summary>
		[EnumTextValue("EmailSubject")]
		[ColumnEnum("EmailSubject", typeof(System.String), System.Data.DbType.String, false, false, false, 510)]
		EmailSubject = 6,
		/// <summary>
		/// EmailBodyText : 
		/// </summary>
		[EnumTextValue("EmailBodyText")]
		[ColumnEnum("EmailBodyText", typeof(System.String), System.Data.DbType.String, false, false, true)]
		EmailBodyText = 7,
		/// <summary>
		/// EmailBodyHtml : 
		/// </summary>
		[EnumTextValue("EmailBodyHTML")]
		[ColumnEnum("EmailBodyHTML", typeof(System.String), System.Data.DbType.String, false, false, true)]
		EmailBodyHtml = 8,
		/// <summary>
		/// EmailFields : 
		/// </summary>
		[EnumTextValue("EmailFields")]
		[ColumnEnum("EmailFields", typeof(System.String), System.Data.DbType.String, false, false, true)]
		EmailFields = 9,
		/// <summary>
		/// EmailAddressName : 
		/// </summary>
		[EnumTextValue("EmailAddressName")]
		[ColumnEnum("EmailAddressName", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		EmailAddressName = 10,
		/// <summary>
		/// EmailAddressFrom : 
		/// </summary>
		[EnumTextValue("EmailAddressFrom")]
		[ColumnEnum("EmailAddressFrom", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		EmailAddressFrom = 11,
		/// <summary>
		/// EmailAddressCc : 
		/// </summary>
		[EnumTextValue("EmailAddressCC")]
		[ColumnEnum("EmailAddressCC", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 512)]
		EmailAddressCc = 12,
		/// <summary>
		/// EmailAddressBcc : 
		/// </summary>
		[EnumTextValue("EmailAddressBCC")]
		[ColumnEnum("EmailAddressBCC", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 512)]
		EmailAddressBcc = 13,
		/// <summary>
		/// GlobalTemplate : 
		/// </summary>
		[EnumTextValue("GlobalTemplate")]
		[ColumnEnum("GlobalTemplate", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		GlobalTemplate = 14,
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		[EnumTextValue("LastModifiedBy")]
		[ColumnEnum("LastModifiedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LastModifiedBy = 15,
		/// <summary>
		/// LastModified : 
		/// </summary>
		[EnumTextValue("LastModified")]
		[ColumnEnum("LastModified", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastModified = 16,
		/// <summary>
		/// EmailAddressTo : 
		/// </summary>
		[EnumTextValue("EmailAddressTo")]
		[ColumnEnum("EmailAddressTo", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		EmailAddressTo = 17,
		/// <summary>
		/// EmailAddressToName : 
		/// </summary>
		[EnumTextValue("EmailAddressToName")]
		[ColumnEnum("EmailAddressToName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 510)]
		EmailAddressToName = 18,
		/// <summary>
		/// EmailAddressToMandatory : 
		/// </summary>
		[EnumTextValue("EmailAddressToMandatory")]
		[ColumnEnum("EmailAddressToMandatory", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		EmailAddressToMandatory = 19,
		/// <summary>
		/// LanguageId : 
		/// </summary>
		[EnumTextValue("LanguageID")]
		[ColumnEnum("LanguageID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LanguageId = 20
	}//End enum

	#endregion EmailTemplatesColumn Enum

} // end namespace


/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file GlobalSettings.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'GlobalSettings' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class GlobalSettingsBase : EntityBase, IGlobalSettings, IEntityId<GlobalSettingsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private GlobalSettingsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private GlobalSettingsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private GlobalSettingsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<GlobalSettings> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GlobalSettingsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GlobalSettingsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="GlobalSettingsBase"/> instance.
		///</summary>
		public GlobalSettingsBase()
		{
			this.entityData = new GlobalSettingsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="GlobalSettingsBase"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_defaultLanguageId"></param>
		///<param name="_defaultDynamicPageId"></param>
		///<param name="_publicJobsSearch"></param>
		///<param name="_publicMembersSearch"></param>
		///<param name="_publicCompaniesSearch"></param>
		///<param name="_publicSponsoredAdverts"></param>
		///<param name="_privateJobs"></param>
		///<param name="_privateMembers"></param>
		///<param name="_privateCompanies"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_lastModified"></param>
		///<param name="_pageTitlePrefix"></param>
		///<param name="_pageTitleSuffix"></param>
		///<param name="_defaultTitle"></param>
		///<param name="_homeTitle"></param>
		///<param name="_defaultDescription"></param>
		///<param name="_homeDescription"></param>
		///<param name="_defaultKeywords"></param>
		///<param name="_homeKeywords"></param>
		///<param name="_showFaceBookButton"></param>
		///<param name="_useAdvertiserFilter"></param>
		///<param name="_merchantId"></param>
		///<param name="_showTwitterButton"></param>
		///<param name="_showJobAlertButton"></param>
		///<param name="_showLinkedInButton"></param>
		///<param name="_siteFavIconId"></param>
		///<param name="_siteDocType"></param>
		///<param name="_currencySymbol"></param>
		///<param name="_ftpFolderLocation"></param>
		///<param name="_metaTags"></param>
		///<param name="_systemMetaTags"></param>
		///<param name="_memberRegistrationNotification"></param>
		///<param name="_linkedInApi"></param>
		///<param name="_linkedInLogo"></param>
		///<param name="_linkedInCompanyId"></param>
		///<param name="_linkedInEmail"></param>
		///<param name="_privacySettings"></param>
		///<param name="_wwwRedirect"></param>
		///<param name="_allowAdvertiser"></param>
		///<param name="_linkedInApiSecret"></param>
		///<param name="_googleClientId"></param>
		///<param name="_googleClientSecret"></param>
		///<param name="_facebookAppId"></param>
		///<param name="_facebookAppSecret"></param>
		///<param name="_linkedInButtonSize"></param>
		///<param name="_defaultCountryId"></param>
		///<param name="_payPalUsername"></param>
		///<param name="_payPalPassword"></param>
		///<param name="_payPalSignature"></param>
		///<param name="_securePayMerchantId"></param>
		///<param name="_securePayPassword"></param>
		///<param name="_usingSsl"></param>
		///<param name="_useCustomProfessionRole"></param>
		///<param name="_generateJobXml"></param>
		///<param name="_isPrivateSite"></param>
		///<param name="_privateRedirectUrl"></param>
		///<param name="_enableJobCustomQuestionnaire"></param>
		///<param name="_jobApplicationTypeId"></param>
		///<param name="_jobScreeningProcess"></param>
		///<param name="_advertiserApprovalProcess"></param>
		///<param name="_siteType"></param>
		///<param name="_enableSsl"></param>
		///<param name="_gst"></param>
		///<param name="_gstLabel"></param>
		///<param name="_numberOfPremiumJobs"></param>
		///<param name="_premiumJobDays"></param>
		///<param name="_displayPremiumJobsOnResults"></param>
		///<param name="_jobExpiryNotification"></param>
		///<param name="_currencyId"></param>
		///<param name="_payPalClientId"></param>
		///<param name="_payPalClientSecret"></param>
		///<param name="_paypalUser"></param>
		///<param name="_paypalProPassword"></param>
		///<param name="_paypalVendor"></param>
		///<param name="_paypalPartner"></param>
		///<param name="_invoiceSiteInfo"></param>
		///<param name="_invoiceSiteFooter"></param>
		///<param name="_enableTermsAndConditions"></param>
		///<param name="_defaultEmailLanguageId"></param>
		///<param name="_googleTagManager"></param>
		///<param name="_googleAnalytics"></param>
		///<param name="_googleWebMaster"></param>
		///<param name="_enablePeopleSearch"></param>
		///<param name="_globalDateFormat"></param>
		///<param name="_timeZone"></param>
		///<param name="_globalFolder"></param>
		public GlobalSettingsBase(System.Int32 _siteId, System.Int32 _defaultLanguageId, 
			System.Int32? _defaultDynamicPageId, System.Boolean _publicJobsSearch, System.Boolean _publicMembersSearch, 
			System.Boolean _publicCompaniesSearch, System.Boolean _publicSponsoredAdverts, System.Boolean _privateJobs, 
			System.Boolean _privateMembers, System.Boolean _privateCompanies, System.Int32 _lastModifiedBy, 
			System.DateTime _lastModified, System.String _pageTitlePrefix, System.String _pageTitleSuffix, 
			System.String _defaultTitle, System.String _homeTitle, System.String _defaultDescription, 
			System.String _homeDescription, System.String _defaultKeywords, System.String _homeKeywords, 
			System.Boolean _showFaceBookButton, System.Int32 _useAdvertiserFilter, System.Int32? _merchantId, 
			System.Boolean _showTwitterButton, System.Boolean _showJobAlertButton, System.Boolean _showLinkedInButton, 
			System.Int32? _siteFavIconId, System.String _siteDocType, System.String _currencySymbol, 
			System.String _ftpFolderLocation, System.String _metaTags, System.String _systemMetaTags, 
			System.String _memberRegistrationNotification, System.String _linkedInApi, System.String _linkedInLogo, 
			System.Int32? _linkedInCompanyId, System.String _linkedInEmail, System.String _privacySettings, 
			System.Boolean _wwwRedirect, System.Boolean _allowAdvertiser, System.String _linkedInApiSecret, 
			System.String _googleClientId, System.String _googleClientSecret, System.String _facebookAppId, 
			System.String _facebookAppSecret, System.Int32? _linkedInButtonSize, System.Int32? _defaultCountryId, 
			System.String _payPalUsername, System.String _payPalPassword, System.String _payPalSignature, 
			System.String _securePayMerchantId, System.String _securePayPassword, System.Boolean _usingSsl, 
			System.Boolean _useCustomProfessionRole, System.Boolean _generateJobXml, System.Boolean? _isPrivateSite, 
			System.String _privateRedirectUrl, System.Boolean? _enableJobCustomQuestionnaire, System.Int32? _jobApplicationTypeId, 
			System.Boolean? _jobScreeningProcess, System.Int32? _advertiserApprovalProcess, System.Int32 _siteType, 
			System.Boolean _enableSsl, System.Decimal _gst, System.String _gstLabel, System.Int32 _numberOfPremiumJobs, 
			System.Int32 _premiumJobDays, System.Boolean _displayPremiumJobsOnResults, System.Boolean _jobExpiryNotification, 
			System.Int32 _currencyId, System.String _payPalClientId, System.String _payPalClientSecret, 
			System.String _paypalUser, System.String _paypalProPassword, System.String _paypalVendor, 
			System.String _paypalPartner, System.String _invoiceSiteInfo, System.String _invoiceSiteFooter, 
			System.Boolean _enableTermsAndConditions, System.Int32? _defaultEmailLanguageId, System.String _googleTagManager, 
			System.String _googleAnalytics, System.String _googleWebMaster, System.Boolean _enablePeopleSearch, 
			System.String _globalDateFormat, System.String _timeZone, System.String _globalFolder)
		{
			this.entityData = new GlobalSettingsEntityData();
			this.backupData = null;

			this.SiteId = _siteId;
			this.DefaultLanguageId = _defaultLanguageId;
			this.DefaultDynamicPageId = _defaultDynamicPageId;
			this.PublicJobsSearch = _publicJobsSearch;
			this.PublicMembersSearch = _publicMembersSearch;
			this.PublicCompaniesSearch = _publicCompaniesSearch;
			this.PublicSponsoredAdverts = _publicSponsoredAdverts;
			this.PrivateJobs = _privateJobs;
			this.PrivateMembers = _privateMembers;
			this.PrivateCompanies = _privateCompanies;
			this.LastModifiedBy = _lastModifiedBy;
			this.LastModified = _lastModified;
			this.PageTitlePrefix = _pageTitlePrefix;
			this.PageTitleSuffix = _pageTitleSuffix;
			this.DefaultTitle = _defaultTitle;
			this.HomeTitle = _homeTitle;
			this.DefaultDescription = _defaultDescription;
			this.HomeDescription = _homeDescription;
			this.DefaultKeywords = _defaultKeywords;
			this.HomeKeywords = _homeKeywords;
			this.ShowFaceBookButton = _showFaceBookButton;
			this.UseAdvertiserFilter = _useAdvertiserFilter;
			this.MerchantId = _merchantId;
			this.ShowTwitterButton = _showTwitterButton;
			this.ShowJobAlertButton = _showJobAlertButton;
			this.ShowLinkedInButton = _showLinkedInButton;
			this.SiteFavIconId = _siteFavIconId;
			this.SiteDocType = _siteDocType;
			this.CurrencySymbol = _currencySymbol;
			this.FtpFolderLocation = _ftpFolderLocation;
			this.MetaTags = _metaTags;
			this.SystemMetaTags = _systemMetaTags;
			this.MemberRegistrationNotification = _memberRegistrationNotification;
			this.LinkedInApi = _linkedInApi;
			this.LinkedInLogo = _linkedInLogo;
			this.LinkedInCompanyId = _linkedInCompanyId;
			this.LinkedInEmail = _linkedInEmail;
			this.PrivacySettings = _privacySettings;
			this.WwwRedirect = _wwwRedirect;
			this.AllowAdvertiser = _allowAdvertiser;
			this.LinkedInApiSecret = _linkedInApiSecret;
			this.GoogleClientId = _googleClientId;
			this.GoogleClientSecret = _googleClientSecret;
			this.FacebookAppId = _facebookAppId;
			this.FacebookAppSecret = _facebookAppSecret;
			this.LinkedInButtonSize = _linkedInButtonSize;
			this.DefaultCountryId = _defaultCountryId;
			this.PayPalUsername = _payPalUsername;
			this.PayPalPassword = _payPalPassword;
			this.PayPalSignature = _payPalSignature;
			this.SecurePayMerchantId = _securePayMerchantId;
			this.SecurePayPassword = _securePayPassword;
			this.UsingSsl = _usingSsl;
			this.UseCustomProfessionRole = _useCustomProfessionRole;
			this.GenerateJobXml = _generateJobXml;
			this.IsPrivateSite = _isPrivateSite;
			this.PrivateRedirectUrl = _privateRedirectUrl;
			this.EnableJobCustomQuestionnaire = _enableJobCustomQuestionnaire;
			this.JobApplicationTypeId = _jobApplicationTypeId;
			this.JobScreeningProcess = _jobScreeningProcess;
			this.AdvertiserApprovalProcess = _advertiserApprovalProcess;
			this.SiteType = _siteType;
			this.EnableSsl = _enableSsl;
			this.Gst = _gst;
			this.GstLabel = _gstLabel;
			this.NumberOfPremiumJobs = _numberOfPremiumJobs;
			this.PremiumJobDays = _premiumJobDays;
			this.DisplayPremiumJobsOnResults = _displayPremiumJobsOnResults;
			this.JobExpiryNotification = _jobExpiryNotification;
			this.CurrencyId = _currencyId;
			this.PayPalClientId = _payPalClientId;
			this.PayPalClientSecret = _payPalClientSecret;
			this.PaypalUser = _paypalUser;
			this.PaypalProPassword = _paypalProPassword;
			this.PaypalVendor = _paypalVendor;
			this.PaypalPartner = _paypalPartner;
			this.InvoiceSiteInfo = _invoiceSiteInfo;
			this.InvoiceSiteFooter = _invoiceSiteFooter;
			this.EnableTermsAndConditions = _enableTermsAndConditions;
			this.DefaultEmailLanguageId = _defaultEmailLanguageId;
			this.GoogleTagManager = _googleTagManager;
			this.GoogleAnalytics = _googleAnalytics;
			this.GoogleWebMaster = _googleWebMaster;
			this.EnablePeopleSearch = _enablePeopleSearch;
			this.GlobalDateFormat = _globalDateFormat;
			this.TimeZone = _timeZone;
			this.GlobalFolder = _globalFolder;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="GlobalSettings"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_defaultLanguageId"></param>
		///<param name="_defaultDynamicPageId"></param>
		///<param name="_publicJobsSearch"></param>
		///<param name="_publicMembersSearch"></param>
		///<param name="_publicCompaniesSearch"></param>
		///<param name="_publicSponsoredAdverts"></param>
		///<param name="_privateJobs"></param>
		///<param name="_privateMembers"></param>
		///<param name="_privateCompanies"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_lastModified"></param>
		///<param name="_pageTitlePrefix"></param>
		///<param name="_pageTitleSuffix"></param>
		///<param name="_defaultTitle"></param>
		///<param name="_homeTitle"></param>
		///<param name="_defaultDescription"></param>
		///<param name="_homeDescription"></param>
		///<param name="_defaultKeywords"></param>
		///<param name="_homeKeywords"></param>
		///<param name="_showFaceBookButton"></param>
		///<param name="_useAdvertiserFilter"></param>
		///<param name="_merchantId"></param>
		///<param name="_showTwitterButton"></param>
		///<param name="_showJobAlertButton"></param>
		///<param name="_showLinkedInButton"></param>
		///<param name="_siteFavIconId"></param>
		///<param name="_siteDocType"></param>
		///<param name="_currencySymbol"></param>
		///<param name="_ftpFolderLocation"></param>
		///<param name="_metaTags"></param>
		///<param name="_systemMetaTags"></param>
		///<param name="_memberRegistrationNotification"></param>
		///<param name="_linkedInApi"></param>
		///<param name="_linkedInLogo"></param>
		///<param name="_linkedInCompanyId"></param>
		///<param name="_linkedInEmail"></param>
		///<param name="_privacySettings"></param>
		///<param name="_wwwRedirect"></param>
		///<param name="_allowAdvertiser"></param>
		///<param name="_linkedInApiSecret"></param>
		///<param name="_googleClientId"></param>
		///<param name="_googleClientSecret"></param>
		///<param name="_facebookAppId"></param>
		///<param name="_facebookAppSecret"></param>
		///<param name="_linkedInButtonSize"></param>
		///<param name="_defaultCountryId"></param>
		///<param name="_payPalUsername"></param>
		///<param name="_payPalPassword"></param>
		///<param name="_payPalSignature"></param>
		///<param name="_securePayMerchantId"></param>
		///<param name="_securePayPassword"></param>
		///<param name="_usingSsl"></param>
		///<param name="_useCustomProfessionRole"></param>
		///<param name="_generateJobXml"></param>
		///<param name="_isPrivateSite"></param>
		///<param name="_privateRedirectUrl"></param>
		///<param name="_enableJobCustomQuestionnaire"></param>
		///<param name="_jobApplicationTypeId"></param>
		///<param name="_jobScreeningProcess"></param>
		///<param name="_advertiserApprovalProcess"></param>
		///<param name="_siteType"></param>
		///<param name="_enableSsl"></param>
		///<param name="_gst"></param>
		///<param name="_gstLabel"></param>
		///<param name="_numberOfPremiumJobs"></param>
		///<param name="_premiumJobDays"></param>
		///<param name="_displayPremiumJobsOnResults"></param>
		///<param name="_jobExpiryNotification"></param>
		///<param name="_currencyId"></param>
		///<param name="_payPalClientId"></param>
		///<param name="_payPalClientSecret"></param>
		///<param name="_paypalUser"></param>
		///<param name="_paypalProPassword"></param>
		///<param name="_paypalVendor"></param>
		///<param name="_paypalPartner"></param>
		///<param name="_invoiceSiteInfo"></param>
		///<param name="_invoiceSiteFooter"></param>
		///<param name="_enableTermsAndConditions"></param>
		///<param name="_defaultEmailLanguageId"></param>
		///<param name="_googleTagManager"></param>
		///<param name="_googleAnalytics"></param>
		///<param name="_googleWebMaster"></param>
		///<param name="_enablePeopleSearch"></param>
		///<param name="_globalDateFormat"></param>
		///<param name="_timeZone"></param>
		///<param name="_globalFolder"></param>
		public static GlobalSettings CreateGlobalSettings(System.Int32 _siteId, System.Int32 _defaultLanguageId, 
			System.Int32? _defaultDynamicPageId, System.Boolean _publicJobsSearch, System.Boolean _publicMembersSearch, 
			System.Boolean _publicCompaniesSearch, System.Boolean _publicSponsoredAdverts, System.Boolean _privateJobs, 
			System.Boolean _privateMembers, System.Boolean _privateCompanies, System.Int32 _lastModifiedBy, 
			System.DateTime _lastModified, System.String _pageTitlePrefix, System.String _pageTitleSuffix, 
			System.String _defaultTitle, System.String _homeTitle, System.String _defaultDescription, 
			System.String _homeDescription, System.String _defaultKeywords, System.String _homeKeywords, 
			System.Boolean _showFaceBookButton, System.Int32 _useAdvertiserFilter, System.Int32? _merchantId, 
			System.Boolean _showTwitterButton, System.Boolean _showJobAlertButton, System.Boolean _showLinkedInButton, 
			System.Int32? _siteFavIconId, System.String _siteDocType, System.String _currencySymbol, 
			System.String _ftpFolderLocation, System.String _metaTags, System.String _systemMetaTags, 
			System.String _memberRegistrationNotification, System.String _linkedInApi, System.String _linkedInLogo, 
			System.Int32? _linkedInCompanyId, System.String _linkedInEmail, System.String _privacySettings, 
			System.Boolean _wwwRedirect, System.Boolean _allowAdvertiser, System.String _linkedInApiSecret, 
			System.String _googleClientId, System.String _googleClientSecret, System.String _facebookAppId, 
			System.String _facebookAppSecret, System.Int32? _linkedInButtonSize, System.Int32? _defaultCountryId, 
			System.String _payPalUsername, System.String _payPalPassword, System.String _payPalSignature, 
			System.String _securePayMerchantId, System.String _securePayPassword, System.Boolean _usingSsl, 
			System.Boolean _useCustomProfessionRole, System.Boolean _generateJobXml, System.Boolean? _isPrivateSite, 
			System.String _privateRedirectUrl, System.Boolean? _enableJobCustomQuestionnaire, System.Int32? _jobApplicationTypeId, 
			System.Boolean? _jobScreeningProcess, System.Int32? _advertiserApprovalProcess, System.Int32 _siteType, 
			System.Boolean _enableSsl, System.Decimal _gst, System.String _gstLabel, System.Int32 _numberOfPremiumJobs, 
			System.Int32 _premiumJobDays, System.Boolean _displayPremiumJobsOnResults, System.Boolean _jobExpiryNotification, 
			System.Int32 _currencyId, System.String _payPalClientId, System.String _payPalClientSecret, 
			System.String _paypalUser, System.String _paypalProPassword, System.String _paypalVendor, 
			System.String _paypalPartner, System.String _invoiceSiteInfo, System.String _invoiceSiteFooter, 
			System.Boolean _enableTermsAndConditions, System.Int32? _defaultEmailLanguageId, System.String _googleTagManager, 
			System.String _googleAnalytics, System.String _googleWebMaster, System.Boolean _enablePeopleSearch, 
			System.String _globalDateFormat, System.String _timeZone, System.String _globalFolder)
		{
			GlobalSettings newGlobalSettings = new GlobalSettings();
			newGlobalSettings.SiteId = _siteId;
			newGlobalSettings.DefaultLanguageId = _defaultLanguageId;
			newGlobalSettings.DefaultDynamicPageId = _defaultDynamicPageId;
			newGlobalSettings.PublicJobsSearch = _publicJobsSearch;
			newGlobalSettings.PublicMembersSearch = _publicMembersSearch;
			newGlobalSettings.PublicCompaniesSearch = _publicCompaniesSearch;
			newGlobalSettings.PublicSponsoredAdverts = _publicSponsoredAdverts;
			newGlobalSettings.PrivateJobs = _privateJobs;
			newGlobalSettings.PrivateMembers = _privateMembers;
			newGlobalSettings.PrivateCompanies = _privateCompanies;
			newGlobalSettings.LastModifiedBy = _lastModifiedBy;
			newGlobalSettings.LastModified = _lastModified;
			newGlobalSettings.PageTitlePrefix = _pageTitlePrefix;
			newGlobalSettings.PageTitleSuffix = _pageTitleSuffix;
			newGlobalSettings.DefaultTitle = _defaultTitle;
			newGlobalSettings.HomeTitle = _homeTitle;
			newGlobalSettings.DefaultDescription = _defaultDescription;
			newGlobalSettings.HomeDescription = _homeDescription;
			newGlobalSettings.DefaultKeywords = _defaultKeywords;
			newGlobalSettings.HomeKeywords = _homeKeywords;
			newGlobalSettings.ShowFaceBookButton = _showFaceBookButton;
			newGlobalSettings.UseAdvertiserFilter = _useAdvertiserFilter;
			newGlobalSettings.MerchantId = _merchantId;
			newGlobalSettings.ShowTwitterButton = _showTwitterButton;
			newGlobalSettings.ShowJobAlertButton = _showJobAlertButton;
			newGlobalSettings.ShowLinkedInButton = _showLinkedInButton;
			newGlobalSettings.SiteFavIconId = _siteFavIconId;
			newGlobalSettings.SiteDocType = _siteDocType;
			newGlobalSettings.CurrencySymbol = _currencySymbol;
			newGlobalSettings.FtpFolderLocation = _ftpFolderLocation;
			newGlobalSettings.MetaTags = _metaTags;
			newGlobalSettings.SystemMetaTags = _systemMetaTags;
			newGlobalSettings.MemberRegistrationNotification = _memberRegistrationNotification;
			newGlobalSettings.LinkedInApi = _linkedInApi;
			newGlobalSettings.LinkedInLogo = _linkedInLogo;
			newGlobalSettings.LinkedInCompanyId = _linkedInCompanyId;
			newGlobalSettings.LinkedInEmail = _linkedInEmail;
			newGlobalSettings.PrivacySettings = _privacySettings;
			newGlobalSettings.WwwRedirect = _wwwRedirect;
			newGlobalSettings.AllowAdvertiser = _allowAdvertiser;
			newGlobalSettings.LinkedInApiSecret = _linkedInApiSecret;
			newGlobalSettings.GoogleClientId = _googleClientId;
			newGlobalSettings.GoogleClientSecret = _googleClientSecret;
			newGlobalSettings.FacebookAppId = _facebookAppId;
			newGlobalSettings.FacebookAppSecret = _facebookAppSecret;
			newGlobalSettings.LinkedInButtonSize = _linkedInButtonSize;
			newGlobalSettings.DefaultCountryId = _defaultCountryId;
			newGlobalSettings.PayPalUsername = _payPalUsername;
			newGlobalSettings.PayPalPassword = _payPalPassword;
			newGlobalSettings.PayPalSignature = _payPalSignature;
			newGlobalSettings.SecurePayMerchantId = _securePayMerchantId;
			newGlobalSettings.SecurePayPassword = _securePayPassword;
			newGlobalSettings.UsingSsl = _usingSsl;
			newGlobalSettings.UseCustomProfessionRole = _useCustomProfessionRole;
			newGlobalSettings.GenerateJobXml = _generateJobXml;
			newGlobalSettings.IsPrivateSite = _isPrivateSite;
			newGlobalSettings.PrivateRedirectUrl = _privateRedirectUrl;
			newGlobalSettings.EnableJobCustomQuestionnaire = _enableJobCustomQuestionnaire;
			newGlobalSettings.JobApplicationTypeId = _jobApplicationTypeId;
			newGlobalSettings.JobScreeningProcess = _jobScreeningProcess;
			newGlobalSettings.AdvertiserApprovalProcess = _advertiserApprovalProcess;
			newGlobalSettings.SiteType = _siteType;
			newGlobalSettings.EnableSsl = _enableSsl;
			newGlobalSettings.Gst = _gst;
			newGlobalSettings.GstLabel = _gstLabel;
			newGlobalSettings.NumberOfPremiumJobs = _numberOfPremiumJobs;
			newGlobalSettings.PremiumJobDays = _premiumJobDays;
			newGlobalSettings.DisplayPremiumJobsOnResults = _displayPremiumJobsOnResults;
			newGlobalSettings.JobExpiryNotification = _jobExpiryNotification;
			newGlobalSettings.CurrencyId = _currencyId;
			newGlobalSettings.PayPalClientId = _payPalClientId;
			newGlobalSettings.PayPalClientSecret = _payPalClientSecret;
			newGlobalSettings.PaypalUser = _paypalUser;
			newGlobalSettings.PaypalProPassword = _paypalProPassword;
			newGlobalSettings.PaypalVendor = _paypalVendor;
			newGlobalSettings.PaypalPartner = _paypalPartner;
			newGlobalSettings.InvoiceSiteInfo = _invoiceSiteInfo;
			newGlobalSettings.InvoiceSiteFooter = _invoiceSiteFooter;
			newGlobalSettings.EnableTermsAndConditions = _enableTermsAndConditions;
			newGlobalSettings.DefaultEmailLanguageId = _defaultEmailLanguageId;
			newGlobalSettings.GoogleTagManager = _googleTagManager;
			newGlobalSettings.GoogleAnalytics = _googleAnalytics;
			newGlobalSettings.GoogleWebMaster = _googleWebMaster;
			newGlobalSettings.EnablePeopleSearch = _enablePeopleSearch;
			newGlobalSettings.GlobalDateFormat = _globalDateFormat;
			newGlobalSettings.TimeZone = _timeZone;
			newGlobalSettings.GlobalFolder = _globalFolder;
			return newGlobalSettings;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the GlobalSettingId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 GlobalSettingId
		{
			get
			{
				return this.entityData.GlobalSettingId; 
			}
			
			set
			{
				if (this.entityData.GlobalSettingId == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.GlobalSettingId, this.entityData.GlobalSettingId);
				this.entityData.GlobalSettingId = value;
				this.EntityId.GlobalSettingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.GlobalSettingId, this.entityData.GlobalSettingId);
				OnPropertyChanged("GlobalSettingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SiteId
		{
			get
			{
				return this.entityData.SiteId; 
			}
			
			set
			{
				if (this.entityData.SiteId == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.SiteId, this.entityData.SiteId);
				this.entityData.SiteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.SiteId, this.entityData.SiteId);
				OnPropertyChanged("SiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DefaultLanguageId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 DefaultLanguageId
		{
			get
			{
				return this.entityData.DefaultLanguageId; 
			}
			
			set
			{
				if (this.entityData.DefaultLanguageId == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.DefaultLanguageId, this.entityData.DefaultLanguageId);
				this.entityData.DefaultLanguageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.DefaultLanguageId, this.entityData.DefaultLanguageId);
				OnPropertyChanged("DefaultLanguageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DefaultDynamicPageId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDefaultDynamicPageIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DefaultDynamicPageId
		{
			get
			{
				return this.entityData.DefaultDynamicPageId; 
			}
			
			set
			{
				if (this.entityData.DefaultDynamicPageId == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.DefaultDynamicPageId, this.entityData.DefaultDynamicPageId);
				this.entityData.DefaultDynamicPageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.DefaultDynamicPageId, this.entityData.DefaultDynamicPageId);
				OnPropertyChanged("DefaultDynamicPageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PublicJobsSearch property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean PublicJobsSearch
		{
			get
			{
				return this.entityData.PublicJobsSearch; 
			}
			
			set
			{
				if (this.entityData.PublicJobsSearch == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PublicJobsSearch, this.entityData.PublicJobsSearch);
				this.entityData.PublicJobsSearch = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PublicJobsSearch, this.entityData.PublicJobsSearch);
				OnPropertyChanged("PublicJobsSearch");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PublicMembersSearch property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean PublicMembersSearch
		{
			get
			{
				return this.entityData.PublicMembersSearch; 
			}
			
			set
			{
				if (this.entityData.PublicMembersSearch == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PublicMembersSearch, this.entityData.PublicMembersSearch);
				this.entityData.PublicMembersSearch = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PublicMembersSearch, this.entityData.PublicMembersSearch);
				OnPropertyChanged("PublicMembersSearch");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PublicCompaniesSearch property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean PublicCompaniesSearch
		{
			get
			{
				return this.entityData.PublicCompaniesSearch; 
			}
			
			set
			{
				if (this.entityData.PublicCompaniesSearch == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PublicCompaniesSearch, this.entityData.PublicCompaniesSearch);
				this.entityData.PublicCompaniesSearch = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PublicCompaniesSearch, this.entityData.PublicCompaniesSearch);
				OnPropertyChanged("PublicCompaniesSearch");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PublicSponsoredAdverts property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean PublicSponsoredAdverts
		{
			get
			{
				return this.entityData.PublicSponsoredAdverts; 
			}
			
			set
			{
				if (this.entityData.PublicSponsoredAdverts == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PublicSponsoredAdverts, this.entityData.PublicSponsoredAdverts);
				this.entityData.PublicSponsoredAdverts = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PublicSponsoredAdverts, this.entityData.PublicSponsoredAdverts);
				OnPropertyChanged("PublicSponsoredAdverts");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrivateJobs property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean PrivateJobs
		{
			get
			{
				return this.entityData.PrivateJobs; 
			}
			
			set
			{
				if (this.entityData.PrivateJobs == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PrivateJobs, this.entityData.PrivateJobs);
				this.entityData.PrivateJobs = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PrivateJobs, this.entityData.PrivateJobs);
				OnPropertyChanged("PrivateJobs");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrivateMembers property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean PrivateMembers
		{
			get
			{
				return this.entityData.PrivateMembers; 
			}
			
			set
			{
				if (this.entityData.PrivateMembers == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PrivateMembers, this.entityData.PrivateMembers);
				this.entityData.PrivateMembers = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PrivateMembers, this.entityData.PrivateMembers);
				OnPropertyChanged("PrivateMembers");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrivateCompanies property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean PrivateCompanies
		{
			get
			{
				return this.entityData.PrivateCompanies; 
			}
			
			set
			{
				if (this.entityData.PrivateCompanies == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PrivateCompanies, this.entityData.PrivateCompanies);
				this.entityData.PrivateCompanies = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PrivateCompanies, this.entityData.PrivateCompanies);
				OnPropertyChanged("PrivateCompanies");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LastModifiedBy
		{
			get
			{
				return this.entityData.LastModifiedBy; 
			}
			
			set
			{
				if (this.entityData.LastModifiedBy == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				this.entityData.LastModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				OnPropertyChanged("LastModifiedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModified property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastModified
		{
			get
			{
				return this.entityData.LastModified; 
			}
			
			set
			{
				if (this.entityData.LastModified == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.LastModified, this.entityData.LastModified);
				this.entityData.LastModified = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.LastModified, this.entityData.LastModified);
				OnPropertyChanged("LastModified");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PageTitlePrefix property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String PageTitlePrefix
		{
			get
			{
				return this.entityData.PageTitlePrefix; 
			}
			
			set
			{
				if (this.entityData.PageTitlePrefix == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PageTitlePrefix, this.entityData.PageTitlePrefix);
				this.entityData.PageTitlePrefix = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PageTitlePrefix, this.entityData.PageTitlePrefix);
				OnPropertyChanged("PageTitlePrefix");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PageTitleSuffix property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String PageTitleSuffix
		{
			get
			{
				return this.entityData.PageTitleSuffix; 
			}
			
			set
			{
				if (this.entityData.PageTitleSuffix == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PageTitleSuffix, this.entityData.PageTitleSuffix);
				this.entityData.PageTitleSuffix = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PageTitleSuffix, this.entityData.PageTitleSuffix);
				OnPropertyChanged("PageTitleSuffix");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DefaultTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String DefaultTitle
		{
			get
			{
				return this.entityData.DefaultTitle; 
			}
			
			set
			{
				if (this.entityData.DefaultTitle == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.DefaultTitle, this.entityData.DefaultTitle);
				this.entityData.DefaultTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.DefaultTitle, this.entityData.DefaultTitle);
				OnPropertyChanged("DefaultTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HomeTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String HomeTitle
		{
			get
			{
				return this.entityData.HomeTitle; 
			}
			
			set
			{
				if (this.entityData.HomeTitle == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.HomeTitle, this.entityData.HomeTitle);
				this.entityData.HomeTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.HomeTitle, this.entityData.HomeTitle);
				OnPropertyChanged("HomeTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DefaultDescription property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String DefaultDescription
		{
			get
			{
				return this.entityData.DefaultDescription; 
			}
			
			set
			{
				if (this.entityData.DefaultDescription == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.DefaultDescription, this.entityData.DefaultDescription);
				this.entityData.DefaultDescription = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.DefaultDescription, this.entityData.DefaultDescription);
				OnPropertyChanged("DefaultDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HomeDescription property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String HomeDescription
		{
			get
			{
				return this.entityData.HomeDescription; 
			}
			
			set
			{
				if (this.entityData.HomeDescription == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.HomeDescription, this.entityData.HomeDescription);
				this.entityData.HomeDescription = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.HomeDescription, this.entityData.HomeDescription);
				OnPropertyChanged("HomeDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DefaultKeywords property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String DefaultKeywords
		{
			get
			{
				return this.entityData.DefaultKeywords; 
			}
			
			set
			{
				if (this.entityData.DefaultKeywords == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.DefaultKeywords, this.entityData.DefaultKeywords);
				this.entityData.DefaultKeywords = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.DefaultKeywords, this.entityData.DefaultKeywords);
				OnPropertyChanged("DefaultKeywords");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HomeKeywords property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String HomeKeywords
		{
			get
			{
				return this.entityData.HomeKeywords; 
			}
			
			set
			{
				if (this.entityData.HomeKeywords == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.HomeKeywords, this.entityData.HomeKeywords);
				this.entityData.HomeKeywords = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.HomeKeywords, this.entityData.HomeKeywords);
				OnPropertyChanged("HomeKeywords");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShowFaceBookButton property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean ShowFaceBookButton
		{
			get
			{
				return this.entityData.ShowFaceBookButton; 
			}
			
			set
			{
				if (this.entityData.ShowFaceBookButton == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.ShowFaceBookButton, this.entityData.ShowFaceBookButton);
				this.entityData.ShowFaceBookButton = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.ShowFaceBookButton, this.entityData.ShowFaceBookButton);
				OnPropertyChanged("ShowFaceBookButton");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UseAdvertiserFilter property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 UseAdvertiserFilter
		{
			get
			{
				return this.entityData.UseAdvertiserFilter; 
			}
			
			set
			{
				if (this.entityData.UseAdvertiserFilter == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.UseAdvertiserFilter, this.entityData.UseAdvertiserFilter);
				this.entityData.UseAdvertiserFilter = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.UseAdvertiserFilter, this.entityData.UseAdvertiserFilter);
				OnPropertyChanged("UseAdvertiserFilter");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MerchantId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMerchantIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MerchantId
		{
			get
			{
				return this.entityData.MerchantId; 
			}
			
			set
			{
				if (this.entityData.MerchantId == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.MerchantId, this.entityData.MerchantId);
				this.entityData.MerchantId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.MerchantId, this.entityData.MerchantId);
				OnPropertyChanged("MerchantId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShowTwitterButton property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean ShowTwitterButton
		{
			get
			{
				return this.entityData.ShowTwitterButton; 
			}
			
			set
			{
				if (this.entityData.ShowTwitterButton == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.ShowTwitterButton, this.entityData.ShowTwitterButton);
				this.entityData.ShowTwitterButton = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.ShowTwitterButton, this.entityData.ShowTwitterButton);
				OnPropertyChanged("ShowTwitterButton");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShowJobAlertButton property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean ShowJobAlertButton
		{
			get
			{
				return this.entityData.ShowJobAlertButton; 
			}
			
			set
			{
				if (this.entityData.ShowJobAlertButton == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.ShowJobAlertButton, this.entityData.ShowJobAlertButton);
				this.entityData.ShowJobAlertButton = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.ShowJobAlertButton, this.entityData.ShowJobAlertButton);
				OnPropertyChanged("ShowJobAlertButton");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShowLinkedInButton property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean ShowLinkedInButton
		{
			get
			{
				return this.entityData.ShowLinkedInButton; 
			}
			
			set
			{
				if (this.entityData.ShowLinkedInButton == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.ShowLinkedInButton, this.entityData.ShowLinkedInButton);
				this.entityData.ShowLinkedInButton = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.ShowLinkedInButton, this.entityData.ShowLinkedInButton);
				OnPropertyChanged("ShowLinkedInButton");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteFavIconId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSiteFavIconIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SiteFavIconId
		{
			get
			{
				return this.entityData.SiteFavIconId; 
			}
			
			set
			{
				if (this.entityData.SiteFavIconId == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.SiteFavIconId, this.entityData.SiteFavIconId);
				this.entityData.SiteFavIconId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.SiteFavIconId, this.entityData.SiteFavIconId);
				OnPropertyChanged("SiteFavIconId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteDocType property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 512)]
		public virtual System.String SiteDocType
		{
			get
			{
				return this.entityData.SiteDocType; 
			}
			
			set
			{
				if (this.entityData.SiteDocType == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.SiteDocType, this.entityData.SiteDocType);
				this.entityData.SiteDocType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.SiteDocType, this.entityData.SiteDocType);
				OnPropertyChanged("SiteDocType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrencySymbol property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String CurrencySymbol
		{
			get
			{
				return this.entityData.CurrencySymbol; 
			}
			
			set
			{
				if (this.entityData.CurrencySymbol == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.CurrencySymbol, this.entityData.CurrencySymbol);
				this.entityData.CurrencySymbol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.CurrencySymbol, this.entityData.CurrencySymbol);
				OnPropertyChanged("CurrencySymbol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FtpFolderLocation property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String FtpFolderLocation
		{
			get
			{
				return this.entityData.FtpFolderLocation; 
			}
			
			set
			{
				if (this.entityData.FtpFolderLocation == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.FtpFolderLocation, this.entityData.FtpFolderLocation);
				this.entityData.FtpFolderLocation = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.FtpFolderLocation, this.entityData.FtpFolderLocation);
				OnPropertyChanged("FtpFolderLocation");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MetaTags property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String MetaTags
		{
			get
			{
				return this.entityData.MetaTags; 
			}
			
			set
			{
				if (this.entityData.MetaTags == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.MetaTags, this.entityData.MetaTags);
				this.entityData.MetaTags = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.MetaTags, this.entityData.MetaTags);
				OnPropertyChanged("MetaTags");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SystemMetaTags property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 4000)]
		public virtual System.String SystemMetaTags
		{
			get
			{
				return this.entityData.SystemMetaTags; 
			}
			
			set
			{
				if (this.entityData.SystemMetaTags == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.SystemMetaTags, this.entityData.SystemMetaTags);
				this.entityData.SystemMetaTags = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.SystemMetaTags, this.entityData.SystemMetaTags);
				OnPropertyChanged("SystemMetaTags");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberRegistrationNotification property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String MemberRegistrationNotification
		{
			get
			{
				return this.entityData.MemberRegistrationNotification; 
			}
			
			set
			{
				if (this.entityData.MemberRegistrationNotification == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.MemberRegistrationNotification, this.entityData.MemberRegistrationNotification);
				this.entityData.MemberRegistrationNotification = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.MemberRegistrationNotification, this.entityData.MemberRegistrationNotification);
				OnPropertyChanged("MemberRegistrationNotification");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LinkedInApi property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String LinkedInApi
		{
			get
			{
				return this.entityData.LinkedInApi; 
			}
			
			set
			{
				if (this.entityData.LinkedInApi == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.LinkedInApi, this.entityData.LinkedInApi);
				this.entityData.LinkedInApi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.LinkedInApi, this.entityData.LinkedInApi);
				OnPropertyChanged("LinkedInApi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LinkedInLogo property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String LinkedInLogo
		{
			get
			{
				return this.entityData.LinkedInLogo; 
			}
			
			set
			{
				if (this.entityData.LinkedInLogo == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.LinkedInLogo, this.entityData.LinkedInLogo);
				this.entityData.LinkedInLogo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.LinkedInLogo, this.entityData.LinkedInLogo);
				OnPropertyChanged("LinkedInLogo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LinkedInCompanyId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLinkedInCompanyIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LinkedInCompanyId
		{
			get
			{
				return this.entityData.LinkedInCompanyId; 
			}
			
			set
			{
				if (this.entityData.LinkedInCompanyId == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.LinkedInCompanyId, this.entityData.LinkedInCompanyId);
				this.entityData.LinkedInCompanyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.LinkedInCompanyId, this.entityData.LinkedInCompanyId);
				OnPropertyChanged("LinkedInCompanyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LinkedInEmail property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String LinkedInEmail
		{
			get
			{
				return this.entityData.LinkedInEmail; 
			}
			
			set
			{
				if (this.entityData.LinkedInEmail == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.LinkedInEmail, this.entityData.LinkedInEmail);
				this.entityData.LinkedInEmail = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.LinkedInEmail, this.entityData.LinkedInEmail);
				OnPropertyChanged("LinkedInEmail");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrivacySettings property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 4000)]
		public virtual System.String PrivacySettings
		{
			get
			{
				return this.entityData.PrivacySettings; 
			}
			
			set
			{
				if (this.entityData.PrivacySettings == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PrivacySettings, this.entityData.PrivacySettings);
				this.entityData.PrivacySettings = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PrivacySettings, this.entityData.PrivacySettings);
				OnPropertyChanged("PrivacySettings");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WwwRedirect property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean WwwRedirect
		{
			get
			{
				return this.entityData.WwwRedirect; 
			}
			
			set
			{
				if (this.entityData.WwwRedirect == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.WwwRedirect, this.entityData.WwwRedirect);
				this.entityData.WwwRedirect = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.WwwRedirect, this.entityData.WwwRedirect);
				OnPropertyChanged("WwwRedirect");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AllowAdvertiser property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean AllowAdvertiser
		{
			get
			{
				return this.entityData.AllowAdvertiser; 
			}
			
			set
			{
				if (this.entityData.AllowAdvertiser == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.AllowAdvertiser, this.entityData.AllowAdvertiser);
				this.entityData.AllowAdvertiser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.AllowAdvertiser, this.entityData.AllowAdvertiser);
				OnPropertyChanged("AllowAdvertiser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LinkedInApiSecret property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String LinkedInApiSecret
		{
			get
			{
				return this.entityData.LinkedInApiSecret; 
			}
			
			set
			{
				if (this.entityData.LinkedInApiSecret == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.LinkedInApiSecret, this.entityData.LinkedInApiSecret);
				this.entityData.LinkedInApiSecret = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.LinkedInApiSecret, this.entityData.LinkedInApiSecret);
				OnPropertyChanged("LinkedInApiSecret");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GoogleClientId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String GoogleClientId
		{
			get
			{
				return this.entityData.GoogleClientId; 
			}
			
			set
			{
				if (this.entityData.GoogleClientId == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.GoogleClientId, this.entityData.GoogleClientId);
				this.entityData.GoogleClientId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.GoogleClientId, this.entityData.GoogleClientId);
				OnPropertyChanged("GoogleClientId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GoogleClientSecret property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String GoogleClientSecret
		{
			get
			{
				return this.entityData.GoogleClientSecret; 
			}
			
			set
			{
				if (this.entityData.GoogleClientSecret == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.GoogleClientSecret, this.entityData.GoogleClientSecret);
				this.entityData.GoogleClientSecret = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.GoogleClientSecret, this.entityData.GoogleClientSecret);
				OnPropertyChanged("GoogleClientSecret");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FacebookAppId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String FacebookAppId
		{
			get
			{
				return this.entityData.FacebookAppId; 
			}
			
			set
			{
				if (this.entityData.FacebookAppId == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.FacebookAppId, this.entityData.FacebookAppId);
				this.entityData.FacebookAppId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.FacebookAppId, this.entityData.FacebookAppId);
				OnPropertyChanged("FacebookAppId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FacebookAppSecret property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String FacebookAppSecret
		{
			get
			{
				return this.entityData.FacebookAppSecret; 
			}
			
			set
			{
				if (this.entityData.FacebookAppSecret == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.FacebookAppSecret, this.entityData.FacebookAppSecret);
				this.entityData.FacebookAppSecret = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.FacebookAppSecret, this.entityData.FacebookAppSecret);
				OnPropertyChanged("FacebookAppSecret");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LinkedInButtonSize property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLinkedInButtonSizeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LinkedInButtonSize
		{
			get
			{
				return this.entityData.LinkedInButtonSize; 
			}
			
			set
			{
				if (this.entityData.LinkedInButtonSize == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.LinkedInButtonSize, this.entityData.LinkedInButtonSize);
				this.entityData.LinkedInButtonSize = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.LinkedInButtonSize, this.entityData.LinkedInButtonSize);
				OnPropertyChanged("LinkedInButtonSize");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DefaultCountryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDefaultCountryIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DefaultCountryId
		{
			get
			{
				return this.entityData.DefaultCountryId; 
			}
			
			set
			{
				if (this.entityData.DefaultCountryId == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.DefaultCountryId, this.entityData.DefaultCountryId);
				this.entityData.DefaultCountryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.DefaultCountryId, this.entityData.DefaultCountryId);
				OnPropertyChanged("DefaultCountryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PayPalUsername property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String PayPalUsername
		{
			get
			{
				return this.entityData.PayPalUsername; 
			}
			
			set
			{
				if (this.entityData.PayPalUsername == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PayPalUsername, this.entityData.PayPalUsername);
				this.entityData.PayPalUsername = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PayPalUsername, this.entityData.PayPalUsername);
				OnPropertyChanged("PayPalUsername");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PayPalPassword property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String PayPalPassword
		{
			get
			{
				return this.entityData.PayPalPassword; 
			}
			
			set
			{
				if (this.entityData.PayPalPassword == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PayPalPassword, this.entityData.PayPalPassword);
				this.entityData.PayPalPassword = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PayPalPassword, this.entityData.PayPalPassword);
				OnPropertyChanged("PayPalPassword");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PayPalSignature property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String PayPalSignature
		{
			get
			{
				return this.entityData.PayPalSignature; 
			}
			
			set
			{
				if (this.entityData.PayPalSignature == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PayPalSignature, this.entityData.PayPalSignature);
				this.entityData.PayPalSignature = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PayPalSignature, this.entityData.PayPalSignature);
				OnPropertyChanged("PayPalSignature");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecurePayMerchantId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String SecurePayMerchantId
		{
			get
			{
				return this.entityData.SecurePayMerchantId; 
			}
			
			set
			{
				if (this.entityData.SecurePayMerchantId == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.SecurePayMerchantId, this.entityData.SecurePayMerchantId);
				this.entityData.SecurePayMerchantId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.SecurePayMerchantId, this.entityData.SecurePayMerchantId);
				OnPropertyChanged("SecurePayMerchantId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecurePayPassword property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String SecurePayPassword
		{
			get
			{
				return this.entityData.SecurePayPassword; 
			}
			
			set
			{
				if (this.entityData.SecurePayPassword == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.SecurePayPassword, this.entityData.SecurePayPassword);
				this.entityData.SecurePayPassword = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.SecurePayPassword, this.entityData.SecurePayPassword);
				OnPropertyChanged("SecurePayPassword");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UsingSsl property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean UsingSsl
		{
			get
			{
				return this.entityData.UsingSsl; 
			}
			
			set
			{
				if (this.entityData.UsingSsl == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.UsingSsl, this.entityData.UsingSsl);
				this.entityData.UsingSsl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.UsingSsl, this.entityData.UsingSsl);
				OnPropertyChanged("UsingSsl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UseCustomProfessionRole property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean UseCustomProfessionRole
		{
			get
			{
				return this.entityData.UseCustomProfessionRole; 
			}
			
			set
			{
				if (this.entityData.UseCustomProfessionRole == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.UseCustomProfessionRole, this.entityData.UseCustomProfessionRole);
				this.entityData.UseCustomProfessionRole = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.UseCustomProfessionRole, this.entityData.UseCustomProfessionRole);
				OnPropertyChanged("UseCustomProfessionRole");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GenerateJobXml property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean GenerateJobXml
		{
			get
			{
				return this.entityData.GenerateJobXml; 
			}
			
			set
			{
				if (this.entityData.GenerateJobXml == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.GenerateJobXml, this.entityData.GenerateJobXml);
				this.entityData.GenerateJobXml = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.GenerateJobXml, this.entityData.GenerateJobXml);
				OnPropertyChanged("GenerateJobXml");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsPrivateSite property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsPrivateSiteNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsPrivateSite
		{
			get
			{
				return this.entityData.IsPrivateSite; 
			}
			
			set
			{
				if (this.entityData.IsPrivateSite == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.IsPrivateSite, this.entityData.IsPrivateSite);
				this.entityData.IsPrivateSite = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.IsPrivateSite, this.entityData.IsPrivateSite);
				OnPropertyChanged("IsPrivateSite");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrivateRedirectUrl property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String PrivateRedirectUrl
		{
			get
			{
				return this.entityData.PrivateRedirectUrl; 
			}
			
			set
			{
				if (this.entityData.PrivateRedirectUrl == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PrivateRedirectUrl, this.entityData.PrivateRedirectUrl);
				this.entityData.PrivateRedirectUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PrivateRedirectUrl, this.entityData.PrivateRedirectUrl);
				OnPropertyChanged("PrivateRedirectUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EnableJobCustomQuestionnaire property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEnableJobCustomQuestionnaireNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? EnableJobCustomQuestionnaire
		{
			get
			{
				return this.entityData.EnableJobCustomQuestionnaire; 
			}
			
			set
			{
				if (this.entityData.EnableJobCustomQuestionnaire == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.EnableJobCustomQuestionnaire, this.entityData.EnableJobCustomQuestionnaire);
				this.entityData.EnableJobCustomQuestionnaire = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.EnableJobCustomQuestionnaire, this.entityData.EnableJobCustomQuestionnaire);
				OnPropertyChanged("EnableJobCustomQuestionnaire");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JobApplicationTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsJobApplicationTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? JobApplicationTypeId
		{
			get
			{
				return this.entityData.JobApplicationTypeId; 
			}
			
			set
			{
				if (this.entityData.JobApplicationTypeId == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.JobApplicationTypeId, this.entityData.JobApplicationTypeId);
				this.entityData.JobApplicationTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.JobApplicationTypeId, this.entityData.JobApplicationTypeId);
				OnPropertyChanged("JobApplicationTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JobScreeningProcess property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsJobScreeningProcessNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? JobScreeningProcess
		{
			get
			{
				return this.entityData.JobScreeningProcess; 
			}
			
			set
			{
				if (this.entityData.JobScreeningProcess == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.JobScreeningProcess, this.entityData.JobScreeningProcess);
				this.entityData.JobScreeningProcess = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.JobScreeningProcess, this.entityData.JobScreeningProcess);
				OnPropertyChanged("JobScreeningProcess");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdvertiserApprovalProcess property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAdvertiserApprovalProcessNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AdvertiserApprovalProcess
		{
			get
			{
				return this.entityData.AdvertiserApprovalProcess; 
			}
			
			set
			{
				if (this.entityData.AdvertiserApprovalProcess == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.AdvertiserApprovalProcess, this.entityData.AdvertiserApprovalProcess);
				this.entityData.AdvertiserApprovalProcess = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.AdvertiserApprovalProcess, this.entityData.AdvertiserApprovalProcess);
				OnPropertyChanged("AdvertiserApprovalProcess");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteType property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SiteType
		{
			get
			{
				return this.entityData.SiteType; 
			}
			
			set
			{
				if (this.entityData.SiteType == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.SiteType, this.entityData.SiteType);
				this.entityData.SiteType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.SiteType, this.entityData.SiteType);
				OnPropertyChanged("SiteType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EnableSsl property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean EnableSsl
		{
			get
			{
				return this.entityData.EnableSsl; 
			}
			
			set
			{
				if (this.entityData.EnableSsl == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.EnableSsl, this.entityData.EnableSsl);
				this.entityData.EnableSsl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.EnableSsl, this.entityData.EnableSsl);
				OnPropertyChanged("EnableSsl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Gst property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Gst
		{
			get
			{
				return this.entityData.Gst; 
			}
			
			set
			{
				if (this.entityData.Gst == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.Gst, this.entityData.Gst);
				this.entityData.Gst = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.Gst, this.entityData.Gst);
				OnPropertyChanged("Gst");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GstLabel property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String GstLabel
		{
			get
			{
				return this.entityData.GstLabel; 
			}
			
			set
			{
				if (this.entityData.GstLabel == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.GstLabel, this.entityData.GstLabel);
				this.entityData.GstLabel = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.GstLabel, this.entityData.GstLabel);
				OnPropertyChanged("GstLabel");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NumberOfPremiumJobs property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 NumberOfPremiumJobs
		{
			get
			{
				return this.entityData.NumberOfPremiumJobs; 
			}
			
			set
			{
				if (this.entityData.NumberOfPremiumJobs == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.NumberOfPremiumJobs, this.entityData.NumberOfPremiumJobs);
				this.entityData.NumberOfPremiumJobs = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.NumberOfPremiumJobs, this.entityData.NumberOfPremiumJobs);
				OnPropertyChanged("NumberOfPremiumJobs");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PremiumJobDays property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 PremiumJobDays
		{
			get
			{
				return this.entityData.PremiumJobDays; 
			}
			
			set
			{
				if (this.entityData.PremiumJobDays == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PremiumJobDays, this.entityData.PremiumJobDays);
				this.entityData.PremiumJobDays = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PremiumJobDays, this.entityData.PremiumJobDays);
				OnPropertyChanged("PremiumJobDays");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayPremiumJobsOnResults property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean DisplayPremiumJobsOnResults
		{
			get
			{
				return this.entityData.DisplayPremiumJobsOnResults; 
			}
			
			set
			{
				if (this.entityData.DisplayPremiumJobsOnResults == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.DisplayPremiumJobsOnResults, this.entityData.DisplayPremiumJobsOnResults);
				this.entityData.DisplayPremiumJobsOnResults = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.DisplayPremiumJobsOnResults, this.entityData.DisplayPremiumJobsOnResults);
				OnPropertyChanged("DisplayPremiumJobsOnResults");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JobExpiryNotification property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean JobExpiryNotification
		{
			get
			{
				return this.entityData.JobExpiryNotification; 
			}
			
			set
			{
				if (this.entityData.JobExpiryNotification == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.JobExpiryNotification, this.entityData.JobExpiryNotification);
				this.entityData.JobExpiryNotification = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.JobExpiryNotification, this.entityData.JobExpiryNotification);
				OnPropertyChanged("JobExpiryNotification");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrencyId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CurrencyId
		{
			get
			{
				return this.entityData.CurrencyId; 
			}
			
			set
			{
				if (this.entityData.CurrencyId == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.CurrencyId, this.entityData.CurrencyId);
				this.entityData.CurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.CurrencyId, this.entityData.CurrencyId);
				OnPropertyChanged("CurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PayPalClientId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String PayPalClientId
		{
			get
			{
				return this.entityData.PayPalClientId; 
			}
			
			set
			{
				if (this.entityData.PayPalClientId == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PayPalClientId, this.entityData.PayPalClientId);
				this.entityData.PayPalClientId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PayPalClientId, this.entityData.PayPalClientId);
				OnPropertyChanged("PayPalClientId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PayPalClientSecret property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String PayPalClientSecret
		{
			get
			{
				return this.entityData.PayPalClientSecret; 
			}
			
			set
			{
				if (this.entityData.PayPalClientSecret == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PayPalClientSecret, this.entityData.PayPalClientSecret);
				this.entityData.PayPalClientSecret = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PayPalClientSecret, this.entityData.PayPalClientSecret);
				OnPropertyChanged("PayPalClientSecret");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaypalUser property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String PaypalUser
		{
			get
			{
				return this.entityData.PaypalUser; 
			}
			
			set
			{
				if (this.entityData.PaypalUser == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PaypalUser, this.entityData.PaypalUser);
				this.entityData.PaypalUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PaypalUser, this.entityData.PaypalUser);
				OnPropertyChanged("PaypalUser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaypalProPassword property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String PaypalProPassword
		{
			get
			{
				return this.entityData.PaypalProPassword; 
			}
			
			set
			{
				if (this.entityData.PaypalProPassword == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PaypalProPassword, this.entityData.PaypalProPassword);
				this.entityData.PaypalProPassword = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PaypalProPassword, this.entityData.PaypalProPassword);
				OnPropertyChanged("PaypalProPassword");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaypalVendor property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String PaypalVendor
		{
			get
			{
				return this.entityData.PaypalVendor; 
			}
			
			set
			{
				if (this.entityData.PaypalVendor == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PaypalVendor, this.entityData.PaypalVendor);
				this.entityData.PaypalVendor = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PaypalVendor, this.entityData.PaypalVendor);
				OnPropertyChanged("PaypalVendor");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaypalPartner property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String PaypalPartner
		{
			get
			{
				return this.entityData.PaypalPartner; 
			}
			
			set
			{
				if (this.entityData.PaypalPartner == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.PaypalPartner, this.entityData.PaypalPartner);
				this.entityData.PaypalPartner = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.PaypalPartner, this.entityData.PaypalPartner);
				OnPropertyChanged("PaypalPartner");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InvoiceSiteInfo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String InvoiceSiteInfo
		{
			get
			{
				return this.entityData.InvoiceSiteInfo; 
			}
			
			set
			{
				if (this.entityData.InvoiceSiteInfo == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.InvoiceSiteInfo, this.entityData.InvoiceSiteInfo);
				this.entityData.InvoiceSiteInfo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.InvoiceSiteInfo, this.entityData.InvoiceSiteInfo);
				OnPropertyChanged("InvoiceSiteInfo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InvoiceSiteFooter property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1500)]
		public virtual System.String InvoiceSiteFooter
		{
			get
			{
				return this.entityData.InvoiceSiteFooter; 
			}
			
			set
			{
				if (this.entityData.InvoiceSiteFooter == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.InvoiceSiteFooter, this.entityData.InvoiceSiteFooter);
				this.entityData.InvoiceSiteFooter = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.InvoiceSiteFooter, this.entityData.InvoiceSiteFooter);
				OnPropertyChanged("InvoiceSiteFooter");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EnableTermsAndConditions property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean EnableTermsAndConditions
		{
			get
			{
				return this.entityData.EnableTermsAndConditions; 
			}
			
			set
			{
				if (this.entityData.EnableTermsAndConditions == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.EnableTermsAndConditions, this.entityData.EnableTermsAndConditions);
				this.entityData.EnableTermsAndConditions = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.EnableTermsAndConditions, this.entityData.EnableTermsAndConditions);
				OnPropertyChanged("EnableTermsAndConditions");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DefaultEmailLanguageId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDefaultEmailLanguageIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DefaultEmailLanguageId
		{
			get
			{
				return this.entityData.DefaultEmailLanguageId; 
			}
			
			set
			{
				if (this.entityData.DefaultEmailLanguageId == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.DefaultEmailLanguageId, this.entityData.DefaultEmailLanguageId);
				this.entityData.DefaultEmailLanguageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.DefaultEmailLanguageId, this.entityData.DefaultEmailLanguageId);
				OnPropertyChanged("DefaultEmailLanguageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GoogleTagManager property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String GoogleTagManager
		{
			get
			{
				return this.entityData.GoogleTagManager; 
			}
			
			set
			{
				if (this.entityData.GoogleTagManager == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.GoogleTagManager, this.entityData.GoogleTagManager);
				this.entityData.GoogleTagManager = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.GoogleTagManager, this.entityData.GoogleTagManager);
				OnPropertyChanged("GoogleTagManager");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GoogleAnalytics property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String GoogleAnalytics
		{
			get
			{
				return this.entityData.GoogleAnalytics; 
			}
			
			set
			{
				if (this.entityData.GoogleAnalytics == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.GoogleAnalytics, this.entityData.GoogleAnalytics);
				this.entityData.GoogleAnalytics = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.GoogleAnalytics, this.entityData.GoogleAnalytics);
				OnPropertyChanged("GoogleAnalytics");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GoogleWebMaster property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String GoogleWebMaster
		{
			get
			{
				return this.entityData.GoogleWebMaster; 
			}
			
			set
			{
				if (this.entityData.GoogleWebMaster == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.GoogleWebMaster, this.entityData.GoogleWebMaster);
				this.entityData.GoogleWebMaster = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.GoogleWebMaster, this.entityData.GoogleWebMaster);
				OnPropertyChanged("GoogleWebMaster");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EnablePeopleSearch property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean EnablePeopleSearch
		{
			get
			{
				return this.entityData.EnablePeopleSearch; 
			}
			
			set
			{
				if (this.entityData.EnablePeopleSearch == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.EnablePeopleSearch, this.entityData.EnablePeopleSearch);
				this.entityData.EnablePeopleSearch = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.EnablePeopleSearch, this.entityData.EnablePeopleSearch);
				OnPropertyChanged("EnablePeopleSearch");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GlobalDateFormat property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String GlobalDateFormat
		{
			get
			{
				return this.entityData.GlobalDateFormat; 
			}
			
			set
			{
				if (this.entityData.GlobalDateFormat == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.GlobalDateFormat, this.entityData.GlobalDateFormat);
				this.entityData.GlobalDateFormat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.GlobalDateFormat, this.entityData.GlobalDateFormat);
				OnPropertyChanged("GlobalDateFormat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TimeZone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String TimeZone
		{
			get
			{
				return this.entityData.TimeZone; 
			}
			
			set
			{
				if (this.entityData.TimeZone == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.TimeZone, this.entityData.TimeZone);
				this.entityData.TimeZone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.TimeZone, this.entityData.TimeZone);
				OnPropertyChanged("TimeZone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GlobalFolder property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String GlobalFolder
		{
			get
			{
				return this.entityData.GlobalFolder; 
			}
			
			set
			{
				if (this.entityData.GlobalFolder == value)
					return;
					
				OnColumnChanging(GlobalSettingsColumn.GlobalFolder, this.entityData.GlobalFolder);
				this.entityData.GlobalFolder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GlobalSettingsColumn.GlobalFolder, this.entityData.GlobalFolder);
				OnPropertyChanged("GlobalFolder");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Countries"/>.
		/// </summary>
		/// <value>The source Countries for DefaultCountryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Countries DefaultCountryIdSource
      	{
            get { return entityData.DefaultCountryIdSource; }
            set { entityData.DefaultCountryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Languages"/>.
		/// </summary>
		/// <value>The source Languages for DefaultLanguageId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Languages DefaultLanguageIdSource
      	{
            get { return entityData.DefaultLanguageIdSource; }
            set { entityData.DefaultLanguageIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="DynamicPages"/>.
		/// </summary>
		/// <value>The source DynamicPages for DefaultDynamicPageId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual DynamicPages DefaultDynamicPageIdSource
      	{
            get { return entityData.DefaultDynamicPageIdSource; }
            set { entityData.DefaultDynamicPageIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return entityData.LastModifiedBySource; }
            set { entityData.LastModifiedBySource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Files"/>.
		/// </summary>
		/// <value>The source Files for SiteFavIconId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Files SiteFavIconIdSource
      	{
            get { return entityData.SiteFavIconIdSource; }
            set { entityData.SiteFavIconIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Sites SiteIdSource
      	{
            get { return entityData.SiteIdSource; }
            set { entityData.SiteIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PageTitlePrefix", "Page Title Prefix", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PageTitleSuffix", "Page Title Suffix", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DefaultTitle", "Default Title", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HomeTitle", "Home Title", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DefaultDescription", "Default Description", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HomeDescription", "Home Description", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DefaultKeywords", "Default Keywords", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HomeKeywords", "Home Keywords", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SiteDocType", "Site Doc Type", 512));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CurrencySymbol", "Currency Symbol", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FtpFolderLocation", "Ftp Folder Location", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SystemMetaTags", "System Meta Tags", 4000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MemberRegistrationNotification", "Member Registration Notification", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LinkedInApi", "Linked In Api", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LinkedInLogo", "Linked In Logo", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LinkedInEmail", "Linked In Email", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PrivacySettings", "Privacy Settings", 4000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LinkedInApiSecret", "Linked In Api Secret", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GoogleClientId", "Google Client Id", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GoogleClientSecret", "Google Client Secret", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FacebookAppId", "Facebook App Id", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FacebookAppSecret", "Facebook App Secret", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PayPalUsername", "Pay Pal Username", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PayPalPassword", "Pay Pal Password", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PayPalSignature", "Pay Pal Signature", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SecurePayMerchantId", "Secure Pay Merchant Id", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SecurePayPassword", "Secure Pay Password", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PrivateRedirectUrl", "Private Redirect Url", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GstLabel", "Gst Label", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PayPalClientId", "Pay Pal Client Id", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PayPalClientSecret", "Pay Pal Client Secret", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PaypalUser", "Paypal User", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PaypalProPassword", "Paypal Pro Password", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PaypalVendor", "Paypal Vendor", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PaypalPartner", "Paypal Partner", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("InvoiceSiteInfo", "Invoice Site Info", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("InvoiceSiteFooter", "Invoice Site Footer", 1500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GoogleTagManager", "Google Tag Manager", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GoogleAnalytics", "Google Analytics", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GoogleWebMaster", "Google Web Master", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("GlobalDateFormat", "Global Date Format"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GlobalDateFormat", "Global Date Format", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("TimeZone", "Time Zone"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TimeZone", "Time Zone", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GlobalFolder", "Global Folder", 255));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "GlobalSettings"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"GlobalSettingID", "SiteID", "DefaultLanguageID", "DefaultDynamicPageID", "PublicJobsSearch", "PublicMembersSearch", "PublicCompaniesSearch", "PublicSponsoredAdverts", "PrivateJobs", "PrivateMembers", "PrivateCompanies", "LastModifiedBy", "LastModified", "PageTitlePrefix", "PageTitleSuffix", "DefaultTitle", "HomeTitle", "DefaultDescription", "HomeDescription", "DefaultKeywords", "HomeKeywords", "ShowFaceBookButton", "UseAdvertiserFilter", "MerchantID", "ShowTwitterButton", "ShowJobAlertButton", "ShowLinkedInButton", "SiteFavIconID", "SiteDocType", "CurrencySymbol", "FtpFolderLocation", "MetaTags", "SystemMetaTags", "MemberRegistrationNotification", "LinkedInAPI", "LinkedInLogo", "LinkedInCompanyID", "LinkedInEmail", "PrivacySettings", "WWWRedirect", "AllowAdvertiser", "LinkedInAPISecret", "GoogleClientID", "GoogleClientSecret", "FacebookAppID", "FacebookAppSecret", "LinkedInButtonSize", "DefaultCountryID", "PayPalUsername", "PayPalPassword", "PayPalSignature", "SecurePayMerchantID", "SecurePayPassword", "UsingSSL", "UseCustomProfessionRole", "GenerateJobXML", "IsPrivateSite", "PrivateRedirectUrl", "EnableJobCustomQuestionnaire", "JobApplicationTypeID", "JobScreeningProcess", "AdvertiserApprovalProcess", "SiteType", "EnableSSL", "GST", "GSTLabel", "NumberOfPremiumJobs", "PremiumJobDays", "DisplayPremiumJobsOnResults", "JobExpiryNotification", "CurrencyID", "PayPalClientID", "PayPalClientSecret", "PaypalUser", "PaypalProPassword", "PaypalVendor", "PaypalPartner", "InvoiceSiteInfo", "InvoiceSiteFooter", "EnableTermsAndConditions", "DefaultEmailLanguageId", "GoogleTagManager", "GoogleAnalytics", "GoogleWebMaster", "EnablePeopleSearch", "GlobalDateFormat", "TimeZone", "GlobalFolder"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as GlobalSettingsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (GlobalSettings) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<GlobalSettings>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as GlobalSettings);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed GlobalSettings Entity 
		///</summary>
		protected virtual GlobalSettings Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			GlobalSettings copy = new GlobalSettings();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.GlobalSettingId = this.GlobalSettingId;
				copy.SiteId = this.SiteId;
				copy.DefaultLanguageId = this.DefaultLanguageId;
				copy.DefaultDynamicPageId = this.DefaultDynamicPageId;
				copy.PublicJobsSearch = this.PublicJobsSearch;
				copy.PublicMembersSearch = this.PublicMembersSearch;
				copy.PublicCompaniesSearch = this.PublicCompaniesSearch;
				copy.PublicSponsoredAdverts = this.PublicSponsoredAdverts;
				copy.PrivateJobs = this.PrivateJobs;
				copy.PrivateMembers = this.PrivateMembers;
				copy.PrivateCompanies = this.PrivateCompanies;
				copy.LastModifiedBy = this.LastModifiedBy;
				copy.LastModified = this.LastModified;
				copy.PageTitlePrefix = this.PageTitlePrefix;
				copy.PageTitleSuffix = this.PageTitleSuffix;
				copy.DefaultTitle = this.DefaultTitle;
				copy.HomeTitle = this.HomeTitle;
				copy.DefaultDescription = this.DefaultDescription;
				copy.HomeDescription = this.HomeDescription;
				copy.DefaultKeywords = this.DefaultKeywords;
				copy.HomeKeywords = this.HomeKeywords;
				copy.ShowFaceBookButton = this.ShowFaceBookButton;
				copy.UseAdvertiserFilter = this.UseAdvertiserFilter;
				copy.MerchantId = this.MerchantId;
				copy.ShowTwitterButton = this.ShowTwitterButton;
				copy.ShowJobAlertButton = this.ShowJobAlertButton;
				copy.ShowLinkedInButton = this.ShowLinkedInButton;
				copy.SiteFavIconId = this.SiteFavIconId;
				copy.SiteDocType = this.SiteDocType;
				copy.CurrencySymbol = this.CurrencySymbol;
				copy.FtpFolderLocation = this.FtpFolderLocation;
				copy.MetaTags = this.MetaTags;
				copy.SystemMetaTags = this.SystemMetaTags;
				copy.MemberRegistrationNotification = this.MemberRegistrationNotification;
				copy.LinkedInApi = this.LinkedInApi;
				copy.LinkedInLogo = this.LinkedInLogo;
				copy.LinkedInCompanyId = this.LinkedInCompanyId;
				copy.LinkedInEmail = this.LinkedInEmail;
				copy.PrivacySettings = this.PrivacySettings;
				copy.WwwRedirect = this.WwwRedirect;
				copy.AllowAdvertiser = this.AllowAdvertiser;
				copy.LinkedInApiSecret = this.LinkedInApiSecret;
				copy.GoogleClientId = this.GoogleClientId;
				copy.GoogleClientSecret = this.GoogleClientSecret;
				copy.FacebookAppId = this.FacebookAppId;
				copy.FacebookAppSecret = this.FacebookAppSecret;
				copy.LinkedInButtonSize = this.LinkedInButtonSize;
				copy.DefaultCountryId = this.DefaultCountryId;
				copy.PayPalUsername = this.PayPalUsername;
				copy.PayPalPassword = this.PayPalPassword;
				copy.PayPalSignature = this.PayPalSignature;
				copy.SecurePayMerchantId = this.SecurePayMerchantId;
				copy.SecurePayPassword = this.SecurePayPassword;
				copy.UsingSsl = this.UsingSsl;
				copy.UseCustomProfessionRole = this.UseCustomProfessionRole;
				copy.GenerateJobXml = this.GenerateJobXml;
				copy.IsPrivateSite = this.IsPrivateSite;
				copy.PrivateRedirectUrl = this.PrivateRedirectUrl;
				copy.EnableJobCustomQuestionnaire = this.EnableJobCustomQuestionnaire;
				copy.JobApplicationTypeId = this.JobApplicationTypeId;
				copy.JobScreeningProcess = this.JobScreeningProcess;
				copy.AdvertiserApprovalProcess = this.AdvertiserApprovalProcess;
				copy.SiteType = this.SiteType;
				copy.EnableSsl = this.EnableSsl;
				copy.Gst = this.Gst;
				copy.GstLabel = this.GstLabel;
				copy.NumberOfPremiumJobs = this.NumberOfPremiumJobs;
				copy.PremiumJobDays = this.PremiumJobDays;
				copy.DisplayPremiumJobsOnResults = this.DisplayPremiumJobsOnResults;
				copy.JobExpiryNotification = this.JobExpiryNotification;
				copy.CurrencyId = this.CurrencyId;
				copy.PayPalClientId = this.PayPalClientId;
				copy.PayPalClientSecret = this.PayPalClientSecret;
				copy.PaypalUser = this.PaypalUser;
				copy.PaypalProPassword = this.PaypalProPassword;
				copy.PaypalVendor = this.PaypalVendor;
				copy.PaypalPartner = this.PaypalPartner;
				copy.InvoiceSiteInfo = this.InvoiceSiteInfo;
				copy.InvoiceSiteFooter = this.InvoiceSiteFooter;
				copy.EnableTermsAndConditions = this.EnableTermsAndConditions;
				copy.DefaultEmailLanguageId = this.DefaultEmailLanguageId;
				copy.GoogleTagManager = this.GoogleTagManager;
				copy.GoogleAnalytics = this.GoogleAnalytics;
				copy.GoogleWebMaster = this.GoogleWebMaster;
				copy.EnablePeopleSearch = this.EnablePeopleSearch;
				copy.GlobalDateFormat = this.GlobalDateFormat;
				copy.TimeZone = this.TimeZone;
				copy.GlobalFolder = this.GlobalFolder;
			
			if (this.DefaultCountryIdSource != null && existingCopies.Contains(this.DefaultCountryIdSource))
				copy.DefaultCountryIdSource = existingCopies[this.DefaultCountryIdSource] as Countries;
			else
				copy.DefaultCountryIdSource = MakeCopyOf(this.DefaultCountryIdSource, existingCopies) as Countries;
			if (this.DefaultLanguageIdSource != null && existingCopies.Contains(this.DefaultLanguageIdSource))
				copy.DefaultLanguageIdSource = existingCopies[this.DefaultLanguageIdSource] as Languages;
			else
				copy.DefaultLanguageIdSource = MakeCopyOf(this.DefaultLanguageIdSource, existingCopies) as Languages;
			if (this.DefaultDynamicPageIdSource != null && existingCopies.Contains(this.DefaultDynamicPageIdSource))
				copy.DefaultDynamicPageIdSource = existingCopies[this.DefaultDynamicPageIdSource] as DynamicPages;
			else
				copy.DefaultDynamicPageIdSource = MakeCopyOf(this.DefaultDynamicPageIdSource, existingCopies) as DynamicPages;
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				copy.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				copy.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			if (this.SiteFavIconIdSource != null && existingCopies.Contains(this.SiteFavIconIdSource))
				copy.SiteFavIconIdSource = existingCopies[this.SiteFavIconIdSource] as Files;
			else
				copy.SiteFavIconIdSource = MakeCopyOf(this.SiteFavIconIdSource, existingCopies) as Files;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				copy.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				copy.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed GlobalSettings Entity 
		///</summary>
		public virtual GlobalSettings Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed GlobalSettings Entity which is a deep copy of the current entity.
		///</summary>
		public virtual GlobalSettings DeepCopy()
		{
			return EntityHelper.Clone<GlobalSettings>(this as GlobalSettings);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as GlobalSettingsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new GlobalSettingsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as GlobalSettingsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(GlobalSettingsColumn column)
		{
			switch(column)
			{
					case GlobalSettingsColumn.GlobalSettingId:
					return entityData.GlobalSettingId != _originalData.GlobalSettingId;
					case GlobalSettingsColumn.SiteId:
					return entityData.SiteId != _originalData.SiteId;
					case GlobalSettingsColumn.DefaultLanguageId:
					return entityData.DefaultLanguageId != _originalData.DefaultLanguageId;
					case GlobalSettingsColumn.DefaultDynamicPageId:
					return entityData.DefaultDynamicPageId != _originalData.DefaultDynamicPageId;
					case GlobalSettingsColumn.PublicJobsSearch:
					return entityData.PublicJobsSearch != _originalData.PublicJobsSearch;
					case GlobalSettingsColumn.PublicMembersSearch:
					return entityData.PublicMembersSearch != _originalData.PublicMembersSearch;
					case GlobalSettingsColumn.PublicCompaniesSearch:
					return entityData.PublicCompaniesSearch != _originalData.PublicCompaniesSearch;
					case GlobalSettingsColumn.PublicSponsoredAdverts:
					return entityData.PublicSponsoredAdverts != _originalData.PublicSponsoredAdverts;
					case GlobalSettingsColumn.PrivateJobs:
					return entityData.PrivateJobs != _originalData.PrivateJobs;
					case GlobalSettingsColumn.PrivateMembers:
					return entityData.PrivateMembers != _originalData.PrivateMembers;
					case GlobalSettingsColumn.PrivateCompanies:
					return entityData.PrivateCompanies != _originalData.PrivateCompanies;
					case GlobalSettingsColumn.LastModifiedBy:
					return entityData.LastModifiedBy != _originalData.LastModifiedBy;
					case GlobalSettingsColumn.LastModified:
					return entityData.LastModified != _originalData.LastModified;
					case GlobalSettingsColumn.PageTitlePrefix:
					return entityData.PageTitlePrefix != _originalData.PageTitlePrefix;
					case GlobalSettingsColumn.PageTitleSuffix:
					return entityData.PageTitleSuffix != _originalData.PageTitleSuffix;
					case GlobalSettingsColumn.DefaultTitle:
					return entityData.DefaultTitle != _originalData.DefaultTitle;
					case GlobalSettingsColumn.HomeTitle:
					return entityData.HomeTitle != _originalData.HomeTitle;
					case GlobalSettingsColumn.DefaultDescription:
					return entityData.DefaultDescription != _originalData.DefaultDescription;
					case GlobalSettingsColumn.HomeDescription:
					return entityData.HomeDescription != _originalData.HomeDescription;
					case GlobalSettingsColumn.DefaultKeywords:
					return entityData.DefaultKeywords != _originalData.DefaultKeywords;
					case GlobalSettingsColumn.HomeKeywords:
					return entityData.HomeKeywords != _originalData.HomeKeywords;
					case GlobalSettingsColumn.ShowFaceBookButton:
					return entityData.ShowFaceBookButton != _originalData.ShowFaceBookButton;
					case GlobalSettingsColumn.UseAdvertiserFilter:
					return entityData.UseAdvertiserFilter != _originalData.UseAdvertiserFilter;
					case GlobalSettingsColumn.MerchantId:
					return entityData.MerchantId != _originalData.MerchantId;
					case GlobalSettingsColumn.ShowTwitterButton:
					return entityData.ShowTwitterButton != _originalData.ShowTwitterButton;
					case GlobalSettingsColumn.ShowJobAlertButton:
					return entityData.ShowJobAlertButton != _originalData.ShowJobAlertButton;
					case GlobalSettingsColumn.ShowLinkedInButton:
					return entityData.ShowLinkedInButton != _originalData.ShowLinkedInButton;
					case GlobalSettingsColumn.SiteFavIconId:
					return entityData.SiteFavIconId != _originalData.SiteFavIconId;
					case GlobalSettingsColumn.SiteDocType:
					return entityData.SiteDocType != _originalData.SiteDocType;
					case GlobalSettingsColumn.CurrencySymbol:
					return entityData.CurrencySymbol != _originalData.CurrencySymbol;
					case GlobalSettingsColumn.FtpFolderLocation:
					return entityData.FtpFolderLocation != _originalData.FtpFolderLocation;
					case GlobalSettingsColumn.MetaTags:
					return entityData.MetaTags != _originalData.MetaTags;
					case GlobalSettingsColumn.SystemMetaTags:
					return entityData.SystemMetaTags != _originalData.SystemMetaTags;
					case GlobalSettingsColumn.MemberRegistrationNotification:
					return entityData.MemberRegistrationNotification != _originalData.MemberRegistrationNotification;
					case GlobalSettingsColumn.LinkedInApi:
					return entityData.LinkedInApi != _originalData.LinkedInApi;
					case GlobalSettingsColumn.LinkedInLogo:
					return entityData.LinkedInLogo != _originalData.LinkedInLogo;
					case GlobalSettingsColumn.LinkedInCompanyId:
					return entityData.LinkedInCompanyId != _originalData.LinkedInCompanyId;
					case GlobalSettingsColumn.LinkedInEmail:
					return entityData.LinkedInEmail != _originalData.LinkedInEmail;
					case GlobalSettingsColumn.PrivacySettings:
					return entityData.PrivacySettings != _originalData.PrivacySettings;
					case GlobalSettingsColumn.WwwRedirect:
					return entityData.WwwRedirect != _originalData.WwwRedirect;
					case GlobalSettingsColumn.AllowAdvertiser:
					return entityData.AllowAdvertiser != _originalData.AllowAdvertiser;
					case GlobalSettingsColumn.LinkedInApiSecret:
					return entityData.LinkedInApiSecret != _originalData.LinkedInApiSecret;
					case GlobalSettingsColumn.GoogleClientId:
					return entityData.GoogleClientId != _originalData.GoogleClientId;
					case GlobalSettingsColumn.GoogleClientSecret:
					return entityData.GoogleClientSecret != _originalData.GoogleClientSecret;
					case GlobalSettingsColumn.FacebookAppId:
					return entityData.FacebookAppId != _originalData.FacebookAppId;
					case GlobalSettingsColumn.FacebookAppSecret:
					return entityData.FacebookAppSecret != _originalData.FacebookAppSecret;
					case GlobalSettingsColumn.LinkedInButtonSize:
					return entityData.LinkedInButtonSize != _originalData.LinkedInButtonSize;
					case GlobalSettingsColumn.DefaultCountryId:
					return entityData.DefaultCountryId != _originalData.DefaultCountryId;
					case GlobalSettingsColumn.PayPalUsername:
					return entityData.PayPalUsername != _originalData.PayPalUsername;
					case GlobalSettingsColumn.PayPalPassword:
					return entityData.PayPalPassword != _originalData.PayPalPassword;
					case GlobalSettingsColumn.PayPalSignature:
					return entityData.PayPalSignature != _originalData.PayPalSignature;
					case GlobalSettingsColumn.SecurePayMerchantId:
					return entityData.SecurePayMerchantId != _originalData.SecurePayMerchantId;
					case GlobalSettingsColumn.SecurePayPassword:
					return entityData.SecurePayPassword != _originalData.SecurePayPassword;
					case GlobalSettingsColumn.UsingSsl:
					return entityData.UsingSsl != _originalData.UsingSsl;
					case GlobalSettingsColumn.UseCustomProfessionRole:
					return entityData.UseCustomProfessionRole != _originalData.UseCustomProfessionRole;
					case GlobalSettingsColumn.GenerateJobXml:
					return entityData.GenerateJobXml != _originalData.GenerateJobXml;
					case GlobalSettingsColumn.IsPrivateSite:
					return entityData.IsPrivateSite != _originalData.IsPrivateSite;
					case GlobalSettingsColumn.PrivateRedirectUrl:
					return entityData.PrivateRedirectUrl != _originalData.PrivateRedirectUrl;
					case GlobalSettingsColumn.EnableJobCustomQuestionnaire:
					return entityData.EnableJobCustomQuestionnaire != _originalData.EnableJobCustomQuestionnaire;
					case GlobalSettingsColumn.JobApplicationTypeId:
					return entityData.JobApplicationTypeId != _originalData.JobApplicationTypeId;
					case GlobalSettingsColumn.JobScreeningProcess:
					return entityData.JobScreeningProcess != _originalData.JobScreeningProcess;
					case GlobalSettingsColumn.AdvertiserApprovalProcess:
					return entityData.AdvertiserApprovalProcess != _originalData.AdvertiserApprovalProcess;
					case GlobalSettingsColumn.SiteType:
					return entityData.SiteType != _originalData.SiteType;
					case GlobalSettingsColumn.EnableSsl:
					return entityData.EnableSsl != _originalData.EnableSsl;
					case GlobalSettingsColumn.Gst:
					return entityData.Gst != _originalData.Gst;
					case GlobalSettingsColumn.GstLabel:
					return entityData.GstLabel != _originalData.GstLabel;
					case GlobalSettingsColumn.NumberOfPremiumJobs:
					return entityData.NumberOfPremiumJobs != _originalData.NumberOfPremiumJobs;
					case GlobalSettingsColumn.PremiumJobDays:
					return entityData.PremiumJobDays != _originalData.PremiumJobDays;
					case GlobalSettingsColumn.DisplayPremiumJobsOnResults:
					return entityData.DisplayPremiumJobsOnResults != _originalData.DisplayPremiumJobsOnResults;
					case GlobalSettingsColumn.JobExpiryNotification:
					return entityData.JobExpiryNotification != _originalData.JobExpiryNotification;
					case GlobalSettingsColumn.CurrencyId:
					return entityData.CurrencyId != _originalData.CurrencyId;
					case GlobalSettingsColumn.PayPalClientId:
					return entityData.PayPalClientId != _originalData.PayPalClientId;
					case GlobalSettingsColumn.PayPalClientSecret:
					return entityData.PayPalClientSecret != _originalData.PayPalClientSecret;
					case GlobalSettingsColumn.PaypalUser:
					return entityData.PaypalUser != _originalData.PaypalUser;
					case GlobalSettingsColumn.PaypalProPassword:
					return entityData.PaypalProPassword != _originalData.PaypalProPassword;
					case GlobalSettingsColumn.PaypalVendor:
					return entityData.PaypalVendor != _originalData.PaypalVendor;
					case GlobalSettingsColumn.PaypalPartner:
					return entityData.PaypalPartner != _originalData.PaypalPartner;
					case GlobalSettingsColumn.InvoiceSiteInfo:
					return entityData.InvoiceSiteInfo != _originalData.InvoiceSiteInfo;
					case GlobalSettingsColumn.InvoiceSiteFooter:
					return entityData.InvoiceSiteFooter != _originalData.InvoiceSiteFooter;
					case GlobalSettingsColumn.EnableTermsAndConditions:
					return entityData.EnableTermsAndConditions != _originalData.EnableTermsAndConditions;
					case GlobalSettingsColumn.DefaultEmailLanguageId:
					return entityData.DefaultEmailLanguageId != _originalData.DefaultEmailLanguageId;
					case GlobalSettingsColumn.GoogleTagManager:
					return entityData.GoogleTagManager != _originalData.GoogleTagManager;
					case GlobalSettingsColumn.GoogleAnalytics:
					return entityData.GoogleAnalytics != _originalData.GoogleAnalytics;
					case GlobalSettingsColumn.GoogleWebMaster:
					return entityData.GoogleWebMaster != _originalData.GoogleWebMaster;
					case GlobalSettingsColumn.EnablePeopleSearch:
					return entityData.EnablePeopleSearch != _originalData.EnablePeopleSearch;
					case GlobalSettingsColumn.GlobalDateFormat:
					return entityData.GlobalDateFormat != _originalData.GlobalDateFormat;
					case GlobalSettingsColumn.TimeZone:
					return entityData.TimeZone != _originalData.TimeZone;
					case GlobalSettingsColumn.GlobalFolder:
					return entityData.GlobalFolder != _originalData.GlobalFolder;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< GlobalSettingsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.GlobalSettingId != _originalData.GlobalSettingId;
			result = result || entityData.SiteId != _originalData.SiteId;
			result = result || entityData.DefaultLanguageId != _originalData.DefaultLanguageId;
			result = result || entityData.DefaultDynamicPageId != _originalData.DefaultDynamicPageId;
			result = result || entityData.PublicJobsSearch != _originalData.PublicJobsSearch;
			result = result || entityData.PublicMembersSearch != _originalData.PublicMembersSearch;
			result = result || entityData.PublicCompaniesSearch != _originalData.PublicCompaniesSearch;
			result = result || entityData.PublicSponsoredAdverts != _originalData.PublicSponsoredAdverts;
			result = result || entityData.PrivateJobs != _originalData.PrivateJobs;
			result = result || entityData.PrivateMembers != _originalData.PrivateMembers;
			result = result || entityData.PrivateCompanies != _originalData.PrivateCompanies;
			result = result || entityData.LastModifiedBy != _originalData.LastModifiedBy;
			result = result || entityData.LastModified != _originalData.LastModified;
			result = result || entityData.PageTitlePrefix != _originalData.PageTitlePrefix;
			result = result || entityData.PageTitleSuffix != _originalData.PageTitleSuffix;
			result = result || entityData.DefaultTitle != _originalData.DefaultTitle;
			result = result || entityData.HomeTitle != _originalData.HomeTitle;
			result = result || entityData.DefaultDescription != _originalData.DefaultDescription;
			result = result || entityData.HomeDescription != _originalData.HomeDescription;
			result = result || entityData.DefaultKeywords != _originalData.DefaultKeywords;
			result = result || entityData.HomeKeywords != _originalData.HomeKeywords;
			result = result || entityData.ShowFaceBookButton != _originalData.ShowFaceBookButton;
			result = result || entityData.UseAdvertiserFilter != _originalData.UseAdvertiserFilter;
			result = result || entityData.MerchantId != _originalData.MerchantId;
			result = result || entityData.ShowTwitterButton != _originalData.ShowTwitterButton;
			result = result || entityData.ShowJobAlertButton != _originalData.ShowJobAlertButton;
			result = result || entityData.ShowLinkedInButton != _originalData.ShowLinkedInButton;
			result = result || entityData.SiteFavIconId != _originalData.SiteFavIconId;
			result = result || entityData.SiteDocType != _originalData.SiteDocType;
			result = result || entityData.CurrencySymbol != _originalData.CurrencySymbol;
			result = result || entityData.FtpFolderLocation != _originalData.FtpFolderLocation;
			result = result || entityData.MetaTags != _originalData.MetaTags;
			result = result || entityData.SystemMetaTags != _originalData.SystemMetaTags;
			result = result || entityData.MemberRegistrationNotification != _originalData.MemberRegistrationNotification;
			result = result || entityData.LinkedInApi != _originalData.LinkedInApi;
			result = result || entityData.LinkedInLogo != _originalData.LinkedInLogo;
			result = result || entityData.LinkedInCompanyId != _originalData.LinkedInCompanyId;
			result = result || entityData.LinkedInEmail != _originalData.LinkedInEmail;
			result = result || entityData.PrivacySettings != _originalData.PrivacySettings;
			result = result || entityData.WwwRedirect != _originalData.WwwRedirect;
			result = result || entityData.AllowAdvertiser != _originalData.AllowAdvertiser;
			result = result || entityData.LinkedInApiSecret != _originalData.LinkedInApiSecret;
			result = result || entityData.GoogleClientId != _originalData.GoogleClientId;
			result = result || entityData.GoogleClientSecret != _originalData.GoogleClientSecret;
			result = result || entityData.FacebookAppId != _originalData.FacebookAppId;
			result = result || entityData.FacebookAppSecret != _originalData.FacebookAppSecret;
			result = result || entityData.LinkedInButtonSize != _originalData.LinkedInButtonSize;
			result = result || entityData.DefaultCountryId != _originalData.DefaultCountryId;
			result = result || entityData.PayPalUsername != _originalData.PayPalUsername;
			result = result || entityData.PayPalPassword != _originalData.PayPalPassword;
			result = result || entityData.PayPalSignature != _originalData.PayPalSignature;
			result = result || entityData.SecurePayMerchantId != _originalData.SecurePayMerchantId;
			result = result || entityData.SecurePayPassword != _originalData.SecurePayPassword;
			result = result || entityData.UsingSsl != _originalData.UsingSsl;
			result = result || entityData.UseCustomProfessionRole != _originalData.UseCustomProfessionRole;
			result = result || entityData.GenerateJobXml != _originalData.GenerateJobXml;
			result = result || entityData.IsPrivateSite != _originalData.IsPrivateSite;
			result = result || entityData.PrivateRedirectUrl != _originalData.PrivateRedirectUrl;
			result = result || entityData.EnableJobCustomQuestionnaire != _originalData.EnableJobCustomQuestionnaire;
			result = result || entityData.JobApplicationTypeId != _originalData.JobApplicationTypeId;
			result = result || entityData.JobScreeningProcess != _originalData.JobScreeningProcess;
			result = result || entityData.AdvertiserApprovalProcess != _originalData.AdvertiserApprovalProcess;
			result = result || entityData.SiteType != _originalData.SiteType;
			result = result || entityData.EnableSsl != _originalData.EnableSsl;
			result = result || entityData.Gst != _originalData.Gst;
			result = result || entityData.GstLabel != _originalData.GstLabel;
			result = result || entityData.NumberOfPremiumJobs != _originalData.NumberOfPremiumJobs;
			result = result || entityData.PremiumJobDays != _originalData.PremiumJobDays;
			result = result || entityData.DisplayPremiumJobsOnResults != _originalData.DisplayPremiumJobsOnResults;
			result = result || entityData.JobExpiryNotification != _originalData.JobExpiryNotification;
			result = result || entityData.CurrencyId != _originalData.CurrencyId;
			result = result || entityData.PayPalClientId != _originalData.PayPalClientId;
			result = result || entityData.PayPalClientSecret != _originalData.PayPalClientSecret;
			result = result || entityData.PaypalUser != _originalData.PaypalUser;
			result = result || entityData.PaypalProPassword != _originalData.PaypalProPassword;
			result = result || entityData.PaypalVendor != _originalData.PaypalVendor;
			result = result || entityData.PaypalPartner != _originalData.PaypalPartner;
			result = result || entityData.InvoiceSiteInfo != _originalData.InvoiceSiteInfo;
			result = result || entityData.InvoiceSiteFooter != _originalData.InvoiceSiteFooter;
			result = result || entityData.EnableTermsAndConditions != _originalData.EnableTermsAndConditions;
			result = result || entityData.DefaultEmailLanguageId != _originalData.DefaultEmailLanguageId;
			result = result || entityData.GoogleTagManager != _originalData.GoogleTagManager;
			result = result || entityData.GoogleAnalytics != _originalData.GoogleAnalytics;
			result = result || entityData.GoogleWebMaster != _originalData.GoogleWebMaster;
			result = result || entityData.EnablePeopleSearch != _originalData.EnablePeopleSearch;
			result = result || entityData.GlobalDateFormat != _originalData.GlobalDateFormat;
			result = result || entityData.TimeZone != _originalData.TimeZone;
			result = result || entityData.GlobalFolder != _originalData.GlobalFolder;
			return result;
		}	
		
		///<summary>
		///  Returns a GlobalSettings Entity with the original data.
		///</summary>
		public GlobalSettings GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateGlobalSettings(
				_originalData.SiteId,
				_originalData.DefaultLanguageId,
				_originalData.DefaultDynamicPageId,
				_originalData.PublicJobsSearch,
				_originalData.PublicMembersSearch,
				_originalData.PublicCompaniesSearch,
				_originalData.PublicSponsoredAdverts,
				_originalData.PrivateJobs,
				_originalData.PrivateMembers,
				_originalData.PrivateCompanies,
				_originalData.LastModifiedBy,
				_originalData.LastModified,
				_originalData.PageTitlePrefix,
				_originalData.PageTitleSuffix,
				_originalData.DefaultTitle,
				_originalData.HomeTitle,
				_originalData.DefaultDescription,
				_originalData.HomeDescription,
				_originalData.DefaultKeywords,
				_originalData.HomeKeywords,
				_originalData.ShowFaceBookButton,
				_originalData.UseAdvertiserFilter,
				_originalData.MerchantId,
				_originalData.ShowTwitterButton,
				_originalData.ShowJobAlertButton,
				_originalData.ShowLinkedInButton,
				_originalData.SiteFavIconId,
				_originalData.SiteDocType,
				_originalData.CurrencySymbol,
				_originalData.FtpFolderLocation,
				_originalData.MetaTags,
				_originalData.SystemMetaTags,
				_originalData.MemberRegistrationNotification,
				_originalData.LinkedInApi,
				_originalData.LinkedInLogo,
				_originalData.LinkedInCompanyId,
				_originalData.LinkedInEmail,
				_originalData.PrivacySettings,
				_originalData.WwwRedirect,
				_originalData.AllowAdvertiser,
				_originalData.LinkedInApiSecret,
				_originalData.GoogleClientId,
				_originalData.GoogleClientSecret,
				_originalData.FacebookAppId,
				_originalData.FacebookAppSecret,
				_originalData.LinkedInButtonSize,
				_originalData.DefaultCountryId,
				_originalData.PayPalUsername,
				_originalData.PayPalPassword,
				_originalData.PayPalSignature,
				_originalData.SecurePayMerchantId,
				_originalData.SecurePayPassword,
				_originalData.UsingSsl,
				_originalData.UseCustomProfessionRole,
				_originalData.GenerateJobXml,
				_originalData.IsPrivateSite,
				_originalData.PrivateRedirectUrl,
				_originalData.EnableJobCustomQuestionnaire,
				_originalData.JobApplicationTypeId,
				_originalData.JobScreeningProcess,
				_originalData.AdvertiserApprovalProcess,
				_originalData.SiteType,
				_originalData.EnableSsl,
				_originalData.Gst,
				_originalData.GstLabel,
				_originalData.NumberOfPremiumJobs,
				_originalData.PremiumJobDays,
				_originalData.DisplayPremiumJobsOnResults,
				_originalData.JobExpiryNotification,
				_originalData.CurrencyId,
				_originalData.PayPalClientId,
				_originalData.PayPalClientSecret,
				_originalData.PaypalUser,
				_originalData.PaypalProPassword,
				_originalData.PaypalVendor,
				_originalData.PaypalPartner,
				_originalData.InvoiceSiteInfo,
				_originalData.InvoiceSiteFooter,
				_originalData.EnableTermsAndConditions,
				_originalData.DefaultEmailLanguageId,
				_originalData.GoogleTagManager,
				_originalData.GoogleAnalytics,
				_originalData.GoogleWebMaster,
				_originalData.EnablePeopleSearch,
				_originalData.GlobalDateFormat,
				_originalData.TimeZone,
				_originalData.GlobalFolder
				);
				
			return (GlobalSettings)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="GlobalSettingsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is GlobalSettingsBase)
				return ValueEquals(this, (GlobalSettingsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="GlobalSettingsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.GlobalSettingId.GetHashCode() ^ 
					this.SiteId.GetHashCode() ^ 
					this.DefaultLanguageId.GetHashCode() ^ 
					((this.DefaultDynamicPageId == null) ? string.Empty : this.DefaultDynamicPageId.ToString()).GetHashCode() ^ 
					this.PublicJobsSearch.GetHashCode() ^ 
					this.PublicMembersSearch.GetHashCode() ^ 
					this.PublicCompaniesSearch.GetHashCode() ^ 
					this.PublicSponsoredAdverts.GetHashCode() ^ 
					this.PrivateJobs.GetHashCode() ^ 
					this.PrivateMembers.GetHashCode() ^ 
					this.PrivateCompanies.GetHashCode() ^ 
					this.LastModifiedBy.GetHashCode() ^ 
					this.LastModified.GetHashCode() ^ 
					((this.PageTitlePrefix == null) ? string.Empty : this.PageTitlePrefix.ToString()).GetHashCode() ^ 
					((this.PageTitleSuffix == null) ? string.Empty : this.PageTitleSuffix.ToString()).GetHashCode() ^ 
					((this.DefaultTitle == null) ? string.Empty : this.DefaultTitle.ToString()).GetHashCode() ^ 
					((this.HomeTitle == null) ? string.Empty : this.HomeTitle.ToString()).GetHashCode() ^ 
					((this.DefaultDescription == null) ? string.Empty : this.DefaultDescription.ToString()).GetHashCode() ^ 
					((this.HomeDescription == null) ? string.Empty : this.HomeDescription.ToString()).GetHashCode() ^ 
					((this.DefaultKeywords == null) ? string.Empty : this.DefaultKeywords.ToString()).GetHashCode() ^ 
					((this.HomeKeywords == null) ? string.Empty : this.HomeKeywords.ToString()).GetHashCode() ^ 
					this.ShowFaceBookButton.GetHashCode() ^ 
					this.UseAdvertiserFilter.GetHashCode() ^ 
					((this.MerchantId == null) ? string.Empty : this.MerchantId.ToString()).GetHashCode() ^ 
					this.ShowTwitterButton.GetHashCode() ^ 
					this.ShowJobAlertButton.GetHashCode() ^ 
					this.ShowLinkedInButton.GetHashCode() ^ 
					((this.SiteFavIconId == null) ? string.Empty : this.SiteFavIconId.ToString()).GetHashCode() ^ 
					((this.SiteDocType == null) ? string.Empty : this.SiteDocType.ToString()).GetHashCode() ^ 
					((this.CurrencySymbol == null) ? string.Empty : this.CurrencySymbol.ToString()).GetHashCode() ^ 
					((this.FtpFolderLocation == null) ? string.Empty : this.FtpFolderLocation.ToString()).GetHashCode() ^ 
					((this.MetaTags == null) ? string.Empty : this.MetaTags.ToString()).GetHashCode() ^ 
					((this.SystemMetaTags == null) ? string.Empty : this.SystemMetaTags.ToString()).GetHashCode() ^ 
					((this.MemberRegistrationNotification == null) ? string.Empty : this.MemberRegistrationNotification.ToString()).GetHashCode() ^ 
					((this.LinkedInApi == null) ? string.Empty : this.LinkedInApi.ToString()).GetHashCode() ^ 
					((this.LinkedInLogo == null) ? string.Empty : this.LinkedInLogo.ToString()).GetHashCode() ^ 
					((this.LinkedInCompanyId == null) ? string.Empty : this.LinkedInCompanyId.ToString()).GetHashCode() ^ 
					((this.LinkedInEmail == null) ? string.Empty : this.LinkedInEmail.ToString()).GetHashCode() ^ 
					((this.PrivacySettings == null) ? string.Empty : this.PrivacySettings.ToString()).GetHashCode() ^ 
					this.WwwRedirect.GetHashCode() ^ 
					this.AllowAdvertiser.GetHashCode() ^ 
					((this.LinkedInApiSecret == null) ? string.Empty : this.LinkedInApiSecret.ToString()).GetHashCode() ^ 
					((this.GoogleClientId == null) ? string.Empty : this.GoogleClientId.ToString()).GetHashCode() ^ 
					((this.GoogleClientSecret == null) ? string.Empty : this.GoogleClientSecret.ToString()).GetHashCode() ^ 
					((this.FacebookAppId == null) ? string.Empty : this.FacebookAppId.ToString()).GetHashCode() ^ 
					((this.FacebookAppSecret == null) ? string.Empty : this.FacebookAppSecret.ToString()).GetHashCode() ^ 
					((this.LinkedInButtonSize == null) ? string.Empty : this.LinkedInButtonSize.ToString()).GetHashCode() ^ 
					((this.DefaultCountryId == null) ? string.Empty : this.DefaultCountryId.ToString()).GetHashCode() ^ 
					((this.PayPalUsername == null) ? string.Empty : this.PayPalUsername.ToString()).GetHashCode() ^ 
					((this.PayPalPassword == null) ? string.Empty : this.PayPalPassword.ToString()).GetHashCode() ^ 
					((this.PayPalSignature == null) ? string.Empty : this.PayPalSignature.ToString()).GetHashCode() ^ 
					((this.SecurePayMerchantId == null) ? string.Empty : this.SecurePayMerchantId.ToString()).GetHashCode() ^ 
					((this.SecurePayPassword == null) ? string.Empty : this.SecurePayPassword.ToString()).GetHashCode() ^ 
					this.UsingSsl.GetHashCode() ^ 
					this.UseCustomProfessionRole.GetHashCode() ^ 
					this.GenerateJobXml.GetHashCode() ^ 
					((this.IsPrivateSite == null) ? string.Empty : this.IsPrivateSite.ToString()).GetHashCode() ^ 
					((this.PrivateRedirectUrl == null) ? string.Empty : this.PrivateRedirectUrl.ToString()).GetHashCode() ^ 
					((this.EnableJobCustomQuestionnaire == null) ? string.Empty : this.EnableJobCustomQuestionnaire.ToString()).GetHashCode() ^ 
					((this.JobApplicationTypeId == null) ? string.Empty : this.JobApplicationTypeId.ToString()).GetHashCode() ^ 
					((this.JobScreeningProcess == null) ? string.Empty : this.JobScreeningProcess.ToString()).GetHashCode() ^ 
					((this.AdvertiserApprovalProcess == null) ? string.Empty : this.AdvertiserApprovalProcess.ToString()).GetHashCode() ^ 
					this.SiteType.GetHashCode() ^ 
					this.EnableSsl.GetHashCode() ^ 
					this.Gst.GetHashCode() ^ 
					((this.GstLabel == null) ? string.Empty : this.GstLabel.ToString()).GetHashCode() ^ 
					this.NumberOfPremiumJobs.GetHashCode() ^ 
					this.PremiumJobDays.GetHashCode() ^ 
					this.DisplayPremiumJobsOnResults.GetHashCode() ^ 
					this.JobExpiryNotification.GetHashCode() ^ 
					this.CurrencyId.GetHashCode() ^ 
					((this.PayPalClientId == null) ? string.Empty : this.PayPalClientId.ToString()).GetHashCode() ^ 
					((this.PayPalClientSecret == null) ? string.Empty : this.PayPalClientSecret.ToString()).GetHashCode() ^ 
					((this.PaypalUser == null) ? string.Empty : this.PaypalUser.ToString()).GetHashCode() ^ 
					((this.PaypalProPassword == null) ? string.Empty : this.PaypalProPassword.ToString()).GetHashCode() ^ 
					((this.PaypalVendor == null) ? string.Empty : this.PaypalVendor.ToString()).GetHashCode() ^ 
					((this.PaypalPartner == null) ? string.Empty : this.PaypalPartner.ToString()).GetHashCode() ^ 
					((this.InvoiceSiteInfo == null) ? string.Empty : this.InvoiceSiteInfo.ToString()).GetHashCode() ^ 
					((this.InvoiceSiteFooter == null) ? string.Empty : this.InvoiceSiteFooter.ToString()).GetHashCode() ^ 
					this.EnableTermsAndConditions.GetHashCode() ^ 
					((this.DefaultEmailLanguageId == null) ? string.Empty : this.DefaultEmailLanguageId.ToString()).GetHashCode() ^ 
					((this.GoogleTagManager == null) ? string.Empty : this.GoogleTagManager.ToString()).GetHashCode() ^ 
					((this.GoogleAnalytics == null) ? string.Empty : this.GoogleAnalytics.ToString()).GetHashCode() ^ 
					((this.GoogleWebMaster == null) ? string.Empty : this.GoogleWebMaster.ToString()).GetHashCode() ^ 
					this.EnablePeopleSearch.GetHashCode() ^ 
					this.GlobalDateFormat.GetHashCode() ^ 
					this.TimeZone.GetHashCode() ^ 
					((this.GlobalFolder == null) ? string.Empty : this.GlobalFolder.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="GlobalSettingsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(GlobalSettingsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="GlobalSettingsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="GlobalSettingsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="GlobalSettingsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(GlobalSettingsBase Object1, GlobalSettingsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.GlobalSettingId != Object2.GlobalSettingId)
				equal = false;
			if (Object1.SiteId != Object2.SiteId)
				equal = false;
			if (Object1.DefaultLanguageId != Object2.DefaultLanguageId)
				equal = false;
			if ( Object1.DefaultDynamicPageId != null && Object2.DefaultDynamicPageId != null )
			{
				if (Object1.DefaultDynamicPageId != Object2.DefaultDynamicPageId)
					equal = false;
			}
			else if (Object1.DefaultDynamicPageId == null ^ Object2.DefaultDynamicPageId == null )
			{
				equal = false;
			}
			if (Object1.PublicJobsSearch != Object2.PublicJobsSearch)
				equal = false;
			if (Object1.PublicMembersSearch != Object2.PublicMembersSearch)
				equal = false;
			if (Object1.PublicCompaniesSearch != Object2.PublicCompaniesSearch)
				equal = false;
			if (Object1.PublicSponsoredAdverts != Object2.PublicSponsoredAdverts)
				equal = false;
			if (Object1.PrivateJobs != Object2.PrivateJobs)
				equal = false;
			if (Object1.PrivateMembers != Object2.PrivateMembers)
				equal = false;
			if (Object1.PrivateCompanies != Object2.PrivateCompanies)
				equal = false;
			if (Object1.LastModifiedBy != Object2.LastModifiedBy)
				equal = false;
			if (Object1.LastModified != Object2.LastModified)
				equal = false;
			if ( Object1.PageTitlePrefix != null && Object2.PageTitlePrefix != null )
			{
				if (Object1.PageTitlePrefix != Object2.PageTitlePrefix)
					equal = false;
			}
			else if (Object1.PageTitlePrefix == null ^ Object2.PageTitlePrefix == null )
			{
				equal = false;
			}
			if ( Object1.PageTitleSuffix != null && Object2.PageTitleSuffix != null )
			{
				if (Object1.PageTitleSuffix != Object2.PageTitleSuffix)
					equal = false;
			}
			else if (Object1.PageTitleSuffix == null ^ Object2.PageTitleSuffix == null )
			{
				equal = false;
			}
			if ( Object1.DefaultTitle != null && Object2.DefaultTitle != null )
			{
				if (Object1.DefaultTitle != Object2.DefaultTitle)
					equal = false;
			}
			else if (Object1.DefaultTitle == null ^ Object2.DefaultTitle == null )
			{
				equal = false;
			}
			if ( Object1.HomeTitle != null && Object2.HomeTitle != null )
			{
				if (Object1.HomeTitle != Object2.HomeTitle)
					equal = false;
			}
			else if (Object1.HomeTitle == null ^ Object2.HomeTitle == null )
			{
				equal = false;
			}
			if ( Object1.DefaultDescription != null && Object2.DefaultDescription != null )
			{
				if (Object1.DefaultDescription != Object2.DefaultDescription)
					equal = false;
			}
			else if (Object1.DefaultDescription == null ^ Object2.DefaultDescription == null )
			{
				equal = false;
			}
			if ( Object1.HomeDescription != null && Object2.HomeDescription != null )
			{
				if (Object1.HomeDescription != Object2.HomeDescription)
					equal = false;
			}
			else if (Object1.HomeDescription == null ^ Object2.HomeDescription == null )
			{
				equal = false;
			}
			if ( Object1.DefaultKeywords != null && Object2.DefaultKeywords != null )
			{
				if (Object1.DefaultKeywords != Object2.DefaultKeywords)
					equal = false;
			}
			else if (Object1.DefaultKeywords == null ^ Object2.DefaultKeywords == null )
			{
				equal = false;
			}
			if ( Object1.HomeKeywords != null && Object2.HomeKeywords != null )
			{
				if (Object1.HomeKeywords != Object2.HomeKeywords)
					equal = false;
			}
			else if (Object1.HomeKeywords == null ^ Object2.HomeKeywords == null )
			{
				equal = false;
			}
			if (Object1.ShowFaceBookButton != Object2.ShowFaceBookButton)
				equal = false;
			if (Object1.UseAdvertiserFilter != Object2.UseAdvertiserFilter)
				equal = false;
			if ( Object1.MerchantId != null && Object2.MerchantId != null )
			{
				if (Object1.MerchantId != Object2.MerchantId)
					equal = false;
			}
			else if (Object1.MerchantId == null ^ Object2.MerchantId == null )
			{
				equal = false;
			}
			if (Object1.ShowTwitterButton != Object2.ShowTwitterButton)
				equal = false;
			if (Object1.ShowJobAlertButton != Object2.ShowJobAlertButton)
				equal = false;
			if (Object1.ShowLinkedInButton != Object2.ShowLinkedInButton)
				equal = false;
			if ( Object1.SiteFavIconId != null && Object2.SiteFavIconId != null )
			{
				if (Object1.SiteFavIconId != Object2.SiteFavIconId)
					equal = false;
			}
			else if (Object1.SiteFavIconId == null ^ Object2.SiteFavIconId == null )
			{
				equal = false;
			}
			if ( Object1.SiteDocType != null && Object2.SiteDocType != null )
			{
				if (Object1.SiteDocType != Object2.SiteDocType)
					equal = false;
			}
			else if (Object1.SiteDocType == null ^ Object2.SiteDocType == null )
			{
				equal = false;
			}
			if ( Object1.CurrencySymbol != null && Object2.CurrencySymbol != null )
			{
				if (Object1.CurrencySymbol != Object2.CurrencySymbol)
					equal = false;
			}
			else if (Object1.CurrencySymbol == null ^ Object2.CurrencySymbol == null )
			{
				equal = false;
			}
			if ( Object1.FtpFolderLocation != null && Object2.FtpFolderLocation != null )
			{
				if (Object1.FtpFolderLocation != Object2.FtpFolderLocation)
					equal = false;
			}
			else if (Object1.FtpFolderLocation == null ^ Object2.FtpFolderLocation == null )
			{
				equal = false;
			}
			if ( Object1.MetaTags != null && Object2.MetaTags != null )
			{
				if (Object1.MetaTags != Object2.MetaTags)
					equal = false;
			}
			else if (Object1.MetaTags == null ^ Object2.MetaTags == null )
			{
				equal = false;
			}
			if ( Object1.SystemMetaTags != null && Object2.SystemMetaTags != null )
			{
				if (Object1.SystemMetaTags != Object2.SystemMetaTags)
					equal = false;
			}
			else if (Object1.SystemMetaTags == null ^ Object2.SystemMetaTags == null )
			{
				equal = false;
			}
			if ( Object1.MemberRegistrationNotification != null && Object2.MemberRegistrationNotification != null )
			{
				if (Object1.MemberRegistrationNotification != Object2.MemberRegistrationNotification)
					equal = false;
			}
			else if (Object1.MemberRegistrationNotification == null ^ Object2.MemberRegistrationNotification == null )
			{
				equal = false;
			}
			if ( Object1.LinkedInApi != null && Object2.LinkedInApi != null )
			{
				if (Object1.LinkedInApi != Object2.LinkedInApi)
					equal = false;
			}
			else if (Object1.LinkedInApi == null ^ Object2.LinkedInApi == null )
			{
				equal = false;
			}
			if ( Object1.LinkedInLogo != null && Object2.LinkedInLogo != null )
			{
				if (Object1.LinkedInLogo != Object2.LinkedInLogo)
					equal = false;
			}
			else if (Object1.LinkedInLogo == null ^ Object2.LinkedInLogo == null )
			{
				equal = false;
			}
			if ( Object1.LinkedInCompanyId != null && Object2.LinkedInCompanyId != null )
			{
				if (Object1.LinkedInCompanyId != Object2.LinkedInCompanyId)
					equal = false;
			}
			else if (Object1.LinkedInCompanyId == null ^ Object2.LinkedInCompanyId == null )
			{
				equal = false;
			}
			if ( Object1.LinkedInEmail != null && Object2.LinkedInEmail != null )
			{
				if (Object1.LinkedInEmail != Object2.LinkedInEmail)
					equal = false;
			}
			else if (Object1.LinkedInEmail == null ^ Object2.LinkedInEmail == null )
			{
				equal = false;
			}
			if ( Object1.PrivacySettings != null && Object2.PrivacySettings != null )
			{
				if (Object1.PrivacySettings != Object2.PrivacySettings)
					equal = false;
			}
			else if (Object1.PrivacySettings == null ^ Object2.PrivacySettings == null )
			{
				equal = false;
			}
			if (Object1.WwwRedirect != Object2.WwwRedirect)
				equal = false;
			if (Object1.AllowAdvertiser != Object2.AllowAdvertiser)
				equal = false;
			if ( Object1.LinkedInApiSecret != null && Object2.LinkedInApiSecret != null )
			{
				if (Object1.LinkedInApiSecret != Object2.LinkedInApiSecret)
					equal = false;
			}
			else if (Object1.LinkedInApiSecret == null ^ Object2.LinkedInApiSecret == null )
			{
				equal = false;
			}
			if ( Object1.GoogleClientId != null && Object2.GoogleClientId != null )
			{
				if (Object1.GoogleClientId != Object2.GoogleClientId)
					equal = false;
			}
			else if (Object1.GoogleClientId == null ^ Object2.GoogleClientId == null )
			{
				equal = false;
			}
			if ( Object1.GoogleClientSecret != null && Object2.GoogleClientSecret != null )
			{
				if (Object1.GoogleClientSecret != Object2.GoogleClientSecret)
					equal = false;
			}
			else if (Object1.GoogleClientSecret == null ^ Object2.GoogleClientSecret == null )
			{
				equal = false;
			}
			if ( Object1.FacebookAppId != null && Object2.FacebookAppId != null )
			{
				if (Object1.FacebookAppId != Object2.FacebookAppId)
					equal = false;
			}
			else if (Object1.FacebookAppId == null ^ Object2.FacebookAppId == null )
			{
				equal = false;
			}
			if ( Object1.FacebookAppSecret != null && Object2.FacebookAppSecret != null )
			{
				if (Object1.FacebookAppSecret != Object2.FacebookAppSecret)
					equal = false;
			}
			else if (Object1.FacebookAppSecret == null ^ Object2.FacebookAppSecret == null )
			{
				equal = false;
			}
			if ( Object1.LinkedInButtonSize != null && Object2.LinkedInButtonSize != null )
			{
				if (Object1.LinkedInButtonSize != Object2.LinkedInButtonSize)
					equal = false;
			}
			else if (Object1.LinkedInButtonSize == null ^ Object2.LinkedInButtonSize == null )
			{
				equal = false;
			}
			if ( Object1.DefaultCountryId != null && Object2.DefaultCountryId != null )
			{
				if (Object1.DefaultCountryId != Object2.DefaultCountryId)
					equal = false;
			}
			else if (Object1.DefaultCountryId == null ^ Object2.DefaultCountryId == null )
			{
				equal = false;
			}
			if ( Object1.PayPalUsername != null && Object2.PayPalUsername != null )
			{
				if (Object1.PayPalUsername != Object2.PayPalUsername)
					equal = false;
			}
			else if (Object1.PayPalUsername == null ^ Object2.PayPalUsername == null )
			{
				equal = false;
			}
			if ( Object1.PayPalPassword != null && Object2.PayPalPassword != null )
			{
				if (Object1.PayPalPassword != Object2.PayPalPassword)
					equal = false;
			}
			else if (Object1.PayPalPassword == null ^ Object2.PayPalPassword == null )
			{
				equal = false;
			}
			if ( Object1.PayPalSignature != null && Object2.PayPalSignature != null )
			{
				if (Object1.PayPalSignature != Object2.PayPalSignature)
					equal = false;
			}
			else if (Object1.PayPalSignature == null ^ Object2.PayPalSignature == null )
			{
				equal = false;
			}
			if ( Object1.SecurePayMerchantId != null && Object2.SecurePayMerchantId != null )
			{
				if (Object1.SecurePayMerchantId != Object2.SecurePayMerchantId)
					equal = false;
			}
			else if (Object1.SecurePayMerchantId == null ^ Object2.SecurePayMerchantId == null )
			{
				equal = false;
			}
			if ( Object1.SecurePayPassword != null && Object2.SecurePayPassword != null )
			{
				if (Object1.SecurePayPassword != Object2.SecurePayPassword)
					equal = false;
			}
			else if (Object1.SecurePayPassword == null ^ Object2.SecurePayPassword == null )
			{
				equal = false;
			}
			if (Object1.UsingSsl != Object2.UsingSsl)
				equal = false;
			if (Object1.UseCustomProfessionRole != Object2.UseCustomProfessionRole)
				equal = false;
			if (Object1.GenerateJobXml != Object2.GenerateJobXml)
				equal = false;
			if ( Object1.IsPrivateSite != null && Object2.IsPrivateSite != null )
			{
				if (Object1.IsPrivateSite != Object2.IsPrivateSite)
					equal = false;
			}
			else if (Object1.IsPrivateSite == null ^ Object2.IsPrivateSite == null )
			{
				equal = false;
			}
			if ( Object1.PrivateRedirectUrl != null && Object2.PrivateRedirectUrl != null )
			{
				if (Object1.PrivateRedirectUrl != Object2.PrivateRedirectUrl)
					equal = false;
			}
			else if (Object1.PrivateRedirectUrl == null ^ Object2.PrivateRedirectUrl == null )
			{
				equal = false;
			}
			if ( Object1.EnableJobCustomQuestionnaire != null && Object2.EnableJobCustomQuestionnaire != null )
			{
				if (Object1.EnableJobCustomQuestionnaire != Object2.EnableJobCustomQuestionnaire)
					equal = false;
			}
			else if (Object1.EnableJobCustomQuestionnaire == null ^ Object2.EnableJobCustomQuestionnaire == null )
			{
				equal = false;
			}
			if ( Object1.JobApplicationTypeId != null && Object2.JobApplicationTypeId != null )
			{
				if (Object1.JobApplicationTypeId != Object2.JobApplicationTypeId)
					equal = false;
			}
			else if (Object1.JobApplicationTypeId == null ^ Object2.JobApplicationTypeId == null )
			{
				equal = false;
			}
			if ( Object1.JobScreeningProcess != null && Object2.JobScreeningProcess != null )
			{
				if (Object1.JobScreeningProcess != Object2.JobScreeningProcess)
					equal = false;
			}
			else if (Object1.JobScreeningProcess == null ^ Object2.JobScreeningProcess == null )
			{
				equal = false;
			}
			if ( Object1.AdvertiserApprovalProcess != null && Object2.AdvertiserApprovalProcess != null )
			{
				if (Object1.AdvertiserApprovalProcess != Object2.AdvertiserApprovalProcess)
					equal = false;
			}
			else if (Object1.AdvertiserApprovalProcess == null ^ Object2.AdvertiserApprovalProcess == null )
			{
				equal = false;
			}
			if (Object1.SiteType != Object2.SiteType)
				equal = false;
			if (Object1.EnableSsl != Object2.EnableSsl)
				equal = false;
			if (Object1.Gst != Object2.Gst)
				equal = false;
			if ( Object1.GstLabel != null && Object2.GstLabel != null )
			{
				if (Object1.GstLabel != Object2.GstLabel)
					equal = false;
			}
			else if (Object1.GstLabel == null ^ Object2.GstLabel == null )
			{
				equal = false;
			}
			if (Object1.NumberOfPremiumJobs != Object2.NumberOfPremiumJobs)
				equal = false;
			if (Object1.PremiumJobDays != Object2.PremiumJobDays)
				equal = false;
			if (Object1.DisplayPremiumJobsOnResults != Object2.DisplayPremiumJobsOnResults)
				equal = false;
			if (Object1.JobExpiryNotification != Object2.JobExpiryNotification)
				equal = false;
			if (Object1.CurrencyId != Object2.CurrencyId)
				equal = false;
			if ( Object1.PayPalClientId != null && Object2.PayPalClientId != null )
			{
				if (Object1.PayPalClientId != Object2.PayPalClientId)
					equal = false;
			}
			else if (Object1.PayPalClientId == null ^ Object2.PayPalClientId == null )
			{
				equal = false;
			}
			if ( Object1.PayPalClientSecret != null && Object2.PayPalClientSecret != null )
			{
				if (Object1.PayPalClientSecret != Object2.PayPalClientSecret)
					equal = false;
			}
			else if (Object1.PayPalClientSecret == null ^ Object2.PayPalClientSecret == null )
			{
				equal = false;
			}
			if ( Object1.PaypalUser != null && Object2.PaypalUser != null )
			{
				if (Object1.PaypalUser != Object2.PaypalUser)
					equal = false;
			}
			else if (Object1.PaypalUser == null ^ Object2.PaypalUser == null )
			{
				equal = false;
			}
			if ( Object1.PaypalProPassword != null && Object2.PaypalProPassword != null )
			{
				if (Object1.PaypalProPassword != Object2.PaypalProPassword)
					equal = false;
			}
			else if (Object1.PaypalProPassword == null ^ Object2.PaypalProPassword == null )
			{
				equal = false;
			}
			if ( Object1.PaypalVendor != null && Object2.PaypalVendor != null )
			{
				if (Object1.PaypalVendor != Object2.PaypalVendor)
					equal = false;
			}
			else if (Object1.PaypalVendor == null ^ Object2.PaypalVendor == null )
			{
				equal = false;
			}
			if ( Object1.PaypalPartner != null && Object2.PaypalPartner != null )
			{
				if (Object1.PaypalPartner != Object2.PaypalPartner)
					equal = false;
			}
			else if (Object1.PaypalPartner == null ^ Object2.PaypalPartner == null )
			{
				equal = false;
			}
			if ( Object1.InvoiceSiteInfo != null && Object2.InvoiceSiteInfo != null )
			{
				if (Object1.InvoiceSiteInfo != Object2.InvoiceSiteInfo)
					equal = false;
			}
			else if (Object1.InvoiceSiteInfo == null ^ Object2.InvoiceSiteInfo == null )
			{
				equal = false;
			}
			if ( Object1.InvoiceSiteFooter != null && Object2.InvoiceSiteFooter != null )
			{
				if (Object1.InvoiceSiteFooter != Object2.InvoiceSiteFooter)
					equal = false;
			}
			else if (Object1.InvoiceSiteFooter == null ^ Object2.InvoiceSiteFooter == null )
			{
				equal = false;
			}
			if (Object1.EnableTermsAndConditions != Object2.EnableTermsAndConditions)
				equal = false;
			if ( Object1.DefaultEmailLanguageId != null && Object2.DefaultEmailLanguageId != null )
			{
				if (Object1.DefaultEmailLanguageId != Object2.DefaultEmailLanguageId)
					equal = false;
			}
			else if (Object1.DefaultEmailLanguageId == null ^ Object2.DefaultEmailLanguageId == null )
			{
				equal = false;
			}
			if ( Object1.GoogleTagManager != null && Object2.GoogleTagManager != null )
			{
				if (Object1.GoogleTagManager != Object2.GoogleTagManager)
					equal = false;
			}
			else if (Object1.GoogleTagManager == null ^ Object2.GoogleTagManager == null )
			{
				equal = false;
			}
			if ( Object1.GoogleAnalytics != null && Object2.GoogleAnalytics != null )
			{
				if (Object1.GoogleAnalytics != Object2.GoogleAnalytics)
					equal = false;
			}
			else if (Object1.GoogleAnalytics == null ^ Object2.GoogleAnalytics == null )
			{
				equal = false;
			}
			if ( Object1.GoogleWebMaster != null && Object2.GoogleWebMaster != null )
			{
				if (Object1.GoogleWebMaster != Object2.GoogleWebMaster)
					equal = false;
			}
			else if (Object1.GoogleWebMaster == null ^ Object2.GoogleWebMaster == null )
			{
				equal = false;
			}
			if (Object1.EnablePeopleSearch != Object2.EnablePeopleSearch)
				equal = false;
			if (Object1.GlobalDateFormat != Object2.GlobalDateFormat)
				equal = false;
			if (Object1.TimeZone != Object2.TimeZone)
				equal = false;
			if ( Object1.GlobalFolder != null && Object2.GlobalFolder != null )
			{
				if (Object1.GlobalFolder != Object2.GlobalFolder)
					equal = false;
			}
			else if (Object1.GlobalFolder == null ^ Object2.GlobalFolder == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((GlobalSettingsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static GlobalSettingsComparer GetComparer()
        {
            return new GlobalSettingsComparer();
        }
        */

        // Comparer delegates back to GlobalSettings
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(GlobalSettings rhs, GlobalSettingsColumn which)
        {
            switch (which)
            {
            	
            	
            	case GlobalSettingsColumn.GlobalSettingId:
            		return this.GlobalSettingId.CompareTo(rhs.GlobalSettingId);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.SiteId:
            		return this.SiteId.CompareTo(rhs.SiteId);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.DefaultLanguageId:
            		return this.DefaultLanguageId.CompareTo(rhs.DefaultLanguageId);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.DefaultDynamicPageId:
            		return this.DefaultDynamicPageId.Value.CompareTo(rhs.DefaultDynamicPageId.Value);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PublicJobsSearch:
            		return this.PublicJobsSearch.CompareTo(rhs.PublicJobsSearch);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PublicMembersSearch:
            		return this.PublicMembersSearch.CompareTo(rhs.PublicMembersSearch);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PublicCompaniesSearch:
            		return this.PublicCompaniesSearch.CompareTo(rhs.PublicCompaniesSearch);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PublicSponsoredAdverts:
            		return this.PublicSponsoredAdverts.CompareTo(rhs.PublicSponsoredAdverts);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PrivateJobs:
            		return this.PrivateJobs.CompareTo(rhs.PrivateJobs);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PrivateMembers:
            		return this.PrivateMembers.CompareTo(rhs.PrivateMembers);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PrivateCompanies:
            		return this.PrivateCompanies.CompareTo(rhs.PrivateCompanies);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.LastModifiedBy:
            		return this.LastModifiedBy.CompareTo(rhs.LastModifiedBy);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.LastModified:
            		return this.LastModified.CompareTo(rhs.LastModified);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PageTitlePrefix:
            		return this.PageTitlePrefix.CompareTo(rhs.PageTitlePrefix);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PageTitleSuffix:
            		return this.PageTitleSuffix.CompareTo(rhs.PageTitleSuffix);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.DefaultTitle:
            		return this.DefaultTitle.CompareTo(rhs.DefaultTitle);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.HomeTitle:
            		return this.HomeTitle.CompareTo(rhs.HomeTitle);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.DefaultDescription:
            		return this.DefaultDescription.CompareTo(rhs.DefaultDescription);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.HomeDescription:
            		return this.HomeDescription.CompareTo(rhs.HomeDescription);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.DefaultKeywords:
            		return this.DefaultKeywords.CompareTo(rhs.DefaultKeywords);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.HomeKeywords:
            		return this.HomeKeywords.CompareTo(rhs.HomeKeywords);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.ShowFaceBookButton:
            		return this.ShowFaceBookButton.CompareTo(rhs.ShowFaceBookButton);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.UseAdvertiserFilter:
            		return this.UseAdvertiserFilter.CompareTo(rhs.UseAdvertiserFilter);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.MerchantId:
            		return this.MerchantId.Value.CompareTo(rhs.MerchantId.Value);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.ShowTwitterButton:
            		return this.ShowTwitterButton.CompareTo(rhs.ShowTwitterButton);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.ShowJobAlertButton:
            		return this.ShowJobAlertButton.CompareTo(rhs.ShowJobAlertButton);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.ShowLinkedInButton:
            		return this.ShowLinkedInButton.CompareTo(rhs.ShowLinkedInButton);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.SiteFavIconId:
            		return this.SiteFavIconId.Value.CompareTo(rhs.SiteFavIconId.Value);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.SiteDocType:
            		return this.SiteDocType.CompareTo(rhs.SiteDocType);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.CurrencySymbol:
            		return this.CurrencySymbol.CompareTo(rhs.CurrencySymbol);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.FtpFolderLocation:
            		return this.FtpFolderLocation.CompareTo(rhs.FtpFolderLocation);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.MetaTags:
            		return this.MetaTags.CompareTo(rhs.MetaTags);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.SystemMetaTags:
            		return this.SystemMetaTags.CompareTo(rhs.SystemMetaTags);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.MemberRegistrationNotification:
            		return this.MemberRegistrationNotification.CompareTo(rhs.MemberRegistrationNotification);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.LinkedInApi:
            		return this.LinkedInApi.CompareTo(rhs.LinkedInApi);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.LinkedInLogo:
            		return this.LinkedInLogo.CompareTo(rhs.LinkedInLogo);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.LinkedInCompanyId:
            		return this.LinkedInCompanyId.Value.CompareTo(rhs.LinkedInCompanyId.Value);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.LinkedInEmail:
            		return this.LinkedInEmail.CompareTo(rhs.LinkedInEmail);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PrivacySettings:
            		return this.PrivacySettings.CompareTo(rhs.PrivacySettings);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.WwwRedirect:
            		return this.WwwRedirect.CompareTo(rhs.WwwRedirect);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.AllowAdvertiser:
            		return this.AllowAdvertiser.CompareTo(rhs.AllowAdvertiser);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.LinkedInApiSecret:
            		return this.LinkedInApiSecret.CompareTo(rhs.LinkedInApiSecret);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.GoogleClientId:
            		return this.GoogleClientId.CompareTo(rhs.GoogleClientId);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.GoogleClientSecret:
            		return this.GoogleClientSecret.CompareTo(rhs.GoogleClientSecret);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.FacebookAppId:
            		return this.FacebookAppId.CompareTo(rhs.FacebookAppId);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.FacebookAppSecret:
            		return this.FacebookAppSecret.CompareTo(rhs.FacebookAppSecret);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.LinkedInButtonSize:
            		return this.LinkedInButtonSize.Value.CompareTo(rhs.LinkedInButtonSize.Value);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.DefaultCountryId:
            		return this.DefaultCountryId.Value.CompareTo(rhs.DefaultCountryId.Value);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PayPalUsername:
            		return this.PayPalUsername.CompareTo(rhs.PayPalUsername);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PayPalPassword:
            		return this.PayPalPassword.CompareTo(rhs.PayPalPassword);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PayPalSignature:
            		return this.PayPalSignature.CompareTo(rhs.PayPalSignature);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.SecurePayMerchantId:
            		return this.SecurePayMerchantId.CompareTo(rhs.SecurePayMerchantId);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.SecurePayPassword:
            		return this.SecurePayPassword.CompareTo(rhs.SecurePayPassword);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.UsingSsl:
            		return this.UsingSsl.CompareTo(rhs.UsingSsl);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.UseCustomProfessionRole:
            		return this.UseCustomProfessionRole.CompareTo(rhs.UseCustomProfessionRole);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.GenerateJobXml:
            		return this.GenerateJobXml.CompareTo(rhs.GenerateJobXml);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.IsPrivateSite:
            		return this.IsPrivateSite.Value.CompareTo(rhs.IsPrivateSite.Value);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PrivateRedirectUrl:
            		return this.PrivateRedirectUrl.CompareTo(rhs.PrivateRedirectUrl);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.EnableJobCustomQuestionnaire:
            		return this.EnableJobCustomQuestionnaire.Value.CompareTo(rhs.EnableJobCustomQuestionnaire.Value);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.JobApplicationTypeId:
            		return this.JobApplicationTypeId.Value.CompareTo(rhs.JobApplicationTypeId.Value);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.JobScreeningProcess:
            		return this.JobScreeningProcess.Value.CompareTo(rhs.JobScreeningProcess.Value);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.AdvertiserApprovalProcess:
            		return this.AdvertiserApprovalProcess.Value.CompareTo(rhs.AdvertiserApprovalProcess.Value);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.SiteType:
            		return this.SiteType.CompareTo(rhs.SiteType);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.EnableSsl:
            		return this.EnableSsl.CompareTo(rhs.EnableSsl);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.Gst:
            		return this.Gst.CompareTo(rhs.Gst);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.GstLabel:
            		return this.GstLabel.CompareTo(rhs.GstLabel);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.NumberOfPremiumJobs:
            		return this.NumberOfPremiumJobs.CompareTo(rhs.NumberOfPremiumJobs);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PremiumJobDays:
            		return this.PremiumJobDays.CompareTo(rhs.PremiumJobDays);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.DisplayPremiumJobsOnResults:
            		return this.DisplayPremiumJobsOnResults.CompareTo(rhs.DisplayPremiumJobsOnResults);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.JobExpiryNotification:
            		return this.JobExpiryNotification.CompareTo(rhs.JobExpiryNotification);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.CurrencyId:
            		return this.CurrencyId.CompareTo(rhs.CurrencyId);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PayPalClientId:
            		return this.PayPalClientId.CompareTo(rhs.PayPalClientId);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PayPalClientSecret:
            		return this.PayPalClientSecret.CompareTo(rhs.PayPalClientSecret);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PaypalUser:
            		return this.PaypalUser.CompareTo(rhs.PaypalUser);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PaypalProPassword:
            		return this.PaypalProPassword.CompareTo(rhs.PaypalProPassword);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PaypalVendor:
            		return this.PaypalVendor.CompareTo(rhs.PaypalVendor);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.PaypalPartner:
            		return this.PaypalPartner.CompareTo(rhs.PaypalPartner);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.InvoiceSiteInfo:
            		return this.InvoiceSiteInfo.CompareTo(rhs.InvoiceSiteInfo);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.InvoiceSiteFooter:
            		return this.InvoiceSiteFooter.CompareTo(rhs.InvoiceSiteFooter);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.EnableTermsAndConditions:
            		return this.EnableTermsAndConditions.CompareTo(rhs.EnableTermsAndConditions);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.DefaultEmailLanguageId:
            		return this.DefaultEmailLanguageId.Value.CompareTo(rhs.DefaultEmailLanguageId.Value);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.GoogleTagManager:
            		return this.GoogleTagManager.CompareTo(rhs.GoogleTagManager);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.GoogleAnalytics:
            		return this.GoogleAnalytics.CompareTo(rhs.GoogleAnalytics);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.GoogleWebMaster:
            		return this.GoogleWebMaster.CompareTo(rhs.GoogleWebMaster);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.EnablePeopleSearch:
            		return this.EnablePeopleSearch.CompareTo(rhs.EnablePeopleSearch);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.GlobalDateFormat:
            		return this.GlobalDateFormat.CompareTo(rhs.GlobalDateFormat);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.TimeZone:
            		return this.TimeZone.CompareTo(rhs.TimeZone);
            		
            		                 
            	
            	
            	case GlobalSettingsColumn.GlobalFolder:
            		return this.GlobalFolder.CompareTo(rhs.GlobalFolder);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<GlobalSettingsKey> Members
		
		// member variable for the EntityId property
		private GlobalSettingsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual GlobalSettingsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new GlobalSettingsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("GlobalSettings")
					.Append("|").Append( this.GlobalSettingId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{89}{88}- GlobalSettingId: {0}{88}- SiteId: {1}{88}- DefaultLanguageId: {2}{88}- DefaultDynamicPageId: {3}{88}- PublicJobsSearch: {4}{88}- PublicMembersSearch: {5}{88}- PublicCompaniesSearch: {6}{88}- PublicSponsoredAdverts: {7}{88}- PrivateJobs: {8}{88}- PrivateMembers: {9}{88}- PrivateCompanies: {10}{88}- LastModifiedBy: {11}{88}- LastModified: {12}{88}- PageTitlePrefix: {13}{88}- PageTitleSuffix: {14}{88}- DefaultTitle: {15}{88}- HomeTitle: {16}{88}- DefaultDescription: {17}{88}- HomeDescription: {18}{88}- DefaultKeywords: {19}{88}- HomeKeywords: {20}{88}- ShowFaceBookButton: {21}{88}- UseAdvertiserFilter: {22}{88}- MerchantId: {23}{88}- ShowTwitterButton: {24}{88}- ShowJobAlertButton: {25}{88}- ShowLinkedInButton: {26}{88}- SiteFavIconId: {27}{88}- SiteDocType: {28}{88}- CurrencySymbol: {29}{88}- FtpFolderLocation: {30}{88}- MetaTags: {31}{88}- SystemMetaTags: {32}{88}- MemberRegistrationNotification: {33}{88}- LinkedInApi: {34}{88}- LinkedInLogo: {35}{88}- LinkedInCompanyId: {36}{88}- LinkedInEmail: {37}{88}- PrivacySettings: {38}{88}- WwwRedirect: {39}{88}- AllowAdvertiser: {40}{88}- LinkedInApiSecret: {41}{88}- GoogleClientId: {42}{88}- GoogleClientSecret: {43}{88}- FacebookAppId: {44}{88}- FacebookAppSecret: {45}{88}- LinkedInButtonSize: {46}{88}- DefaultCountryId: {47}{88}- PayPalUsername: {48}{88}- PayPalPassword: {49}{88}- PayPalSignature: {50}{88}- SecurePayMerchantId: {51}{88}- SecurePayPassword: {52}{88}- UsingSsl: {53}{88}- UseCustomProfessionRole: {54}{88}- GenerateJobXml: {55}{88}- IsPrivateSite: {56}{88}- PrivateRedirectUrl: {57}{88}- EnableJobCustomQuestionnaire: {58}{88}- JobApplicationTypeId: {59}{88}- JobScreeningProcess: {60}{88}- AdvertiserApprovalProcess: {61}{88}- SiteType: {62}{88}- EnableSsl: {63}{88}- Gst: {64}{88}- GstLabel: {65}{88}- NumberOfPremiumJobs: {66}{88}- PremiumJobDays: {67}{88}- DisplayPremiumJobsOnResults: {68}{88}- JobExpiryNotification: {69}{88}- CurrencyId: {70}{88}- PayPalClientId: {71}{88}- PayPalClientSecret: {72}{88}- PaypalUser: {73}{88}- PaypalProPassword: {74}{88}- PaypalVendor: {75}{88}- PaypalPartner: {76}{88}- InvoiceSiteInfo: {77}{88}- InvoiceSiteFooter: {78}{88}- EnableTermsAndConditions: {79}{88}- DefaultEmailLanguageId: {80}{88}- GoogleTagManager: {81}{88}- GoogleAnalytics: {82}{88}- GoogleWebMaster: {83}{88}- EnablePeopleSearch: {84}{88}- GlobalDateFormat: {85}{88}- TimeZone: {86}{88}- GlobalFolder: {87}{88}{90}", 
				this.GlobalSettingId,
				this.SiteId,
				this.DefaultLanguageId,
				(this.DefaultDynamicPageId == null) ? string.Empty : this.DefaultDynamicPageId.ToString(),
				this.PublicJobsSearch,
				this.PublicMembersSearch,
				this.PublicCompaniesSearch,
				this.PublicSponsoredAdverts,
				this.PrivateJobs,
				this.PrivateMembers,
				this.PrivateCompanies,
				this.LastModifiedBy,
				this.LastModified,
				(this.PageTitlePrefix == null) ? string.Empty : this.PageTitlePrefix.ToString(),
				(this.PageTitleSuffix == null) ? string.Empty : this.PageTitleSuffix.ToString(),
				(this.DefaultTitle == null) ? string.Empty : this.DefaultTitle.ToString(),
				(this.HomeTitle == null) ? string.Empty : this.HomeTitle.ToString(),
				(this.DefaultDescription == null) ? string.Empty : this.DefaultDescription.ToString(),
				(this.HomeDescription == null) ? string.Empty : this.HomeDescription.ToString(),
				(this.DefaultKeywords == null) ? string.Empty : this.DefaultKeywords.ToString(),
				(this.HomeKeywords == null) ? string.Empty : this.HomeKeywords.ToString(),
				this.ShowFaceBookButton,
				this.UseAdvertiserFilter,
				(this.MerchantId == null) ? string.Empty : this.MerchantId.ToString(),
				this.ShowTwitterButton,
				this.ShowJobAlertButton,
				this.ShowLinkedInButton,
				(this.SiteFavIconId == null) ? string.Empty : this.SiteFavIconId.ToString(),
				(this.SiteDocType == null) ? string.Empty : this.SiteDocType.ToString(),
				(this.CurrencySymbol == null) ? string.Empty : this.CurrencySymbol.ToString(),
				(this.FtpFolderLocation == null) ? string.Empty : this.FtpFolderLocation.ToString(),
				(this.MetaTags == null) ? string.Empty : this.MetaTags.ToString(),
				(this.SystemMetaTags == null) ? string.Empty : this.SystemMetaTags.ToString(),
				(this.MemberRegistrationNotification == null) ? string.Empty : this.MemberRegistrationNotification.ToString(),
				(this.LinkedInApi == null) ? string.Empty : this.LinkedInApi.ToString(),
				(this.LinkedInLogo == null) ? string.Empty : this.LinkedInLogo.ToString(),
				(this.LinkedInCompanyId == null) ? string.Empty : this.LinkedInCompanyId.ToString(),
				(this.LinkedInEmail == null) ? string.Empty : this.LinkedInEmail.ToString(),
				(this.PrivacySettings == null) ? string.Empty : this.PrivacySettings.ToString(),
				this.WwwRedirect,
				this.AllowAdvertiser,
				(this.LinkedInApiSecret == null) ? string.Empty : this.LinkedInApiSecret.ToString(),
				(this.GoogleClientId == null) ? string.Empty : this.GoogleClientId.ToString(),
				(this.GoogleClientSecret == null) ? string.Empty : this.GoogleClientSecret.ToString(),
				(this.FacebookAppId == null) ? string.Empty : this.FacebookAppId.ToString(),
				(this.FacebookAppSecret == null) ? string.Empty : this.FacebookAppSecret.ToString(),
				(this.LinkedInButtonSize == null) ? string.Empty : this.LinkedInButtonSize.ToString(),
				(this.DefaultCountryId == null) ? string.Empty : this.DefaultCountryId.ToString(),
				(this.PayPalUsername == null) ? string.Empty : this.PayPalUsername.ToString(),
				(this.PayPalPassword == null) ? string.Empty : this.PayPalPassword.ToString(),
				(this.PayPalSignature == null) ? string.Empty : this.PayPalSignature.ToString(),
				(this.SecurePayMerchantId == null) ? string.Empty : this.SecurePayMerchantId.ToString(),
				(this.SecurePayPassword == null) ? string.Empty : this.SecurePayPassword.ToString(),
				this.UsingSsl,
				this.UseCustomProfessionRole,
				this.GenerateJobXml,
				(this.IsPrivateSite == null) ? string.Empty : this.IsPrivateSite.ToString(),
				(this.PrivateRedirectUrl == null) ? string.Empty : this.PrivateRedirectUrl.ToString(),
				(this.EnableJobCustomQuestionnaire == null) ? string.Empty : this.EnableJobCustomQuestionnaire.ToString(),
				(this.JobApplicationTypeId == null) ? string.Empty : this.JobApplicationTypeId.ToString(),
				(this.JobScreeningProcess == null) ? string.Empty : this.JobScreeningProcess.ToString(),
				(this.AdvertiserApprovalProcess == null) ? string.Empty : this.AdvertiserApprovalProcess.ToString(),
				this.SiteType,
				this.EnableSsl,
				this.Gst,
				(this.GstLabel == null) ? string.Empty : this.GstLabel.ToString(),
				this.NumberOfPremiumJobs,
				this.PremiumJobDays,
				this.DisplayPremiumJobsOnResults,
				this.JobExpiryNotification,
				this.CurrencyId,
				(this.PayPalClientId == null) ? string.Empty : this.PayPalClientId.ToString(),
				(this.PayPalClientSecret == null) ? string.Empty : this.PayPalClientSecret.ToString(),
				(this.PaypalUser == null) ? string.Empty : this.PaypalUser.ToString(),
				(this.PaypalProPassword == null) ? string.Empty : this.PaypalProPassword.ToString(),
				(this.PaypalVendor == null) ? string.Empty : this.PaypalVendor.ToString(),
				(this.PaypalPartner == null) ? string.Empty : this.PaypalPartner.ToString(),
				(this.InvoiceSiteInfo == null) ? string.Empty : this.InvoiceSiteInfo.ToString(),
				(this.InvoiceSiteFooter == null) ? string.Empty : this.InvoiceSiteFooter.ToString(),
				this.EnableTermsAndConditions,
				(this.DefaultEmailLanguageId == null) ? string.Empty : this.DefaultEmailLanguageId.ToString(),
				(this.GoogleTagManager == null) ? string.Empty : this.GoogleTagManager.ToString(),
				(this.GoogleAnalytics == null) ? string.Empty : this.GoogleAnalytics.ToString(),
				(this.GoogleWebMaster == null) ? string.Empty : this.GoogleWebMaster.ToString(),
				this.EnablePeopleSearch,
				this.GlobalDateFormat,
				this.TimeZone,
				(this.GlobalFolder == null) ? string.Empty : this.GlobalFolder.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'GlobalSettings' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class GlobalSettingsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// GlobalSettingID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GlobalSettings"</remarks>
		public System.Int32 GlobalSettingId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SiteID : 
		/// </summary>
		public System.Int32		  SiteId = (int)0;
		
		/// <summary>
		/// DefaultLanguageID : 
		/// </summary>
		public System.Int32		  DefaultLanguageId = (int)0;
		
		/// <summary>
		/// DefaultDynamicPageID : 
		/// </summary>
		public System.Int32?		  DefaultDynamicPageId = null;
		
		/// <summary>
		/// PublicJobsSearch : 
		/// </summary>
		public System.Boolean		  PublicJobsSearch = false;
		
		/// <summary>
		/// PublicMembersSearch : 
		/// </summary>
		public System.Boolean		  PublicMembersSearch = false;
		
		/// <summary>
		/// PublicCompaniesSearch : 
		/// </summary>
		public System.Boolean		  PublicCompaniesSearch = false;
		
		/// <summary>
		/// PublicSponsoredAdverts : 
		/// </summary>
		public System.Boolean		  PublicSponsoredAdverts = false;
		
		/// <summary>
		/// PrivateJobs : 
		/// </summary>
		public System.Boolean		  PrivateJobs = false;
		
		/// <summary>
		/// PrivateMembers : 
		/// </summary>
		public System.Boolean		  PrivateMembers = false;
		
		/// <summary>
		/// PrivateCompanies : 
		/// </summary>
		public System.Boolean		  PrivateCompanies = false;
		
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		public System.Int32		  LastModifiedBy = (int)0;
		
		/// <summary>
		/// LastModified : 
		/// </summary>
		public System.DateTime		  LastModified = DateTime.MinValue;
		
		/// <summary>
		/// PageTitlePrefix : 
		/// </summary>
		public System.String		  PageTitlePrefix = null;
		
		/// <summary>
		/// PageTitleSuffix : 
		/// </summary>
		public System.String		  PageTitleSuffix = null;
		
		/// <summary>
		/// DefaultTitle : 
		/// </summary>
		public System.String		  DefaultTitle = null;
		
		/// <summary>
		/// HomeTitle : 
		/// </summary>
		public System.String		  HomeTitle = null;
		
		/// <summary>
		/// DefaultDescription : 
		/// </summary>
		public System.String		  DefaultDescription = null;
		
		/// <summary>
		/// HomeDescription : 
		/// </summary>
		public System.String		  HomeDescription = null;
		
		/// <summary>
		/// DefaultKeywords : 
		/// </summary>
		public System.String		  DefaultKeywords = null;
		
		/// <summary>
		/// HomeKeywords : 
		/// </summary>
		public System.String		  HomeKeywords = null;
		
		/// <summary>
		/// ShowFaceBookButton : 
		/// </summary>
		public System.Boolean		  ShowFaceBookButton = false;
		
		/// <summary>
		/// UseAdvertiserFilter : 
		/// </summary>
		public System.Int32		  UseAdvertiserFilter = (int)0;
		
		/// <summary>
		/// MerchantID : 
		/// </summary>
		public System.Int32?		  MerchantId = null;
		
		/// <summary>
		/// ShowTwitterButton : 
		/// </summary>
		public System.Boolean		  ShowTwitterButton = false;
		
		/// <summary>
		/// ShowJobAlertButton : 
		/// </summary>
		public System.Boolean		  ShowJobAlertButton = false;
		
		/// <summary>
		/// ShowLinkedInButton : 
		/// </summary>
		public System.Boolean		  ShowLinkedInButton = false;
		
		/// <summary>
		/// SiteFavIconID : 
		/// </summary>
		public System.Int32?		  SiteFavIconId = null;
		
		/// <summary>
		/// SiteDocType : 
		/// </summary>
		public System.String		  SiteDocType = null;
		
		/// <summary>
		/// CurrencySymbol : 
		/// </summary>
		public System.String		  CurrencySymbol = null;
		
		/// <summary>
		/// FtpFolderLocation : 
		/// </summary>
		public System.String		  FtpFolderLocation = null;
		
		/// <summary>
		/// MetaTags : 
		/// </summary>
		public System.String		  MetaTags = null;
		
		/// <summary>
		/// SystemMetaTags : 
		/// </summary>
		public System.String		  SystemMetaTags = null;
		
		/// <summary>
		/// MemberRegistrationNotification : 
		/// </summary>
		public System.String		  MemberRegistrationNotification = null;
		
		/// <summary>
		/// LinkedInAPI : 
		/// </summary>
		public System.String		  LinkedInApi = null;
		
		/// <summary>
		/// LinkedInLogo : 
		/// </summary>
		public System.String		  LinkedInLogo = null;
		
		/// <summary>
		/// LinkedInCompanyID : 
		/// </summary>
		public System.Int32?		  LinkedInCompanyId = null;
		
		/// <summary>
		/// LinkedInEmail : 
		/// </summary>
		public System.String		  LinkedInEmail = null;
		
		/// <summary>
		/// PrivacySettings : 
		/// </summary>
		public System.String		  PrivacySettings = null;
		
		/// <summary>
		/// WWWRedirect : 
		/// </summary>
		public System.Boolean		  WwwRedirect = false;
		
		/// <summary>
		/// AllowAdvertiser : 
		/// </summary>
		public System.Boolean		  AllowAdvertiser = false;
		
		/// <summary>
		/// LinkedInAPISecret : 
		/// </summary>
		public System.String		  LinkedInApiSecret = null;
		
		/// <summary>
		/// GoogleClientID : 
		/// </summary>
		public System.String		  GoogleClientId = null;
		
		/// <summary>
		/// GoogleClientSecret : 
		/// </summary>
		public System.String		  GoogleClientSecret = null;
		
		/// <summary>
		/// FacebookAppID : 
		/// </summary>
		public System.String		  FacebookAppId = null;
		
		/// <summary>
		/// FacebookAppSecret : 
		/// </summary>
		public System.String		  FacebookAppSecret = null;
		
		/// <summary>
		/// LinkedInButtonSize : 
		/// </summary>
		public System.Int32?		  LinkedInButtonSize = null;
		
		/// <summary>
		/// DefaultCountryID : 
		/// </summary>
		public System.Int32?		  DefaultCountryId = null;
		
		/// <summary>
		/// PayPalUsername : 
		/// </summary>
		public System.String		  PayPalUsername = null;
		
		/// <summary>
		/// PayPalPassword : 
		/// </summary>
		public System.String		  PayPalPassword = null;
		
		/// <summary>
		/// PayPalSignature : 
		/// </summary>
		public System.String		  PayPalSignature = null;
		
		/// <summary>
		/// SecurePayMerchantID : 
		/// </summary>
		public System.String		  SecurePayMerchantId = null;
		
		/// <summary>
		/// SecurePayPassword : 
		/// </summary>
		public System.String		  SecurePayPassword = null;
		
		/// <summary>
		/// UsingSSL : 
		/// </summary>
		public System.Boolean		  UsingSsl = false;
		
		/// <summary>
		/// UseCustomProfessionRole : 
		/// </summary>
		public System.Boolean		  UseCustomProfessionRole = false;
		
		/// <summary>
		/// GenerateJobXML : 
		/// </summary>
		public System.Boolean		  GenerateJobXml = false;
		
		/// <summary>
		/// IsPrivateSite : 
		/// </summary>
		public System.Boolean?		  IsPrivateSite = null;
		
		/// <summary>
		/// PrivateRedirectUrl : 
		/// </summary>
		public System.String		  PrivateRedirectUrl = null;
		
		/// <summary>
		/// EnableJobCustomQuestionnaire : 
		/// </summary>
		public System.Boolean?		  EnableJobCustomQuestionnaire = null;
		
		/// <summary>
		/// JobApplicationTypeID : 
		/// </summary>
		public System.Int32?		  JobApplicationTypeId = null;
		
		/// <summary>
		/// JobScreeningProcess : 
		/// </summary>
		public System.Boolean?		  JobScreeningProcess = null;
		
		/// <summary>
		/// AdvertiserApprovalProcess : 
		/// </summary>
		public System.Int32?		  AdvertiserApprovalProcess = null;
		
		/// <summary>
		/// SiteType : 
		/// </summary>
		public System.Int32		  SiteType = (int)0;
		
		/// <summary>
		/// EnableSSL : 
		/// </summary>
		public System.Boolean		  EnableSsl = false;
		
		/// <summary>
		/// GST : 
		/// </summary>
		public System.Decimal		  Gst = 0.0m;
		
		/// <summary>
		/// GSTLabel : 
		/// </summary>
		public System.String		  GstLabel = null;
		
		/// <summary>
		/// NumberOfPremiumJobs : 
		/// </summary>
		public System.Int32		  NumberOfPremiumJobs = (int)0;
		
		/// <summary>
		/// PremiumJobDays : 
		/// </summary>
		public System.Int32		  PremiumJobDays = (int)0;
		
		/// <summary>
		/// DisplayPremiumJobsOnResults : 
		/// </summary>
		public System.Boolean		  DisplayPremiumJobsOnResults = false;
		
		/// <summary>
		/// JobExpiryNotification : 
		/// </summary>
		public System.Boolean		  JobExpiryNotification = false;
		
		/// <summary>
		/// CurrencyID : 
		/// </summary>
		public System.Int32		  CurrencyId = (int)0;
		
		/// <summary>
		/// PayPalClientID : 
		/// </summary>
		public System.String		  PayPalClientId = null;
		
		/// <summary>
		/// PayPalClientSecret : 
		/// </summary>
		public System.String		  PayPalClientSecret = null;
		
		/// <summary>
		/// PaypalUser : 
		/// </summary>
		public System.String		  PaypalUser = null;
		
		/// <summary>
		/// PaypalProPassword : 
		/// </summary>
		public System.String		  PaypalProPassword = null;
		
		/// <summary>
		/// PaypalVendor : 
		/// </summary>
		public System.String		  PaypalVendor = null;
		
		/// <summary>
		/// PaypalPartner : 
		/// </summary>
		public System.String		  PaypalPartner = null;
		
		/// <summary>
		/// InvoiceSiteInfo : 
		/// </summary>
		public System.String		  InvoiceSiteInfo = null;
		
		/// <summary>
		/// InvoiceSiteFooter : 
		/// </summary>
		public System.String		  InvoiceSiteFooter = null;
		
		/// <summary>
		/// EnableTermsAndConditions : 
		/// </summary>
		public System.Boolean		  EnableTermsAndConditions = false;
		
		/// <summary>
		/// DefaultEmailLanguageId : 
		/// </summary>
		public System.Int32?		  DefaultEmailLanguageId = null;
		
		/// <summary>
		/// GoogleTagManager : 
		/// </summary>
		public System.String		  GoogleTagManager = null;
		
		/// <summary>
		/// GoogleAnalytics : 
		/// </summary>
		public System.String		  GoogleAnalytics = null;
		
		/// <summary>
		/// GoogleWebMaster : 
		/// </summary>
		public System.String		  GoogleWebMaster = null;
		
		/// <summary>
		/// EnablePeopleSearch : 
		/// </summary>
		public System.Boolean		  EnablePeopleSearch = false;
		
		/// <summary>
		/// GlobalDateFormat : 
		/// </summary>
		public System.String		  GlobalDateFormat = string.Empty;
		
		/// <summary>
		/// TimeZone : 
		/// </summary>
		public System.String		  TimeZone = string.Empty;
		
		/// <summary>
		/// GlobalFolder : 
		/// </summary>
		public System.String		  GlobalFolder = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Countries _defaultCountryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Countries"/>.
		/// </summary>
		/// <value>The source Countries for DefaultCountryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Countries DefaultCountryIdSource
      	{
            get { return this._defaultCountryIdSource; }
            set { this._defaultCountryIdSource = value; }
      	}
		private Languages _defaultLanguageIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Languages"/>.
		/// </summary>
		/// <value>The source Languages for DefaultLanguageId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Languages DefaultLanguageIdSource
      	{
            get { return this._defaultLanguageIdSource; }
            set { this._defaultLanguageIdSource = value; }
      	}
		private DynamicPages _defaultDynamicPageIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="DynamicPages"/>.
		/// </summary>
		/// <value>The source DynamicPages for DefaultDynamicPageId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual DynamicPages DefaultDynamicPageIdSource
      	{
            get { return this._defaultDynamicPageIdSource; }
            set { this._defaultDynamicPageIdSource = value; }
      	}
		private AdminUsers _lastModifiedBySource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return this._lastModifiedBySource; }
            set { this._lastModifiedBySource = value; }
      	}
		private Files _siteFavIconIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Files"/>.
		/// </summary>
		/// <value>The source Files for SiteFavIconId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Files SiteFavIconIdSource
      	{
            get { return this._siteFavIconIdSource; }
            set { this._siteFavIconIdSource = value; }
      	}
		private Sites _siteIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Sites SiteIdSource
      	{
            get { return this._siteIdSource; }
            set { this._siteIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			GlobalSettingsEntityData _tmp = new GlobalSettingsEntityData();
						
			_tmp.GlobalSettingId = this.GlobalSettingId;
			
			_tmp.SiteId = this.SiteId;
			_tmp.DefaultLanguageId = this.DefaultLanguageId;
			_tmp.DefaultDynamicPageId = this.DefaultDynamicPageId;
			_tmp.PublicJobsSearch = this.PublicJobsSearch;
			_tmp.PublicMembersSearch = this.PublicMembersSearch;
			_tmp.PublicCompaniesSearch = this.PublicCompaniesSearch;
			_tmp.PublicSponsoredAdverts = this.PublicSponsoredAdverts;
			_tmp.PrivateJobs = this.PrivateJobs;
			_tmp.PrivateMembers = this.PrivateMembers;
			_tmp.PrivateCompanies = this.PrivateCompanies;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.LastModified = this.LastModified;
			_tmp.PageTitlePrefix = this.PageTitlePrefix;
			_tmp.PageTitleSuffix = this.PageTitleSuffix;
			_tmp.DefaultTitle = this.DefaultTitle;
			_tmp.HomeTitle = this.HomeTitle;
			_tmp.DefaultDescription = this.DefaultDescription;
			_tmp.HomeDescription = this.HomeDescription;
			_tmp.DefaultKeywords = this.DefaultKeywords;
			_tmp.HomeKeywords = this.HomeKeywords;
			_tmp.ShowFaceBookButton = this.ShowFaceBookButton;
			_tmp.UseAdvertiserFilter = this.UseAdvertiserFilter;
			_tmp.MerchantId = this.MerchantId;
			_tmp.ShowTwitterButton = this.ShowTwitterButton;
			_tmp.ShowJobAlertButton = this.ShowJobAlertButton;
			_tmp.ShowLinkedInButton = this.ShowLinkedInButton;
			_tmp.SiteFavIconId = this.SiteFavIconId;
			_tmp.SiteDocType = this.SiteDocType;
			_tmp.CurrencySymbol = this.CurrencySymbol;
			_tmp.FtpFolderLocation = this.FtpFolderLocation;
			_tmp.MetaTags = this.MetaTags;
			_tmp.SystemMetaTags = this.SystemMetaTags;
			_tmp.MemberRegistrationNotification = this.MemberRegistrationNotification;
			_tmp.LinkedInApi = this.LinkedInApi;
			_tmp.LinkedInLogo = this.LinkedInLogo;
			_tmp.LinkedInCompanyId = this.LinkedInCompanyId;
			_tmp.LinkedInEmail = this.LinkedInEmail;
			_tmp.PrivacySettings = this.PrivacySettings;
			_tmp.WwwRedirect = this.WwwRedirect;
			_tmp.AllowAdvertiser = this.AllowAdvertiser;
			_tmp.LinkedInApiSecret = this.LinkedInApiSecret;
			_tmp.GoogleClientId = this.GoogleClientId;
			_tmp.GoogleClientSecret = this.GoogleClientSecret;
			_tmp.FacebookAppId = this.FacebookAppId;
			_tmp.FacebookAppSecret = this.FacebookAppSecret;
			_tmp.LinkedInButtonSize = this.LinkedInButtonSize;
			_tmp.DefaultCountryId = this.DefaultCountryId;
			_tmp.PayPalUsername = this.PayPalUsername;
			_tmp.PayPalPassword = this.PayPalPassword;
			_tmp.PayPalSignature = this.PayPalSignature;
			_tmp.SecurePayMerchantId = this.SecurePayMerchantId;
			_tmp.SecurePayPassword = this.SecurePayPassword;
			_tmp.UsingSsl = this.UsingSsl;
			_tmp.UseCustomProfessionRole = this.UseCustomProfessionRole;
			_tmp.GenerateJobXml = this.GenerateJobXml;
			_tmp.IsPrivateSite = this.IsPrivateSite;
			_tmp.PrivateRedirectUrl = this.PrivateRedirectUrl;
			_tmp.EnableJobCustomQuestionnaire = this.EnableJobCustomQuestionnaire;
			_tmp.JobApplicationTypeId = this.JobApplicationTypeId;
			_tmp.JobScreeningProcess = this.JobScreeningProcess;
			_tmp.AdvertiserApprovalProcess = this.AdvertiserApprovalProcess;
			_tmp.SiteType = this.SiteType;
			_tmp.EnableSsl = this.EnableSsl;
			_tmp.Gst = this.Gst;
			_tmp.GstLabel = this.GstLabel;
			_tmp.NumberOfPremiumJobs = this.NumberOfPremiumJobs;
			_tmp.PremiumJobDays = this.PremiumJobDays;
			_tmp.DisplayPremiumJobsOnResults = this.DisplayPremiumJobsOnResults;
			_tmp.JobExpiryNotification = this.JobExpiryNotification;
			_tmp.CurrencyId = this.CurrencyId;
			_tmp.PayPalClientId = this.PayPalClientId;
			_tmp.PayPalClientSecret = this.PayPalClientSecret;
			_tmp.PaypalUser = this.PaypalUser;
			_tmp.PaypalProPassword = this.PaypalProPassword;
			_tmp.PaypalVendor = this.PaypalVendor;
			_tmp.PaypalPartner = this.PaypalPartner;
			_tmp.InvoiceSiteInfo = this.InvoiceSiteInfo;
			_tmp.InvoiceSiteFooter = this.InvoiceSiteFooter;
			_tmp.EnableTermsAndConditions = this.EnableTermsAndConditions;
			_tmp.DefaultEmailLanguageId = this.DefaultEmailLanguageId;
			_tmp.GoogleTagManager = this.GoogleTagManager;
			_tmp.GoogleAnalytics = this.GoogleAnalytics;
			_tmp.GoogleWebMaster = this.GoogleWebMaster;
			_tmp.EnablePeopleSearch = this.EnablePeopleSearch;
			_tmp.GlobalDateFormat = this.GlobalDateFormat;
			_tmp.TimeZone = this.TimeZone;
			_tmp.GlobalFolder = this.GlobalFolder;
			
			#region Source Parent Composite Entities
			if (this.DefaultCountryIdSource != null)
				_tmp.DefaultCountryIdSource = MakeCopyOf(this.DefaultCountryIdSource) as Countries;
			if (this.DefaultLanguageIdSource != null)
				_tmp.DefaultLanguageIdSource = MakeCopyOf(this.DefaultLanguageIdSource) as Languages;
			if (this.DefaultDynamicPageIdSource != null)
				_tmp.DefaultDynamicPageIdSource = MakeCopyOf(this.DefaultDynamicPageIdSource) as DynamicPages;
			if (this.LastModifiedBySource != null)
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource) as AdminUsers;
			if (this.SiteFavIconIdSource != null)
				_tmp.SiteFavIconIdSource = MakeCopyOf(this.SiteFavIconIdSource) as Files;
			if (this.SiteIdSource != null)
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource) as Sites;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			GlobalSettingsEntityData _tmp = new GlobalSettingsEntityData();
						
			_tmp.GlobalSettingId = this.GlobalSettingId;
			
			_tmp.SiteId = this.SiteId;
			_tmp.DefaultLanguageId = this.DefaultLanguageId;
			_tmp.DefaultDynamicPageId = this.DefaultDynamicPageId;
			_tmp.PublicJobsSearch = this.PublicJobsSearch;
			_tmp.PublicMembersSearch = this.PublicMembersSearch;
			_tmp.PublicCompaniesSearch = this.PublicCompaniesSearch;
			_tmp.PublicSponsoredAdverts = this.PublicSponsoredAdverts;
			_tmp.PrivateJobs = this.PrivateJobs;
			_tmp.PrivateMembers = this.PrivateMembers;
			_tmp.PrivateCompanies = this.PrivateCompanies;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.LastModified = this.LastModified;
			_tmp.PageTitlePrefix = this.PageTitlePrefix;
			_tmp.PageTitleSuffix = this.PageTitleSuffix;
			_tmp.DefaultTitle = this.DefaultTitle;
			_tmp.HomeTitle = this.HomeTitle;
			_tmp.DefaultDescription = this.DefaultDescription;
			_tmp.HomeDescription = this.HomeDescription;
			_tmp.DefaultKeywords = this.DefaultKeywords;
			_tmp.HomeKeywords = this.HomeKeywords;
			_tmp.ShowFaceBookButton = this.ShowFaceBookButton;
			_tmp.UseAdvertiserFilter = this.UseAdvertiserFilter;
			_tmp.MerchantId = this.MerchantId;
			_tmp.ShowTwitterButton = this.ShowTwitterButton;
			_tmp.ShowJobAlertButton = this.ShowJobAlertButton;
			_tmp.ShowLinkedInButton = this.ShowLinkedInButton;
			_tmp.SiteFavIconId = this.SiteFavIconId;
			_tmp.SiteDocType = this.SiteDocType;
			_tmp.CurrencySymbol = this.CurrencySymbol;
			_tmp.FtpFolderLocation = this.FtpFolderLocation;
			_tmp.MetaTags = this.MetaTags;
			_tmp.SystemMetaTags = this.SystemMetaTags;
			_tmp.MemberRegistrationNotification = this.MemberRegistrationNotification;
			_tmp.LinkedInApi = this.LinkedInApi;
			_tmp.LinkedInLogo = this.LinkedInLogo;
			_tmp.LinkedInCompanyId = this.LinkedInCompanyId;
			_tmp.LinkedInEmail = this.LinkedInEmail;
			_tmp.PrivacySettings = this.PrivacySettings;
			_tmp.WwwRedirect = this.WwwRedirect;
			_tmp.AllowAdvertiser = this.AllowAdvertiser;
			_tmp.LinkedInApiSecret = this.LinkedInApiSecret;
			_tmp.GoogleClientId = this.GoogleClientId;
			_tmp.GoogleClientSecret = this.GoogleClientSecret;
			_tmp.FacebookAppId = this.FacebookAppId;
			_tmp.FacebookAppSecret = this.FacebookAppSecret;
			_tmp.LinkedInButtonSize = this.LinkedInButtonSize;
			_tmp.DefaultCountryId = this.DefaultCountryId;
			_tmp.PayPalUsername = this.PayPalUsername;
			_tmp.PayPalPassword = this.PayPalPassword;
			_tmp.PayPalSignature = this.PayPalSignature;
			_tmp.SecurePayMerchantId = this.SecurePayMerchantId;
			_tmp.SecurePayPassword = this.SecurePayPassword;
			_tmp.UsingSsl = this.UsingSsl;
			_tmp.UseCustomProfessionRole = this.UseCustomProfessionRole;
			_tmp.GenerateJobXml = this.GenerateJobXml;
			_tmp.IsPrivateSite = this.IsPrivateSite;
			_tmp.PrivateRedirectUrl = this.PrivateRedirectUrl;
			_tmp.EnableJobCustomQuestionnaire = this.EnableJobCustomQuestionnaire;
			_tmp.JobApplicationTypeId = this.JobApplicationTypeId;
			_tmp.JobScreeningProcess = this.JobScreeningProcess;
			_tmp.AdvertiserApprovalProcess = this.AdvertiserApprovalProcess;
			_tmp.SiteType = this.SiteType;
			_tmp.EnableSsl = this.EnableSsl;
			_tmp.Gst = this.Gst;
			_tmp.GstLabel = this.GstLabel;
			_tmp.NumberOfPremiumJobs = this.NumberOfPremiumJobs;
			_tmp.PremiumJobDays = this.PremiumJobDays;
			_tmp.DisplayPremiumJobsOnResults = this.DisplayPremiumJobsOnResults;
			_tmp.JobExpiryNotification = this.JobExpiryNotification;
			_tmp.CurrencyId = this.CurrencyId;
			_tmp.PayPalClientId = this.PayPalClientId;
			_tmp.PayPalClientSecret = this.PayPalClientSecret;
			_tmp.PaypalUser = this.PaypalUser;
			_tmp.PaypalProPassword = this.PaypalProPassword;
			_tmp.PaypalVendor = this.PaypalVendor;
			_tmp.PaypalPartner = this.PaypalPartner;
			_tmp.InvoiceSiteInfo = this.InvoiceSiteInfo;
			_tmp.InvoiceSiteFooter = this.InvoiceSiteFooter;
			_tmp.EnableTermsAndConditions = this.EnableTermsAndConditions;
			_tmp.DefaultEmailLanguageId = this.DefaultEmailLanguageId;
			_tmp.GoogleTagManager = this.GoogleTagManager;
			_tmp.GoogleAnalytics = this.GoogleAnalytics;
			_tmp.GoogleWebMaster = this.GoogleWebMaster;
			_tmp.EnablePeopleSearch = this.EnablePeopleSearch;
			_tmp.GlobalDateFormat = this.GlobalDateFormat;
			_tmp.TimeZone = this.TimeZone;
			_tmp.GlobalFolder = this.GlobalFolder;
			
			#region Source Parent Composite Entities
			if (this.DefaultCountryIdSource != null && existingCopies.Contains(this.DefaultCountryIdSource))
				_tmp.DefaultCountryIdSource = existingCopies[this.DefaultCountryIdSource] as Countries;
			else
				_tmp.DefaultCountryIdSource = MakeCopyOf(this.DefaultCountryIdSource, existingCopies) as Countries;
			if (this.DefaultLanguageIdSource != null && existingCopies.Contains(this.DefaultLanguageIdSource))
				_tmp.DefaultLanguageIdSource = existingCopies[this.DefaultLanguageIdSource] as Languages;
			else
				_tmp.DefaultLanguageIdSource = MakeCopyOf(this.DefaultLanguageIdSource, existingCopies) as Languages;
			if (this.DefaultDynamicPageIdSource != null && existingCopies.Contains(this.DefaultDynamicPageIdSource))
				_tmp.DefaultDynamicPageIdSource = existingCopies[this.DefaultDynamicPageIdSource] as DynamicPages;
			else
				_tmp.DefaultDynamicPageIdSource = MakeCopyOf(this.DefaultDynamicPageIdSource, existingCopies) as DynamicPages;
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				_tmp.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			if (this.SiteFavIconIdSource != null && existingCopies.Contains(this.SiteFavIconIdSource))
				_tmp.SiteFavIconIdSource = existingCopies[this.SiteFavIconIdSource] as Files;
			else
				_tmp.SiteFavIconIdSource = MakeCopyOf(this.SiteFavIconIdSource, existingCopies) as Files;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				_tmp.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GlobalSettingsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(GlobalSettingsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GlobalSettingsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(GlobalSettingsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GlobalSettingsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(GlobalSettingsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				GlobalSettingsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new GlobalSettingsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GlobalSettingsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(GlobalSettingsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				GlobalSettingsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new GlobalSettingsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region GlobalSettingsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="GlobalSettings"/> object.
	/// </remarks>
	public class GlobalSettingsEventArgs : System.EventArgs
	{
		private GlobalSettingsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the GlobalSettingsEventArgs class.
		///</summary>
		public GlobalSettingsEventArgs(GlobalSettingsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the GlobalSettingsEventArgs class.
		///</summary>
		public GlobalSettingsEventArgs(GlobalSettingsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The GlobalSettingsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="GlobalSettingsColumn" />
		public GlobalSettingsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all GlobalSettings related events.
	///</summary>
	public delegate void GlobalSettingsEventHandler(object sender, GlobalSettingsEventArgs e);
	
	#region GlobalSettingsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class GlobalSettingsComparer : System.Collections.Generic.IComparer<GlobalSettings>
	{
		GlobalSettingsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:GlobalSettingsComparer"/> class.
        /// </summary>
		public GlobalSettingsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:GlobalSettingsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public GlobalSettingsComparer(GlobalSettingsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="GlobalSettings"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="GlobalSettings"/> to compare.</param>
        /// <param name="b">The second <c>GlobalSettings</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(GlobalSettings a, GlobalSettings b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(GlobalSettings entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(GlobalSettings a, GlobalSettings b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public GlobalSettingsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region GlobalSettingsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="GlobalSettings"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class GlobalSettingsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the GlobalSettingsKey class.
		/// </summary>
		public GlobalSettingsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the GlobalSettingsKey class.
		/// </summary>
		public GlobalSettingsKey(GlobalSettingsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.GlobalSettingId = entity.GlobalSettingId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the GlobalSettingsKey class.
		/// </summary>
		public GlobalSettingsKey(System.Int32 _globalSettingId)
		{
			#region Init Properties

			this.GlobalSettingId = _globalSettingId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private GlobalSettingsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public GlobalSettingsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the GlobalSettingId property
		private System.Int32 _globalSettingId;
		
		/// <summary>
		/// Gets or sets the GlobalSettingId property.
		/// </summary>
		public System.Int32 GlobalSettingId
		{
			get { return _globalSettingId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.GlobalSettingId = value;
				
				_globalSettingId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				GlobalSettingId = ( values["GlobalSettingId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["GlobalSettingId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("GlobalSettingId", GlobalSettingId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("GlobalSettingId: {0}{1}",
								GlobalSettingId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region GlobalSettingsColumn Enum
	
	/// <summary>
	/// Enumerate the GlobalSettings columns.
	/// </summary>
	[Serializable]
	public enum GlobalSettingsColumn : int
	{
		/// <summary>
		/// GlobalSettingId : 
		/// </summary>
		[EnumTextValue("GlobalSettingID")]
		[ColumnEnum("GlobalSettingID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		GlobalSettingId = 1,
		/// <summary>
		/// SiteId : 
		/// </summary>
		[EnumTextValue("SiteID")]
		[ColumnEnum("SiteID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteId = 2,
		/// <summary>
		/// DefaultLanguageId : 
		/// </summary>
		[EnumTextValue("DefaultLanguageID")]
		[ColumnEnum("DefaultLanguageID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DefaultLanguageId = 3,
		/// <summary>
		/// DefaultDynamicPageId : 
		/// </summary>
		[EnumTextValue("DefaultDynamicPageID")]
		[ColumnEnum("DefaultDynamicPageID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DefaultDynamicPageId = 4,
		/// <summary>
		/// PublicJobsSearch : 
		/// </summary>
		[EnumTextValue("PublicJobsSearch")]
		[ColumnEnum("PublicJobsSearch", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		PublicJobsSearch = 5,
		/// <summary>
		/// PublicMembersSearch : 
		/// </summary>
		[EnumTextValue("PublicMembersSearch")]
		[ColumnEnum("PublicMembersSearch", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		PublicMembersSearch = 6,
		/// <summary>
		/// PublicCompaniesSearch : 
		/// </summary>
		[EnumTextValue("PublicCompaniesSearch")]
		[ColumnEnum("PublicCompaniesSearch", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		PublicCompaniesSearch = 7,
		/// <summary>
		/// PublicSponsoredAdverts : 
		/// </summary>
		[EnumTextValue("PublicSponsoredAdverts")]
		[ColumnEnum("PublicSponsoredAdverts", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		PublicSponsoredAdverts = 8,
		/// <summary>
		/// PrivateJobs : 
		/// </summary>
		[EnumTextValue("PrivateJobs")]
		[ColumnEnum("PrivateJobs", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		PrivateJobs = 9,
		/// <summary>
		/// PrivateMembers : 
		/// </summary>
		[EnumTextValue("PrivateMembers")]
		[ColumnEnum("PrivateMembers", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		PrivateMembers = 10,
		/// <summary>
		/// PrivateCompanies : 
		/// </summary>
		[EnumTextValue("PrivateCompanies")]
		[ColumnEnum("PrivateCompanies", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		PrivateCompanies = 11,
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		[EnumTextValue("LastModifiedBy")]
		[ColumnEnum("LastModifiedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LastModifiedBy = 12,
		/// <summary>
		/// LastModified : 
		/// </summary>
		[EnumTextValue("LastModified")]
		[ColumnEnum("LastModified", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastModified = 13,
		/// <summary>
		/// PageTitlePrefix : 
		/// </summary>
		[EnumTextValue("PageTitlePrefix")]
		[ColumnEnum("PageTitlePrefix", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		PageTitlePrefix = 14,
		/// <summary>
		/// PageTitleSuffix : 
		/// </summary>
		[EnumTextValue("PageTitleSuffix")]
		[ColumnEnum("PageTitleSuffix", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		PageTitleSuffix = 15,
		/// <summary>
		/// DefaultTitle : 
		/// </summary>
		[EnumTextValue("DefaultTitle")]
		[ColumnEnum("DefaultTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		DefaultTitle = 16,
		/// <summary>
		/// HomeTitle : 
		/// </summary>
		[EnumTextValue("HomeTitle")]
		[ColumnEnum("HomeTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		HomeTitle = 17,
		/// <summary>
		/// DefaultDescription : 
		/// </summary>
		[EnumTextValue("DefaultDescription")]
		[ColumnEnum("DefaultDescription", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		DefaultDescription = 18,
		/// <summary>
		/// HomeDescription : 
		/// </summary>
		[EnumTextValue("HomeDescription")]
		[ColumnEnum("HomeDescription", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		HomeDescription = 19,
		/// <summary>
		/// DefaultKeywords : 
		/// </summary>
		[EnumTextValue("DefaultKeywords")]
		[ColumnEnum("DefaultKeywords", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		DefaultKeywords = 20,
		/// <summary>
		/// HomeKeywords : 
		/// </summary>
		[EnumTextValue("HomeKeywords")]
		[ColumnEnum("HomeKeywords", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		HomeKeywords = 21,
		/// <summary>
		/// ShowFaceBookButton : 
		/// </summary>
		[EnumTextValue("ShowFaceBookButton")]
		[ColumnEnum("ShowFaceBookButton", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		ShowFaceBookButton = 22,
		/// <summary>
		/// UseAdvertiserFilter : 
		/// </summary>
		[EnumTextValue("UseAdvertiserFilter")]
		[ColumnEnum("UseAdvertiserFilter", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		UseAdvertiserFilter = 23,
		/// <summary>
		/// MerchantId : 
		/// </summary>
		[EnumTextValue("MerchantID")]
		[ColumnEnum("MerchantID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MerchantId = 24,
		/// <summary>
		/// ShowTwitterButton : 
		/// </summary>
		[EnumTextValue("ShowTwitterButton")]
		[ColumnEnum("ShowTwitterButton", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		ShowTwitterButton = 25,
		/// <summary>
		/// ShowJobAlertButton : 
		/// </summary>
		[EnumTextValue("ShowJobAlertButton")]
		[ColumnEnum("ShowJobAlertButton", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		ShowJobAlertButton = 26,
		/// <summary>
		/// ShowLinkedInButton : 
		/// </summary>
		[EnumTextValue("ShowLinkedInButton")]
		[ColumnEnum("ShowLinkedInButton", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		ShowLinkedInButton = 27,
		/// <summary>
		/// SiteFavIconId : 
		/// </summary>
		[EnumTextValue("SiteFavIconID")]
		[ColumnEnum("SiteFavIconID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SiteFavIconId = 28,
		/// <summary>
		/// SiteDocType : 
		/// </summary>
		[EnumTextValue("SiteDocType")]
		[ColumnEnum("SiteDocType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 512)]
		SiteDocType = 29,
		/// <summary>
		/// CurrencySymbol : 
		/// </summary>
		[EnumTextValue("CurrencySymbol")]
		[ColumnEnum("CurrencySymbol", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		CurrencySymbol = 30,
		/// <summary>
		/// FtpFolderLocation : 
		/// </summary>
		[EnumTextValue("FtpFolderLocation")]
		[ColumnEnum("FtpFolderLocation", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		FtpFolderLocation = 31,
		/// <summary>
		/// MetaTags : 
		/// </summary>
		[EnumTextValue("MetaTags")]
		[ColumnEnum("MetaTags", typeof(System.String), System.Data.DbType.String, false, false, true)]
		MetaTags = 32,
		/// <summary>
		/// SystemMetaTags : 
		/// </summary>
		[EnumTextValue("SystemMetaTags")]
		[ColumnEnum("SystemMetaTags", typeof(System.String), System.Data.DbType.String, false, false, true, 4000)]
		SystemMetaTags = 33,
		/// <summary>
		/// MemberRegistrationNotification : 
		/// </summary>
		[EnumTextValue("MemberRegistrationNotification")]
		[ColumnEnum("MemberRegistrationNotification", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		MemberRegistrationNotification = 34,
		/// <summary>
		/// LinkedInApi : 
		/// </summary>
		[EnumTextValue("LinkedInAPI")]
		[ColumnEnum("LinkedInAPI", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		LinkedInApi = 35,
		/// <summary>
		/// LinkedInLogo : 
		/// </summary>
		[EnumTextValue("LinkedInLogo")]
		[ColumnEnum("LinkedInLogo", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		LinkedInLogo = 36,
		/// <summary>
		/// LinkedInCompanyId : 
		/// </summary>
		[EnumTextValue("LinkedInCompanyID")]
		[ColumnEnum("LinkedInCompanyID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LinkedInCompanyId = 37,
		/// <summary>
		/// LinkedInEmail : 
		/// </summary>
		[EnumTextValue("LinkedInEmail")]
		[ColumnEnum("LinkedInEmail", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		LinkedInEmail = 38,
		/// <summary>
		/// PrivacySettings : 
		/// </summary>
		[EnumTextValue("PrivacySettings")]
		[ColumnEnum("PrivacySettings", typeof(System.String), System.Data.DbType.String, false, false, true, 4000)]
		PrivacySettings = 39,
		/// <summary>
		/// WwwRedirect : 
		/// </summary>
		[EnumTextValue("WWWRedirect")]
		[ColumnEnum("WWWRedirect", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		WwwRedirect = 40,
		/// <summary>
		/// AllowAdvertiser : 
		/// </summary>
		[EnumTextValue("AllowAdvertiser")]
		[ColumnEnum("AllowAdvertiser", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		AllowAdvertiser = 41,
		/// <summary>
		/// LinkedInApiSecret : 
		/// </summary>
		[EnumTextValue("LinkedInAPISecret")]
		[ColumnEnum("LinkedInAPISecret", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		LinkedInApiSecret = 42,
		/// <summary>
		/// GoogleClientId : 
		/// </summary>
		[EnumTextValue("GoogleClientID")]
		[ColumnEnum("GoogleClientID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		GoogleClientId = 43,
		/// <summary>
		/// GoogleClientSecret : 
		/// </summary>
		[EnumTextValue("GoogleClientSecret")]
		[ColumnEnum("GoogleClientSecret", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		GoogleClientSecret = 44,
		/// <summary>
		/// FacebookAppId : 
		/// </summary>
		[EnumTextValue("FacebookAppID")]
		[ColumnEnum("FacebookAppID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		FacebookAppId = 45,
		/// <summary>
		/// FacebookAppSecret : 
		/// </summary>
		[EnumTextValue("FacebookAppSecret")]
		[ColumnEnum("FacebookAppSecret", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		FacebookAppSecret = 46,
		/// <summary>
		/// LinkedInButtonSize : 
		/// </summary>
		[EnumTextValue("LinkedInButtonSize")]
		[ColumnEnum("LinkedInButtonSize", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LinkedInButtonSize = 47,
		/// <summary>
		/// DefaultCountryId : 
		/// </summary>
		[EnumTextValue("DefaultCountryID")]
		[ColumnEnum("DefaultCountryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DefaultCountryId = 48,
		/// <summary>
		/// PayPalUsername : 
		/// </summary>
		[EnumTextValue("PayPalUsername")]
		[ColumnEnum("PayPalUsername", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		PayPalUsername = 49,
		/// <summary>
		/// PayPalPassword : 
		/// </summary>
		[EnumTextValue("PayPalPassword")]
		[ColumnEnum("PayPalPassword", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		PayPalPassword = 50,
		/// <summary>
		/// PayPalSignature : 
		/// </summary>
		[EnumTextValue("PayPalSignature")]
		[ColumnEnum("PayPalSignature", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		PayPalSignature = 51,
		/// <summary>
		/// SecurePayMerchantId : 
		/// </summary>
		[EnumTextValue("SecurePayMerchantID")]
		[ColumnEnum("SecurePayMerchantID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		SecurePayMerchantId = 52,
		/// <summary>
		/// SecurePayPassword : 
		/// </summary>
		[EnumTextValue("SecurePayPassword")]
		[ColumnEnum("SecurePayPassword", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		SecurePayPassword = 53,
		/// <summary>
		/// UsingSsl : 
		/// </summary>
		[EnumTextValue("UsingSSL")]
		[ColumnEnum("UsingSSL", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		UsingSsl = 54,
		/// <summary>
		/// UseCustomProfessionRole : 
		/// </summary>
		[EnumTextValue("UseCustomProfessionRole")]
		[ColumnEnum("UseCustomProfessionRole", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		UseCustomProfessionRole = 55,
		/// <summary>
		/// GenerateJobXml : 
		/// </summary>
		[EnumTextValue("GenerateJobXML")]
		[ColumnEnum("GenerateJobXML", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		GenerateJobXml = 56,
		/// <summary>
		/// IsPrivateSite : 
		/// </summary>
		[EnumTextValue("IsPrivateSite")]
		[ColumnEnum("IsPrivateSite", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsPrivateSite = 57,
		/// <summary>
		/// PrivateRedirectUrl : 
		/// </summary>
		[EnumTextValue("PrivateRedirectUrl")]
		[ColumnEnum("PrivateRedirectUrl", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		PrivateRedirectUrl = 58,
		/// <summary>
		/// EnableJobCustomQuestionnaire : 
		/// </summary>
		[EnumTextValue("EnableJobCustomQuestionnaire")]
		[ColumnEnum("EnableJobCustomQuestionnaire", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		EnableJobCustomQuestionnaire = 59,
		/// <summary>
		/// JobApplicationTypeId : 
		/// </summary>
		[EnumTextValue("JobApplicationTypeID")]
		[ColumnEnum("JobApplicationTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		JobApplicationTypeId = 60,
		/// <summary>
		/// JobScreeningProcess : 
		/// </summary>
		[EnumTextValue("JobScreeningProcess")]
		[ColumnEnum("JobScreeningProcess", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		JobScreeningProcess = 61,
		/// <summary>
		/// AdvertiserApprovalProcess : 
		/// </summary>
		[EnumTextValue("AdvertiserApprovalProcess")]
		[ColumnEnum("AdvertiserApprovalProcess", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AdvertiserApprovalProcess = 62,
		/// <summary>
		/// SiteType : 
		/// </summary>
		[EnumTextValue("SiteType")]
		[ColumnEnum("SiteType", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteType = 63,
		/// <summary>
		/// EnableSsl : 
		/// </summary>
		[EnumTextValue("EnableSSL")]
		[ColumnEnum("EnableSSL", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		EnableSsl = 64,
		/// <summary>
		/// Gst : 
		/// </summary>
		[EnumTextValue("GST")]
		[ColumnEnum("GST", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Gst = 65,
		/// <summary>
		/// GstLabel : 
		/// </summary>
		[EnumTextValue("GSTLabel")]
		[ColumnEnum("GSTLabel", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		GstLabel = 66,
		/// <summary>
		/// NumberOfPremiumJobs : 
		/// </summary>
		[EnumTextValue("NumberOfPremiumJobs")]
		[ColumnEnum("NumberOfPremiumJobs", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		NumberOfPremiumJobs = 67,
		/// <summary>
		/// PremiumJobDays : 
		/// </summary>
		[EnumTextValue("PremiumJobDays")]
		[ColumnEnum("PremiumJobDays", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		PremiumJobDays = 68,
		/// <summary>
		/// DisplayPremiumJobsOnResults : 
		/// </summary>
		[EnumTextValue("DisplayPremiumJobsOnResults")]
		[ColumnEnum("DisplayPremiumJobsOnResults", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		DisplayPremiumJobsOnResults = 69,
		/// <summary>
		/// JobExpiryNotification : 
		/// </summary>
		[EnumTextValue("JobExpiryNotification")]
		[ColumnEnum("JobExpiryNotification", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		JobExpiryNotification = 70,
		/// <summary>
		/// CurrencyId : 
		/// </summary>
		[EnumTextValue("CurrencyID")]
		[ColumnEnum("CurrencyID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CurrencyId = 71,
		/// <summary>
		/// PayPalClientId : 
		/// </summary>
		[EnumTextValue("PayPalClientID")]
		[ColumnEnum("PayPalClientID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		PayPalClientId = 72,
		/// <summary>
		/// PayPalClientSecret : 
		/// </summary>
		[EnumTextValue("PayPalClientSecret")]
		[ColumnEnum("PayPalClientSecret", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		PayPalClientSecret = 73,
		/// <summary>
		/// PaypalUser : 
		/// </summary>
		[EnumTextValue("PaypalUser")]
		[ColumnEnum("PaypalUser", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		PaypalUser = 74,
		/// <summary>
		/// PaypalProPassword : 
		/// </summary>
		[EnumTextValue("PaypalProPassword")]
		[ColumnEnum("PaypalProPassword", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		PaypalProPassword = 75,
		/// <summary>
		/// PaypalVendor : 
		/// </summary>
		[EnumTextValue("PaypalVendor")]
		[ColumnEnum("PaypalVendor", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		PaypalVendor = 76,
		/// <summary>
		/// PaypalPartner : 
		/// </summary>
		[EnumTextValue("PaypalPartner")]
		[ColumnEnum("PaypalPartner", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		PaypalPartner = 77,
		/// <summary>
		/// InvoiceSiteInfo : 
		/// </summary>
		[EnumTextValue("InvoiceSiteInfo")]
		[ColumnEnum("InvoiceSiteInfo", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		InvoiceSiteInfo = 78,
		/// <summary>
		/// InvoiceSiteFooter : 
		/// </summary>
		[EnumTextValue("InvoiceSiteFooter")]
		[ColumnEnum("InvoiceSiteFooter", typeof(System.String), System.Data.DbType.String, false, false, true, 1500)]
		InvoiceSiteFooter = 79,
		/// <summary>
		/// EnableTermsAndConditions : 
		/// </summary>
		[EnumTextValue("EnableTermsAndConditions")]
		[ColumnEnum("EnableTermsAndConditions", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		EnableTermsAndConditions = 80,
		/// <summary>
		/// DefaultEmailLanguageId : 
		/// </summary>
		[EnumTextValue("DefaultEmailLanguageId")]
		[ColumnEnum("DefaultEmailLanguageId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DefaultEmailLanguageId = 81,
		/// <summary>
		/// GoogleTagManager : 
		/// </summary>
		[EnumTextValue("GoogleTagManager")]
		[ColumnEnum("GoogleTagManager", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		GoogleTagManager = 82,
		/// <summary>
		/// GoogleAnalytics : 
		/// </summary>
		[EnumTextValue("GoogleAnalytics")]
		[ColumnEnum("GoogleAnalytics", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		GoogleAnalytics = 83,
		/// <summary>
		/// GoogleWebMaster : 
		/// </summary>
		[EnumTextValue("GoogleWebMaster")]
		[ColumnEnum("GoogleWebMaster", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		GoogleWebMaster = 84,
		/// <summary>
		/// EnablePeopleSearch : 
		/// </summary>
		[EnumTextValue("EnablePeopleSearch")]
		[ColumnEnum("EnablePeopleSearch", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		EnablePeopleSearch = 85,
		/// <summary>
		/// GlobalDateFormat : 
		/// </summary>
		[EnumTextValue("GlobalDateFormat")]
		[ColumnEnum("GlobalDateFormat", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		GlobalDateFormat = 86,
		/// <summary>
		/// TimeZone : 
		/// </summary>
		[EnumTextValue("TimeZone")]
		[ColumnEnum("TimeZone", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		TimeZone = 87,
		/// <summary>
		/// GlobalFolder : 
		/// </summary>
		[EnumTextValue("GlobalFolder")]
		[ColumnEnum("GlobalFolder", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		GlobalFolder = 88
	}//End enum

	#endregion GlobalSettingsColumn Enum

} // end namespace

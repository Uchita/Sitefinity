
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file IntegrationMappings.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'IntegrationMappings' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class IntegrationMappingsBase : EntityBase, IIntegrationMappings, IEntityId<IntegrationMappingsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private IntegrationMappingsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private IntegrationMappingsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private IntegrationMappingsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<IntegrationMappings> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event IntegrationMappingsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event IntegrationMappingsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="IntegrationMappingsBase"/> instance.
		///</summary>
		public IntegrationMappingsBase()
		{
			this.entityData = new IntegrationMappingsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="IntegrationMappingsBase"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_integrationMappingTypeId"></param>
		///<param name="_jxtEntity"></param>
		///<param name="_jxtColumn"></param>
		///<param name="_jxtType"></param>
		///<param name="_jxtSize"></param>
		///<param name="_thirdPartyEntity"></param>
		///<param name="_thirdPartyColumn"></param>
		///<param name="_thirdPartyType"></param>
		///<param name="_thirdPartySize"></param>
		///<param name="_sequence"></param>
		///<param name="_sync"></param>
		///<param name="_globalMapping"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_lastModifiedDate"></param>
		public IntegrationMappingsBase(System.Int32 _siteId, System.Int32? _integrationMappingTypeId, 
			System.String _jxtEntity, System.String _jxtColumn, System.String _jxtType, 
			System.Int32? _jxtSize, System.String _thirdPartyEntity, System.String _thirdPartyColumn, 
			System.String _thirdPartyType, System.Int32? _thirdPartySize, System.Int32? _sequence, 
			System.Int32? _sync, System.Boolean? _globalMapping, System.Int32? _lastModifiedBy, 
			System.DateTime? _lastModifiedDate)
		{
			this.entityData = new IntegrationMappingsEntityData();
			this.backupData = null;

			this.SiteId = _siteId;
			this.IntegrationMappingTypeId = _integrationMappingTypeId;
			this.JxtEntity = _jxtEntity;
			this.JxtColumn = _jxtColumn;
			this.JxtType = _jxtType;
			this.JxtSize = _jxtSize;
			this.ThirdPartyEntity = _thirdPartyEntity;
			this.ThirdPartyColumn = _thirdPartyColumn;
			this.ThirdPartyType = _thirdPartyType;
			this.ThirdPartySize = _thirdPartySize;
			this.Sequence = _sequence;
			this.Sync = _sync;
			this.GlobalMapping = _globalMapping;
			this.LastModifiedBy = _lastModifiedBy;
			this.LastModifiedDate = _lastModifiedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="IntegrationMappings"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_integrationMappingTypeId"></param>
		///<param name="_jxtEntity"></param>
		///<param name="_jxtColumn"></param>
		///<param name="_jxtType"></param>
		///<param name="_jxtSize"></param>
		///<param name="_thirdPartyEntity"></param>
		///<param name="_thirdPartyColumn"></param>
		///<param name="_thirdPartyType"></param>
		///<param name="_thirdPartySize"></param>
		///<param name="_sequence"></param>
		///<param name="_sync"></param>
		///<param name="_globalMapping"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_lastModifiedDate"></param>
		public static IntegrationMappings CreateIntegrationMappings(System.Int32 _siteId, System.Int32? _integrationMappingTypeId, 
			System.String _jxtEntity, System.String _jxtColumn, System.String _jxtType, 
			System.Int32? _jxtSize, System.String _thirdPartyEntity, System.String _thirdPartyColumn, 
			System.String _thirdPartyType, System.Int32? _thirdPartySize, System.Int32? _sequence, 
			System.Int32? _sync, System.Boolean? _globalMapping, System.Int32? _lastModifiedBy, 
			System.DateTime? _lastModifiedDate)
		{
			IntegrationMappings newIntegrationMappings = new IntegrationMappings();
			newIntegrationMappings.SiteId = _siteId;
			newIntegrationMappings.IntegrationMappingTypeId = _integrationMappingTypeId;
			newIntegrationMappings.JxtEntity = _jxtEntity;
			newIntegrationMappings.JxtColumn = _jxtColumn;
			newIntegrationMappings.JxtType = _jxtType;
			newIntegrationMappings.JxtSize = _jxtSize;
			newIntegrationMappings.ThirdPartyEntity = _thirdPartyEntity;
			newIntegrationMappings.ThirdPartyColumn = _thirdPartyColumn;
			newIntegrationMappings.ThirdPartyType = _thirdPartyType;
			newIntegrationMappings.ThirdPartySize = _thirdPartySize;
			newIntegrationMappings.Sequence = _sequence;
			newIntegrationMappings.Sync = _sync;
			newIntegrationMappings.GlobalMapping = _globalMapping;
			newIntegrationMappings.LastModifiedBy = _lastModifiedBy;
			newIntegrationMappings.LastModifiedDate = _lastModifiedDate;
			return newIntegrationMappings;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the IntegrationMappingId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 IntegrationMappingId
		{
			get
			{
				return this.entityData.IntegrationMappingId; 
			}
			
			set
			{
				if (this.entityData.IntegrationMappingId == value)
					return;
					
				OnColumnChanging(IntegrationMappingsColumn.IntegrationMappingId, this.entityData.IntegrationMappingId);
				this.entityData.IntegrationMappingId = value;
				this.EntityId.IntegrationMappingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegrationMappingsColumn.IntegrationMappingId, this.entityData.IntegrationMappingId);
				OnPropertyChanged("IntegrationMappingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SiteId
		{
			get
			{
				return this.entityData.SiteId; 
			}
			
			set
			{
				if (this.entityData.SiteId == value)
					return;
					
				OnColumnChanging(IntegrationMappingsColumn.SiteId, this.entityData.SiteId);
				this.entityData.SiteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegrationMappingsColumn.SiteId, this.entityData.SiteId);
				OnPropertyChanged("SiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IntegrationMappingTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsIntegrationMappingTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? IntegrationMappingTypeId
		{
			get
			{
				return this.entityData.IntegrationMappingTypeId; 
			}
			
			set
			{
				if (this.entityData.IntegrationMappingTypeId == value)
					return;
					
				OnColumnChanging(IntegrationMappingsColumn.IntegrationMappingTypeId, this.entityData.IntegrationMappingTypeId);
				this.entityData.IntegrationMappingTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegrationMappingsColumn.IntegrationMappingTypeId, this.entityData.IntegrationMappingTypeId);
				OnPropertyChanged("IntegrationMappingTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JxtEntity property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 75)]
		public virtual System.String JxtEntity
		{
			get
			{
				return this.entityData.JxtEntity; 
			}
			
			set
			{
				if (this.entityData.JxtEntity == value)
					return;
					
				OnColumnChanging(IntegrationMappingsColumn.JxtEntity, this.entityData.JxtEntity);
				this.entityData.JxtEntity = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegrationMappingsColumn.JxtEntity, this.entityData.JxtEntity);
				OnPropertyChanged("JxtEntity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JxtColumn property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 75)]
		public virtual System.String JxtColumn
		{
			get
			{
				return this.entityData.JxtColumn; 
			}
			
			set
			{
				if (this.entityData.JxtColumn == value)
					return;
					
				OnColumnChanging(IntegrationMappingsColumn.JxtColumn, this.entityData.JxtColumn);
				this.entityData.JxtColumn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegrationMappingsColumn.JxtColumn, this.entityData.JxtColumn);
				OnPropertyChanged("JxtColumn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JxtType property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 75)]
		public virtual System.String JxtType
		{
			get
			{
				return this.entityData.JxtType; 
			}
			
			set
			{
				if (this.entityData.JxtType == value)
					return;
					
				OnColumnChanging(IntegrationMappingsColumn.JxtType, this.entityData.JxtType);
				this.entityData.JxtType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegrationMappingsColumn.JxtType, this.entityData.JxtType);
				OnPropertyChanged("JxtType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JxtSize property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsJxtSizeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? JxtSize
		{
			get
			{
				return this.entityData.JxtSize; 
			}
			
			set
			{
				if (this.entityData.JxtSize == value)
					return;
					
				OnColumnChanging(IntegrationMappingsColumn.JxtSize, this.entityData.JxtSize);
				this.entityData.JxtSize = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegrationMappingsColumn.JxtSize, this.entityData.JxtSize);
				OnPropertyChanged("JxtSize");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThirdPartyEntity property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 75)]
		public virtual System.String ThirdPartyEntity
		{
			get
			{
				return this.entityData.ThirdPartyEntity; 
			}
			
			set
			{
				if (this.entityData.ThirdPartyEntity == value)
					return;
					
				OnColumnChanging(IntegrationMappingsColumn.ThirdPartyEntity, this.entityData.ThirdPartyEntity);
				this.entityData.ThirdPartyEntity = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegrationMappingsColumn.ThirdPartyEntity, this.entityData.ThirdPartyEntity);
				OnPropertyChanged("ThirdPartyEntity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThirdPartyColumn property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 75)]
		public virtual System.String ThirdPartyColumn
		{
			get
			{
				return this.entityData.ThirdPartyColumn; 
			}
			
			set
			{
				if (this.entityData.ThirdPartyColumn == value)
					return;
					
				OnColumnChanging(IntegrationMappingsColumn.ThirdPartyColumn, this.entityData.ThirdPartyColumn);
				this.entityData.ThirdPartyColumn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegrationMappingsColumn.ThirdPartyColumn, this.entityData.ThirdPartyColumn);
				OnPropertyChanged("ThirdPartyColumn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThirdPartyType property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 75)]
		public virtual System.String ThirdPartyType
		{
			get
			{
				return this.entityData.ThirdPartyType; 
			}
			
			set
			{
				if (this.entityData.ThirdPartyType == value)
					return;
					
				OnColumnChanging(IntegrationMappingsColumn.ThirdPartyType, this.entityData.ThirdPartyType);
				this.entityData.ThirdPartyType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegrationMappingsColumn.ThirdPartyType, this.entityData.ThirdPartyType);
				OnPropertyChanged("ThirdPartyType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThirdPartySize property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsThirdPartySizeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ThirdPartySize
		{
			get
			{
				return this.entityData.ThirdPartySize; 
			}
			
			set
			{
				if (this.entityData.ThirdPartySize == value)
					return;
					
				OnColumnChanging(IntegrationMappingsColumn.ThirdPartySize, this.entityData.ThirdPartySize);
				this.entityData.ThirdPartySize = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegrationMappingsColumn.ThirdPartySize, this.entityData.ThirdPartySize);
				OnPropertyChanged("ThirdPartySize");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sequence property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSequenceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Sequence
		{
			get
			{
				return this.entityData.Sequence; 
			}
			
			set
			{
				if (this.entityData.Sequence == value)
					return;
					
				OnColumnChanging(IntegrationMappingsColumn.Sequence, this.entityData.Sequence);
				this.entityData.Sequence = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegrationMappingsColumn.Sequence, this.entityData.Sequence);
				OnPropertyChanged("Sequence");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sync property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSyncNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Sync
		{
			get
			{
				return this.entityData.Sync; 
			}
			
			set
			{
				if (this.entityData.Sync == value)
					return;
					
				OnColumnChanging(IntegrationMappingsColumn.Sync, this.entityData.Sync);
				this.entityData.Sync = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegrationMappingsColumn.Sync, this.entityData.Sync);
				OnPropertyChanged("Sync");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GlobalMapping property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsGlobalMappingNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? GlobalMapping
		{
			get
			{
				return this.entityData.GlobalMapping; 
			}
			
			set
			{
				if (this.entityData.GlobalMapping == value)
					return;
					
				OnColumnChanging(IntegrationMappingsColumn.GlobalMapping, this.entityData.GlobalMapping);
				this.entityData.GlobalMapping = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegrationMappingsColumn.GlobalMapping, this.entityData.GlobalMapping);
				OnPropertyChanged("GlobalMapping");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModifiedByNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModifiedBy
		{
			get
			{
				return this.entityData.LastModifiedBy; 
			}
			
			set
			{
				if (this.entityData.LastModifiedBy == value)
					return;
					
				OnColumnChanging(IntegrationMappingsColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				this.entityData.LastModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegrationMappingsColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				OnPropertyChanged("LastModifiedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModifiedDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModifiedDate
		{
			get
			{
				return this.entityData.LastModifiedDate; 
			}
			
			set
			{
				if (this.entityData.LastModifiedDate == value)
					return;
					
				OnColumnChanging(IntegrationMappingsColumn.LastModifiedDate, this.entityData.LastModifiedDate);
				this.entityData.LastModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegrationMappingsColumn.LastModifiedDate, this.entityData.LastModifiedDate);
				OnPropertyChanged("LastModifiedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Sites SiteIdSource
      	{
            get { return entityData.SiteIdSource; }
            set { entityData.SiteIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("JxtEntity", "Jxt Entity", 75));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("JxtColumn", "Jxt Column", 75));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("JxtType", "Jxt Type", 75));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ThirdPartyEntity", "Third Party Entity", 75));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ThirdPartyColumn", "Third Party Column", 75));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ThirdPartyType", "Third Party Type", 75));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "IntegrationMappings"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"IntegrationMappingID", "SiteID", "IntegrationMappingTypeID", "JXTEntity", "JXTColumn", "JXTType", "JXTSize", "ThirdPartyEntity", "ThirdPartyColumn", "ThirdPartyType", "ThirdPartySize", "Sequence", "Sync", "GlobalMapping", "LastModifiedBy", "LastModifiedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as IntegrationMappingsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (IntegrationMappings) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<IntegrationMappings>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as IntegrationMappings);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed IntegrationMappings Entity 
		///</summary>
		protected virtual IntegrationMappings Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			IntegrationMappings copy = new IntegrationMappings();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.IntegrationMappingId = this.IntegrationMappingId;
				copy.SiteId = this.SiteId;
				copy.IntegrationMappingTypeId = this.IntegrationMappingTypeId;
				copy.JxtEntity = this.JxtEntity;
				copy.JxtColumn = this.JxtColumn;
				copy.JxtType = this.JxtType;
				copy.JxtSize = this.JxtSize;
				copy.ThirdPartyEntity = this.ThirdPartyEntity;
				copy.ThirdPartyColumn = this.ThirdPartyColumn;
				copy.ThirdPartyType = this.ThirdPartyType;
				copy.ThirdPartySize = this.ThirdPartySize;
				copy.Sequence = this.Sequence;
				copy.Sync = this.Sync;
				copy.GlobalMapping = this.GlobalMapping;
				copy.LastModifiedBy = this.LastModifiedBy;
				copy.LastModifiedDate = this.LastModifiedDate;
			
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				copy.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				copy.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed IntegrationMappings Entity 
		///</summary>
		public virtual IntegrationMappings Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed IntegrationMappings Entity which is a deep copy of the current entity.
		///</summary>
		public virtual IntegrationMappings DeepCopy()
		{
			return EntityHelper.Clone<IntegrationMappings>(this as IntegrationMappings);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as IntegrationMappingsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new IntegrationMappingsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as IntegrationMappingsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(IntegrationMappingsColumn column)
		{
			switch(column)
			{
					case IntegrationMappingsColumn.IntegrationMappingId:
					return entityData.IntegrationMappingId != _originalData.IntegrationMappingId;
					case IntegrationMappingsColumn.SiteId:
					return entityData.SiteId != _originalData.SiteId;
					case IntegrationMappingsColumn.IntegrationMappingTypeId:
					return entityData.IntegrationMappingTypeId != _originalData.IntegrationMappingTypeId;
					case IntegrationMappingsColumn.JxtEntity:
					return entityData.JxtEntity != _originalData.JxtEntity;
					case IntegrationMappingsColumn.JxtColumn:
					return entityData.JxtColumn != _originalData.JxtColumn;
					case IntegrationMappingsColumn.JxtType:
					return entityData.JxtType != _originalData.JxtType;
					case IntegrationMappingsColumn.JxtSize:
					return entityData.JxtSize != _originalData.JxtSize;
					case IntegrationMappingsColumn.ThirdPartyEntity:
					return entityData.ThirdPartyEntity != _originalData.ThirdPartyEntity;
					case IntegrationMappingsColumn.ThirdPartyColumn:
					return entityData.ThirdPartyColumn != _originalData.ThirdPartyColumn;
					case IntegrationMappingsColumn.ThirdPartyType:
					return entityData.ThirdPartyType != _originalData.ThirdPartyType;
					case IntegrationMappingsColumn.ThirdPartySize:
					return entityData.ThirdPartySize != _originalData.ThirdPartySize;
					case IntegrationMappingsColumn.Sequence:
					return entityData.Sequence != _originalData.Sequence;
					case IntegrationMappingsColumn.Sync:
					return entityData.Sync != _originalData.Sync;
					case IntegrationMappingsColumn.GlobalMapping:
					return entityData.GlobalMapping != _originalData.GlobalMapping;
					case IntegrationMappingsColumn.LastModifiedBy:
					return entityData.LastModifiedBy != _originalData.LastModifiedBy;
					case IntegrationMappingsColumn.LastModifiedDate:
					return entityData.LastModifiedDate != _originalData.LastModifiedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< IntegrationMappingsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.IntegrationMappingId != _originalData.IntegrationMappingId;
			result = result || entityData.SiteId != _originalData.SiteId;
			result = result || entityData.IntegrationMappingTypeId != _originalData.IntegrationMappingTypeId;
			result = result || entityData.JxtEntity != _originalData.JxtEntity;
			result = result || entityData.JxtColumn != _originalData.JxtColumn;
			result = result || entityData.JxtType != _originalData.JxtType;
			result = result || entityData.JxtSize != _originalData.JxtSize;
			result = result || entityData.ThirdPartyEntity != _originalData.ThirdPartyEntity;
			result = result || entityData.ThirdPartyColumn != _originalData.ThirdPartyColumn;
			result = result || entityData.ThirdPartyType != _originalData.ThirdPartyType;
			result = result || entityData.ThirdPartySize != _originalData.ThirdPartySize;
			result = result || entityData.Sequence != _originalData.Sequence;
			result = result || entityData.Sync != _originalData.Sync;
			result = result || entityData.GlobalMapping != _originalData.GlobalMapping;
			result = result || entityData.LastModifiedBy != _originalData.LastModifiedBy;
			result = result || entityData.LastModifiedDate != _originalData.LastModifiedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a IntegrationMappings Entity with the original data.
		///</summary>
		public IntegrationMappings GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateIntegrationMappings(
				_originalData.SiteId,
				_originalData.IntegrationMappingTypeId,
				_originalData.JxtEntity,
				_originalData.JxtColumn,
				_originalData.JxtType,
				_originalData.JxtSize,
				_originalData.ThirdPartyEntity,
				_originalData.ThirdPartyColumn,
				_originalData.ThirdPartyType,
				_originalData.ThirdPartySize,
				_originalData.Sequence,
				_originalData.Sync,
				_originalData.GlobalMapping,
				_originalData.LastModifiedBy,
				_originalData.LastModifiedDate
				);
				
			return (IntegrationMappings)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="IntegrationMappingsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is IntegrationMappingsBase)
				return ValueEquals(this, (IntegrationMappingsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="IntegrationMappingsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.IntegrationMappingId.GetHashCode() ^ 
					this.SiteId.GetHashCode() ^ 
					((this.IntegrationMappingTypeId == null) ? string.Empty : this.IntegrationMappingTypeId.ToString()).GetHashCode() ^ 
					((this.JxtEntity == null) ? string.Empty : this.JxtEntity.ToString()).GetHashCode() ^ 
					((this.JxtColumn == null) ? string.Empty : this.JxtColumn.ToString()).GetHashCode() ^ 
					((this.JxtType == null) ? string.Empty : this.JxtType.ToString()).GetHashCode() ^ 
					((this.JxtSize == null) ? string.Empty : this.JxtSize.ToString()).GetHashCode() ^ 
					((this.ThirdPartyEntity == null) ? string.Empty : this.ThirdPartyEntity.ToString()).GetHashCode() ^ 
					((this.ThirdPartyColumn == null) ? string.Empty : this.ThirdPartyColumn.ToString()).GetHashCode() ^ 
					((this.ThirdPartyType == null) ? string.Empty : this.ThirdPartyType.ToString()).GetHashCode() ^ 
					((this.ThirdPartySize == null) ? string.Empty : this.ThirdPartySize.ToString()).GetHashCode() ^ 
					((this.Sequence == null) ? string.Empty : this.Sequence.ToString()).GetHashCode() ^ 
					((this.Sync == null) ? string.Empty : this.Sync.ToString()).GetHashCode() ^ 
					((this.GlobalMapping == null) ? string.Empty : this.GlobalMapping.ToString()).GetHashCode() ^ 
					((this.LastModifiedBy == null) ? string.Empty : this.LastModifiedBy.ToString()).GetHashCode() ^ 
					((this.LastModifiedDate == null) ? string.Empty : this.LastModifiedDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="IntegrationMappingsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(IntegrationMappingsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="IntegrationMappingsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="IntegrationMappingsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="IntegrationMappingsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(IntegrationMappingsBase Object1, IntegrationMappingsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.IntegrationMappingId != Object2.IntegrationMappingId)
				equal = false;
			if (Object1.SiteId != Object2.SiteId)
				equal = false;
			if ( Object1.IntegrationMappingTypeId != null && Object2.IntegrationMappingTypeId != null )
			{
				if (Object1.IntegrationMappingTypeId != Object2.IntegrationMappingTypeId)
					equal = false;
			}
			else if (Object1.IntegrationMappingTypeId == null ^ Object2.IntegrationMappingTypeId == null )
			{
				equal = false;
			}
			if ( Object1.JxtEntity != null && Object2.JxtEntity != null )
			{
				if (Object1.JxtEntity != Object2.JxtEntity)
					equal = false;
			}
			else if (Object1.JxtEntity == null ^ Object2.JxtEntity == null )
			{
				equal = false;
			}
			if ( Object1.JxtColumn != null && Object2.JxtColumn != null )
			{
				if (Object1.JxtColumn != Object2.JxtColumn)
					equal = false;
			}
			else if (Object1.JxtColumn == null ^ Object2.JxtColumn == null )
			{
				equal = false;
			}
			if ( Object1.JxtType != null && Object2.JxtType != null )
			{
				if (Object1.JxtType != Object2.JxtType)
					equal = false;
			}
			else if (Object1.JxtType == null ^ Object2.JxtType == null )
			{
				equal = false;
			}
			if ( Object1.JxtSize != null && Object2.JxtSize != null )
			{
				if (Object1.JxtSize != Object2.JxtSize)
					equal = false;
			}
			else if (Object1.JxtSize == null ^ Object2.JxtSize == null )
			{
				equal = false;
			}
			if ( Object1.ThirdPartyEntity != null && Object2.ThirdPartyEntity != null )
			{
				if (Object1.ThirdPartyEntity != Object2.ThirdPartyEntity)
					equal = false;
			}
			else if (Object1.ThirdPartyEntity == null ^ Object2.ThirdPartyEntity == null )
			{
				equal = false;
			}
			if ( Object1.ThirdPartyColumn != null && Object2.ThirdPartyColumn != null )
			{
				if (Object1.ThirdPartyColumn != Object2.ThirdPartyColumn)
					equal = false;
			}
			else if (Object1.ThirdPartyColumn == null ^ Object2.ThirdPartyColumn == null )
			{
				equal = false;
			}
			if ( Object1.ThirdPartyType != null && Object2.ThirdPartyType != null )
			{
				if (Object1.ThirdPartyType != Object2.ThirdPartyType)
					equal = false;
			}
			else if (Object1.ThirdPartyType == null ^ Object2.ThirdPartyType == null )
			{
				equal = false;
			}
			if ( Object1.ThirdPartySize != null && Object2.ThirdPartySize != null )
			{
				if (Object1.ThirdPartySize != Object2.ThirdPartySize)
					equal = false;
			}
			else if (Object1.ThirdPartySize == null ^ Object2.ThirdPartySize == null )
			{
				equal = false;
			}
			if ( Object1.Sequence != null && Object2.Sequence != null )
			{
				if (Object1.Sequence != Object2.Sequence)
					equal = false;
			}
			else if (Object1.Sequence == null ^ Object2.Sequence == null )
			{
				equal = false;
			}
			if ( Object1.Sync != null && Object2.Sync != null )
			{
				if (Object1.Sync != Object2.Sync)
					equal = false;
			}
			else if (Object1.Sync == null ^ Object2.Sync == null )
			{
				equal = false;
			}
			if ( Object1.GlobalMapping != null && Object2.GlobalMapping != null )
			{
				if (Object1.GlobalMapping != Object2.GlobalMapping)
					equal = false;
			}
			else if (Object1.GlobalMapping == null ^ Object2.GlobalMapping == null )
			{
				equal = false;
			}
			if ( Object1.LastModifiedBy != null && Object2.LastModifiedBy != null )
			{
				if (Object1.LastModifiedBy != Object2.LastModifiedBy)
					equal = false;
			}
			else if (Object1.LastModifiedBy == null ^ Object2.LastModifiedBy == null )
			{
				equal = false;
			}
			if ( Object1.LastModifiedDate != null && Object2.LastModifiedDate != null )
			{
				if (Object1.LastModifiedDate != Object2.LastModifiedDate)
					equal = false;
			}
			else if (Object1.LastModifiedDate == null ^ Object2.LastModifiedDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((IntegrationMappingsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static IntegrationMappingsComparer GetComparer()
        {
            return new IntegrationMappingsComparer();
        }
        */

        // Comparer delegates back to IntegrationMappings
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(IntegrationMappings rhs, IntegrationMappingsColumn which)
        {
            switch (which)
            {
            	
            	
            	case IntegrationMappingsColumn.IntegrationMappingId:
            		return this.IntegrationMappingId.CompareTo(rhs.IntegrationMappingId);
            		
            		                 
            	
            	
            	case IntegrationMappingsColumn.SiteId:
            		return this.SiteId.CompareTo(rhs.SiteId);
            		
            		                 
            	
            	
            	case IntegrationMappingsColumn.IntegrationMappingTypeId:
            		return this.IntegrationMappingTypeId.Value.CompareTo(rhs.IntegrationMappingTypeId.Value);
            		
            		                 
            	
            	
            	case IntegrationMappingsColumn.JxtEntity:
            		return this.JxtEntity.CompareTo(rhs.JxtEntity);
            		
            		                 
            	
            	
            	case IntegrationMappingsColumn.JxtColumn:
            		return this.JxtColumn.CompareTo(rhs.JxtColumn);
            		
            		                 
            	
            	
            	case IntegrationMappingsColumn.JxtType:
            		return this.JxtType.CompareTo(rhs.JxtType);
            		
            		                 
            	
            	
            	case IntegrationMappingsColumn.JxtSize:
            		return this.JxtSize.Value.CompareTo(rhs.JxtSize.Value);
            		
            		                 
            	
            	
            	case IntegrationMappingsColumn.ThirdPartyEntity:
            		return this.ThirdPartyEntity.CompareTo(rhs.ThirdPartyEntity);
            		
            		                 
            	
            	
            	case IntegrationMappingsColumn.ThirdPartyColumn:
            		return this.ThirdPartyColumn.CompareTo(rhs.ThirdPartyColumn);
            		
            		                 
            	
            	
            	case IntegrationMappingsColumn.ThirdPartyType:
            		return this.ThirdPartyType.CompareTo(rhs.ThirdPartyType);
            		
            		                 
            	
            	
            	case IntegrationMappingsColumn.ThirdPartySize:
            		return this.ThirdPartySize.Value.CompareTo(rhs.ThirdPartySize.Value);
            		
            		                 
            	
            	
            	case IntegrationMappingsColumn.Sequence:
            		return this.Sequence.Value.CompareTo(rhs.Sequence.Value);
            		
            		                 
            	
            	
            	case IntegrationMappingsColumn.Sync:
            		return this.Sync.Value.CompareTo(rhs.Sync.Value);
            		
            		                 
            	
            	
            	case IntegrationMappingsColumn.GlobalMapping:
            		return this.GlobalMapping.Value.CompareTo(rhs.GlobalMapping.Value);
            		
            		                 
            	
            	
            	case IntegrationMappingsColumn.LastModifiedBy:
            		return this.LastModifiedBy.Value.CompareTo(rhs.LastModifiedBy.Value);
            		
            		                 
            	
            	
            	case IntegrationMappingsColumn.LastModifiedDate:
            		return this.LastModifiedDate.Value.CompareTo(rhs.LastModifiedDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<IntegrationMappingsKey> Members
		
		// member variable for the EntityId property
		private IntegrationMappingsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual IntegrationMappingsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new IntegrationMappingsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("IntegrationMappings")
					.Append("|").Append( this.IntegrationMappingId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- IntegrationMappingId: {0}{16}- SiteId: {1}{16}- IntegrationMappingTypeId: {2}{16}- JxtEntity: {3}{16}- JxtColumn: {4}{16}- JxtType: {5}{16}- JxtSize: {6}{16}- ThirdPartyEntity: {7}{16}- ThirdPartyColumn: {8}{16}- ThirdPartyType: {9}{16}- ThirdPartySize: {10}{16}- Sequence: {11}{16}- Sync: {12}{16}- GlobalMapping: {13}{16}- LastModifiedBy: {14}{16}- LastModifiedDate: {15}{16}{18}", 
				this.IntegrationMappingId,
				this.SiteId,
				(this.IntegrationMappingTypeId == null) ? string.Empty : this.IntegrationMappingTypeId.ToString(),
				(this.JxtEntity == null) ? string.Empty : this.JxtEntity.ToString(),
				(this.JxtColumn == null) ? string.Empty : this.JxtColumn.ToString(),
				(this.JxtType == null) ? string.Empty : this.JxtType.ToString(),
				(this.JxtSize == null) ? string.Empty : this.JxtSize.ToString(),
				(this.ThirdPartyEntity == null) ? string.Empty : this.ThirdPartyEntity.ToString(),
				(this.ThirdPartyColumn == null) ? string.Empty : this.ThirdPartyColumn.ToString(),
				(this.ThirdPartyType == null) ? string.Empty : this.ThirdPartyType.ToString(),
				(this.ThirdPartySize == null) ? string.Empty : this.ThirdPartySize.ToString(),
				(this.Sequence == null) ? string.Empty : this.Sequence.ToString(),
				(this.Sync == null) ? string.Empty : this.Sync.ToString(),
				(this.GlobalMapping == null) ? string.Empty : this.GlobalMapping.ToString(),
				(this.LastModifiedBy == null) ? string.Empty : this.LastModifiedBy.ToString(),
				(this.LastModifiedDate == null) ? string.Empty : this.LastModifiedDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'IntegrationMappings' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class IntegrationMappingsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// IntegrationMappingID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "IntegrationMappings"</remarks>
		public System.Int32 IntegrationMappingId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SiteID : 
		/// </summary>
		public System.Int32		  SiteId = (int)0;
		
		/// <summary>
		/// IntegrationMappingTypeID : 
		/// </summary>
		public System.Int32?		  IntegrationMappingTypeId = null;
		
		/// <summary>
		/// JXTEntity : 
		/// </summary>
		public System.String		  JxtEntity = null;
		
		/// <summary>
		/// JXTColumn : 
		/// </summary>
		public System.String		  JxtColumn = null;
		
		/// <summary>
		/// JXTType : 
		/// </summary>
		public System.String		  JxtType = null;
		
		/// <summary>
		/// JXTSize : 
		/// </summary>
		public System.Int32?		  JxtSize = null;
		
		/// <summary>
		/// ThirdPartyEntity : 
		/// </summary>
		public System.String		  ThirdPartyEntity = null;
		
		/// <summary>
		/// ThirdPartyColumn : 
		/// </summary>
		public System.String		  ThirdPartyColumn = null;
		
		/// <summary>
		/// ThirdPartyType : 
		/// </summary>
		public System.String		  ThirdPartyType = null;
		
		/// <summary>
		/// ThirdPartySize : 
		/// </summary>
		public System.Int32?		  ThirdPartySize = null;
		
		/// <summary>
		/// Sequence : 
		/// </summary>
		public System.Int32?		  Sequence = null;
		
		/// <summary>
		/// Sync : 
		/// </summary>
		public System.Int32?		  Sync = null;
		
		/// <summary>
		/// GlobalMapping : 
		/// </summary>
		public System.Boolean?		  GlobalMapping = null;
		
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		public System.Int32?		  LastModifiedBy = null;
		
		/// <summary>
		/// LastModifiedDate : 
		/// </summary>
		public System.DateTime?		  LastModifiedDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Sites _siteIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Sites SiteIdSource
      	{
            get { return this._siteIdSource; }
            set { this._siteIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			IntegrationMappingsEntityData _tmp = new IntegrationMappingsEntityData();
						
			_tmp.IntegrationMappingId = this.IntegrationMappingId;
			
			_tmp.SiteId = this.SiteId;
			_tmp.IntegrationMappingTypeId = this.IntegrationMappingTypeId;
			_tmp.JxtEntity = this.JxtEntity;
			_tmp.JxtColumn = this.JxtColumn;
			_tmp.JxtType = this.JxtType;
			_tmp.JxtSize = this.JxtSize;
			_tmp.ThirdPartyEntity = this.ThirdPartyEntity;
			_tmp.ThirdPartyColumn = this.ThirdPartyColumn;
			_tmp.ThirdPartyType = this.ThirdPartyType;
			_tmp.ThirdPartySize = this.ThirdPartySize;
			_tmp.Sequence = this.Sequence;
			_tmp.Sync = this.Sync;
			_tmp.GlobalMapping = this.GlobalMapping;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.LastModifiedDate = this.LastModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.SiteIdSource != null)
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource) as Sites;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			IntegrationMappingsEntityData _tmp = new IntegrationMappingsEntityData();
						
			_tmp.IntegrationMappingId = this.IntegrationMappingId;
			
			_tmp.SiteId = this.SiteId;
			_tmp.IntegrationMappingTypeId = this.IntegrationMappingTypeId;
			_tmp.JxtEntity = this.JxtEntity;
			_tmp.JxtColumn = this.JxtColumn;
			_tmp.JxtType = this.JxtType;
			_tmp.JxtSize = this.JxtSize;
			_tmp.ThirdPartyEntity = this.ThirdPartyEntity;
			_tmp.ThirdPartyColumn = this.ThirdPartyColumn;
			_tmp.ThirdPartyType = this.ThirdPartyType;
			_tmp.ThirdPartySize = this.ThirdPartySize;
			_tmp.Sequence = this.Sequence;
			_tmp.Sync = this.Sync;
			_tmp.GlobalMapping = this.GlobalMapping;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.LastModifiedDate = this.LastModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				_tmp.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegrationMappingsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(IntegrationMappingsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegrationMappingsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(IntegrationMappingsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegrationMappingsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(IntegrationMappingsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				IntegrationMappingsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new IntegrationMappingsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegrationMappingsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(IntegrationMappingsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				IntegrationMappingsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new IntegrationMappingsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region IntegrationMappingsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="IntegrationMappings"/> object.
	/// </remarks>
	public class IntegrationMappingsEventArgs : System.EventArgs
	{
		private IntegrationMappingsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the IntegrationMappingsEventArgs class.
		///</summary>
		public IntegrationMappingsEventArgs(IntegrationMappingsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the IntegrationMappingsEventArgs class.
		///</summary>
		public IntegrationMappingsEventArgs(IntegrationMappingsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The IntegrationMappingsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="IntegrationMappingsColumn" />
		public IntegrationMappingsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all IntegrationMappings related events.
	///</summary>
	public delegate void IntegrationMappingsEventHandler(object sender, IntegrationMappingsEventArgs e);
	
	#region IntegrationMappingsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class IntegrationMappingsComparer : System.Collections.Generic.IComparer<IntegrationMappings>
	{
		IntegrationMappingsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:IntegrationMappingsComparer"/> class.
        /// </summary>
		public IntegrationMappingsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:IntegrationMappingsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public IntegrationMappingsComparer(IntegrationMappingsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="IntegrationMappings"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="IntegrationMappings"/> to compare.</param>
        /// <param name="b">The second <c>IntegrationMappings</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(IntegrationMappings a, IntegrationMappings b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(IntegrationMappings entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(IntegrationMappings a, IntegrationMappings b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public IntegrationMappingsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region IntegrationMappingsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="IntegrationMappings"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class IntegrationMappingsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the IntegrationMappingsKey class.
		/// </summary>
		public IntegrationMappingsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the IntegrationMappingsKey class.
		/// </summary>
		public IntegrationMappingsKey(IntegrationMappingsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.IntegrationMappingId = entity.IntegrationMappingId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the IntegrationMappingsKey class.
		/// </summary>
		public IntegrationMappingsKey(System.Int32 _integrationMappingId)
		{
			#region Init Properties

			this.IntegrationMappingId = _integrationMappingId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private IntegrationMappingsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public IntegrationMappingsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the IntegrationMappingId property
		private System.Int32 _integrationMappingId;
		
		/// <summary>
		/// Gets or sets the IntegrationMappingId property.
		/// </summary>
		public System.Int32 IntegrationMappingId
		{
			get { return _integrationMappingId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.IntegrationMappingId = value;
				
				_integrationMappingId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				IntegrationMappingId = ( values["IntegrationMappingId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["IntegrationMappingId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("IntegrationMappingId", IntegrationMappingId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("IntegrationMappingId: {0}{1}",
								IntegrationMappingId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region IntegrationMappingsColumn Enum
	
	/// <summary>
	/// Enumerate the IntegrationMappings columns.
	/// </summary>
	[Serializable]
	public enum IntegrationMappingsColumn : int
	{
		/// <summary>
		/// IntegrationMappingId : 
		/// </summary>
		[EnumTextValue("IntegrationMappingID")]
		[ColumnEnum("IntegrationMappingID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		IntegrationMappingId = 1,
		/// <summary>
		/// SiteId : 
		/// </summary>
		[EnumTextValue("SiteID")]
		[ColumnEnum("SiteID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteId = 2,
		/// <summary>
		/// IntegrationMappingTypeId : 
		/// </summary>
		[EnumTextValue("IntegrationMappingTypeID")]
		[ColumnEnum("IntegrationMappingTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		IntegrationMappingTypeId = 3,
		/// <summary>
		/// JxtEntity : 
		/// </summary>
		[EnumTextValue("JXTEntity")]
		[ColumnEnum("JXTEntity", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 75)]
		JxtEntity = 4,
		/// <summary>
		/// JxtColumn : 
		/// </summary>
		[EnumTextValue("JXTColumn")]
		[ColumnEnum("JXTColumn", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 75)]
		JxtColumn = 5,
		/// <summary>
		/// JxtType : 
		/// </summary>
		[EnumTextValue("JXTType")]
		[ColumnEnum("JXTType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 75)]
		JxtType = 6,
		/// <summary>
		/// JxtSize : 
		/// </summary>
		[EnumTextValue("JXTSize")]
		[ColumnEnum("JXTSize", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		JxtSize = 7,
		/// <summary>
		/// ThirdPartyEntity : 
		/// </summary>
		[EnumTextValue("ThirdPartyEntity")]
		[ColumnEnum("ThirdPartyEntity", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 75)]
		ThirdPartyEntity = 8,
		/// <summary>
		/// ThirdPartyColumn : 
		/// </summary>
		[EnumTextValue("ThirdPartyColumn")]
		[ColumnEnum("ThirdPartyColumn", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 75)]
		ThirdPartyColumn = 9,
		/// <summary>
		/// ThirdPartyType : 
		/// </summary>
		[EnumTextValue("ThirdPartyType")]
		[ColumnEnum("ThirdPartyType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 75)]
		ThirdPartyType = 10,
		/// <summary>
		/// ThirdPartySize : 
		/// </summary>
		[EnumTextValue("ThirdPartySize")]
		[ColumnEnum("ThirdPartySize", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ThirdPartySize = 11,
		/// <summary>
		/// Sequence : 
		/// </summary>
		[EnumTextValue("Sequence")]
		[ColumnEnum("Sequence", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Sequence = 12,
		/// <summary>
		/// Sync : 
		/// </summary>
		[EnumTextValue("Sync")]
		[ColumnEnum("Sync", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Sync = 13,
		/// <summary>
		/// GlobalMapping : 
		/// </summary>
		[EnumTextValue("GlobalMapping")]
		[ColumnEnum("GlobalMapping", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		GlobalMapping = 14,
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		[EnumTextValue("LastModifiedBy")]
		[ColumnEnum("LastModifiedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModifiedBy = 15,
		/// <summary>
		/// LastModifiedDate : 
		/// </summary>
		[EnumTextValue("LastModifiedDate")]
		[ColumnEnum("LastModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModifiedDate = 16
	}//End enum

	#endregion IntegrationMappingsColumn Enum

} // end namespace


/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file InvoiceOrder.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'InvoiceOrder' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class InvoiceOrderBase : EntityBase, IInvoiceOrder, IEntityId<InvoiceOrderKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private InvoiceOrderEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private InvoiceOrderEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private InvoiceOrderEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<InvoiceOrder> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event InvoiceOrderEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event InvoiceOrderEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="InvoiceOrderBase"/> instance.
		///</summary>
		public InvoiceOrderBase()
		{
			this.entityData = new InvoiceOrderEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="InvoiceOrderBase"/> instance.
		///</summary>
		///<param name="_advertiserUserId"></param>
		///<param name="_createdDate"></param>
		///<param name="_paymentTypeId"></param>
		///<param name="_isPayable"></param>
		///<param name="_isPaid"></param>
		///<param name="_datePaid"></param>
		///<param name="_paidByAdvertiserUserId"></param>
		///<param name="_totalAmount"></param>
		///<param name="_gst"></param>
		///<param name="_currencyId"></param>
		///<param name="_discountAmount"></param>
		///<param name="_discountGst"></param>
		///<param name="_responseCode"></param>
		///<param name="_responseText"></param>
		///<param name="_bankTransactionId"></param>
		///<param name="_responseXml"></param>
		///<param name="_success"></param>
		///<param name="_cardName"></param>
		///<param name="_cardNumber"></param>
		///<param name="_expiryMonth"></param>
		///<param name="_expiryYear"></param>
		///<param name="_cvv"></param>
		public InvoiceOrderBase(System.Int32 _advertiserUserId, System.DateTime _createdDate, 
			System.Int32? _paymentTypeId, System.Boolean _isPayable, System.Boolean _isPaid, System.DateTime? _datePaid, 
			System.Int32? _paidByAdvertiserUserId, System.Decimal _totalAmount, System.Decimal _gst, 
			System.Int32? _currencyId, System.Decimal? _discountAmount, System.Decimal? _discountGst, 
			System.String _responseCode, System.String _responseText, System.String _bankTransactionId, 
			System.String _responseXml, System.Int32? _success, System.String _cardName, System.String _cardNumber, 
			System.Int32? _expiryMonth, System.Int32? _expiryYear, System.String _cvv)
		{
			this.entityData = new InvoiceOrderEntityData();
			this.backupData = null;

			this.AdvertiserUserId = _advertiserUserId;
			this.CreatedDate = _createdDate;
			this.PaymentTypeId = _paymentTypeId;
			this.IsPayable = _isPayable;
			this.IsPaid = _isPaid;
			this.DatePaid = _datePaid;
			this.PaidByAdvertiserUserId = _paidByAdvertiserUserId;
			this.TotalAmount = _totalAmount;
			this.Gst = _gst;
			this.CurrencyId = _currencyId;
			this.DiscountAmount = _discountAmount;
			this.DiscountGst = _discountGst;
			this.ResponseCode = _responseCode;
			this.ResponseText = _responseText;
			this.BankTransactionId = _bankTransactionId;
			this.ResponseXml = _responseXml;
			this.Success = _success;
			this.CardName = _cardName;
			this.CardNumber = _cardNumber;
			this.ExpiryMonth = _expiryMonth;
			this.ExpiryYear = _expiryYear;
			this.Cvv = _cvv;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="InvoiceOrder"/> instance.
		///</summary>
		///<param name="_advertiserUserId"></param>
		///<param name="_createdDate"></param>
		///<param name="_paymentTypeId"></param>
		///<param name="_isPayable"></param>
		///<param name="_isPaid"></param>
		///<param name="_datePaid"></param>
		///<param name="_paidByAdvertiserUserId"></param>
		///<param name="_totalAmount"></param>
		///<param name="_gst"></param>
		///<param name="_currencyId"></param>
		///<param name="_discountAmount"></param>
		///<param name="_discountGst"></param>
		///<param name="_responseCode"></param>
		///<param name="_responseText"></param>
		///<param name="_bankTransactionId"></param>
		///<param name="_responseXml"></param>
		///<param name="_success"></param>
		///<param name="_cardName"></param>
		///<param name="_cardNumber"></param>
		///<param name="_expiryMonth"></param>
		///<param name="_expiryYear"></param>
		///<param name="_cvv"></param>
		public static InvoiceOrder CreateInvoiceOrder(System.Int32 _advertiserUserId, System.DateTime _createdDate, 
			System.Int32? _paymentTypeId, System.Boolean _isPayable, System.Boolean _isPaid, System.DateTime? _datePaid, 
			System.Int32? _paidByAdvertiserUserId, System.Decimal _totalAmount, System.Decimal _gst, 
			System.Int32? _currencyId, System.Decimal? _discountAmount, System.Decimal? _discountGst, 
			System.String _responseCode, System.String _responseText, System.String _bankTransactionId, 
			System.String _responseXml, System.Int32? _success, System.String _cardName, System.String _cardNumber, 
			System.Int32? _expiryMonth, System.Int32? _expiryYear, System.String _cvv)
		{
			InvoiceOrder newInvoiceOrder = new InvoiceOrder();
			newInvoiceOrder.AdvertiserUserId = _advertiserUserId;
			newInvoiceOrder.CreatedDate = _createdDate;
			newInvoiceOrder.PaymentTypeId = _paymentTypeId;
			newInvoiceOrder.IsPayable = _isPayable;
			newInvoiceOrder.IsPaid = _isPaid;
			newInvoiceOrder.DatePaid = _datePaid;
			newInvoiceOrder.PaidByAdvertiserUserId = _paidByAdvertiserUserId;
			newInvoiceOrder.TotalAmount = _totalAmount;
			newInvoiceOrder.Gst = _gst;
			newInvoiceOrder.CurrencyId = _currencyId;
			newInvoiceOrder.DiscountAmount = _discountAmount;
			newInvoiceOrder.DiscountGst = _discountGst;
			newInvoiceOrder.ResponseCode = _responseCode;
			newInvoiceOrder.ResponseText = _responseText;
			newInvoiceOrder.BankTransactionId = _bankTransactionId;
			newInvoiceOrder.ResponseXml = _responseXml;
			newInvoiceOrder.Success = _success;
			newInvoiceOrder.CardName = _cardName;
			newInvoiceOrder.CardNumber = _cardNumber;
			newInvoiceOrder.ExpiryMonth = _expiryMonth;
			newInvoiceOrder.ExpiryYear = _expiryYear;
			newInvoiceOrder.Cvv = _cvv;
			return newInvoiceOrder;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the OrderId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 OrderId
		{
			get
			{
				return this.entityData.OrderId; 
			}
			
			set
			{
				if (this.entityData.OrderId == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.OrderId, this.entityData.OrderId);
				this.entityData.OrderId = value;
				this.EntityId.OrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.OrderId, this.entityData.OrderId);
				OnPropertyChanged("OrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdvertiserUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 AdvertiserUserId
		{
			get
			{
				return this.entityData.AdvertiserUserId; 
			}
			
			set
			{
				if (this.entityData.AdvertiserUserId == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.AdvertiserUserId, this.entityData.AdvertiserUserId);
				this.entityData.AdvertiserUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.AdvertiserUserId, this.entityData.AdvertiserUserId);
				OnPropertyChanged("AdvertiserUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaymentTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPaymentTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PaymentTypeId
		{
			get
			{
				return this.entityData.PaymentTypeId; 
			}
			
			set
			{
				if (this.entityData.PaymentTypeId == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.PaymentTypeId, this.entityData.PaymentTypeId);
				this.entityData.PaymentTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.PaymentTypeId, this.entityData.PaymentTypeId);
				OnPropertyChanged("PaymentTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsPayable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsPayable
		{
			get
			{
				return this.entityData.IsPayable; 
			}
			
			set
			{
				if (this.entityData.IsPayable == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.IsPayable, this.entityData.IsPayable);
				this.entityData.IsPayable = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.IsPayable, this.entityData.IsPayable);
				OnPropertyChanged("IsPayable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsPaid property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsPaid
		{
			get
			{
				return this.entityData.IsPaid; 
			}
			
			set
			{
				if (this.entityData.IsPaid == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.IsPaid, this.entityData.IsPaid);
				this.entityData.IsPaid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.IsPaid, this.entityData.IsPaid);
				OnPropertyChanged("IsPaid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DatePaid property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDatePaidNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DatePaid
		{
			get
			{
				return this.entityData.DatePaid; 
			}
			
			set
			{
				if (this.entityData.DatePaid == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.DatePaid, this.entityData.DatePaid);
				this.entityData.DatePaid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.DatePaid, this.entityData.DatePaid);
				OnPropertyChanged("DatePaid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaidByAdvertiserUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPaidByAdvertiserUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PaidByAdvertiserUserId
		{
			get
			{
				return this.entityData.PaidByAdvertiserUserId; 
			}
			
			set
			{
				if (this.entityData.PaidByAdvertiserUserId == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.PaidByAdvertiserUserId, this.entityData.PaidByAdvertiserUserId);
				this.entityData.PaidByAdvertiserUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.PaidByAdvertiserUserId, this.entityData.PaidByAdvertiserUserId);
				OnPropertyChanged("PaidByAdvertiserUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalAmount property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal TotalAmount
		{
			get
			{
				return this.entityData.TotalAmount; 
			}
			
			set
			{
				if (this.entityData.TotalAmount == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.TotalAmount, this.entityData.TotalAmount);
				this.entityData.TotalAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.TotalAmount, this.entityData.TotalAmount);
				OnPropertyChanged("TotalAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Gst property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Gst
		{
			get
			{
				return this.entityData.Gst; 
			}
			
			set
			{
				if (this.entityData.Gst == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.Gst, this.entityData.Gst);
				this.entityData.Gst = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.Gst, this.entityData.Gst);
				OnPropertyChanged("Gst");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrencyId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCurrencyIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CurrencyId
		{
			get
			{
				return this.entityData.CurrencyId; 
			}
			
			set
			{
				if (this.entityData.CurrencyId == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.CurrencyId, this.entityData.CurrencyId);
				this.entityData.CurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.CurrencyId, this.entityData.CurrencyId);
				OnPropertyChanged("CurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscountAmount property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDiscountAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DiscountAmount
		{
			get
			{
				return this.entityData.DiscountAmount; 
			}
			
			set
			{
				if (this.entityData.DiscountAmount == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.DiscountAmount, this.entityData.DiscountAmount);
				this.entityData.DiscountAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.DiscountAmount, this.entityData.DiscountAmount);
				OnPropertyChanged("DiscountAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscountGst property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDiscountGstNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DiscountGst
		{
			get
			{
				return this.entityData.DiscountGst; 
			}
			
			set
			{
				if (this.entityData.DiscountGst == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.DiscountGst, this.entityData.DiscountGst);
				this.entityData.DiscountGst = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.DiscountGst, this.entityData.DiscountGst);
				OnPropertyChanged("DiscountGst");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResponseCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String ResponseCode
		{
			get
			{
				return this.entityData.ResponseCode; 
			}
			
			set
			{
				if (this.entityData.ResponseCode == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.ResponseCode, this.entityData.ResponseCode);
				this.entityData.ResponseCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.ResponseCode, this.entityData.ResponseCode);
				OnPropertyChanged("ResponseCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResponseText property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String ResponseText
		{
			get
			{
				return this.entityData.ResponseText; 
			}
			
			set
			{
				if (this.entityData.ResponseText == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.ResponseText, this.entityData.ResponseText);
				this.entityData.ResponseText = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.ResponseText, this.entityData.ResponseText);
				OnPropertyChanged("ResponseText");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BankTransactionId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String BankTransactionId
		{
			get
			{
				return this.entityData.BankTransactionId; 
			}
			
			set
			{
				if (this.entityData.BankTransactionId == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.BankTransactionId, this.entityData.BankTransactionId);
				this.entityData.BankTransactionId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.BankTransactionId, this.entityData.BankTransactionId);
				OnPropertyChanged("BankTransactionId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResponseXml property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String ResponseXml
		{
			get
			{
				return this.entityData.ResponseXml; 
			}
			
			set
			{
				if (this.entityData.ResponseXml == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.ResponseXml, this.entityData.ResponseXml);
				this.entityData.ResponseXml = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.ResponseXml, this.entityData.ResponseXml);
				OnPropertyChanged("ResponseXml");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Success property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSuccessNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Success
		{
			get
			{
				return this.entityData.Success; 
			}
			
			set
			{
				if (this.entityData.Success == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.Success, this.entityData.Success);
				this.entityData.Success = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.Success, this.entityData.Success);
				OnPropertyChanged("Success");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CardName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String CardName
		{
			get
			{
				return this.entityData.CardName; 
			}
			
			set
			{
				if (this.entityData.CardName == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.CardName, this.entityData.CardName);
				this.entityData.CardName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.CardName, this.entityData.CardName);
				OnPropertyChanged("CardName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CardNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String CardNumber
		{
			get
			{
				return this.entityData.CardNumber; 
			}
			
			set
			{
				if (this.entityData.CardNumber == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.CardNumber, this.entityData.CardNumber);
				this.entityData.CardNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.CardNumber, this.entityData.CardNumber);
				OnPropertyChanged("CardNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpiryMonth property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsExpiryMonthNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ExpiryMonth
		{
			get
			{
				return this.entityData.ExpiryMonth; 
			}
			
			set
			{
				if (this.entityData.ExpiryMonth == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.ExpiryMonth, this.entityData.ExpiryMonth);
				this.entityData.ExpiryMonth = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.ExpiryMonth, this.entityData.ExpiryMonth);
				OnPropertyChanged("ExpiryMonth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpiryYear property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsExpiryYearNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ExpiryYear
		{
			get
			{
				return this.entityData.ExpiryYear; 
			}
			
			set
			{
				if (this.entityData.ExpiryYear == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.ExpiryYear, this.entityData.ExpiryYear);
				this.entityData.ExpiryYear = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.ExpiryYear, this.entityData.ExpiryYear);
				OnPropertyChanged("ExpiryYear");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Cvv property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 4)]
		public virtual System.String Cvv
		{
			get
			{
				return this.entityData.Cvv; 
			}
			
			set
			{
				if (this.entityData.Cvv == value)
					return;
					
				OnColumnChanging(InvoiceOrderColumn.Cvv, this.entityData.Cvv);
				this.entityData.Cvv = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceOrderColumn.Cvv, this.entityData.Cvv);
				OnPropertyChanged("Cvv");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdvertiserUsers"/>.
		/// </summary>
		/// <value>The source AdvertiserUsers for AdvertiserUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdvertiserUsers AdvertiserUserIdSource
      	{
            get { return entityData.AdvertiserUserIdSource; }
            set { entityData.AdvertiserUserIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of Invoice objects
		///	which are related to this object through the relation FK__Invoice__OrderID__1C94162F
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Invoice> InvoiceCollection
		{
			get { return entityData.InvoiceCollection; }
			set { entityData.InvoiceCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ResponseCode", "Response Code", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ResponseText", "Response Text", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BankTransactionId", "Bank Transaction Id", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CardName", "Card Name", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CardNumber", "Card Number", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Cvv", "Cvv", 4));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "InvoiceOrder"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"OrderID", "AdvertiserUserID", "CreatedDate", "PaymentTypeID", "IsPayable", "IsPaid", "DatePaid", "PaidByAdvertiserUserID", "TotalAmount", "GST", "CurrencyID", "DiscountAmount", "DiscountGST", "responseCode", "responseText", "bankTransactionID", "ResponseXML", "Success", "CardName", "CardNumber", "ExpiryMonth", "ExpiryYear", "CVV"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as InvoiceOrderEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (InvoiceOrder) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<InvoiceOrder>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as InvoiceOrder);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed InvoiceOrder Entity 
		///</summary>
		protected virtual InvoiceOrder Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			InvoiceOrder copy = new InvoiceOrder();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.OrderId = this.OrderId;
				copy.AdvertiserUserId = this.AdvertiserUserId;
				copy.CreatedDate = this.CreatedDate;
				copy.PaymentTypeId = this.PaymentTypeId;
				copy.IsPayable = this.IsPayable;
				copy.IsPaid = this.IsPaid;
				copy.DatePaid = this.DatePaid;
				copy.PaidByAdvertiserUserId = this.PaidByAdvertiserUserId;
				copy.TotalAmount = this.TotalAmount;
				copy.Gst = this.Gst;
				copy.CurrencyId = this.CurrencyId;
				copy.DiscountAmount = this.DiscountAmount;
				copy.DiscountGst = this.DiscountGst;
				copy.ResponseCode = this.ResponseCode;
				copy.ResponseText = this.ResponseText;
				copy.BankTransactionId = this.BankTransactionId;
				copy.ResponseXml = this.ResponseXml;
				copy.Success = this.Success;
				copy.CardName = this.CardName;
				copy.CardNumber = this.CardNumber;
				copy.ExpiryMonth = this.ExpiryMonth;
				copy.ExpiryYear = this.ExpiryYear;
				copy.Cvv = this.Cvv;
			
			if (this.AdvertiserUserIdSource != null && existingCopies.Contains(this.AdvertiserUserIdSource))
				copy.AdvertiserUserIdSource = existingCopies[this.AdvertiserUserIdSource] as AdvertiserUsers;
			else
				copy.AdvertiserUserIdSource = MakeCopyOf(this.AdvertiserUserIdSource, existingCopies) as AdvertiserUsers;
		
			//deep copy nested objects
			copy.InvoiceCollection = (TList<Invoice>) MakeCopyOf(this.InvoiceCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed InvoiceOrder Entity 
		///</summary>
		public virtual InvoiceOrder Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed InvoiceOrder Entity which is a deep copy of the current entity.
		///</summary>
		public virtual InvoiceOrder DeepCopy()
		{
			return EntityHelper.Clone<InvoiceOrder>(this as InvoiceOrder);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as InvoiceOrderEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new InvoiceOrderEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as InvoiceOrderEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(InvoiceOrderColumn column)
		{
			switch(column)
			{
					case InvoiceOrderColumn.OrderId:
					return entityData.OrderId != _originalData.OrderId;
					case InvoiceOrderColumn.AdvertiserUserId:
					return entityData.AdvertiserUserId != _originalData.AdvertiserUserId;
					case InvoiceOrderColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case InvoiceOrderColumn.PaymentTypeId:
					return entityData.PaymentTypeId != _originalData.PaymentTypeId;
					case InvoiceOrderColumn.IsPayable:
					return entityData.IsPayable != _originalData.IsPayable;
					case InvoiceOrderColumn.IsPaid:
					return entityData.IsPaid != _originalData.IsPaid;
					case InvoiceOrderColumn.DatePaid:
					return entityData.DatePaid != _originalData.DatePaid;
					case InvoiceOrderColumn.PaidByAdvertiserUserId:
					return entityData.PaidByAdvertiserUserId != _originalData.PaidByAdvertiserUserId;
					case InvoiceOrderColumn.TotalAmount:
					return entityData.TotalAmount != _originalData.TotalAmount;
					case InvoiceOrderColumn.Gst:
					return entityData.Gst != _originalData.Gst;
					case InvoiceOrderColumn.CurrencyId:
					return entityData.CurrencyId != _originalData.CurrencyId;
					case InvoiceOrderColumn.DiscountAmount:
					return entityData.DiscountAmount != _originalData.DiscountAmount;
					case InvoiceOrderColumn.DiscountGst:
					return entityData.DiscountGst != _originalData.DiscountGst;
					case InvoiceOrderColumn.ResponseCode:
					return entityData.ResponseCode != _originalData.ResponseCode;
					case InvoiceOrderColumn.ResponseText:
					return entityData.ResponseText != _originalData.ResponseText;
					case InvoiceOrderColumn.BankTransactionId:
					return entityData.BankTransactionId != _originalData.BankTransactionId;
					case InvoiceOrderColumn.ResponseXml:
					return entityData.ResponseXml != _originalData.ResponseXml;
					case InvoiceOrderColumn.Success:
					return entityData.Success != _originalData.Success;
					case InvoiceOrderColumn.CardName:
					return entityData.CardName != _originalData.CardName;
					case InvoiceOrderColumn.CardNumber:
					return entityData.CardNumber != _originalData.CardNumber;
					case InvoiceOrderColumn.ExpiryMonth:
					return entityData.ExpiryMonth != _originalData.ExpiryMonth;
					case InvoiceOrderColumn.ExpiryYear:
					return entityData.ExpiryYear != _originalData.ExpiryYear;
					case InvoiceOrderColumn.Cvv:
					return entityData.Cvv != _originalData.Cvv;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< InvoiceOrderColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.OrderId != _originalData.OrderId;
			result = result || entityData.AdvertiserUserId != _originalData.AdvertiserUserId;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.PaymentTypeId != _originalData.PaymentTypeId;
			result = result || entityData.IsPayable != _originalData.IsPayable;
			result = result || entityData.IsPaid != _originalData.IsPaid;
			result = result || entityData.DatePaid != _originalData.DatePaid;
			result = result || entityData.PaidByAdvertiserUserId != _originalData.PaidByAdvertiserUserId;
			result = result || entityData.TotalAmount != _originalData.TotalAmount;
			result = result || entityData.Gst != _originalData.Gst;
			result = result || entityData.CurrencyId != _originalData.CurrencyId;
			result = result || entityData.DiscountAmount != _originalData.DiscountAmount;
			result = result || entityData.DiscountGst != _originalData.DiscountGst;
			result = result || entityData.ResponseCode != _originalData.ResponseCode;
			result = result || entityData.ResponseText != _originalData.ResponseText;
			result = result || entityData.BankTransactionId != _originalData.BankTransactionId;
			result = result || entityData.ResponseXml != _originalData.ResponseXml;
			result = result || entityData.Success != _originalData.Success;
			result = result || entityData.CardName != _originalData.CardName;
			result = result || entityData.CardNumber != _originalData.CardNumber;
			result = result || entityData.ExpiryMonth != _originalData.ExpiryMonth;
			result = result || entityData.ExpiryYear != _originalData.ExpiryYear;
			result = result || entityData.Cvv != _originalData.Cvv;
			return result;
		}	
		
		///<summary>
		///  Returns a InvoiceOrder Entity with the original data.
		///</summary>
		public InvoiceOrder GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateInvoiceOrder(
				_originalData.AdvertiserUserId,
				_originalData.CreatedDate,
				_originalData.PaymentTypeId,
				_originalData.IsPayable,
				_originalData.IsPaid,
				_originalData.DatePaid,
				_originalData.PaidByAdvertiserUserId,
				_originalData.TotalAmount,
				_originalData.Gst,
				_originalData.CurrencyId,
				_originalData.DiscountAmount,
				_originalData.DiscountGst,
				_originalData.ResponseCode,
				_originalData.ResponseText,
				_originalData.BankTransactionId,
				_originalData.ResponseXml,
				_originalData.Success,
				_originalData.CardName,
				_originalData.CardNumber,
				_originalData.ExpiryMonth,
				_originalData.ExpiryYear,
				_originalData.Cvv
				);
				
			return (InvoiceOrder)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="InvoiceOrderBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is InvoiceOrderBase)
				return ValueEquals(this, (InvoiceOrderBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="InvoiceOrderBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.OrderId.GetHashCode() ^ 
					this.AdvertiserUserId.GetHashCode() ^ 
					this.CreatedDate.GetHashCode() ^ 
					((this.PaymentTypeId == null) ? string.Empty : this.PaymentTypeId.ToString()).GetHashCode() ^ 
					this.IsPayable.GetHashCode() ^ 
					this.IsPaid.GetHashCode() ^ 
					((this.DatePaid == null) ? string.Empty : this.DatePaid.ToString()).GetHashCode() ^ 
					((this.PaidByAdvertiserUserId == null) ? string.Empty : this.PaidByAdvertiserUserId.ToString()).GetHashCode() ^ 
					this.TotalAmount.GetHashCode() ^ 
					this.Gst.GetHashCode() ^ 
					((this.CurrencyId == null) ? string.Empty : this.CurrencyId.ToString()).GetHashCode() ^ 
					((this.DiscountAmount == null) ? string.Empty : this.DiscountAmount.ToString()).GetHashCode() ^ 
					((this.DiscountGst == null) ? string.Empty : this.DiscountGst.ToString()).GetHashCode() ^ 
					((this.ResponseCode == null) ? string.Empty : this.ResponseCode.ToString()).GetHashCode() ^ 
					((this.ResponseText == null) ? string.Empty : this.ResponseText.ToString()).GetHashCode() ^ 
					((this.BankTransactionId == null) ? string.Empty : this.BankTransactionId.ToString()).GetHashCode() ^ 
					((this.ResponseXml == null) ? string.Empty : this.ResponseXml.ToString()).GetHashCode() ^ 
					((this.Success == null) ? string.Empty : this.Success.ToString()).GetHashCode() ^ 
					((this.CardName == null) ? string.Empty : this.CardName.ToString()).GetHashCode() ^ 
					((this.CardNumber == null) ? string.Empty : this.CardNumber.ToString()).GetHashCode() ^ 
					((this.ExpiryMonth == null) ? string.Empty : this.ExpiryMonth.ToString()).GetHashCode() ^ 
					((this.ExpiryYear == null) ? string.Empty : this.ExpiryYear.ToString()).GetHashCode() ^ 
					((this.Cvv == null) ? string.Empty : this.Cvv.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="InvoiceOrderBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(InvoiceOrderBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="InvoiceOrderBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="InvoiceOrderBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="InvoiceOrderBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(InvoiceOrderBase Object1, InvoiceOrderBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.OrderId != Object2.OrderId)
				equal = false;
			if (Object1.AdvertiserUserId != Object2.AdvertiserUserId)
				equal = false;
			if (Object1.CreatedDate != Object2.CreatedDate)
				equal = false;
			if ( Object1.PaymentTypeId != null && Object2.PaymentTypeId != null )
			{
				if (Object1.PaymentTypeId != Object2.PaymentTypeId)
					equal = false;
			}
			else if (Object1.PaymentTypeId == null ^ Object2.PaymentTypeId == null )
			{
				equal = false;
			}
			if (Object1.IsPayable != Object2.IsPayable)
				equal = false;
			if (Object1.IsPaid != Object2.IsPaid)
				equal = false;
			if ( Object1.DatePaid != null && Object2.DatePaid != null )
			{
				if (Object1.DatePaid != Object2.DatePaid)
					equal = false;
			}
			else if (Object1.DatePaid == null ^ Object2.DatePaid == null )
			{
				equal = false;
			}
			if ( Object1.PaidByAdvertiserUserId != null && Object2.PaidByAdvertiserUserId != null )
			{
				if (Object1.PaidByAdvertiserUserId != Object2.PaidByAdvertiserUserId)
					equal = false;
			}
			else if (Object1.PaidByAdvertiserUserId == null ^ Object2.PaidByAdvertiserUserId == null )
			{
				equal = false;
			}
			if (Object1.TotalAmount != Object2.TotalAmount)
				equal = false;
			if (Object1.Gst != Object2.Gst)
				equal = false;
			if ( Object1.CurrencyId != null && Object2.CurrencyId != null )
			{
				if (Object1.CurrencyId != Object2.CurrencyId)
					equal = false;
			}
			else if (Object1.CurrencyId == null ^ Object2.CurrencyId == null )
			{
				equal = false;
			}
			if ( Object1.DiscountAmount != null && Object2.DiscountAmount != null )
			{
				if (Object1.DiscountAmount != Object2.DiscountAmount)
					equal = false;
			}
			else if (Object1.DiscountAmount == null ^ Object2.DiscountAmount == null )
			{
				equal = false;
			}
			if ( Object1.DiscountGst != null && Object2.DiscountGst != null )
			{
				if (Object1.DiscountGst != Object2.DiscountGst)
					equal = false;
			}
			else if (Object1.DiscountGst == null ^ Object2.DiscountGst == null )
			{
				equal = false;
			}
			if ( Object1.ResponseCode != null && Object2.ResponseCode != null )
			{
				if (Object1.ResponseCode != Object2.ResponseCode)
					equal = false;
			}
			else if (Object1.ResponseCode == null ^ Object2.ResponseCode == null )
			{
				equal = false;
			}
			if ( Object1.ResponseText != null && Object2.ResponseText != null )
			{
				if (Object1.ResponseText != Object2.ResponseText)
					equal = false;
			}
			else if (Object1.ResponseText == null ^ Object2.ResponseText == null )
			{
				equal = false;
			}
			if ( Object1.BankTransactionId != null && Object2.BankTransactionId != null )
			{
				if (Object1.BankTransactionId != Object2.BankTransactionId)
					equal = false;
			}
			else if (Object1.BankTransactionId == null ^ Object2.BankTransactionId == null )
			{
				equal = false;
			}
			if ( Object1.ResponseXml != null && Object2.ResponseXml != null )
			{
				if (Object1.ResponseXml != Object2.ResponseXml)
					equal = false;
			}
			else if (Object1.ResponseXml == null ^ Object2.ResponseXml == null )
			{
				equal = false;
			}
			if ( Object1.Success != null && Object2.Success != null )
			{
				if (Object1.Success != Object2.Success)
					equal = false;
			}
			else if (Object1.Success == null ^ Object2.Success == null )
			{
				equal = false;
			}
			if ( Object1.CardName != null && Object2.CardName != null )
			{
				if (Object1.CardName != Object2.CardName)
					equal = false;
			}
			else if (Object1.CardName == null ^ Object2.CardName == null )
			{
				equal = false;
			}
			if ( Object1.CardNumber != null && Object2.CardNumber != null )
			{
				if (Object1.CardNumber != Object2.CardNumber)
					equal = false;
			}
			else if (Object1.CardNumber == null ^ Object2.CardNumber == null )
			{
				equal = false;
			}
			if ( Object1.ExpiryMonth != null && Object2.ExpiryMonth != null )
			{
				if (Object1.ExpiryMonth != Object2.ExpiryMonth)
					equal = false;
			}
			else if (Object1.ExpiryMonth == null ^ Object2.ExpiryMonth == null )
			{
				equal = false;
			}
			if ( Object1.ExpiryYear != null && Object2.ExpiryYear != null )
			{
				if (Object1.ExpiryYear != Object2.ExpiryYear)
					equal = false;
			}
			else if (Object1.ExpiryYear == null ^ Object2.ExpiryYear == null )
			{
				equal = false;
			}
			if ( Object1.Cvv != null && Object2.Cvv != null )
			{
				if (Object1.Cvv != Object2.Cvv)
					equal = false;
			}
			else if (Object1.Cvv == null ^ Object2.Cvv == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((InvoiceOrderBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static InvoiceOrderComparer GetComparer()
        {
            return new InvoiceOrderComparer();
        }
        */

        // Comparer delegates back to InvoiceOrder
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(InvoiceOrder rhs, InvoiceOrderColumn which)
        {
            switch (which)
            {
            	
            	
            	case InvoiceOrderColumn.OrderId:
            		return this.OrderId.CompareTo(rhs.OrderId);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.AdvertiserUserId:
            		return this.AdvertiserUserId.CompareTo(rhs.AdvertiserUserId);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.CreatedDate:
            		return this.CreatedDate.CompareTo(rhs.CreatedDate);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.PaymentTypeId:
            		return this.PaymentTypeId.Value.CompareTo(rhs.PaymentTypeId.Value);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.IsPayable:
            		return this.IsPayable.CompareTo(rhs.IsPayable);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.IsPaid:
            		return this.IsPaid.CompareTo(rhs.IsPaid);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.DatePaid:
            		return this.DatePaid.Value.CompareTo(rhs.DatePaid.Value);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.PaidByAdvertiserUserId:
            		return this.PaidByAdvertiserUserId.Value.CompareTo(rhs.PaidByAdvertiserUserId.Value);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.TotalAmount:
            		return this.TotalAmount.CompareTo(rhs.TotalAmount);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.Gst:
            		return this.Gst.CompareTo(rhs.Gst);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.CurrencyId:
            		return this.CurrencyId.Value.CompareTo(rhs.CurrencyId.Value);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.DiscountAmount:
            		return this.DiscountAmount.Value.CompareTo(rhs.DiscountAmount.Value);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.DiscountGst:
            		return this.DiscountGst.Value.CompareTo(rhs.DiscountGst.Value);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.ResponseCode:
            		return this.ResponseCode.CompareTo(rhs.ResponseCode);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.ResponseText:
            		return this.ResponseText.CompareTo(rhs.ResponseText);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.BankTransactionId:
            		return this.BankTransactionId.CompareTo(rhs.BankTransactionId);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.ResponseXml:
            		return this.ResponseXml.CompareTo(rhs.ResponseXml);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.Success:
            		return this.Success.Value.CompareTo(rhs.Success.Value);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.CardName:
            		return this.CardName.CompareTo(rhs.CardName);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.CardNumber:
            		return this.CardNumber.CompareTo(rhs.CardNumber);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.ExpiryMonth:
            		return this.ExpiryMonth.Value.CompareTo(rhs.ExpiryMonth.Value);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.ExpiryYear:
            		return this.ExpiryYear.Value.CompareTo(rhs.ExpiryYear.Value);
            		
            		                 
            	
            	
            	case InvoiceOrderColumn.Cvv:
            		return this.Cvv.CompareTo(rhs.Cvv);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<InvoiceOrderKey> Members
		
		// member variable for the EntityId property
		private InvoiceOrderKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual InvoiceOrderKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new InvoiceOrderKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("InvoiceOrder")
					.Append("|").Append( this.OrderId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{24}{23}- OrderId: {0}{23}- AdvertiserUserId: {1}{23}- CreatedDate: {2}{23}- PaymentTypeId: {3}{23}- IsPayable: {4}{23}- IsPaid: {5}{23}- DatePaid: {6}{23}- PaidByAdvertiserUserId: {7}{23}- TotalAmount: {8}{23}- Gst: {9}{23}- CurrencyId: {10}{23}- DiscountAmount: {11}{23}- DiscountGst: {12}{23}- ResponseCode: {13}{23}- ResponseText: {14}{23}- BankTransactionId: {15}{23}- ResponseXml: {16}{23}- Success: {17}{23}- CardName: {18}{23}- CardNumber: {19}{23}- ExpiryMonth: {20}{23}- ExpiryYear: {21}{23}- Cvv: {22}{23}{25}", 
				this.OrderId,
				this.AdvertiserUserId,
				this.CreatedDate,
				(this.PaymentTypeId == null) ? string.Empty : this.PaymentTypeId.ToString(),
				this.IsPayable,
				this.IsPaid,
				(this.DatePaid == null) ? string.Empty : this.DatePaid.ToString(),
				(this.PaidByAdvertiserUserId == null) ? string.Empty : this.PaidByAdvertiserUserId.ToString(),
				this.TotalAmount,
				this.Gst,
				(this.CurrencyId == null) ? string.Empty : this.CurrencyId.ToString(),
				(this.DiscountAmount == null) ? string.Empty : this.DiscountAmount.ToString(),
				(this.DiscountGst == null) ? string.Empty : this.DiscountGst.ToString(),
				(this.ResponseCode == null) ? string.Empty : this.ResponseCode.ToString(),
				(this.ResponseText == null) ? string.Empty : this.ResponseText.ToString(),
				(this.BankTransactionId == null) ? string.Empty : this.BankTransactionId.ToString(),
				(this.ResponseXml == null) ? string.Empty : this.ResponseXml.ToString(),
				(this.Success == null) ? string.Empty : this.Success.ToString(),
				(this.CardName == null) ? string.Empty : this.CardName.ToString(),
				(this.CardNumber == null) ? string.Empty : this.CardNumber.ToString(),
				(this.ExpiryMonth == null) ? string.Empty : this.ExpiryMonth.ToString(),
				(this.ExpiryYear == null) ? string.Empty : this.ExpiryYear.ToString(),
				(this.Cvv == null) ? string.Empty : this.Cvv.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'InvoiceOrder' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class InvoiceOrderEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// OrderID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "InvoiceOrder"</remarks>
		public System.Int32 OrderId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// AdvertiserUserID : 
		/// </summary>
		public System.Int32		  AdvertiserUserId = (int)0;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime		  CreatedDate = DateTime.MinValue;
		
		/// <summary>
		/// PaymentTypeID : 
		/// </summary>
		public System.Int32?		  PaymentTypeId = null;
		
		/// <summary>
		/// IsPayable : 
		/// </summary>
		public System.Boolean		  IsPayable = false;
		
		/// <summary>
		/// IsPaid : 
		/// </summary>
		public System.Boolean		  IsPaid = false;
		
		/// <summary>
		/// DatePaid : 
		/// </summary>
		public System.DateTime?		  DatePaid = null;
		
		/// <summary>
		/// PaidByAdvertiserUserID : 
		/// </summary>
		public System.Int32?		  PaidByAdvertiserUserId = null;
		
		/// <summary>
		/// TotalAmount : 
		/// </summary>
		public System.Decimal		  TotalAmount = 0.0m;
		
		/// <summary>
		/// GST : 
		/// </summary>
		public System.Decimal		  Gst = 0.0m;
		
		/// <summary>
		/// CurrencyID : 
		/// </summary>
		public System.Int32?		  CurrencyId = null;
		
		/// <summary>
		/// DiscountAmount : 
		/// </summary>
		public System.Decimal?		  DiscountAmount = null;
		
		/// <summary>
		/// DiscountGST : 
		/// </summary>
		public System.Decimal?		  DiscountGst = null;
		
		/// <summary>
		/// responseCode : 
		/// </summary>
		public System.String		  ResponseCode = null;
		
		/// <summary>
		/// responseText : 
		/// </summary>
		public System.String		  ResponseText = null;
		
		/// <summary>
		/// bankTransactionID : 
		/// </summary>
		public System.String		  BankTransactionId = null;
		
		/// <summary>
		/// ResponseXML : 
		/// </summary>
		public System.String		  ResponseXml = null;
		
		/// <summary>
		/// Success : 
		/// </summary>
		public System.Int32?		  Success = null;
		
		/// <summary>
		/// CardName : 
		/// </summary>
		public System.String		  CardName = null;
		
		/// <summary>
		/// CardNumber : 
		/// </summary>
		public System.String		  CardNumber = null;
		
		/// <summary>
		/// ExpiryMonth : 
		/// </summary>
		public System.Int32?		  ExpiryMonth = null;
		
		/// <summary>
		/// ExpiryYear : 
		/// </summary>
		public System.Int32?		  ExpiryYear = null;
		
		/// <summary>
		/// CVV : 
		/// </summary>
		public System.String		  Cvv = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdvertiserUsers _advertiserUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdvertiserUsers"/>.
		/// </summary>
		/// <value>The source AdvertiserUsers for AdvertiserUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdvertiserUsers AdvertiserUserIdSource
      	{
            get { return this._advertiserUserIdSource; }
            set { this._advertiserUserIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region InvoiceCollection
		
		private TList<Invoice> _invoiceOrderId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _invoiceOrderId
		/// </summary>
		
		public TList<Invoice> InvoiceCollection
		{
			get
			{
				if (_invoiceOrderId == null)
				{
				_invoiceOrderId = new TList<Invoice>();
				}
	
				return _invoiceOrderId;
			}
			set { _invoiceOrderId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			InvoiceOrderEntityData _tmp = new InvoiceOrderEntityData();
						
			_tmp.OrderId = this.OrderId;
			
			_tmp.AdvertiserUserId = this.AdvertiserUserId;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.PaymentTypeId = this.PaymentTypeId;
			_tmp.IsPayable = this.IsPayable;
			_tmp.IsPaid = this.IsPaid;
			_tmp.DatePaid = this.DatePaid;
			_tmp.PaidByAdvertiserUserId = this.PaidByAdvertiserUserId;
			_tmp.TotalAmount = this.TotalAmount;
			_tmp.Gst = this.Gst;
			_tmp.CurrencyId = this.CurrencyId;
			_tmp.DiscountAmount = this.DiscountAmount;
			_tmp.DiscountGst = this.DiscountGst;
			_tmp.ResponseCode = this.ResponseCode;
			_tmp.ResponseText = this.ResponseText;
			_tmp.BankTransactionId = this.BankTransactionId;
			_tmp.ResponseXml = this.ResponseXml;
			_tmp.Success = this.Success;
			_tmp.CardName = this.CardName;
			_tmp.CardNumber = this.CardNumber;
			_tmp.ExpiryMonth = this.ExpiryMonth;
			_tmp.ExpiryYear = this.ExpiryYear;
			_tmp.Cvv = this.Cvv;
			
			#region Source Parent Composite Entities
			if (this.AdvertiserUserIdSource != null)
				_tmp.AdvertiserUserIdSource = MakeCopyOf(this.AdvertiserUserIdSource) as AdvertiserUsers;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._invoiceOrderId != null)
				_tmp.InvoiceCollection = (TList<Invoice>) MakeCopyOf(this.InvoiceCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			InvoiceOrderEntityData _tmp = new InvoiceOrderEntityData();
						
			_tmp.OrderId = this.OrderId;
			
			_tmp.AdvertiserUserId = this.AdvertiserUserId;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.PaymentTypeId = this.PaymentTypeId;
			_tmp.IsPayable = this.IsPayable;
			_tmp.IsPaid = this.IsPaid;
			_tmp.DatePaid = this.DatePaid;
			_tmp.PaidByAdvertiserUserId = this.PaidByAdvertiserUserId;
			_tmp.TotalAmount = this.TotalAmount;
			_tmp.Gst = this.Gst;
			_tmp.CurrencyId = this.CurrencyId;
			_tmp.DiscountAmount = this.DiscountAmount;
			_tmp.DiscountGst = this.DiscountGst;
			_tmp.ResponseCode = this.ResponseCode;
			_tmp.ResponseText = this.ResponseText;
			_tmp.BankTransactionId = this.BankTransactionId;
			_tmp.ResponseXml = this.ResponseXml;
			_tmp.Success = this.Success;
			_tmp.CardName = this.CardName;
			_tmp.CardNumber = this.CardNumber;
			_tmp.ExpiryMonth = this.ExpiryMonth;
			_tmp.ExpiryYear = this.ExpiryYear;
			_tmp.Cvv = this.Cvv;
			
			#region Source Parent Composite Entities
			if (this.AdvertiserUserIdSource != null && existingCopies.Contains(this.AdvertiserUserIdSource))
				_tmp.AdvertiserUserIdSource = existingCopies[this.AdvertiserUserIdSource] as AdvertiserUsers;
			else
				_tmp.AdvertiserUserIdSource = MakeCopyOf(this.AdvertiserUserIdSource, existingCopies) as AdvertiserUsers;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.InvoiceCollection = (TList<Invoice>) MakeCopyOf(this.InvoiceCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="InvoiceOrderColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(InvoiceOrderColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="InvoiceOrderColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(InvoiceOrderColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="InvoiceOrderColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(InvoiceOrderColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				InvoiceOrderEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new InvoiceOrderEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="InvoiceOrderColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(InvoiceOrderColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				InvoiceOrderEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new InvoiceOrderEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region InvoiceOrderEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="InvoiceOrder"/> object.
	/// </remarks>
	public class InvoiceOrderEventArgs : System.EventArgs
	{
		private InvoiceOrderColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the InvoiceOrderEventArgs class.
		///</summary>
		public InvoiceOrderEventArgs(InvoiceOrderColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the InvoiceOrderEventArgs class.
		///</summary>
		public InvoiceOrderEventArgs(InvoiceOrderColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The InvoiceOrderColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="InvoiceOrderColumn" />
		public InvoiceOrderColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all InvoiceOrder related events.
	///</summary>
	public delegate void InvoiceOrderEventHandler(object sender, InvoiceOrderEventArgs e);
	
	#region InvoiceOrderComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class InvoiceOrderComparer : System.Collections.Generic.IComparer<InvoiceOrder>
	{
		InvoiceOrderColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:InvoiceOrderComparer"/> class.
        /// </summary>
		public InvoiceOrderComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:InvoiceOrderComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public InvoiceOrderComparer(InvoiceOrderColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="InvoiceOrder"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="InvoiceOrder"/> to compare.</param>
        /// <param name="b">The second <c>InvoiceOrder</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(InvoiceOrder a, InvoiceOrder b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(InvoiceOrder entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(InvoiceOrder a, InvoiceOrder b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public InvoiceOrderColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region InvoiceOrderKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="InvoiceOrder"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class InvoiceOrderKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the InvoiceOrderKey class.
		/// </summary>
		public InvoiceOrderKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the InvoiceOrderKey class.
		/// </summary>
		public InvoiceOrderKey(InvoiceOrderBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.OrderId = entity.OrderId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the InvoiceOrderKey class.
		/// </summary>
		public InvoiceOrderKey(System.Int32 _orderId)
		{
			#region Init Properties

			this.OrderId = _orderId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private InvoiceOrderBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public InvoiceOrderBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the OrderId property
		private System.Int32 _orderId;
		
		/// <summary>
		/// Gets or sets the OrderId property.
		/// </summary>
		public System.Int32 OrderId
		{
			get { return _orderId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.OrderId = value;
				
				_orderId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				OrderId = ( values["OrderId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["OrderId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("OrderId", OrderId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("OrderId: {0}{1}",
								OrderId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region InvoiceOrderColumn Enum
	
	/// <summary>
	/// Enumerate the InvoiceOrder columns.
	/// </summary>
	[Serializable]
	public enum InvoiceOrderColumn : int
	{
		/// <summary>
		/// OrderId : 
		/// </summary>
		[EnumTextValue("OrderID")]
		[ColumnEnum("OrderID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		OrderId = 1,
		/// <summary>
		/// AdvertiserUserId : 
		/// </summary>
		[EnumTextValue("AdvertiserUserID")]
		[ColumnEnum("AdvertiserUserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		AdvertiserUserId = 2,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreatedDate = 3,
		/// <summary>
		/// PaymentTypeId : 
		/// </summary>
		[EnumTextValue("PaymentTypeID")]
		[ColumnEnum("PaymentTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PaymentTypeId = 4,
		/// <summary>
		/// IsPayable : 
		/// </summary>
		[EnumTextValue("IsPayable")]
		[ColumnEnum("IsPayable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsPayable = 5,
		/// <summary>
		/// IsPaid : 
		/// </summary>
		[EnumTextValue("IsPaid")]
		[ColumnEnum("IsPaid", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsPaid = 6,
		/// <summary>
		/// DatePaid : 
		/// </summary>
		[EnumTextValue("DatePaid")]
		[ColumnEnum("DatePaid", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DatePaid = 7,
		/// <summary>
		/// PaidByAdvertiserUserId : 
		/// </summary>
		[EnumTextValue("PaidByAdvertiserUserID")]
		[ColumnEnum("PaidByAdvertiserUserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PaidByAdvertiserUserId = 8,
		/// <summary>
		/// TotalAmount : 
		/// </summary>
		[EnumTextValue("TotalAmount")]
		[ColumnEnum("TotalAmount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		TotalAmount = 9,
		/// <summary>
		/// Gst : 
		/// </summary>
		[EnumTextValue("GST")]
		[ColumnEnum("GST", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Gst = 10,
		/// <summary>
		/// CurrencyId : 
		/// </summary>
		[EnumTextValue("CurrencyID")]
		[ColumnEnum("CurrencyID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CurrencyId = 11,
		/// <summary>
		/// DiscountAmount : 
		/// </summary>
		[EnumTextValue("DiscountAmount")]
		[ColumnEnum("DiscountAmount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DiscountAmount = 12,
		/// <summary>
		/// DiscountGst : 
		/// </summary>
		[EnumTextValue("DiscountGST")]
		[ColumnEnum("DiscountGST", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DiscountGst = 13,
		/// <summary>
		/// ResponseCode : 
		/// </summary>
		[EnumTextValue("responseCode")]
		[ColumnEnum("responseCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ResponseCode = 14,
		/// <summary>
		/// ResponseText : 
		/// </summary>
		[EnumTextValue("responseText")]
		[ColumnEnum("responseText", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ResponseText = 15,
		/// <summary>
		/// BankTransactionId : 
		/// </summary>
		[EnumTextValue("bankTransactionID")]
		[ColumnEnum("bankTransactionID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		BankTransactionId = 16,
		/// <summary>
		/// ResponseXml : 
		/// </summary>
		[EnumTextValue("ResponseXML")]
		[ColumnEnum("ResponseXML", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		ResponseXml = 17,
		/// <summary>
		/// Success : 
		/// </summary>
		[EnumTextValue("Success")]
		[ColumnEnum("Success", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Success = 18,
		/// <summary>
		/// CardName : 
		/// </summary>
		[EnumTextValue("CardName")]
		[ColumnEnum("CardName", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		CardName = 19,
		/// <summary>
		/// CardNumber : 
		/// </summary>
		[EnumTextValue("CardNumber")]
		[ColumnEnum("CardNumber", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		CardNumber = 20,
		/// <summary>
		/// ExpiryMonth : 
		/// </summary>
		[EnumTextValue("ExpiryMonth")]
		[ColumnEnum("ExpiryMonth", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ExpiryMonth = 21,
		/// <summary>
		/// ExpiryYear : 
		/// </summary>
		[EnumTextValue("ExpiryYear")]
		[ColumnEnum("ExpiryYear", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ExpiryYear = 22,
		/// <summary>
		/// Cvv : 
		/// </summary>
		[EnumTextValue("CVV")]
		[ColumnEnum("CVV", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 4)]
		Cvv = 23
	}//End enum

	#endregion InvoiceOrderColumn Enum

} // end namespace


/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file JobAlerts.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'JobAlerts' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class JobAlertsBase : EntityBase, IJobAlerts, IEntityId<JobAlertsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private JobAlertsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private JobAlertsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private JobAlertsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<JobAlerts> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event JobAlertsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event JobAlertsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="JobAlertsBase"/> instance.
		///</summary>
		public JobAlertsBase()
		{
			this.entityData = new JobAlertsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="JobAlertsBase"/> instance.
		///</summary>
		///<param name="_jobAlertName"></param>
		///<param name="_lastModified"></param>
		///<param name="_searchKeywords"></param>
		///<param name="_recurrenceType"></param>
		///<param name="_dailyFrequency"></param>
		///<param name="_weeklyFrequency"></param>
		///<param name="_weeklyDayOccurence"></param>
		///<param name="_dateLastRun"></param>
		///<param name="_dateNextRun"></param>
		///<param name="_memberId"></param>
		///<param name="_alertActive"></param>
		///<param name="_emailFormat"></param>
		///<param name="_customRecurrenceType"></param>
		///<param name="_lastResultCount"></param>
		///<param name="_primaryAlert"></param>
		///<param name="_unsubscribeValidateId"></param>
		///<param name="_editValidateId"></param>
		///<param name="_viewValidateId"></param>
		///<param name="_siteId"></param>
		///<param name="_locationId"></param>
		///<param name="_areaIds"></param>
		///<param name="_professionId"></param>
		///<param name="_searchRoleIds"></param>
		///<param name="_workTypeIds"></param>
		///<param name="_salaryIds"></param>
		///<param name="_daysPosted"></param>
		///<param name="_generatedSql"></param>
		///<param name="_salaryLowerBand"></param>
		///<param name="_salaryUpperBand"></param>
		///<param name="_currencyId"></param>
		///<param name="_salaryTypeId"></param>
		///<param name="_countryId"></param>
		public JobAlertsBase(System.String _jobAlertName, System.DateTime _lastModified, System.String _searchKeywords, 
			System.Int32? _recurrenceType, System.Int32? _dailyFrequency, System.Int32? _weeklyFrequency, 
			System.Int32? _weeklyDayOccurence, System.DateTime? _dateLastRun, System.DateTime? _dateNextRun, 
			System.Int32 _memberId, System.Boolean? _alertActive, System.Int32? _emailFormat, System.Int32? _customRecurrenceType, 
			System.Int32? _lastResultCount, System.Boolean? _primaryAlert, System.Guid? _unsubscribeValidateId, 
			System.Guid? _editValidateId, System.Guid? _viewValidateId, System.Int32 _siteId, System.String _locationId, 
			System.String _areaIds, System.String _professionId, System.String _searchRoleIds, System.String _workTypeIds, 
			System.String _salaryIds, System.Int32? _daysPosted, System.String _generatedSql, System.Decimal? _salaryLowerBand, 
			System.Decimal? _salaryUpperBand, System.Int32? _currencyId, System.Int32? _salaryTypeId, System.String _countryId)
		{
			this.entityData = new JobAlertsEntityData();
			this.backupData = null;

			this.JobAlertName = _jobAlertName;
			this.LastModified = _lastModified;
			this.SearchKeywords = _searchKeywords;
			this.RecurrenceType = _recurrenceType;
			this.DailyFrequency = _dailyFrequency;
			this.WeeklyFrequency = _weeklyFrequency;
			this.WeeklyDayOccurence = _weeklyDayOccurence;
			this.DateLastRun = _dateLastRun;
			this.DateNextRun = _dateNextRun;
			this.MemberId = _memberId;
			this.AlertActive = _alertActive;
			this.EmailFormat = _emailFormat;
			this.CustomRecurrenceType = _customRecurrenceType;
			this.LastResultCount = _lastResultCount;
			this.PrimaryAlert = _primaryAlert;
			this.UnsubscribeValidateId = _unsubscribeValidateId;
			this.EditValidateId = _editValidateId;
			this.ViewValidateId = _viewValidateId;
			this.SiteId = _siteId;
			this.LocationId = _locationId;
			this.AreaIds = _areaIds;
			this.ProfessionId = _professionId;
			this.SearchRoleIds = _searchRoleIds;
			this.WorkTypeIds = _workTypeIds;
			this.SalaryIds = _salaryIds;
			this.DaysPosted = _daysPosted;
			this.GeneratedSql = _generatedSql;
			this.SalaryLowerBand = _salaryLowerBand;
			this.SalaryUpperBand = _salaryUpperBand;
			this.CurrencyId = _currencyId;
			this.SalaryTypeId = _salaryTypeId;
			this.CountryId = _countryId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="JobAlerts"/> instance.
		///</summary>
		///<param name="_jobAlertName"></param>
		///<param name="_lastModified"></param>
		///<param name="_searchKeywords"></param>
		///<param name="_recurrenceType"></param>
		///<param name="_dailyFrequency"></param>
		///<param name="_weeklyFrequency"></param>
		///<param name="_weeklyDayOccurence"></param>
		///<param name="_dateLastRun"></param>
		///<param name="_dateNextRun"></param>
		///<param name="_memberId"></param>
		///<param name="_alertActive"></param>
		///<param name="_emailFormat"></param>
		///<param name="_customRecurrenceType"></param>
		///<param name="_lastResultCount"></param>
		///<param name="_primaryAlert"></param>
		///<param name="_unsubscribeValidateId"></param>
		///<param name="_editValidateId"></param>
		///<param name="_viewValidateId"></param>
		///<param name="_siteId"></param>
		///<param name="_locationId"></param>
		///<param name="_areaIds"></param>
		///<param name="_professionId"></param>
		///<param name="_searchRoleIds"></param>
		///<param name="_workTypeIds"></param>
		///<param name="_salaryIds"></param>
		///<param name="_daysPosted"></param>
		///<param name="_generatedSql"></param>
		///<param name="_salaryLowerBand"></param>
		///<param name="_salaryUpperBand"></param>
		///<param name="_currencyId"></param>
		///<param name="_salaryTypeId"></param>
		///<param name="_countryId"></param>
		public static JobAlerts CreateJobAlerts(System.String _jobAlertName, System.DateTime _lastModified, System.String _searchKeywords, 
			System.Int32? _recurrenceType, System.Int32? _dailyFrequency, System.Int32? _weeklyFrequency, 
			System.Int32? _weeklyDayOccurence, System.DateTime? _dateLastRun, System.DateTime? _dateNextRun, 
			System.Int32 _memberId, System.Boolean? _alertActive, System.Int32? _emailFormat, System.Int32? _customRecurrenceType, 
			System.Int32? _lastResultCount, System.Boolean? _primaryAlert, System.Guid? _unsubscribeValidateId, 
			System.Guid? _editValidateId, System.Guid? _viewValidateId, System.Int32 _siteId, System.String _locationId, 
			System.String _areaIds, System.String _professionId, System.String _searchRoleIds, System.String _workTypeIds, 
			System.String _salaryIds, System.Int32? _daysPosted, System.String _generatedSql, System.Decimal? _salaryLowerBand, 
			System.Decimal? _salaryUpperBand, System.Int32? _currencyId, System.Int32? _salaryTypeId, System.String _countryId)
		{
			JobAlerts newJobAlerts = new JobAlerts();
			newJobAlerts.JobAlertName = _jobAlertName;
			newJobAlerts.LastModified = _lastModified;
			newJobAlerts.SearchKeywords = _searchKeywords;
			newJobAlerts.RecurrenceType = _recurrenceType;
			newJobAlerts.DailyFrequency = _dailyFrequency;
			newJobAlerts.WeeklyFrequency = _weeklyFrequency;
			newJobAlerts.WeeklyDayOccurence = _weeklyDayOccurence;
			newJobAlerts.DateLastRun = _dateLastRun;
			newJobAlerts.DateNextRun = _dateNextRun;
			newJobAlerts.MemberId = _memberId;
			newJobAlerts.AlertActive = _alertActive;
			newJobAlerts.EmailFormat = _emailFormat;
			newJobAlerts.CustomRecurrenceType = _customRecurrenceType;
			newJobAlerts.LastResultCount = _lastResultCount;
			newJobAlerts.PrimaryAlert = _primaryAlert;
			newJobAlerts.UnsubscribeValidateId = _unsubscribeValidateId;
			newJobAlerts.EditValidateId = _editValidateId;
			newJobAlerts.ViewValidateId = _viewValidateId;
			newJobAlerts.SiteId = _siteId;
			newJobAlerts.LocationId = _locationId;
			newJobAlerts.AreaIds = _areaIds;
			newJobAlerts.ProfessionId = _professionId;
			newJobAlerts.SearchRoleIds = _searchRoleIds;
			newJobAlerts.WorkTypeIds = _workTypeIds;
			newJobAlerts.SalaryIds = _salaryIds;
			newJobAlerts.DaysPosted = _daysPosted;
			newJobAlerts.GeneratedSql = _generatedSql;
			newJobAlerts.SalaryLowerBand = _salaryLowerBand;
			newJobAlerts.SalaryUpperBand = _salaryUpperBand;
			newJobAlerts.CurrencyId = _currencyId;
			newJobAlerts.SalaryTypeId = _salaryTypeId;
			newJobAlerts.CountryId = _countryId;
			return newJobAlerts;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the JobAlertId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 JobAlertId
		{
			get
			{
				return this.entityData.JobAlertId; 
			}
			
			set
			{
				if (this.entityData.JobAlertId == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.JobAlertId, this.entityData.JobAlertId);
				this.entityData.JobAlertId = value;
				this.EntityId.JobAlertId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.JobAlertId, this.entityData.JobAlertId);
				OnPropertyChanged("JobAlertId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JobAlertName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String JobAlertName
		{
			get
			{
				return this.entityData.JobAlertName; 
			}
			
			set
			{
				if (this.entityData.JobAlertName == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.JobAlertName, this.entityData.JobAlertName);
				this.entityData.JobAlertName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.JobAlertName, this.entityData.JobAlertName);
				OnPropertyChanged("JobAlertName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModified property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastModified
		{
			get
			{
				return this.entityData.LastModified; 
			}
			
			set
			{
				if (this.entityData.LastModified == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.LastModified, this.entityData.LastModified);
				this.entityData.LastModified = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.LastModified, this.entityData.LastModified);
				OnPropertyChanged("LastModified");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SearchKeywords property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String SearchKeywords
		{
			get
			{
				return this.entityData.SearchKeywords; 
			}
			
			set
			{
				if (this.entityData.SearchKeywords == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.SearchKeywords, this.entityData.SearchKeywords);
				this.entityData.SearchKeywords = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.SearchKeywords, this.entityData.SearchKeywords);
				OnPropertyChanged("SearchKeywords");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RecurrenceType property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsRecurrenceTypeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? RecurrenceType
		{
			get
			{
				return this.entityData.RecurrenceType; 
			}
			
			set
			{
				if (this.entityData.RecurrenceType == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.RecurrenceType, this.entityData.RecurrenceType);
				this.entityData.RecurrenceType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.RecurrenceType, this.entityData.RecurrenceType);
				OnPropertyChanged("RecurrenceType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DailyFrequency property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDailyFrequencyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DailyFrequency
		{
			get
			{
				return this.entityData.DailyFrequency; 
			}
			
			set
			{
				if (this.entityData.DailyFrequency == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.DailyFrequency, this.entityData.DailyFrequency);
				this.entityData.DailyFrequency = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.DailyFrequency, this.entityData.DailyFrequency);
				OnPropertyChanged("DailyFrequency");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WeeklyFrequency property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsWeeklyFrequencyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? WeeklyFrequency
		{
			get
			{
				return this.entityData.WeeklyFrequency; 
			}
			
			set
			{
				if (this.entityData.WeeklyFrequency == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.WeeklyFrequency, this.entityData.WeeklyFrequency);
				this.entityData.WeeklyFrequency = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.WeeklyFrequency, this.entityData.WeeklyFrequency);
				OnPropertyChanged("WeeklyFrequency");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WeeklyDayOccurence property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsWeeklyDayOccurenceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? WeeklyDayOccurence
		{
			get
			{
				return this.entityData.WeeklyDayOccurence; 
			}
			
			set
			{
				if (this.entityData.WeeklyDayOccurence == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.WeeklyDayOccurence, this.entityData.WeeklyDayOccurence);
				this.entityData.WeeklyDayOccurence = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.WeeklyDayOccurence, this.entityData.WeeklyDayOccurence);
				OnPropertyChanged("WeeklyDayOccurence");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DateLastRun property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDateLastRunNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DateLastRun
		{
			get
			{
				return this.entityData.DateLastRun; 
			}
			
			set
			{
				if (this.entityData.DateLastRun == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.DateLastRun, this.entityData.DateLastRun);
				this.entityData.DateLastRun = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.DateLastRun, this.entityData.DateLastRun);
				OnPropertyChanged("DateLastRun");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DateNextRun property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDateNextRunNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DateNextRun
		{
			get
			{
				return this.entityData.DateNextRun; 
			}
			
			set
			{
				if (this.entityData.DateNextRun == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.DateNextRun, this.entityData.DateNextRun);
				this.entityData.DateNextRun = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.DateNextRun, this.entityData.DateNextRun);
				OnPropertyChanged("DateNextRun");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MemberId
		{
			get
			{
				return this.entityData.MemberId; 
			}
			
			set
			{
				if (this.entityData.MemberId == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.MemberId, this.entityData.MemberId);
				this.entityData.MemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.MemberId, this.entityData.MemberId);
				OnPropertyChanged("MemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AlertActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsAlertActiveNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? AlertActive
		{
			get
			{
				return this.entityData.AlertActive; 
			}
			
			set
			{
				if (this.entityData.AlertActive == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.AlertActive, this.entityData.AlertActive);
				this.entityData.AlertActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.AlertActive, this.entityData.AlertActive);
				OnPropertyChanged("AlertActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailFormat property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEmailFormatNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? EmailFormat
		{
			get
			{
				return this.entityData.EmailFormat; 
			}
			
			set
			{
				if (this.entityData.EmailFormat == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.EmailFormat, this.entityData.EmailFormat);
				this.entityData.EmailFormat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.EmailFormat, this.entityData.EmailFormat);
				OnPropertyChanged("EmailFormat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomRecurrenceType property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCustomRecurrenceTypeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CustomRecurrenceType
		{
			get
			{
				return this.entityData.CustomRecurrenceType; 
			}
			
			set
			{
				if (this.entityData.CustomRecurrenceType == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.CustomRecurrenceType, this.entityData.CustomRecurrenceType);
				this.entityData.CustomRecurrenceType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.CustomRecurrenceType, this.entityData.CustomRecurrenceType);
				OnPropertyChanged("CustomRecurrenceType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastResultCount property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastResultCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastResultCount
		{
			get
			{
				return this.entityData.LastResultCount; 
			}
			
			set
			{
				if (this.entityData.LastResultCount == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.LastResultCount, this.entityData.LastResultCount);
				this.entityData.LastResultCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.LastResultCount, this.entityData.LastResultCount);
				OnPropertyChanged("LastResultCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrimaryAlert property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsPrimaryAlertNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? PrimaryAlert
		{
			get
			{
				return this.entityData.PrimaryAlert; 
			}
			
			set
			{
				if (this.entityData.PrimaryAlert == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.PrimaryAlert, this.entityData.PrimaryAlert);
				this.entityData.PrimaryAlert = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.PrimaryAlert, this.entityData.PrimaryAlert);
				OnPropertyChanged("PrimaryAlert");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnsubscribeValidateId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return Guid.Empty. It is up to the developer
		/// to check the value of IsUnsubscribeValidateIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Guid? UnsubscribeValidateId
		{
			get
			{
				return this.entityData.UnsubscribeValidateId; 
			}
			
			set
			{
				if (this.entityData.UnsubscribeValidateId == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.UnsubscribeValidateId, this.entityData.UnsubscribeValidateId);
				this.entityData.UnsubscribeValidateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.UnsubscribeValidateId, this.entityData.UnsubscribeValidateId);
				OnPropertyChanged("UnsubscribeValidateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EditValidateId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return Guid.Empty. It is up to the developer
		/// to check the value of IsEditValidateIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Guid? EditValidateId
		{
			get
			{
				return this.entityData.EditValidateId; 
			}
			
			set
			{
				if (this.entityData.EditValidateId == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.EditValidateId, this.entityData.EditValidateId);
				this.entityData.EditValidateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.EditValidateId, this.entityData.EditValidateId);
				OnPropertyChanged("EditValidateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ViewValidateId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return Guid.Empty. It is up to the developer
		/// to check the value of IsViewValidateIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Guid? ViewValidateId
		{
			get
			{
				return this.entityData.ViewValidateId; 
			}
			
			set
			{
				if (this.entityData.ViewValidateId == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.ViewValidateId, this.entityData.ViewValidateId);
				this.entityData.ViewValidateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.ViewValidateId, this.entityData.ViewValidateId);
				OnPropertyChanged("ViewValidateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SiteId
		{
			get
			{
				return this.entityData.SiteId; 
			}
			
			set
			{
				if (this.entityData.SiteId == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.SiteId, this.entityData.SiteId);
				this.entityData.SiteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.SiteId, this.entityData.SiteId);
				OnPropertyChanged("SiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LocationId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String LocationId
		{
			get
			{
				return this.entityData.LocationId; 
			}
			
			set
			{
				if (this.entityData.LocationId == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.LocationId, this.entityData.LocationId);
				this.entityData.LocationId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.LocationId, this.entityData.LocationId);
				OnPropertyChanged("LocationId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AreaIds property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String AreaIds
		{
			get
			{
				return this.entityData.AreaIds; 
			}
			
			set
			{
				if (this.entityData.AreaIds == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.AreaIds, this.entityData.AreaIds);
				this.entityData.AreaIds = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.AreaIds, this.entityData.AreaIds);
				OnPropertyChanged("AreaIds");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProfessionId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String ProfessionId
		{
			get
			{
				return this.entityData.ProfessionId; 
			}
			
			set
			{
				if (this.entityData.ProfessionId == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.ProfessionId, this.entityData.ProfessionId);
				this.entityData.ProfessionId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.ProfessionId, this.entityData.ProfessionId);
				OnPropertyChanged("ProfessionId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SearchRoleIds property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String SearchRoleIds
		{
			get
			{
				return this.entityData.SearchRoleIds; 
			}
			
			set
			{
				if (this.entityData.SearchRoleIds == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.SearchRoleIds, this.entityData.SearchRoleIds);
				this.entityData.SearchRoleIds = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.SearchRoleIds, this.entityData.SearchRoleIds);
				OnPropertyChanged("SearchRoleIds");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WorkTypeIds property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String WorkTypeIds
		{
			get
			{
				return this.entityData.WorkTypeIds; 
			}
			
			set
			{
				if (this.entityData.WorkTypeIds == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.WorkTypeIds, this.entityData.WorkTypeIds);
				this.entityData.WorkTypeIds = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.WorkTypeIds, this.entityData.WorkTypeIds);
				OnPropertyChanged("WorkTypeIds");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SalaryIds property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String SalaryIds
		{
			get
			{
				return this.entityData.SalaryIds; 
			}
			
			set
			{
				if (this.entityData.SalaryIds == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.SalaryIds, this.entityData.SalaryIds);
				this.entityData.SalaryIds = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.SalaryIds, this.entityData.SalaryIds);
				OnPropertyChanged("SalaryIds");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DaysPosted property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDaysPostedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DaysPosted
		{
			get
			{
				return this.entityData.DaysPosted; 
			}
			
			set
			{
				if (this.entityData.DaysPosted == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.DaysPosted, this.entityData.DaysPosted);
				this.entityData.DaysPosted = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.DaysPosted, this.entityData.DaysPosted);
				OnPropertyChanged("DaysPosted");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GeneratedSql property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 8000)]
		public virtual System.String GeneratedSql
		{
			get
			{
				return this.entityData.GeneratedSql; 
			}
			
			set
			{
				if (this.entityData.GeneratedSql == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.GeneratedSql, this.entityData.GeneratedSql);
				this.entityData.GeneratedSql = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.GeneratedSql, this.entityData.GeneratedSql);
				OnPropertyChanged("GeneratedSql");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SalaryLowerBand property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSalaryLowerBandNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SalaryLowerBand
		{
			get
			{
				return this.entityData.SalaryLowerBand; 
			}
			
			set
			{
				if (this.entityData.SalaryLowerBand == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.SalaryLowerBand, this.entityData.SalaryLowerBand);
				this.entityData.SalaryLowerBand = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.SalaryLowerBand, this.entityData.SalaryLowerBand);
				OnPropertyChanged("SalaryLowerBand");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SalaryUpperBand property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSalaryUpperBandNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SalaryUpperBand
		{
			get
			{
				return this.entityData.SalaryUpperBand; 
			}
			
			set
			{
				if (this.entityData.SalaryUpperBand == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.SalaryUpperBand, this.entityData.SalaryUpperBand);
				this.entityData.SalaryUpperBand = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.SalaryUpperBand, this.entityData.SalaryUpperBand);
				OnPropertyChanged("SalaryUpperBand");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrencyId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCurrencyIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CurrencyId
		{
			get
			{
				return this.entityData.CurrencyId; 
			}
			
			set
			{
				if (this.entityData.CurrencyId == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.CurrencyId, this.entityData.CurrencyId);
				this.entityData.CurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.CurrencyId, this.entityData.CurrencyId);
				OnPropertyChanged("CurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SalaryTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSalaryTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SalaryTypeId
		{
			get
			{
				return this.entityData.SalaryTypeId; 
			}
			
			set
			{
				if (this.entityData.SalaryTypeId == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.SalaryTypeId, this.entityData.SalaryTypeId);
				this.entityData.SalaryTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.SalaryTypeId, this.entityData.SalaryTypeId);
				OnPropertyChanged("SalaryTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CountryId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String CountryId
		{
			get
			{
				return this.entityData.CountryId; 
			}
			
			set
			{
				if (this.entityData.CountryId == value)
					return;
					
				OnColumnChanging(JobAlertsColumn.CountryId, this.entityData.CountryId);
				this.entityData.CountryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobAlertsColumn.CountryId, this.entityData.CountryId);
				OnPropertyChanged("CountryId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Currencies"/>.
		/// </summary>
		/// <value>The source Currencies for CurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Currencies CurrencyIdSource
      	{
            get { return entityData.CurrencyIdSource; }
            set { entityData.CurrencyIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Members"/>.
		/// </summary>
		/// <value>The source Members for MemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Members MemberIdSource
      	{
            get { return entityData.MemberIdSource; }
            set { entityData.MemberIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SalaryType"/>.
		/// </summary>
		/// <value>The source SalaryType for SalaryTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SalaryType SalaryTypeIdSource
      	{
            get { return entityData.SalaryTypeIdSource; }
            set { entityData.SalaryTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Sites SiteIdSource
      	{
            get { return entityData.SiteIdSource; }
            set { entityData.SiteIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("JobAlertName", "Job Alert Name", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SearchKeywords", "Search Keywords", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LocationId", "Location Id", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AreaIds", "Area Ids", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ProfessionId", "Profession Id", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SearchRoleIds", "Search Role Ids", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("WorkTypeIds", "Work Type Ids", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SalaryIds", "Salary Ids", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GeneratedSql", "Generated Sql", 8000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CountryId", "Country Id", 500));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "JobAlerts"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"JobAlertID", "JobAlertName", "LastModified", "SearchKeywords", "RecurrenceType", "DailyFrequency", "WeeklyFrequency", "WeeklyDayOccurence", "DateLastRun", "DateNextRun", "MemberID", "AlertActive", "EmailFormat", "CustomRecurrenceType", "LastResultCount", "PrimaryAlert", "UnsubscribeValidateID", "EditValidateID", "ViewValidateID", "SiteID", "LocationID", "AreaIDs", "ProfessionID", "SearchRoleIDs", "WorkTypeIDs", "SalaryIDs", "DaysPosted", "GeneratedSQL", "SalaryLowerBand", "SalaryUpperBand", "CurrencyID", "SalaryTypeID", "CountryID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as JobAlertsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (JobAlerts) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<JobAlerts>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as JobAlerts);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed JobAlerts Entity 
		///</summary>
		protected virtual JobAlerts Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			JobAlerts copy = new JobAlerts();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.JobAlertId = this.JobAlertId;
				copy.JobAlertName = this.JobAlertName;
				copy.LastModified = this.LastModified;
				copy.SearchKeywords = this.SearchKeywords;
				copy.RecurrenceType = this.RecurrenceType;
				copy.DailyFrequency = this.DailyFrequency;
				copy.WeeklyFrequency = this.WeeklyFrequency;
				copy.WeeklyDayOccurence = this.WeeklyDayOccurence;
				copy.DateLastRun = this.DateLastRun;
				copy.DateNextRun = this.DateNextRun;
				copy.MemberId = this.MemberId;
				copy.AlertActive = this.AlertActive;
				copy.EmailFormat = this.EmailFormat;
				copy.CustomRecurrenceType = this.CustomRecurrenceType;
				copy.LastResultCount = this.LastResultCount;
				copy.PrimaryAlert = this.PrimaryAlert;
				copy.UnsubscribeValidateId = this.UnsubscribeValidateId;
				copy.EditValidateId = this.EditValidateId;
				copy.ViewValidateId = this.ViewValidateId;
				copy.SiteId = this.SiteId;
				copy.LocationId = this.LocationId;
				copy.AreaIds = this.AreaIds;
				copy.ProfessionId = this.ProfessionId;
				copy.SearchRoleIds = this.SearchRoleIds;
				copy.WorkTypeIds = this.WorkTypeIds;
				copy.SalaryIds = this.SalaryIds;
				copy.DaysPosted = this.DaysPosted;
				copy.GeneratedSql = this.GeneratedSql;
				copy.SalaryLowerBand = this.SalaryLowerBand;
				copy.SalaryUpperBand = this.SalaryUpperBand;
				copy.CurrencyId = this.CurrencyId;
				copy.SalaryTypeId = this.SalaryTypeId;
				copy.CountryId = this.CountryId;
			
			if (this.CurrencyIdSource != null && existingCopies.Contains(this.CurrencyIdSource))
				copy.CurrencyIdSource = existingCopies[this.CurrencyIdSource] as Currencies;
			else
				copy.CurrencyIdSource = MakeCopyOf(this.CurrencyIdSource, existingCopies) as Currencies;
			if (this.MemberIdSource != null && existingCopies.Contains(this.MemberIdSource))
				copy.MemberIdSource = existingCopies[this.MemberIdSource] as Members;
			else
				copy.MemberIdSource = MakeCopyOf(this.MemberIdSource, existingCopies) as Members;
			if (this.SalaryTypeIdSource != null && existingCopies.Contains(this.SalaryTypeIdSource))
				copy.SalaryTypeIdSource = existingCopies[this.SalaryTypeIdSource] as SalaryType;
			else
				copy.SalaryTypeIdSource = MakeCopyOf(this.SalaryTypeIdSource, existingCopies) as SalaryType;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				copy.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				copy.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed JobAlerts Entity 
		///</summary>
		public virtual JobAlerts Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed JobAlerts Entity which is a deep copy of the current entity.
		///</summary>
		public virtual JobAlerts DeepCopy()
		{
			return EntityHelper.Clone<JobAlerts>(this as JobAlerts);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as JobAlertsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new JobAlertsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as JobAlertsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(JobAlertsColumn column)
		{
			switch(column)
			{
					case JobAlertsColumn.JobAlertId:
					return entityData.JobAlertId != _originalData.JobAlertId;
					case JobAlertsColumn.JobAlertName:
					return entityData.JobAlertName != _originalData.JobAlertName;
					case JobAlertsColumn.LastModified:
					return entityData.LastModified != _originalData.LastModified;
					case JobAlertsColumn.SearchKeywords:
					return entityData.SearchKeywords != _originalData.SearchKeywords;
					case JobAlertsColumn.RecurrenceType:
					return entityData.RecurrenceType != _originalData.RecurrenceType;
					case JobAlertsColumn.DailyFrequency:
					return entityData.DailyFrequency != _originalData.DailyFrequency;
					case JobAlertsColumn.WeeklyFrequency:
					return entityData.WeeklyFrequency != _originalData.WeeklyFrequency;
					case JobAlertsColumn.WeeklyDayOccurence:
					return entityData.WeeklyDayOccurence != _originalData.WeeklyDayOccurence;
					case JobAlertsColumn.DateLastRun:
					return entityData.DateLastRun != _originalData.DateLastRun;
					case JobAlertsColumn.DateNextRun:
					return entityData.DateNextRun != _originalData.DateNextRun;
					case JobAlertsColumn.MemberId:
					return entityData.MemberId != _originalData.MemberId;
					case JobAlertsColumn.AlertActive:
					return entityData.AlertActive != _originalData.AlertActive;
					case JobAlertsColumn.EmailFormat:
					return entityData.EmailFormat != _originalData.EmailFormat;
					case JobAlertsColumn.CustomRecurrenceType:
					return entityData.CustomRecurrenceType != _originalData.CustomRecurrenceType;
					case JobAlertsColumn.LastResultCount:
					return entityData.LastResultCount != _originalData.LastResultCount;
					case JobAlertsColumn.PrimaryAlert:
					return entityData.PrimaryAlert != _originalData.PrimaryAlert;
					case JobAlertsColumn.UnsubscribeValidateId:
					return entityData.UnsubscribeValidateId != _originalData.UnsubscribeValidateId;
					case JobAlertsColumn.EditValidateId:
					return entityData.EditValidateId != _originalData.EditValidateId;
					case JobAlertsColumn.ViewValidateId:
					return entityData.ViewValidateId != _originalData.ViewValidateId;
					case JobAlertsColumn.SiteId:
					return entityData.SiteId != _originalData.SiteId;
					case JobAlertsColumn.LocationId:
					return entityData.LocationId != _originalData.LocationId;
					case JobAlertsColumn.AreaIds:
					return entityData.AreaIds != _originalData.AreaIds;
					case JobAlertsColumn.ProfessionId:
					return entityData.ProfessionId != _originalData.ProfessionId;
					case JobAlertsColumn.SearchRoleIds:
					return entityData.SearchRoleIds != _originalData.SearchRoleIds;
					case JobAlertsColumn.WorkTypeIds:
					return entityData.WorkTypeIds != _originalData.WorkTypeIds;
					case JobAlertsColumn.SalaryIds:
					return entityData.SalaryIds != _originalData.SalaryIds;
					case JobAlertsColumn.DaysPosted:
					return entityData.DaysPosted != _originalData.DaysPosted;
					case JobAlertsColumn.GeneratedSql:
					return entityData.GeneratedSql != _originalData.GeneratedSql;
					case JobAlertsColumn.SalaryLowerBand:
					return entityData.SalaryLowerBand != _originalData.SalaryLowerBand;
					case JobAlertsColumn.SalaryUpperBand:
					return entityData.SalaryUpperBand != _originalData.SalaryUpperBand;
					case JobAlertsColumn.CurrencyId:
					return entityData.CurrencyId != _originalData.CurrencyId;
					case JobAlertsColumn.SalaryTypeId:
					return entityData.SalaryTypeId != _originalData.SalaryTypeId;
					case JobAlertsColumn.CountryId:
					return entityData.CountryId != _originalData.CountryId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< JobAlertsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.JobAlertId != _originalData.JobAlertId;
			result = result || entityData.JobAlertName != _originalData.JobAlertName;
			result = result || entityData.LastModified != _originalData.LastModified;
			result = result || entityData.SearchKeywords != _originalData.SearchKeywords;
			result = result || entityData.RecurrenceType != _originalData.RecurrenceType;
			result = result || entityData.DailyFrequency != _originalData.DailyFrequency;
			result = result || entityData.WeeklyFrequency != _originalData.WeeklyFrequency;
			result = result || entityData.WeeklyDayOccurence != _originalData.WeeklyDayOccurence;
			result = result || entityData.DateLastRun != _originalData.DateLastRun;
			result = result || entityData.DateNextRun != _originalData.DateNextRun;
			result = result || entityData.MemberId != _originalData.MemberId;
			result = result || entityData.AlertActive != _originalData.AlertActive;
			result = result || entityData.EmailFormat != _originalData.EmailFormat;
			result = result || entityData.CustomRecurrenceType != _originalData.CustomRecurrenceType;
			result = result || entityData.LastResultCount != _originalData.LastResultCount;
			result = result || entityData.PrimaryAlert != _originalData.PrimaryAlert;
			result = result || entityData.UnsubscribeValidateId != _originalData.UnsubscribeValidateId;
			result = result || entityData.EditValidateId != _originalData.EditValidateId;
			result = result || entityData.ViewValidateId != _originalData.ViewValidateId;
			result = result || entityData.SiteId != _originalData.SiteId;
			result = result || entityData.LocationId != _originalData.LocationId;
			result = result || entityData.AreaIds != _originalData.AreaIds;
			result = result || entityData.ProfessionId != _originalData.ProfessionId;
			result = result || entityData.SearchRoleIds != _originalData.SearchRoleIds;
			result = result || entityData.WorkTypeIds != _originalData.WorkTypeIds;
			result = result || entityData.SalaryIds != _originalData.SalaryIds;
			result = result || entityData.DaysPosted != _originalData.DaysPosted;
			result = result || entityData.GeneratedSql != _originalData.GeneratedSql;
			result = result || entityData.SalaryLowerBand != _originalData.SalaryLowerBand;
			result = result || entityData.SalaryUpperBand != _originalData.SalaryUpperBand;
			result = result || entityData.CurrencyId != _originalData.CurrencyId;
			result = result || entityData.SalaryTypeId != _originalData.SalaryTypeId;
			result = result || entityData.CountryId != _originalData.CountryId;
			return result;
		}	
		
		///<summary>
		///  Returns a JobAlerts Entity with the original data.
		///</summary>
		public JobAlerts GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateJobAlerts(
				_originalData.JobAlertName,
				_originalData.LastModified,
				_originalData.SearchKeywords,
				_originalData.RecurrenceType,
				_originalData.DailyFrequency,
				_originalData.WeeklyFrequency,
				_originalData.WeeklyDayOccurence,
				_originalData.DateLastRun,
				_originalData.DateNextRun,
				_originalData.MemberId,
				_originalData.AlertActive,
				_originalData.EmailFormat,
				_originalData.CustomRecurrenceType,
				_originalData.LastResultCount,
				_originalData.PrimaryAlert,
				_originalData.UnsubscribeValidateId,
				_originalData.EditValidateId,
				_originalData.ViewValidateId,
				_originalData.SiteId,
				_originalData.LocationId,
				_originalData.AreaIds,
				_originalData.ProfessionId,
				_originalData.SearchRoleIds,
				_originalData.WorkTypeIds,
				_originalData.SalaryIds,
				_originalData.DaysPosted,
				_originalData.GeneratedSql,
				_originalData.SalaryLowerBand,
				_originalData.SalaryUpperBand,
				_originalData.CurrencyId,
				_originalData.SalaryTypeId,
				_originalData.CountryId
				);
				
			return (JobAlerts)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="JobAlertsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is JobAlertsBase)
				return ValueEquals(this, (JobAlertsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="JobAlertsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.JobAlertId.GetHashCode() ^ 
					((this.JobAlertName == null) ? string.Empty : this.JobAlertName.ToString()).GetHashCode() ^ 
					this.LastModified.GetHashCode() ^ 
					((this.SearchKeywords == null) ? string.Empty : this.SearchKeywords.ToString()).GetHashCode() ^ 
					((this.RecurrenceType == null) ? string.Empty : this.RecurrenceType.ToString()).GetHashCode() ^ 
					((this.DailyFrequency == null) ? string.Empty : this.DailyFrequency.ToString()).GetHashCode() ^ 
					((this.WeeklyFrequency == null) ? string.Empty : this.WeeklyFrequency.ToString()).GetHashCode() ^ 
					((this.WeeklyDayOccurence == null) ? string.Empty : this.WeeklyDayOccurence.ToString()).GetHashCode() ^ 
					((this.DateLastRun == null) ? string.Empty : this.DateLastRun.ToString()).GetHashCode() ^ 
					((this.DateNextRun == null) ? string.Empty : this.DateNextRun.ToString()).GetHashCode() ^ 
					this.MemberId.GetHashCode() ^ 
					((this.AlertActive == null) ? string.Empty : this.AlertActive.ToString()).GetHashCode() ^ 
					((this.EmailFormat == null) ? string.Empty : this.EmailFormat.ToString()).GetHashCode() ^ 
					((this.CustomRecurrenceType == null) ? string.Empty : this.CustomRecurrenceType.ToString()).GetHashCode() ^ 
					((this.LastResultCount == null) ? string.Empty : this.LastResultCount.ToString()).GetHashCode() ^ 
					((this.PrimaryAlert == null) ? string.Empty : this.PrimaryAlert.ToString()).GetHashCode() ^ 
					((this.UnsubscribeValidateId == null) ? string.Empty : this.UnsubscribeValidateId.ToString()).GetHashCode() ^ 
					((this.EditValidateId == null) ? string.Empty : this.EditValidateId.ToString()).GetHashCode() ^ 
					((this.ViewValidateId == null) ? string.Empty : this.ViewValidateId.ToString()).GetHashCode() ^ 
					this.SiteId.GetHashCode() ^ 
					((this.LocationId == null) ? string.Empty : this.LocationId.ToString()).GetHashCode() ^ 
					((this.AreaIds == null) ? string.Empty : this.AreaIds.ToString()).GetHashCode() ^ 
					((this.ProfessionId == null) ? string.Empty : this.ProfessionId.ToString()).GetHashCode() ^ 
					((this.SearchRoleIds == null) ? string.Empty : this.SearchRoleIds.ToString()).GetHashCode() ^ 
					((this.WorkTypeIds == null) ? string.Empty : this.WorkTypeIds.ToString()).GetHashCode() ^ 
					((this.SalaryIds == null) ? string.Empty : this.SalaryIds.ToString()).GetHashCode() ^ 
					((this.DaysPosted == null) ? string.Empty : this.DaysPosted.ToString()).GetHashCode() ^ 
					((this.GeneratedSql == null) ? string.Empty : this.GeneratedSql.ToString()).GetHashCode() ^ 
					((this.SalaryLowerBand == null) ? string.Empty : this.SalaryLowerBand.ToString()).GetHashCode() ^ 
					((this.SalaryUpperBand == null) ? string.Empty : this.SalaryUpperBand.ToString()).GetHashCode() ^ 
					((this.CurrencyId == null) ? string.Empty : this.CurrencyId.ToString()).GetHashCode() ^ 
					((this.SalaryTypeId == null) ? string.Empty : this.SalaryTypeId.ToString()).GetHashCode() ^ 
					((this.CountryId == null) ? string.Empty : this.CountryId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="JobAlertsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(JobAlertsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="JobAlertsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="JobAlertsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="JobAlertsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(JobAlertsBase Object1, JobAlertsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.JobAlertId != Object2.JobAlertId)
				equal = false;
			if ( Object1.JobAlertName != null && Object2.JobAlertName != null )
			{
				if (Object1.JobAlertName != Object2.JobAlertName)
					equal = false;
			}
			else if (Object1.JobAlertName == null ^ Object2.JobAlertName == null )
			{
				equal = false;
			}
			if (Object1.LastModified != Object2.LastModified)
				equal = false;
			if ( Object1.SearchKeywords != null && Object2.SearchKeywords != null )
			{
				if (Object1.SearchKeywords != Object2.SearchKeywords)
					equal = false;
			}
			else if (Object1.SearchKeywords == null ^ Object2.SearchKeywords == null )
			{
				equal = false;
			}
			if ( Object1.RecurrenceType != null && Object2.RecurrenceType != null )
			{
				if (Object1.RecurrenceType != Object2.RecurrenceType)
					equal = false;
			}
			else if (Object1.RecurrenceType == null ^ Object2.RecurrenceType == null )
			{
				equal = false;
			}
			if ( Object1.DailyFrequency != null && Object2.DailyFrequency != null )
			{
				if (Object1.DailyFrequency != Object2.DailyFrequency)
					equal = false;
			}
			else if (Object1.DailyFrequency == null ^ Object2.DailyFrequency == null )
			{
				equal = false;
			}
			if ( Object1.WeeklyFrequency != null && Object2.WeeklyFrequency != null )
			{
				if (Object1.WeeklyFrequency != Object2.WeeklyFrequency)
					equal = false;
			}
			else if (Object1.WeeklyFrequency == null ^ Object2.WeeklyFrequency == null )
			{
				equal = false;
			}
			if ( Object1.WeeklyDayOccurence != null && Object2.WeeklyDayOccurence != null )
			{
				if (Object1.WeeklyDayOccurence != Object2.WeeklyDayOccurence)
					equal = false;
			}
			else if (Object1.WeeklyDayOccurence == null ^ Object2.WeeklyDayOccurence == null )
			{
				equal = false;
			}
			if ( Object1.DateLastRun != null && Object2.DateLastRun != null )
			{
				if (Object1.DateLastRun != Object2.DateLastRun)
					equal = false;
			}
			else if (Object1.DateLastRun == null ^ Object2.DateLastRun == null )
			{
				equal = false;
			}
			if ( Object1.DateNextRun != null && Object2.DateNextRun != null )
			{
				if (Object1.DateNextRun != Object2.DateNextRun)
					equal = false;
			}
			else if (Object1.DateNextRun == null ^ Object2.DateNextRun == null )
			{
				equal = false;
			}
			if (Object1.MemberId != Object2.MemberId)
				equal = false;
			if ( Object1.AlertActive != null && Object2.AlertActive != null )
			{
				if (Object1.AlertActive != Object2.AlertActive)
					equal = false;
			}
			else if (Object1.AlertActive == null ^ Object2.AlertActive == null )
			{
				equal = false;
			}
			if ( Object1.EmailFormat != null && Object2.EmailFormat != null )
			{
				if (Object1.EmailFormat != Object2.EmailFormat)
					equal = false;
			}
			else if (Object1.EmailFormat == null ^ Object2.EmailFormat == null )
			{
				equal = false;
			}
			if ( Object1.CustomRecurrenceType != null && Object2.CustomRecurrenceType != null )
			{
				if (Object1.CustomRecurrenceType != Object2.CustomRecurrenceType)
					equal = false;
			}
			else if (Object1.CustomRecurrenceType == null ^ Object2.CustomRecurrenceType == null )
			{
				equal = false;
			}
			if ( Object1.LastResultCount != null && Object2.LastResultCount != null )
			{
				if (Object1.LastResultCount != Object2.LastResultCount)
					equal = false;
			}
			else if (Object1.LastResultCount == null ^ Object2.LastResultCount == null )
			{
				equal = false;
			}
			if ( Object1.PrimaryAlert != null && Object2.PrimaryAlert != null )
			{
				if (Object1.PrimaryAlert != Object2.PrimaryAlert)
					equal = false;
			}
			else if (Object1.PrimaryAlert == null ^ Object2.PrimaryAlert == null )
			{
				equal = false;
			}
			if ( Object1.UnsubscribeValidateId != null && Object2.UnsubscribeValidateId != null )
			{
				if (Object1.UnsubscribeValidateId != Object2.UnsubscribeValidateId)
					equal = false;
			}
			else if (Object1.UnsubscribeValidateId == null ^ Object2.UnsubscribeValidateId == null )
			{
				equal = false;
			}
			if ( Object1.EditValidateId != null && Object2.EditValidateId != null )
			{
				if (Object1.EditValidateId != Object2.EditValidateId)
					equal = false;
			}
			else if (Object1.EditValidateId == null ^ Object2.EditValidateId == null )
			{
				equal = false;
			}
			if ( Object1.ViewValidateId != null && Object2.ViewValidateId != null )
			{
				if (Object1.ViewValidateId != Object2.ViewValidateId)
					equal = false;
			}
			else if (Object1.ViewValidateId == null ^ Object2.ViewValidateId == null )
			{
				equal = false;
			}
			if (Object1.SiteId != Object2.SiteId)
				equal = false;
			if ( Object1.LocationId != null && Object2.LocationId != null )
			{
				if (Object1.LocationId != Object2.LocationId)
					equal = false;
			}
			else if (Object1.LocationId == null ^ Object2.LocationId == null )
			{
				equal = false;
			}
			if ( Object1.AreaIds != null && Object2.AreaIds != null )
			{
				if (Object1.AreaIds != Object2.AreaIds)
					equal = false;
			}
			else if (Object1.AreaIds == null ^ Object2.AreaIds == null )
			{
				equal = false;
			}
			if ( Object1.ProfessionId != null && Object2.ProfessionId != null )
			{
				if (Object1.ProfessionId != Object2.ProfessionId)
					equal = false;
			}
			else if (Object1.ProfessionId == null ^ Object2.ProfessionId == null )
			{
				equal = false;
			}
			if ( Object1.SearchRoleIds != null && Object2.SearchRoleIds != null )
			{
				if (Object1.SearchRoleIds != Object2.SearchRoleIds)
					equal = false;
			}
			else if (Object1.SearchRoleIds == null ^ Object2.SearchRoleIds == null )
			{
				equal = false;
			}
			if ( Object1.WorkTypeIds != null && Object2.WorkTypeIds != null )
			{
				if (Object1.WorkTypeIds != Object2.WorkTypeIds)
					equal = false;
			}
			else if (Object1.WorkTypeIds == null ^ Object2.WorkTypeIds == null )
			{
				equal = false;
			}
			if ( Object1.SalaryIds != null && Object2.SalaryIds != null )
			{
				if (Object1.SalaryIds != Object2.SalaryIds)
					equal = false;
			}
			else if (Object1.SalaryIds == null ^ Object2.SalaryIds == null )
			{
				equal = false;
			}
			if ( Object1.DaysPosted != null && Object2.DaysPosted != null )
			{
				if (Object1.DaysPosted != Object2.DaysPosted)
					equal = false;
			}
			else if (Object1.DaysPosted == null ^ Object2.DaysPosted == null )
			{
				equal = false;
			}
			if ( Object1.GeneratedSql != null && Object2.GeneratedSql != null )
			{
				if (Object1.GeneratedSql != Object2.GeneratedSql)
					equal = false;
			}
			else if (Object1.GeneratedSql == null ^ Object2.GeneratedSql == null )
			{
				equal = false;
			}
			if ( Object1.SalaryLowerBand != null && Object2.SalaryLowerBand != null )
			{
				if (Object1.SalaryLowerBand != Object2.SalaryLowerBand)
					equal = false;
			}
			else if (Object1.SalaryLowerBand == null ^ Object2.SalaryLowerBand == null )
			{
				equal = false;
			}
			if ( Object1.SalaryUpperBand != null && Object2.SalaryUpperBand != null )
			{
				if (Object1.SalaryUpperBand != Object2.SalaryUpperBand)
					equal = false;
			}
			else if (Object1.SalaryUpperBand == null ^ Object2.SalaryUpperBand == null )
			{
				equal = false;
			}
			if ( Object1.CurrencyId != null && Object2.CurrencyId != null )
			{
				if (Object1.CurrencyId != Object2.CurrencyId)
					equal = false;
			}
			else if (Object1.CurrencyId == null ^ Object2.CurrencyId == null )
			{
				equal = false;
			}
			if ( Object1.SalaryTypeId != null && Object2.SalaryTypeId != null )
			{
				if (Object1.SalaryTypeId != Object2.SalaryTypeId)
					equal = false;
			}
			else if (Object1.SalaryTypeId == null ^ Object2.SalaryTypeId == null )
			{
				equal = false;
			}
			if ( Object1.CountryId != null && Object2.CountryId != null )
			{
				if (Object1.CountryId != Object2.CountryId)
					equal = false;
			}
			else if (Object1.CountryId == null ^ Object2.CountryId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((JobAlertsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static JobAlertsComparer GetComparer()
        {
            return new JobAlertsComparer();
        }
        */

        // Comparer delegates back to JobAlerts
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(JobAlerts rhs, JobAlertsColumn which)
        {
            switch (which)
            {
            	
            	
            	case JobAlertsColumn.JobAlertId:
            		return this.JobAlertId.CompareTo(rhs.JobAlertId);
            		
            		                 
            	
            	
            	case JobAlertsColumn.JobAlertName:
            		return this.JobAlertName.CompareTo(rhs.JobAlertName);
            		
            		                 
            	
            	
            	case JobAlertsColumn.LastModified:
            		return this.LastModified.CompareTo(rhs.LastModified);
            		
            		                 
            	
            	
            	case JobAlertsColumn.SearchKeywords:
            		return this.SearchKeywords.CompareTo(rhs.SearchKeywords);
            		
            		                 
            	
            	
            	case JobAlertsColumn.RecurrenceType:
            		return this.RecurrenceType.Value.CompareTo(rhs.RecurrenceType.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.DailyFrequency:
            		return this.DailyFrequency.Value.CompareTo(rhs.DailyFrequency.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.WeeklyFrequency:
            		return this.WeeklyFrequency.Value.CompareTo(rhs.WeeklyFrequency.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.WeeklyDayOccurence:
            		return this.WeeklyDayOccurence.Value.CompareTo(rhs.WeeklyDayOccurence.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.DateLastRun:
            		return this.DateLastRun.Value.CompareTo(rhs.DateLastRun.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.DateNextRun:
            		return this.DateNextRun.Value.CompareTo(rhs.DateNextRun.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.MemberId:
            		return this.MemberId.CompareTo(rhs.MemberId);
            		
            		                 
            	
            	
            	case JobAlertsColumn.AlertActive:
            		return this.AlertActive.Value.CompareTo(rhs.AlertActive.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.EmailFormat:
            		return this.EmailFormat.Value.CompareTo(rhs.EmailFormat.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.CustomRecurrenceType:
            		return this.CustomRecurrenceType.Value.CompareTo(rhs.CustomRecurrenceType.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.LastResultCount:
            		return this.LastResultCount.Value.CompareTo(rhs.LastResultCount.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.PrimaryAlert:
            		return this.PrimaryAlert.Value.CompareTo(rhs.PrimaryAlert.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.UnsubscribeValidateId:
            		return this.UnsubscribeValidateId.Value.CompareTo(rhs.UnsubscribeValidateId.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.EditValidateId:
            		return this.EditValidateId.Value.CompareTo(rhs.EditValidateId.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.ViewValidateId:
            		return this.ViewValidateId.Value.CompareTo(rhs.ViewValidateId.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.SiteId:
            		return this.SiteId.CompareTo(rhs.SiteId);
            		
            		                 
            	
            	
            	case JobAlertsColumn.LocationId:
            		return this.LocationId.CompareTo(rhs.LocationId);
            		
            		                 
            	
            	
            	case JobAlertsColumn.AreaIds:
            		return this.AreaIds.CompareTo(rhs.AreaIds);
            		
            		                 
            	
            	
            	case JobAlertsColumn.ProfessionId:
            		return this.ProfessionId.CompareTo(rhs.ProfessionId);
            		
            		                 
            	
            	
            	case JobAlertsColumn.SearchRoleIds:
            		return this.SearchRoleIds.CompareTo(rhs.SearchRoleIds);
            		
            		                 
            	
            	
            	case JobAlertsColumn.WorkTypeIds:
            		return this.WorkTypeIds.CompareTo(rhs.WorkTypeIds);
            		
            		                 
            	
            	
            	case JobAlertsColumn.SalaryIds:
            		return this.SalaryIds.CompareTo(rhs.SalaryIds);
            		
            		                 
            	
            	
            	case JobAlertsColumn.DaysPosted:
            		return this.DaysPosted.Value.CompareTo(rhs.DaysPosted.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.GeneratedSql:
            		return this.GeneratedSql.CompareTo(rhs.GeneratedSql);
            		
            		                 
            	
            	
            	case JobAlertsColumn.SalaryLowerBand:
            		return this.SalaryLowerBand.Value.CompareTo(rhs.SalaryLowerBand.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.SalaryUpperBand:
            		return this.SalaryUpperBand.Value.CompareTo(rhs.SalaryUpperBand.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.CurrencyId:
            		return this.CurrencyId.Value.CompareTo(rhs.CurrencyId.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.SalaryTypeId:
            		return this.SalaryTypeId.Value.CompareTo(rhs.SalaryTypeId.Value);
            		
            		                 
            	
            	
            	case JobAlertsColumn.CountryId:
            		return this.CountryId.CompareTo(rhs.CountryId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<JobAlertsKey> Members
		
		// member variable for the EntityId property
		private JobAlertsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual JobAlertsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new JobAlertsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("JobAlerts")
					.Append("|").Append( this.JobAlertId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{34}{33}- JobAlertId: {0}{33}- JobAlertName: {1}{33}- LastModified: {2}{33}- SearchKeywords: {3}{33}- RecurrenceType: {4}{33}- DailyFrequency: {5}{33}- WeeklyFrequency: {6}{33}- WeeklyDayOccurence: {7}{33}- DateLastRun: {8}{33}- DateNextRun: {9}{33}- MemberId: {10}{33}- AlertActive: {11}{33}- EmailFormat: {12}{33}- CustomRecurrenceType: {13}{33}- LastResultCount: {14}{33}- PrimaryAlert: {15}{33}- UnsubscribeValidateId: {16}{33}- EditValidateId: {17}{33}- ViewValidateId: {18}{33}- SiteId: {19}{33}- LocationId: {20}{33}- AreaIds: {21}{33}- ProfessionId: {22}{33}- SearchRoleIds: {23}{33}- WorkTypeIds: {24}{33}- SalaryIds: {25}{33}- DaysPosted: {26}{33}- GeneratedSql: {27}{33}- SalaryLowerBand: {28}{33}- SalaryUpperBand: {29}{33}- CurrencyId: {30}{33}- SalaryTypeId: {31}{33}- CountryId: {32}{33}{35}", 
				this.JobAlertId,
				(this.JobAlertName == null) ? string.Empty : this.JobAlertName.ToString(),
				this.LastModified,
				(this.SearchKeywords == null) ? string.Empty : this.SearchKeywords.ToString(),
				(this.RecurrenceType == null) ? string.Empty : this.RecurrenceType.ToString(),
				(this.DailyFrequency == null) ? string.Empty : this.DailyFrequency.ToString(),
				(this.WeeklyFrequency == null) ? string.Empty : this.WeeklyFrequency.ToString(),
				(this.WeeklyDayOccurence == null) ? string.Empty : this.WeeklyDayOccurence.ToString(),
				(this.DateLastRun == null) ? string.Empty : this.DateLastRun.ToString(),
				(this.DateNextRun == null) ? string.Empty : this.DateNextRun.ToString(),
				this.MemberId,
				(this.AlertActive == null) ? string.Empty : this.AlertActive.ToString(),
				(this.EmailFormat == null) ? string.Empty : this.EmailFormat.ToString(),
				(this.CustomRecurrenceType == null) ? string.Empty : this.CustomRecurrenceType.ToString(),
				(this.LastResultCount == null) ? string.Empty : this.LastResultCount.ToString(),
				(this.PrimaryAlert == null) ? string.Empty : this.PrimaryAlert.ToString(),
				(this.UnsubscribeValidateId == null) ? string.Empty : this.UnsubscribeValidateId.ToString(),
				(this.EditValidateId == null) ? string.Empty : this.EditValidateId.ToString(),
				(this.ViewValidateId == null) ? string.Empty : this.ViewValidateId.ToString(),
				this.SiteId,
				(this.LocationId == null) ? string.Empty : this.LocationId.ToString(),
				(this.AreaIds == null) ? string.Empty : this.AreaIds.ToString(),
				(this.ProfessionId == null) ? string.Empty : this.ProfessionId.ToString(),
				(this.SearchRoleIds == null) ? string.Empty : this.SearchRoleIds.ToString(),
				(this.WorkTypeIds == null) ? string.Empty : this.WorkTypeIds.ToString(),
				(this.SalaryIds == null) ? string.Empty : this.SalaryIds.ToString(),
				(this.DaysPosted == null) ? string.Empty : this.DaysPosted.ToString(),
				(this.GeneratedSql == null) ? string.Empty : this.GeneratedSql.ToString(),
				(this.SalaryLowerBand == null) ? string.Empty : this.SalaryLowerBand.ToString(),
				(this.SalaryUpperBand == null) ? string.Empty : this.SalaryUpperBand.ToString(),
				(this.CurrencyId == null) ? string.Empty : this.CurrencyId.ToString(),
				(this.SalaryTypeId == null) ? string.Empty : this.SalaryTypeId.ToString(),
				(this.CountryId == null) ? string.Empty : this.CountryId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'JobAlerts' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class JobAlertsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// JobAlertID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "JobAlerts"</remarks>
		public System.Int32 JobAlertId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// JobAlertName : 
		/// </summary>
		public System.String		  JobAlertName = null;
		
		/// <summary>
		/// LastModified : 
		/// </summary>
		public System.DateTime		  LastModified = DateTime.MinValue;
		
		/// <summary>
		/// SearchKeywords : 
		/// </summary>
		public System.String		  SearchKeywords = null;
		
		/// <summary>
		/// RecurrenceType : 
		/// </summary>
		public System.Int32?		  RecurrenceType = null;
		
		/// <summary>
		/// DailyFrequency : 
		/// </summary>
		public System.Int32?		  DailyFrequency = null;
		
		/// <summary>
		/// WeeklyFrequency : 
		/// </summary>
		public System.Int32?		  WeeklyFrequency = null;
		
		/// <summary>
		/// WeeklyDayOccurence : 
		/// </summary>
		public System.Int32?		  WeeklyDayOccurence = null;
		
		/// <summary>
		/// DateLastRun : 
		/// </summary>
		public System.DateTime?		  DateLastRun = null;
		
		/// <summary>
		/// DateNextRun : 
		/// </summary>
		public System.DateTime?		  DateNextRun = null;
		
		/// <summary>
		/// MemberID : 
		/// </summary>
		public System.Int32		  MemberId = (int)0;
		
		/// <summary>
		/// AlertActive : 
		/// </summary>
		public System.Boolean?		  AlertActive = null;
		
		/// <summary>
		/// EmailFormat : 
		/// </summary>
		public System.Int32?		  EmailFormat = null;
		
		/// <summary>
		/// CustomRecurrenceType : 
		/// </summary>
		public System.Int32?		  CustomRecurrenceType = null;
		
		/// <summary>
		/// LastResultCount : 
		/// </summary>
		public System.Int32?		  LastResultCount = null;
		
		/// <summary>
		/// PrimaryAlert : 
		/// </summary>
		public System.Boolean?		  PrimaryAlert = null;
		
		/// <summary>
		/// UnsubscribeValidateID : 
		/// </summary>
		public System.Guid?		  UnsubscribeValidateId = null;
		
		/// <summary>
		/// EditValidateID : 
		/// </summary>
		public System.Guid?		  EditValidateId = null;
		
		/// <summary>
		/// ViewValidateID : 
		/// </summary>
		public System.Guid?		  ViewValidateId = null;
		
		/// <summary>
		/// SiteID : 
		/// </summary>
		public System.Int32		  SiteId = (int)0;
		
		/// <summary>
		/// LocationID : 
		/// </summary>
		public System.String		  LocationId = null;
		
		/// <summary>
		/// AreaIDs : 
		/// </summary>
		public System.String		  AreaIds = null;
		
		/// <summary>
		/// ProfessionID : 
		/// </summary>
		public System.String		  ProfessionId = null;
		
		/// <summary>
		/// SearchRoleIDs : 
		/// </summary>
		public System.String		  SearchRoleIds = null;
		
		/// <summary>
		/// WorkTypeIDs : 
		/// </summary>
		public System.String		  WorkTypeIds = null;
		
		/// <summary>
		/// SalaryIDs : 
		/// </summary>
		public System.String		  SalaryIds = null;
		
		/// <summary>
		/// DaysPosted : 
		/// </summary>
		public System.Int32?		  DaysPosted = null;
		
		/// <summary>
		/// GeneratedSQL : 
		/// </summary>
		public System.String		  GeneratedSql = null;
		
		/// <summary>
		/// SalaryLowerBand : 
		/// </summary>
		public System.Decimal?		  SalaryLowerBand = null;
		
		/// <summary>
		/// SalaryUpperBand : 
		/// </summary>
		public System.Decimal?		  SalaryUpperBand = null;
		
		/// <summary>
		/// CurrencyID : 
		/// </summary>
		public System.Int32?		  CurrencyId = null;
		
		/// <summary>
		/// SalaryTypeID : 
		/// </summary>
		public System.Int32?		  SalaryTypeId = null;
		
		/// <summary>
		/// CountryID : 
		/// </summary>
		public System.String		  CountryId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Currencies _currencyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Currencies"/>.
		/// </summary>
		/// <value>The source Currencies for CurrencyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Currencies CurrencyIdSource
      	{
            get { return this._currencyIdSource; }
            set { this._currencyIdSource = value; }
      	}
		private Members _memberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Members"/>.
		/// </summary>
		/// <value>The source Members for MemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Members MemberIdSource
      	{
            get { return this._memberIdSource; }
            set { this._memberIdSource = value; }
      	}
		private SalaryType _salaryTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SalaryType"/>.
		/// </summary>
		/// <value>The source SalaryType for SalaryTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SalaryType SalaryTypeIdSource
      	{
            get { return this._salaryTypeIdSource; }
            set { this._salaryTypeIdSource = value; }
      	}
		private Sites _siteIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Sites SiteIdSource
      	{
            get { return this._siteIdSource; }
            set { this._siteIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			JobAlertsEntityData _tmp = new JobAlertsEntityData();
						
			_tmp.JobAlertId = this.JobAlertId;
			
			_tmp.JobAlertName = this.JobAlertName;
			_tmp.LastModified = this.LastModified;
			_tmp.SearchKeywords = this.SearchKeywords;
			_tmp.RecurrenceType = this.RecurrenceType;
			_tmp.DailyFrequency = this.DailyFrequency;
			_tmp.WeeklyFrequency = this.WeeklyFrequency;
			_tmp.WeeklyDayOccurence = this.WeeklyDayOccurence;
			_tmp.DateLastRun = this.DateLastRun;
			_tmp.DateNextRun = this.DateNextRun;
			_tmp.MemberId = this.MemberId;
			_tmp.AlertActive = this.AlertActive;
			_tmp.EmailFormat = this.EmailFormat;
			_tmp.CustomRecurrenceType = this.CustomRecurrenceType;
			_tmp.LastResultCount = this.LastResultCount;
			_tmp.PrimaryAlert = this.PrimaryAlert;
			_tmp.UnsubscribeValidateId = this.UnsubscribeValidateId;
			_tmp.EditValidateId = this.EditValidateId;
			_tmp.ViewValidateId = this.ViewValidateId;
			_tmp.SiteId = this.SiteId;
			_tmp.LocationId = this.LocationId;
			_tmp.AreaIds = this.AreaIds;
			_tmp.ProfessionId = this.ProfessionId;
			_tmp.SearchRoleIds = this.SearchRoleIds;
			_tmp.WorkTypeIds = this.WorkTypeIds;
			_tmp.SalaryIds = this.SalaryIds;
			_tmp.DaysPosted = this.DaysPosted;
			_tmp.GeneratedSql = this.GeneratedSql;
			_tmp.SalaryLowerBand = this.SalaryLowerBand;
			_tmp.SalaryUpperBand = this.SalaryUpperBand;
			_tmp.CurrencyId = this.CurrencyId;
			_tmp.SalaryTypeId = this.SalaryTypeId;
			_tmp.CountryId = this.CountryId;
			
			#region Source Parent Composite Entities
			if (this.CurrencyIdSource != null)
				_tmp.CurrencyIdSource = MakeCopyOf(this.CurrencyIdSource) as Currencies;
			if (this.MemberIdSource != null)
				_tmp.MemberIdSource = MakeCopyOf(this.MemberIdSource) as Members;
			if (this.SalaryTypeIdSource != null)
				_tmp.SalaryTypeIdSource = MakeCopyOf(this.SalaryTypeIdSource) as SalaryType;
			if (this.SiteIdSource != null)
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource) as Sites;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			JobAlertsEntityData _tmp = new JobAlertsEntityData();
						
			_tmp.JobAlertId = this.JobAlertId;
			
			_tmp.JobAlertName = this.JobAlertName;
			_tmp.LastModified = this.LastModified;
			_tmp.SearchKeywords = this.SearchKeywords;
			_tmp.RecurrenceType = this.RecurrenceType;
			_tmp.DailyFrequency = this.DailyFrequency;
			_tmp.WeeklyFrequency = this.WeeklyFrequency;
			_tmp.WeeklyDayOccurence = this.WeeklyDayOccurence;
			_tmp.DateLastRun = this.DateLastRun;
			_tmp.DateNextRun = this.DateNextRun;
			_tmp.MemberId = this.MemberId;
			_tmp.AlertActive = this.AlertActive;
			_tmp.EmailFormat = this.EmailFormat;
			_tmp.CustomRecurrenceType = this.CustomRecurrenceType;
			_tmp.LastResultCount = this.LastResultCount;
			_tmp.PrimaryAlert = this.PrimaryAlert;
			_tmp.UnsubscribeValidateId = this.UnsubscribeValidateId;
			_tmp.EditValidateId = this.EditValidateId;
			_tmp.ViewValidateId = this.ViewValidateId;
			_tmp.SiteId = this.SiteId;
			_tmp.LocationId = this.LocationId;
			_tmp.AreaIds = this.AreaIds;
			_tmp.ProfessionId = this.ProfessionId;
			_tmp.SearchRoleIds = this.SearchRoleIds;
			_tmp.WorkTypeIds = this.WorkTypeIds;
			_tmp.SalaryIds = this.SalaryIds;
			_tmp.DaysPosted = this.DaysPosted;
			_tmp.GeneratedSql = this.GeneratedSql;
			_tmp.SalaryLowerBand = this.SalaryLowerBand;
			_tmp.SalaryUpperBand = this.SalaryUpperBand;
			_tmp.CurrencyId = this.CurrencyId;
			_tmp.SalaryTypeId = this.SalaryTypeId;
			_tmp.CountryId = this.CountryId;
			
			#region Source Parent Composite Entities
			if (this.CurrencyIdSource != null && existingCopies.Contains(this.CurrencyIdSource))
				_tmp.CurrencyIdSource = existingCopies[this.CurrencyIdSource] as Currencies;
			else
				_tmp.CurrencyIdSource = MakeCopyOf(this.CurrencyIdSource, existingCopies) as Currencies;
			if (this.MemberIdSource != null && existingCopies.Contains(this.MemberIdSource))
				_tmp.MemberIdSource = existingCopies[this.MemberIdSource] as Members;
			else
				_tmp.MemberIdSource = MakeCopyOf(this.MemberIdSource, existingCopies) as Members;
			if (this.SalaryTypeIdSource != null && existingCopies.Contains(this.SalaryTypeIdSource))
				_tmp.SalaryTypeIdSource = existingCopies[this.SalaryTypeIdSource] as SalaryType;
			else
				_tmp.SalaryTypeIdSource = MakeCopyOf(this.SalaryTypeIdSource, existingCopies) as SalaryType;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				_tmp.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="JobAlertsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(JobAlertsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="JobAlertsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(JobAlertsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="JobAlertsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(JobAlertsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				JobAlertsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new JobAlertsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="JobAlertsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(JobAlertsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				JobAlertsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new JobAlertsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region JobAlertsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="JobAlerts"/> object.
	/// </remarks>
	public class JobAlertsEventArgs : System.EventArgs
	{
		private JobAlertsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the JobAlertsEventArgs class.
		///</summary>
		public JobAlertsEventArgs(JobAlertsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the JobAlertsEventArgs class.
		///</summary>
		public JobAlertsEventArgs(JobAlertsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The JobAlertsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="JobAlertsColumn" />
		public JobAlertsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all JobAlerts related events.
	///</summary>
	public delegate void JobAlertsEventHandler(object sender, JobAlertsEventArgs e);
	
	#region JobAlertsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class JobAlertsComparer : System.Collections.Generic.IComparer<JobAlerts>
	{
		JobAlertsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:JobAlertsComparer"/> class.
        /// </summary>
		public JobAlertsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:JobAlertsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public JobAlertsComparer(JobAlertsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="JobAlerts"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="JobAlerts"/> to compare.</param>
        /// <param name="b">The second <c>JobAlerts</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(JobAlerts a, JobAlerts b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(JobAlerts entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(JobAlerts a, JobAlerts b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public JobAlertsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region JobAlertsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="JobAlerts"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class JobAlertsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the JobAlertsKey class.
		/// </summary>
		public JobAlertsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the JobAlertsKey class.
		/// </summary>
		public JobAlertsKey(JobAlertsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.JobAlertId = entity.JobAlertId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the JobAlertsKey class.
		/// </summary>
		public JobAlertsKey(System.Int32 _jobAlertId)
		{
			#region Init Properties

			this.JobAlertId = _jobAlertId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private JobAlertsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public JobAlertsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the JobAlertId property
		private System.Int32 _jobAlertId;
		
		/// <summary>
		/// Gets or sets the JobAlertId property.
		/// </summary>
		public System.Int32 JobAlertId
		{
			get { return _jobAlertId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.JobAlertId = value;
				
				_jobAlertId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				JobAlertId = ( values["JobAlertId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["JobAlertId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("JobAlertId", JobAlertId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("JobAlertId: {0}{1}",
								JobAlertId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region JobAlertsColumn Enum
	
	/// <summary>
	/// Enumerate the JobAlerts columns.
	/// </summary>
	[Serializable]
	public enum JobAlertsColumn : int
	{
		/// <summary>
		/// JobAlertId : 
		/// </summary>
		[EnumTextValue("JobAlertID")]
		[ColumnEnum("JobAlertID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		JobAlertId = 1,
		/// <summary>
		/// JobAlertName : 
		/// </summary>
		[EnumTextValue("JobAlertName")]
		[ColumnEnum("JobAlertName", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		JobAlertName = 2,
		/// <summary>
		/// LastModified : 
		/// </summary>
		[EnumTextValue("LastModified")]
		[ColumnEnum("LastModified", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastModified = 3,
		/// <summary>
		/// SearchKeywords : 
		/// </summary>
		[EnumTextValue("SearchKeywords")]
		[ColumnEnum("SearchKeywords", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		SearchKeywords = 4,
		/// <summary>
		/// RecurrenceType : 
		/// </summary>
		[EnumTextValue("RecurrenceType")]
		[ColumnEnum("RecurrenceType", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		RecurrenceType = 5,
		/// <summary>
		/// DailyFrequency : 
		/// </summary>
		[EnumTextValue("DailyFrequency")]
		[ColumnEnum("DailyFrequency", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DailyFrequency = 6,
		/// <summary>
		/// WeeklyFrequency : 
		/// </summary>
		[EnumTextValue("WeeklyFrequency")]
		[ColumnEnum("WeeklyFrequency", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		WeeklyFrequency = 7,
		/// <summary>
		/// WeeklyDayOccurence : 
		/// </summary>
		[EnumTextValue("WeeklyDayOccurence")]
		[ColumnEnum("WeeklyDayOccurence", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		WeeklyDayOccurence = 8,
		/// <summary>
		/// DateLastRun : 
		/// </summary>
		[EnumTextValue("DateLastRun")]
		[ColumnEnum("DateLastRun", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DateLastRun = 9,
		/// <summary>
		/// DateNextRun : 
		/// </summary>
		[EnumTextValue("DateNextRun")]
		[ColumnEnum("DateNextRun", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DateNextRun = 10,
		/// <summary>
		/// MemberId : 
		/// </summary>
		[EnumTextValue("MemberID")]
		[ColumnEnum("MemberID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MemberId = 11,
		/// <summary>
		/// AlertActive : 
		/// </summary>
		[EnumTextValue("AlertActive")]
		[ColumnEnum("AlertActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		AlertActive = 12,
		/// <summary>
		/// EmailFormat : 
		/// </summary>
		[EnumTextValue("EmailFormat")]
		[ColumnEnum("EmailFormat", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EmailFormat = 13,
		/// <summary>
		/// CustomRecurrenceType : 
		/// </summary>
		[EnumTextValue("CustomRecurrenceType")]
		[ColumnEnum("CustomRecurrenceType", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CustomRecurrenceType = 14,
		/// <summary>
		/// LastResultCount : 
		/// </summary>
		[EnumTextValue("LastResultCount")]
		[ColumnEnum("LastResultCount", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastResultCount = 15,
		/// <summary>
		/// PrimaryAlert : 
		/// </summary>
		[EnumTextValue("PrimaryAlert")]
		[ColumnEnum("PrimaryAlert", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		PrimaryAlert = 16,
		/// <summary>
		/// UnsubscribeValidateId : 
		/// </summary>
		[EnumTextValue("UnsubscribeValidateID")]
		[ColumnEnum("UnsubscribeValidateID", typeof(System.Guid), System.Data.DbType.Guid, false, false, true)]
		UnsubscribeValidateId = 17,
		/// <summary>
		/// EditValidateId : 
		/// </summary>
		[EnumTextValue("EditValidateID")]
		[ColumnEnum("EditValidateID", typeof(System.Guid), System.Data.DbType.Guid, false, false, true)]
		EditValidateId = 18,
		/// <summary>
		/// ViewValidateId : 
		/// </summary>
		[EnumTextValue("ViewValidateID")]
		[ColumnEnum("ViewValidateID", typeof(System.Guid), System.Data.DbType.Guid, false, false, true)]
		ViewValidateId = 19,
		/// <summary>
		/// SiteId : 
		/// </summary>
		[EnumTextValue("SiteID")]
		[ColumnEnum("SiteID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteId = 20,
		/// <summary>
		/// LocationId : 
		/// </summary>
		[EnumTextValue("LocationID")]
		[ColumnEnum("LocationID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		LocationId = 21,
		/// <summary>
		/// AreaIds : 
		/// </summary>
		[EnumTextValue("AreaIDs")]
		[ColumnEnum("AreaIDs", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		AreaIds = 22,
		/// <summary>
		/// ProfessionId : 
		/// </summary>
		[EnumTextValue("ProfessionID")]
		[ColumnEnum("ProfessionID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		ProfessionId = 23,
		/// <summary>
		/// SearchRoleIds : 
		/// </summary>
		[EnumTextValue("SearchRoleIDs")]
		[ColumnEnum("SearchRoleIDs", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		SearchRoleIds = 24,
		/// <summary>
		/// WorkTypeIds : 
		/// </summary>
		[EnumTextValue("WorkTypeIDs")]
		[ColumnEnum("WorkTypeIDs", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		WorkTypeIds = 25,
		/// <summary>
		/// SalaryIds : 
		/// </summary>
		[EnumTextValue("SalaryIDs")]
		[ColumnEnum("SalaryIDs", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		SalaryIds = 26,
		/// <summary>
		/// DaysPosted : 
		/// </summary>
		[EnumTextValue("DaysPosted")]
		[ColumnEnum("DaysPosted", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DaysPosted = 27,
		/// <summary>
		/// GeneratedSql : 
		/// </summary>
		[EnumTextValue("GeneratedSQL")]
		[ColumnEnum("GeneratedSQL", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 8000)]
		GeneratedSql = 28,
		/// <summary>
		/// SalaryLowerBand : 
		/// </summary>
		[EnumTextValue("SalaryLowerBand")]
		[ColumnEnum("SalaryLowerBand", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SalaryLowerBand = 29,
		/// <summary>
		/// SalaryUpperBand : 
		/// </summary>
		[EnumTextValue("SalaryUpperBand")]
		[ColumnEnum("SalaryUpperBand", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SalaryUpperBand = 30,
		/// <summary>
		/// CurrencyId : 
		/// </summary>
		[EnumTextValue("CurrencyID")]
		[ColumnEnum("CurrencyID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CurrencyId = 31,
		/// <summary>
		/// SalaryTypeId : 
		/// </summary>
		[EnumTextValue("SalaryTypeID")]
		[ColumnEnum("SalaryTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SalaryTypeId = 32,
		/// <summary>
		/// CountryId : 
		/// </summary>
		[EnumTextValue("CountryID")]
		[ColumnEnum("CountryID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		CountryId = 33
	}//End enum

	#endregion JobAlertsColumn Enum

} // end namespace


/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file JobApplication.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'JobApplication' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class JobApplicationBase : EntityBase, IJobApplication, IEntityId<JobApplicationKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private JobApplicationEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private JobApplicationEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private JobApplicationEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<JobApplication> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event JobApplicationEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event JobApplicationEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="JobApplicationBase"/> instance.
		///</summary>
		public JobApplicationBase()
		{
			this.entityData = new JobApplicationEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="JobApplicationBase"/> instance.
		///</summary>
		///<param name="_applicationDate"></param>
		///<param name="_jobId"></param>
		///<param name="_memberId"></param>
		///<param name="_memberResumeFile"></param>
		///<param name="_memberCoverLetterFile"></param>
		///<param name="_applicationStatus"></param>
		///<param name="_jobAppValidateId"></param>
		///<param name="_siteIdReferral"></param>
		///<param name="_urlReferral"></param>
		///<param name="_applicantGrade"></param>
		///<param name="_lastViewedDate"></param>
		///<param name="_firstName"></param>
		///<param name="_surname"></param>
		///<param name="_emailAddress"></param>
		///<param name="_mobilePhone"></param>
		///<param name="_memberNote"></param>
		///<param name="_advertiserNote"></param>
		///<param name="_jobArchiveId"></param>
		///<param name="_draft"></param>
		///<param name="_jobApplicationTypeId"></param>
		///<param name="_externalXmlFilename"></param>
		///<param name="_customQuestionnaireXml"></param>
		///<param name="_externalPdfFilename"></param>
		///<param name="_fileDownloaded"></param>
		///<param name="_appliedWith"></param>
		///<param name="_screeningQuestionaireXml"></param>
		public JobApplicationBase(System.DateTime? _applicationDate, System.Int32? _jobId, 
			System.Int32? _memberId, System.String _memberResumeFile, System.String _memberCoverLetterFile, 
			System.Int32? _applicationStatus, System.Guid _jobAppValidateId, System.Int32? _siteIdReferral, 
			System.String _urlReferral, System.Int32? _applicantGrade, System.DateTime? _lastViewedDate, 
			System.String _firstName, System.String _surname, System.String _emailAddress, 
			System.String _mobilePhone, System.String _memberNote, System.String _advertiserNote, 
			System.Int32? _jobArchiveId, System.Boolean? _draft, System.Int32? _jobApplicationTypeId, 
			System.String _externalXmlFilename, System.String _customQuestionnaireXml, System.String _externalPdfFilename, 
			System.Boolean? _fileDownloaded, System.String _appliedWith, System.String _screeningQuestionaireXml)
		{
			this.entityData = new JobApplicationEntityData();
			this.backupData = null;

			this.ApplicationDate = _applicationDate;
			this.JobId = _jobId;
			this.MemberId = _memberId;
			this.MemberResumeFile = _memberResumeFile;
			this.MemberCoverLetterFile = _memberCoverLetterFile;
			this.ApplicationStatus = _applicationStatus;
			this.JobAppValidateId = _jobAppValidateId;
			this.SiteIdReferral = _siteIdReferral;
			this.UrlReferral = _urlReferral;
			this.ApplicantGrade = _applicantGrade;
			this.LastViewedDate = _lastViewedDate;
			this.FirstName = _firstName;
			this.Surname = _surname;
			this.EmailAddress = _emailAddress;
			this.MobilePhone = _mobilePhone;
			this.MemberNote = _memberNote;
			this.AdvertiserNote = _advertiserNote;
			this.JobArchiveId = _jobArchiveId;
			this.Draft = _draft;
			this.JobApplicationTypeId = _jobApplicationTypeId;
			this.ExternalXmlFilename = _externalXmlFilename;
			this.CustomQuestionnaireXml = _customQuestionnaireXml;
			this.ExternalPdfFilename = _externalPdfFilename;
			this.FileDownloaded = _fileDownloaded;
			this.AppliedWith = _appliedWith;
			this.ScreeningQuestionaireXml = _screeningQuestionaireXml;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="JobApplication"/> instance.
		///</summary>
		///<param name="_applicationDate"></param>
		///<param name="_jobId"></param>
		///<param name="_memberId"></param>
		///<param name="_memberResumeFile"></param>
		///<param name="_memberCoverLetterFile"></param>
		///<param name="_applicationStatus"></param>
		///<param name="_jobAppValidateId"></param>
		///<param name="_siteIdReferral"></param>
		///<param name="_urlReferral"></param>
		///<param name="_applicantGrade"></param>
		///<param name="_lastViewedDate"></param>
		///<param name="_firstName"></param>
		///<param name="_surname"></param>
		///<param name="_emailAddress"></param>
		///<param name="_mobilePhone"></param>
		///<param name="_memberNote"></param>
		///<param name="_advertiserNote"></param>
		///<param name="_jobArchiveId"></param>
		///<param name="_draft"></param>
		///<param name="_jobApplicationTypeId"></param>
		///<param name="_externalXmlFilename"></param>
		///<param name="_customQuestionnaireXml"></param>
		///<param name="_externalPdfFilename"></param>
		///<param name="_fileDownloaded"></param>
		///<param name="_appliedWith"></param>
		///<param name="_screeningQuestionaireXml"></param>
		public static JobApplication CreateJobApplication(System.DateTime? _applicationDate, System.Int32? _jobId, 
			System.Int32? _memberId, System.String _memberResumeFile, System.String _memberCoverLetterFile, 
			System.Int32? _applicationStatus, System.Guid _jobAppValidateId, System.Int32? _siteIdReferral, 
			System.String _urlReferral, System.Int32? _applicantGrade, System.DateTime? _lastViewedDate, 
			System.String _firstName, System.String _surname, System.String _emailAddress, 
			System.String _mobilePhone, System.String _memberNote, System.String _advertiserNote, 
			System.Int32? _jobArchiveId, System.Boolean? _draft, System.Int32? _jobApplicationTypeId, 
			System.String _externalXmlFilename, System.String _customQuestionnaireXml, System.String _externalPdfFilename, 
			System.Boolean? _fileDownloaded, System.String _appliedWith, System.String _screeningQuestionaireXml)
		{
			JobApplication newJobApplication = new JobApplication();
			newJobApplication.ApplicationDate = _applicationDate;
			newJobApplication.JobId = _jobId;
			newJobApplication.MemberId = _memberId;
			newJobApplication.MemberResumeFile = _memberResumeFile;
			newJobApplication.MemberCoverLetterFile = _memberCoverLetterFile;
			newJobApplication.ApplicationStatus = _applicationStatus;
			newJobApplication.JobAppValidateId = _jobAppValidateId;
			newJobApplication.SiteIdReferral = _siteIdReferral;
			newJobApplication.UrlReferral = _urlReferral;
			newJobApplication.ApplicantGrade = _applicantGrade;
			newJobApplication.LastViewedDate = _lastViewedDate;
			newJobApplication.FirstName = _firstName;
			newJobApplication.Surname = _surname;
			newJobApplication.EmailAddress = _emailAddress;
			newJobApplication.MobilePhone = _mobilePhone;
			newJobApplication.MemberNote = _memberNote;
			newJobApplication.AdvertiserNote = _advertiserNote;
			newJobApplication.JobArchiveId = _jobArchiveId;
			newJobApplication.Draft = _draft;
			newJobApplication.JobApplicationTypeId = _jobApplicationTypeId;
			newJobApplication.ExternalXmlFilename = _externalXmlFilename;
			newJobApplication.CustomQuestionnaireXml = _customQuestionnaireXml;
			newJobApplication.ExternalPdfFilename = _externalPdfFilename;
			newJobApplication.FileDownloaded = _fileDownloaded;
			newJobApplication.AppliedWith = _appliedWith;
			newJobApplication.ScreeningQuestionaireXml = _screeningQuestionaireXml;
			return newJobApplication;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the JobApplicationId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 JobApplicationId
		{
			get
			{
				return this.entityData.JobApplicationId; 
			}
			
			set
			{
				if (this.entityData.JobApplicationId == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.JobApplicationId, this.entityData.JobApplicationId);
				this.entityData.JobApplicationId = value;
				this.EntityId.JobApplicationId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.JobApplicationId, this.entityData.JobApplicationId);
				OnPropertyChanged("JobApplicationId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApplicationDate property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsApplicationDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ApplicationDate
		{
			get
			{
				return this.entityData.ApplicationDate; 
			}
			
			set
			{
				if (this.entityData.ApplicationDate == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.ApplicationDate, this.entityData.ApplicationDate);
				this.entityData.ApplicationDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.ApplicationDate, this.entityData.ApplicationDate);
				OnPropertyChanged("ApplicationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JobId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsJobIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? JobId
		{
			get
			{
				return this.entityData.JobId; 
			}
			
			set
			{
				if (this.entityData.JobId == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.JobId, this.entityData.JobId);
				this.entityData.JobId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.JobId, this.entityData.JobId);
				OnPropertyChanged("JobId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMemberIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MemberId
		{
			get
			{
				return this.entityData.MemberId; 
			}
			
			set
			{
				if (this.entityData.MemberId == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.MemberId, this.entityData.MemberId);
				this.entityData.MemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.MemberId, this.entityData.MemberId);
				OnPropertyChanged("MemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberResumeFile property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String MemberResumeFile
		{
			get
			{
				return this.entityData.MemberResumeFile; 
			}
			
			set
			{
				if (this.entityData.MemberResumeFile == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.MemberResumeFile, this.entityData.MemberResumeFile);
				this.entityData.MemberResumeFile = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.MemberResumeFile, this.entityData.MemberResumeFile);
				OnPropertyChanged("MemberResumeFile");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberCoverLetterFile property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String MemberCoverLetterFile
		{
			get
			{
				return this.entityData.MemberCoverLetterFile; 
			}
			
			set
			{
				if (this.entityData.MemberCoverLetterFile == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.MemberCoverLetterFile, this.entityData.MemberCoverLetterFile);
				this.entityData.MemberCoverLetterFile = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.MemberCoverLetterFile, this.entityData.MemberCoverLetterFile);
				OnPropertyChanged("MemberCoverLetterFile");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApplicationStatus property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsApplicationStatusNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ApplicationStatus
		{
			get
			{
				return this.entityData.ApplicationStatus; 
			}
			
			set
			{
				if (this.entityData.ApplicationStatus == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.ApplicationStatus, this.entityData.ApplicationStatus);
				this.entityData.ApplicationStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.ApplicationStatus, this.entityData.ApplicationStatus);
				OnPropertyChanged("ApplicationStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JobAppValidateId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Guid JobAppValidateId
		{
			get
			{
				return this.entityData.JobAppValidateId; 
			}
			
			set
			{
				if (this.entityData.JobAppValidateId == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.JobAppValidateId, this.entityData.JobAppValidateId);
				this.entityData.JobAppValidateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.JobAppValidateId, this.entityData.JobAppValidateId);
				OnPropertyChanged("JobAppValidateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteIdReferral property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSiteIdReferralNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SiteIdReferral
		{
			get
			{
				return this.entityData.SiteIdReferral; 
			}
			
			set
			{
				if (this.entityData.SiteIdReferral == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.SiteIdReferral, this.entityData.SiteIdReferral);
				this.entityData.SiteIdReferral = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.SiteIdReferral, this.entityData.SiteIdReferral);
				OnPropertyChanged("SiteIdReferral");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UrlReferral property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String UrlReferral
		{
			get
			{
				return this.entityData.UrlReferral; 
			}
			
			set
			{
				if (this.entityData.UrlReferral == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.UrlReferral, this.entityData.UrlReferral);
				this.entityData.UrlReferral = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.UrlReferral, this.entityData.UrlReferral);
				OnPropertyChanged("UrlReferral");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApplicantGrade property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsApplicantGradeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ApplicantGrade
		{
			get
			{
				return this.entityData.ApplicantGrade; 
			}
			
			set
			{
				if (this.entityData.ApplicantGrade == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.ApplicantGrade, this.entityData.ApplicantGrade);
				this.entityData.ApplicantGrade = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.ApplicantGrade, this.entityData.ApplicantGrade);
				OnPropertyChanged("ApplicantGrade");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastViewedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastViewedDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastViewedDate
		{
			get
			{
				return this.entityData.LastViewedDate; 
			}
			
			set
			{
				if (this.entityData.LastViewedDate == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.LastViewedDate, this.entityData.LastViewedDate);
				this.entityData.LastViewedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.LastViewedDate, this.entityData.LastViewedDate);
				OnPropertyChanged("LastViewedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String FirstName
		{
			get
			{
				return this.entityData.FirstName; 
			}
			
			set
			{
				if (this.entityData.FirstName == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.FirstName, this.entityData.FirstName);
				this.entityData.FirstName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.FirstName, this.entityData.FirstName);
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Surname property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String Surname
		{
			get
			{
				return this.entityData.Surname; 
			}
			
			set
			{
				if (this.entityData.Surname == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.Surname, this.entityData.Surname);
				this.entityData.Surname = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.Surname, this.entityData.Surname);
				OnPropertyChanged("Surname");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailAddress property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String EmailAddress
		{
			get
			{
				return this.entityData.EmailAddress; 
			}
			
			set
			{
				if (this.entityData.EmailAddress == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.EmailAddress, this.entityData.EmailAddress);
				this.entityData.EmailAddress = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.EmailAddress, this.entityData.EmailAddress);
				OnPropertyChanged("EmailAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MobilePhone property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 40)]
		public virtual System.String MobilePhone
		{
			get
			{
				return this.entityData.MobilePhone; 
			}
			
			set
			{
				if (this.entityData.MobilePhone == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.MobilePhone, this.entityData.MobilePhone);
				this.entityData.MobilePhone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.MobilePhone, this.entityData.MobilePhone);
				OnPropertyChanged("MobilePhone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberNote property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String MemberNote
		{
			get
			{
				return this.entityData.MemberNote; 
			}
			
			set
			{
				if (this.entityData.MemberNote == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.MemberNote, this.entityData.MemberNote);
				this.entityData.MemberNote = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.MemberNote, this.entityData.MemberNote);
				OnPropertyChanged("MemberNote");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdvertiserNote property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String AdvertiserNote
		{
			get
			{
				return this.entityData.AdvertiserNote; 
			}
			
			set
			{
				if (this.entityData.AdvertiserNote == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.AdvertiserNote, this.entityData.AdvertiserNote);
				this.entityData.AdvertiserNote = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.AdvertiserNote, this.entityData.AdvertiserNote);
				OnPropertyChanged("AdvertiserNote");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JobArchiveId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsJobArchiveIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? JobArchiveId
		{
			get
			{
				return this.entityData.JobArchiveId; 
			}
			
			set
			{
				if (this.entityData.JobArchiveId == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.JobArchiveId, this.entityData.JobArchiveId);
				this.entityData.JobArchiveId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.JobArchiveId, this.entityData.JobArchiveId);
				OnPropertyChanged("JobArchiveId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Draft property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsDraftNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Draft
		{
			get
			{
				return this.entityData.Draft; 
			}
			
			set
			{
				if (this.entityData.Draft == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.Draft, this.entityData.Draft);
				this.entityData.Draft = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.Draft, this.entityData.Draft);
				OnPropertyChanged("Draft");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JobApplicationTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsJobApplicationTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? JobApplicationTypeId
		{
			get
			{
				return this.entityData.JobApplicationTypeId; 
			}
			
			set
			{
				if (this.entityData.JobApplicationTypeId == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.JobApplicationTypeId, this.entityData.JobApplicationTypeId);
				this.entityData.JobApplicationTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.JobApplicationTypeId, this.entityData.JobApplicationTypeId);
				OnPropertyChanged("JobApplicationTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExternalXmlFilename property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String ExternalXmlFilename
		{
			get
			{
				return this.entityData.ExternalXmlFilename; 
			}
			
			set
			{
				if (this.entityData.ExternalXmlFilename == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.ExternalXmlFilename, this.entityData.ExternalXmlFilename);
				this.entityData.ExternalXmlFilename = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.ExternalXmlFilename, this.entityData.ExternalXmlFilename);
				OnPropertyChanged("ExternalXmlFilename");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomQuestionnaireXml property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String CustomQuestionnaireXml
		{
			get
			{
				return this.entityData.CustomQuestionnaireXml; 
			}
			
			set
			{
				if (this.entityData.CustomQuestionnaireXml == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.CustomQuestionnaireXml, this.entityData.CustomQuestionnaireXml);
				this.entityData.CustomQuestionnaireXml = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.CustomQuestionnaireXml, this.entityData.CustomQuestionnaireXml);
				OnPropertyChanged("CustomQuestionnaireXml");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExternalPdfFilename property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String ExternalPdfFilename
		{
			get
			{
				return this.entityData.ExternalPdfFilename; 
			}
			
			set
			{
				if (this.entityData.ExternalPdfFilename == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.ExternalPdfFilename, this.entityData.ExternalPdfFilename);
				this.entityData.ExternalPdfFilename = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.ExternalPdfFilename, this.entityData.ExternalPdfFilename);
				OnPropertyChanged("ExternalPdfFilename");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FileDownloaded property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsFileDownloadedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? FileDownloaded
		{
			get
			{
				return this.entityData.FileDownloaded; 
			}
			
			set
			{
				if (this.entityData.FileDownloaded == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.FileDownloaded, this.entityData.FileDownloaded);
				this.entityData.FileDownloaded = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.FileDownloaded, this.entityData.FileDownloaded);
				OnPropertyChanged("FileDownloaded");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AppliedWith property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String AppliedWith
		{
			get
			{
				return this.entityData.AppliedWith; 
			}
			
			set
			{
				if (this.entityData.AppliedWith == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.AppliedWith, this.entityData.AppliedWith);
				this.entityData.AppliedWith = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.AppliedWith, this.entityData.AppliedWith);
				OnPropertyChanged("AppliedWith");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScreeningQuestionaireXml property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String ScreeningQuestionaireXml
		{
			get
			{
				return this.entityData.ScreeningQuestionaireXml; 
			}
			
			set
			{
				if (this.entityData.ScreeningQuestionaireXml == value)
					return;
					
				OnColumnChanging(JobApplicationColumn.ScreeningQuestionaireXml, this.entityData.ScreeningQuestionaireXml);
				this.entityData.ScreeningQuestionaireXml = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(JobApplicationColumn.ScreeningQuestionaireXml, this.entityData.ScreeningQuestionaireXml);
				OnPropertyChanged("ScreeningQuestionaireXml");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="JobsArchive"/>.
		/// </summary>
		/// <value>The source JobsArchive for JobArchiveId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual JobsArchive JobArchiveIdSource
      	{
            get { return entityData.JobArchiveIdSource; }
            set { entityData.JobArchiveIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Jobs"/>.
		/// </summary>
		/// <value>The source Jobs for JobId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Jobs JobIdSource
      	{
            get { return entityData.JobIdSource; }
            set { entityData.JobIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Members"/>.
		/// </summary>
		/// <value>The source Members for MemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Members MemberIdSource
      	{
            get { return entityData.MemberIdSource; }
            set { entityData.MemberIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteIdReferral.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Sites SiteIdReferralSource
      	{
            get { return entityData.SiteIdReferralSource; }
            set { entityData.SiteIdReferralSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of JobApplicationNotes objects
		///	which are related to this object through the relation FK__JobApplic__JobAp__69BE2702
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<JobApplicationNotes> JobApplicationNotesCollection
		{
			get { return entityData.JobApplicationNotesCollection; }
			set { entityData.JobApplicationNotesCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MemberResumeFile", "Member Resume File", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MemberCoverLetterFile", "Member Cover Letter File", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UrlReferral", "Url Referral", 255));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FirstName", "First Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FirstName", "First Name", 255));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Surname", "Surname"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Surname", "Surname", 255));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("EmailAddress", "Email Address"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmailAddress", "Email Address", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MobilePhone", "Mobile Phone", 40));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ExternalXmlFilename", "External Xml Filename", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ExternalPdfFilename", "External Pdf Filename", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AppliedWith", "Applied With", 255));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "JobApplication"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"JobApplicationID", "ApplicationDate", "JobID", "MemberID", "MemberResumeFile", "MemberCoverLetterFile", "ApplicationStatus", "JobAppValidateID", "SiteID_Referral", "URL_Referral", "ApplicantGrade", "LastViewedDate", "FirstName", "Surname", "EmailAddress", "MobilePhone", "MemberNote", "AdvertiserNote", "JobArchiveID", "Draft", "JobApplicationTypeID", "ExternalXMLFilename", "CustomQuestionnaireXML", "ExternalPDFFilename", "FileDownloaded", "AppliedWith", "ScreeningQuestionaireXML"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as JobApplicationEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (JobApplication) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<JobApplication>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as JobApplication);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed JobApplication Entity 
		///</summary>
		protected virtual JobApplication Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			JobApplication copy = new JobApplication();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.JobApplicationId = this.JobApplicationId;
				copy.ApplicationDate = this.ApplicationDate;
				copy.JobId = this.JobId;
				copy.MemberId = this.MemberId;
				copy.MemberResumeFile = this.MemberResumeFile;
				copy.MemberCoverLetterFile = this.MemberCoverLetterFile;
				copy.ApplicationStatus = this.ApplicationStatus;
				copy.JobAppValidateId = this.JobAppValidateId;
				copy.SiteIdReferral = this.SiteIdReferral;
				copy.UrlReferral = this.UrlReferral;
				copy.ApplicantGrade = this.ApplicantGrade;
				copy.LastViewedDate = this.LastViewedDate;
				copy.FirstName = this.FirstName;
				copy.Surname = this.Surname;
				copy.EmailAddress = this.EmailAddress;
				copy.MobilePhone = this.MobilePhone;
				copy.MemberNote = this.MemberNote;
				copy.AdvertiserNote = this.AdvertiserNote;
				copy.JobArchiveId = this.JobArchiveId;
				copy.Draft = this.Draft;
				copy.JobApplicationTypeId = this.JobApplicationTypeId;
				copy.ExternalXmlFilename = this.ExternalXmlFilename;
				copy.CustomQuestionnaireXml = this.CustomQuestionnaireXml;
				copy.ExternalPdfFilename = this.ExternalPdfFilename;
				copy.FileDownloaded = this.FileDownloaded;
				copy.AppliedWith = this.AppliedWith;
				copy.ScreeningQuestionaireXml = this.ScreeningQuestionaireXml;
			
			if (this.JobArchiveIdSource != null && existingCopies.Contains(this.JobArchiveIdSource))
				copy.JobArchiveIdSource = existingCopies[this.JobArchiveIdSource] as JobsArchive;
			else
				copy.JobArchiveIdSource = MakeCopyOf(this.JobArchiveIdSource, existingCopies) as JobsArchive;
			if (this.JobIdSource != null && existingCopies.Contains(this.JobIdSource))
				copy.JobIdSource = existingCopies[this.JobIdSource] as Jobs;
			else
				copy.JobIdSource = MakeCopyOf(this.JobIdSource, existingCopies) as Jobs;
			if (this.MemberIdSource != null && existingCopies.Contains(this.MemberIdSource))
				copy.MemberIdSource = existingCopies[this.MemberIdSource] as Members;
			else
				copy.MemberIdSource = MakeCopyOf(this.MemberIdSource, existingCopies) as Members;
			if (this.SiteIdReferralSource != null && existingCopies.Contains(this.SiteIdReferralSource))
				copy.SiteIdReferralSource = existingCopies[this.SiteIdReferralSource] as Sites;
			else
				copy.SiteIdReferralSource = MakeCopyOf(this.SiteIdReferralSource, existingCopies) as Sites;
		
			//deep copy nested objects
			copy.JobApplicationNotesCollection = (TList<JobApplicationNotes>) MakeCopyOf(this.JobApplicationNotesCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed JobApplication Entity 
		///</summary>
		public virtual JobApplication Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed JobApplication Entity which is a deep copy of the current entity.
		///</summary>
		public virtual JobApplication DeepCopy()
		{
			return EntityHelper.Clone<JobApplication>(this as JobApplication);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as JobApplicationEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new JobApplicationEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as JobApplicationEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(JobApplicationColumn column)
		{
			switch(column)
			{
					case JobApplicationColumn.JobApplicationId:
					return entityData.JobApplicationId != _originalData.JobApplicationId;
					case JobApplicationColumn.ApplicationDate:
					return entityData.ApplicationDate != _originalData.ApplicationDate;
					case JobApplicationColumn.JobId:
					return entityData.JobId != _originalData.JobId;
					case JobApplicationColumn.MemberId:
					return entityData.MemberId != _originalData.MemberId;
					case JobApplicationColumn.MemberResumeFile:
					return entityData.MemberResumeFile != _originalData.MemberResumeFile;
					case JobApplicationColumn.MemberCoverLetterFile:
					return entityData.MemberCoverLetterFile != _originalData.MemberCoverLetterFile;
					case JobApplicationColumn.ApplicationStatus:
					return entityData.ApplicationStatus != _originalData.ApplicationStatus;
					case JobApplicationColumn.JobAppValidateId:
					return entityData.JobAppValidateId != _originalData.JobAppValidateId;
					case JobApplicationColumn.SiteIdReferral:
					return entityData.SiteIdReferral != _originalData.SiteIdReferral;
					case JobApplicationColumn.UrlReferral:
					return entityData.UrlReferral != _originalData.UrlReferral;
					case JobApplicationColumn.ApplicantGrade:
					return entityData.ApplicantGrade != _originalData.ApplicantGrade;
					case JobApplicationColumn.LastViewedDate:
					return entityData.LastViewedDate != _originalData.LastViewedDate;
					case JobApplicationColumn.FirstName:
					return entityData.FirstName != _originalData.FirstName;
					case JobApplicationColumn.Surname:
					return entityData.Surname != _originalData.Surname;
					case JobApplicationColumn.EmailAddress:
					return entityData.EmailAddress != _originalData.EmailAddress;
					case JobApplicationColumn.MobilePhone:
					return entityData.MobilePhone != _originalData.MobilePhone;
					case JobApplicationColumn.MemberNote:
					return entityData.MemberNote != _originalData.MemberNote;
					case JobApplicationColumn.AdvertiserNote:
					return entityData.AdvertiserNote != _originalData.AdvertiserNote;
					case JobApplicationColumn.JobArchiveId:
					return entityData.JobArchiveId != _originalData.JobArchiveId;
					case JobApplicationColumn.Draft:
					return entityData.Draft != _originalData.Draft;
					case JobApplicationColumn.JobApplicationTypeId:
					return entityData.JobApplicationTypeId != _originalData.JobApplicationTypeId;
					case JobApplicationColumn.ExternalXmlFilename:
					return entityData.ExternalXmlFilename != _originalData.ExternalXmlFilename;
					case JobApplicationColumn.CustomQuestionnaireXml:
					return entityData.CustomQuestionnaireXml != _originalData.CustomQuestionnaireXml;
					case JobApplicationColumn.ExternalPdfFilename:
					return entityData.ExternalPdfFilename != _originalData.ExternalPdfFilename;
					case JobApplicationColumn.FileDownloaded:
					return entityData.FileDownloaded != _originalData.FileDownloaded;
					case JobApplicationColumn.AppliedWith:
					return entityData.AppliedWith != _originalData.AppliedWith;
					case JobApplicationColumn.ScreeningQuestionaireXml:
					return entityData.ScreeningQuestionaireXml != _originalData.ScreeningQuestionaireXml;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< JobApplicationColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.JobApplicationId != _originalData.JobApplicationId;
			result = result || entityData.ApplicationDate != _originalData.ApplicationDate;
			result = result || entityData.JobId != _originalData.JobId;
			result = result || entityData.MemberId != _originalData.MemberId;
			result = result || entityData.MemberResumeFile != _originalData.MemberResumeFile;
			result = result || entityData.MemberCoverLetterFile != _originalData.MemberCoverLetterFile;
			result = result || entityData.ApplicationStatus != _originalData.ApplicationStatus;
			result = result || entityData.JobAppValidateId != _originalData.JobAppValidateId;
			result = result || entityData.SiteIdReferral != _originalData.SiteIdReferral;
			result = result || entityData.UrlReferral != _originalData.UrlReferral;
			result = result || entityData.ApplicantGrade != _originalData.ApplicantGrade;
			result = result || entityData.LastViewedDate != _originalData.LastViewedDate;
			result = result || entityData.FirstName != _originalData.FirstName;
			result = result || entityData.Surname != _originalData.Surname;
			result = result || entityData.EmailAddress != _originalData.EmailAddress;
			result = result || entityData.MobilePhone != _originalData.MobilePhone;
			result = result || entityData.MemberNote != _originalData.MemberNote;
			result = result || entityData.AdvertiserNote != _originalData.AdvertiserNote;
			result = result || entityData.JobArchiveId != _originalData.JobArchiveId;
			result = result || entityData.Draft != _originalData.Draft;
			result = result || entityData.JobApplicationTypeId != _originalData.JobApplicationTypeId;
			result = result || entityData.ExternalXmlFilename != _originalData.ExternalXmlFilename;
			result = result || entityData.CustomQuestionnaireXml != _originalData.CustomQuestionnaireXml;
			result = result || entityData.ExternalPdfFilename != _originalData.ExternalPdfFilename;
			result = result || entityData.FileDownloaded != _originalData.FileDownloaded;
			result = result || entityData.AppliedWith != _originalData.AppliedWith;
			result = result || entityData.ScreeningQuestionaireXml != _originalData.ScreeningQuestionaireXml;
			return result;
		}	
		
		///<summary>
		///  Returns a JobApplication Entity with the original data.
		///</summary>
		public JobApplication GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateJobApplication(
				_originalData.ApplicationDate,
				_originalData.JobId,
				_originalData.MemberId,
				_originalData.MemberResumeFile,
				_originalData.MemberCoverLetterFile,
				_originalData.ApplicationStatus,
				_originalData.JobAppValidateId,
				_originalData.SiteIdReferral,
				_originalData.UrlReferral,
				_originalData.ApplicantGrade,
				_originalData.LastViewedDate,
				_originalData.FirstName,
				_originalData.Surname,
				_originalData.EmailAddress,
				_originalData.MobilePhone,
				_originalData.MemberNote,
				_originalData.AdvertiserNote,
				_originalData.JobArchiveId,
				_originalData.Draft,
				_originalData.JobApplicationTypeId,
				_originalData.ExternalXmlFilename,
				_originalData.CustomQuestionnaireXml,
				_originalData.ExternalPdfFilename,
				_originalData.FileDownloaded,
				_originalData.AppliedWith,
				_originalData.ScreeningQuestionaireXml
				);
				
			return (JobApplication)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="JobApplicationBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is JobApplicationBase)
				return ValueEquals(this, (JobApplicationBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="JobApplicationBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.JobApplicationId.GetHashCode() ^ 
					((this.ApplicationDate == null) ? string.Empty : this.ApplicationDate.ToString()).GetHashCode() ^ 
					((this.JobId == null) ? string.Empty : this.JobId.ToString()).GetHashCode() ^ 
					((this.MemberId == null) ? string.Empty : this.MemberId.ToString()).GetHashCode() ^ 
					((this.MemberResumeFile == null) ? string.Empty : this.MemberResumeFile.ToString()).GetHashCode() ^ 
					((this.MemberCoverLetterFile == null) ? string.Empty : this.MemberCoverLetterFile.ToString()).GetHashCode() ^ 
					((this.ApplicationStatus == null) ? string.Empty : this.ApplicationStatus.ToString()).GetHashCode() ^ 
					this.JobAppValidateId.GetHashCode() ^ 
					((this.SiteIdReferral == null) ? string.Empty : this.SiteIdReferral.ToString()).GetHashCode() ^ 
					((this.UrlReferral == null) ? string.Empty : this.UrlReferral.ToString()).GetHashCode() ^ 
					((this.ApplicantGrade == null) ? string.Empty : this.ApplicantGrade.ToString()).GetHashCode() ^ 
					((this.LastViewedDate == null) ? string.Empty : this.LastViewedDate.ToString()).GetHashCode() ^ 
					this.FirstName.GetHashCode() ^ 
					this.Surname.GetHashCode() ^ 
					this.EmailAddress.GetHashCode() ^ 
					((this.MobilePhone == null) ? string.Empty : this.MobilePhone.ToString()).GetHashCode() ^ 
					((this.MemberNote == null) ? string.Empty : this.MemberNote.ToString()).GetHashCode() ^ 
					((this.AdvertiserNote == null) ? string.Empty : this.AdvertiserNote.ToString()).GetHashCode() ^ 
					((this.JobArchiveId == null) ? string.Empty : this.JobArchiveId.ToString()).GetHashCode() ^ 
					((this.Draft == null) ? string.Empty : this.Draft.ToString()).GetHashCode() ^ 
					((this.JobApplicationTypeId == null) ? string.Empty : this.JobApplicationTypeId.ToString()).GetHashCode() ^ 
					((this.ExternalXmlFilename == null) ? string.Empty : this.ExternalXmlFilename.ToString()).GetHashCode() ^ 
					((this.CustomQuestionnaireXml == null) ? string.Empty : this.CustomQuestionnaireXml.ToString()).GetHashCode() ^ 
					((this.ExternalPdfFilename == null) ? string.Empty : this.ExternalPdfFilename.ToString()).GetHashCode() ^ 
					((this.FileDownloaded == null) ? string.Empty : this.FileDownloaded.ToString()).GetHashCode() ^ 
					((this.AppliedWith == null) ? string.Empty : this.AppliedWith.ToString()).GetHashCode() ^ 
					((this.ScreeningQuestionaireXml == null) ? string.Empty : this.ScreeningQuestionaireXml.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="JobApplicationBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(JobApplicationBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="JobApplicationBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="JobApplicationBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="JobApplicationBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(JobApplicationBase Object1, JobApplicationBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.JobApplicationId != Object2.JobApplicationId)
				equal = false;
			if ( Object1.ApplicationDate != null && Object2.ApplicationDate != null )
			{
				if (Object1.ApplicationDate != Object2.ApplicationDate)
					equal = false;
			}
			else if (Object1.ApplicationDate == null ^ Object2.ApplicationDate == null )
			{
				equal = false;
			}
			if ( Object1.JobId != null && Object2.JobId != null )
			{
				if (Object1.JobId != Object2.JobId)
					equal = false;
			}
			else if (Object1.JobId == null ^ Object2.JobId == null )
			{
				equal = false;
			}
			if ( Object1.MemberId != null && Object2.MemberId != null )
			{
				if (Object1.MemberId != Object2.MemberId)
					equal = false;
			}
			else if (Object1.MemberId == null ^ Object2.MemberId == null )
			{
				equal = false;
			}
			if ( Object1.MemberResumeFile != null && Object2.MemberResumeFile != null )
			{
				if (Object1.MemberResumeFile != Object2.MemberResumeFile)
					equal = false;
			}
			else if (Object1.MemberResumeFile == null ^ Object2.MemberResumeFile == null )
			{
				equal = false;
			}
			if ( Object1.MemberCoverLetterFile != null && Object2.MemberCoverLetterFile != null )
			{
				if (Object1.MemberCoverLetterFile != Object2.MemberCoverLetterFile)
					equal = false;
			}
			else if (Object1.MemberCoverLetterFile == null ^ Object2.MemberCoverLetterFile == null )
			{
				equal = false;
			}
			if ( Object1.ApplicationStatus != null && Object2.ApplicationStatus != null )
			{
				if (Object1.ApplicationStatus != Object2.ApplicationStatus)
					equal = false;
			}
			else if (Object1.ApplicationStatus == null ^ Object2.ApplicationStatus == null )
			{
				equal = false;
			}
			if (Object1.JobAppValidateId != Object2.JobAppValidateId)
				equal = false;
			if ( Object1.SiteIdReferral != null && Object2.SiteIdReferral != null )
			{
				if (Object1.SiteIdReferral != Object2.SiteIdReferral)
					equal = false;
			}
			else if (Object1.SiteIdReferral == null ^ Object2.SiteIdReferral == null )
			{
				equal = false;
			}
			if ( Object1.UrlReferral != null && Object2.UrlReferral != null )
			{
				if (Object1.UrlReferral != Object2.UrlReferral)
					equal = false;
			}
			else if (Object1.UrlReferral == null ^ Object2.UrlReferral == null )
			{
				equal = false;
			}
			if ( Object1.ApplicantGrade != null && Object2.ApplicantGrade != null )
			{
				if (Object1.ApplicantGrade != Object2.ApplicantGrade)
					equal = false;
			}
			else if (Object1.ApplicantGrade == null ^ Object2.ApplicantGrade == null )
			{
				equal = false;
			}
			if ( Object1.LastViewedDate != null && Object2.LastViewedDate != null )
			{
				if (Object1.LastViewedDate != Object2.LastViewedDate)
					equal = false;
			}
			else if (Object1.LastViewedDate == null ^ Object2.LastViewedDate == null )
			{
				equal = false;
			}
			if (Object1.FirstName != Object2.FirstName)
				equal = false;
			if (Object1.Surname != Object2.Surname)
				equal = false;
			if (Object1.EmailAddress != Object2.EmailAddress)
				equal = false;
			if ( Object1.MobilePhone != null && Object2.MobilePhone != null )
			{
				if (Object1.MobilePhone != Object2.MobilePhone)
					equal = false;
			}
			else if (Object1.MobilePhone == null ^ Object2.MobilePhone == null )
			{
				equal = false;
			}
			if ( Object1.MemberNote != null && Object2.MemberNote != null )
			{
				if (Object1.MemberNote != Object2.MemberNote)
					equal = false;
			}
			else if (Object1.MemberNote == null ^ Object2.MemberNote == null )
			{
				equal = false;
			}
			if ( Object1.AdvertiserNote != null && Object2.AdvertiserNote != null )
			{
				if (Object1.AdvertiserNote != Object2.AdvertiserNote)
					equal = false;
			}
			else if (Object1.AdvertiserNote == null ^ Object2.AdvertiserNote == null )
			{
				equal = false;
			}
			if ( Object1.JobArchiveId != null && Object2.JobArchiveId != null )
			{
				if (Object1.JobArchiveId != Object2.JobArchiveId)
					equal = false;
			}
			else if (Object1.JobArchiveId == null ^ Object2.JobArchiveId == null )
			{
				equal = false;
			}
			if ( Object1.Draft != null && Object2.Draft != null )
			{
				if (Object1.Draft != Object2.Draft)
					equal = false;
			}
			else if (Object1.Draft == null ^ Object2.Draft == null )
			{
				equal = false;
			}
			if ( Object1.JobApplicationTypeId != null && Object2.JobApplicationTypeId != null )
			{
				if (Object1.JobApplicationTypeId != Object2.JobApplicationTypeId)
					equal = false;
			}
			else if (Object1.JobApplicationTypeId == null ^ Object2.JobApplicationTypeId == null )
			{
				equal = false;
			}
			if ( Object1.ExternalXmlFilename != null && Object2.ExternalXmlFilename != null )
			{
				if (Object1.ExternalXmlFilename != Object2.ExternalXmlFilename)
					equal = false;
			}
			else if (Object1.ExternalXmlFilename == null ^ Object2.ExternalXmlFilename == null )
			{
				equal = false;
			}
			if ( Object1.CustomQuestionnaireXml != null && Object2.CustomQuestionnaireXml != null )
			{
				if (Object1.CustomQuestionnaireXml != Object2.CustomQuestionnaireXml)
					equal = false;
			}
			else if (Object1.CustomQuestionnaireXml == null ^ Object2.CustomQuestionnaireXml == null )
			{
				equal = false;
			}
			if ( Object1.ExternalPdfFilename != null && Object2.ExternalPdfFilename != null )
			{
				if (Object1.ExternalPdfFilename != Object2.ExternalPdfFilename)
					equal = false;
			}
			else if (Object1.ExternalPdfFilename == null ^ Object2.ExternalPdfFilename == null )
			{
				equal = false;
			}
			if ( Object1.FileDownloaded != null && Object2.FileDownloaded != null )
			{
				if (Object1.FileDownloaded != Object2.FileDownloaded)
					equal = false;
			}
			else if (Object1.FileDownloaded == null ^ Object2.FileDownloaded == null )
			{
				equal = false;
			}
			if ( Object1.AppliedWith != null && Object2.AppliedWith != null )
			{
				if (Object1.AppliedWith != Object2.AppliedWith)
					equal = false;
			}
			else if (Object1.AppliedWith == null ^ Object2.AppliedWith == null )
			{
				equal = false;
			}
			if ( Object1.ScreeningQuestionaireXml != null && Object2.ScreeningQuestionaireXml != null )
			{
				if (Object1.ScreeningQuestionaireXml != Object2.ScreeningQuestionaireXml)
					equal = false;
			}
			else if (Object1.ScreeningQuestionaireXml == null ^ Object2.ScreeningQuestionaireXml == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((JobApplicationBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static JobApplicationComparer GetComparer()
        {
            return new JobApplicationComparer();
        }
        */

        // Comparer delegates back to JobApplication
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(JobApplication rhs, JobApplicationColumn which)
        {
            switch (which)
            {
            	
            	
            	case JobApplicationColumn.JobApplicationId:
            		return this.JobApplicationId.CompareTo(rhs.JobApplicationId);
            		
            		                 
            	
            	
            	case JobApplicationColumn.ApplicationDate:
            		return this.ApplicationDate.Value.CompareTo(rhs.ApplicationDate.Value);
            		
            		                 
            	
            	
            	case JobApplicationColumn.JobId:
            		return this.JobId.Value.CompareTo(rhs.JobId.Value);
            		
            		                 
            	
            	
            	case JobApplicationColumn.MemberId:
            		return this.MemberId.Value.CompareTo(rhs.MemberId.Value);
            		
            		                 
            	
            	
            	case JobApplicationColumn.MemberResumeFile:
            		return this.MemberResumeFile.CompareTo(rhs.MemberResumeFile);
            		
            		                 
            	
            	
            	case JobApplicationColumn.MemberCoverLetterFile:
            		return this.MemberCoverLetterFile.CompareTo(rhs.MemberCoverLetterFile);
            		
            		                 
            	
            	
            	case JobApplicationColumn.ApplicationStatus:
            		return this.ApplicationStatus.Value.CompareTo(rhs.ApplicationStatus.Value);
            		
            		                 
            	
            	
            	case JobApplicationColumn.JobAppValidateId:
            		return this.JobAppValidateId.CompareTo(rhs.JobAppValidateId);
            		
            		                 
            	
            	
            	case JobApplicationColumn.SiteIdReferral:
            		return this.SiteIdReferral.Value.CompareTo(rhs.SiteIdReferral.Value);
            		
            		                 
            	
            	
            	case JobApplicationColumn.UrlReferral:
            		return this.UrlReferral.CompareTo(rhs.UrlReferral);
            		
            		                 
            	
            	
            	case JobApplicationColumn.ApplicantGrade:
            		return this.ApplicantGrade.Value.CompareTo(rhs.ApplicantGrade.Value);
            		
            		                 
            	
            	
            	case JobApplicationColumn.LastViewedDate:
            		return this.LastViewedDate.Value.CompareTo(rhs.LastViewedDate.Value);
            		
            		                 
            	
            	
            	case JobApplicationColumn.FirstName:
            		return this.FirstName.CompareTo(rhs.FirstName);
            		
            		                 
            	
            	
            	case JobApplicationColumn.Surname:
            		return this.Surname.CompareTo(rhs.Surname);
            		
            		                 
            	
            	
            	case JobApplicationColumn.EmailAddress:
            		return this.EmailAddress.CompareTo(rhs.EmailAddress);
            		
            		                 
            	
            	
            	case JobApplicationColumn.MobilePhone:
            		return this.MobilePhone.CompareTo(rhs.MobilePhone);
            		
            		                 
            	
            	
            	case JobApplicationColumn.MemberNote:
            		return this.MemberNote.CompareTo(rhs.MemberNote);
            		
            		                 
            	
            	
            	case JobApplicationColumn.AdvertiserNote:
            		return this.AdvertiserNote.CompareTo(rhs.AdvertiserNote);
            		
            		                 
            	
            	
            	case JobApplicationColumn.JobArchiveId:
            		return this.JobArchiveId.Value.CompareTo(rhs.JobArchiveId.Value);
            		
            		                 
            	
            	
            	case JobApplicationColumn.Draft:
            		return this.Draft.Value.CompareTo(rhs.Draft.Value);
            		
            		                 
            	
            	
            	case JobApplicationColumn.JobApplicationTypeId:
            		return this.JobApplicationTypeId.Value.CompareTo(rhs.JobApplicationTypeId.Value);
            		
            		                 
            	
            	
            	case JobApplicationColumn.ExternalXmlFilename:
            		return this.ExternalXmlFilename.CompareTo(rhs.ExternalXmlFilename);
            		
            		                 
            	
            	
            	case JobApplicationColumn.CustomQuestionnaireXml:
            		return this.CustomQuestionnaireXml.CompareTo(rhs.CustomQuestionnaireXml);
            		
            		                 
            	
            	
            	case JobApplicationColumn.ExternalPdfFilename:
            		return this.ExternalPdfFilename.CompareTo(rhs.ExternalPdfFilename);
            		
            		                 
            	
            	
            	case JobApplicationColumn.FileDownloaded:
            		return this.FileDownloaded.Value.CompareTo(rhs.FileDownloaded.Value);
            		
            		                 
            	
            	
            	case JobApplicationColumn.AppliedWith:
            		return this.AppliedWith.CompareTo(rhs.AppliedWith);
            		
            		                 
            	
            	
            	case JobApplicationColumn.ScreeningQuestionaireXml:
            		return this.ScreeningQuestionaireXml.CompareTo(rhs.ScreeningQuestionaireXml);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<JobApplicationKey> Members
		
		// member variable for the EntityId property
		private JobApplicationKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual JobApplicationKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new JobApplicationKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("JobApplication")
					.Append("|").Append( this.JobApplicationId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{28}{27}- JobApplicationId: {0}{27}- ApplicationDate: {1}{27}- JobId: {2}{27}- MemberId: {3}{27}- MemberResumeFile: {4}{27}- MemberCoverLetterFile: {5}{27}- ApplicationStatus: {6}{27}- JobAppValidateId: {7}{27}- SiteIdReferral: {8}{27}- UrlReferral: {9}{27}- ApplicantGrade: {10}{27}- LastViewedDate: {11}{27}- FirstName: {12}{27}- Surname: {13}{27}- EmailAddress: {14}{27}- MobilePhone: {15}{27}- MemberNote: {16}{27}- AdvertiserNote: {17}{27}- JobArchiveId: {18}{27}- Draft: {19}{27}- JobApplicationTypeId: {20}{27}- ExternalXmlFilename: {21}{27}- CustomQuestionnaireXml: {22}{27}- ExternalPdfFilename: {23}{27}- FileDownloaded: {24}{27}- AppliedWith: {25}{27}- ScreeningQuestionaireXml: {26}{27}{29}", 
				this.JobApplicationId,
				(this.ApplicationDate == null) ? string.Empty : this.ApplicationDate.ToString(),
				(this.JobId == null) ? string.Empty : this.JobId.ToString(),
				(this.MemberId == null) ? string.Empty : this.MemberId.ToString(),
				(this.MemberResumeFile == null) ? string.Empty : this.MemberResumeFile.ToString(),
				(this.MemberCoverLetterFile == null) ? string.Empty : this.MemberCoverLetterFile.ToString(),
				(this.ApplicationStatus == null) ? string.Empty : this.ApplicationStatus.ToString(),
				this.JobAppValidateId,
				(this.SiteIdReferral == null) ? string.Empty : this.SiteIdReferral.ToString(),
				(this.UrlReferral == null) ? string.Empty : this.UrlReferral.ToString(),
				(this.ApplicantGrade == null) ? string.Empty : this.ApplicantGrade.ToString(),
				(this.LastViewedDate == null) ? string.Empty : this.LastViewedDate.ToString(),
				this.FirstName,
				this.Surname,
				this.EmailAddress,
				(this.MobilePhone == null) ? string.Empty : this.MobilePhone.ToString(),
				(this.MemberNote == null) ? string.Empty : this.MemberNote.ToString(),
				(this.AdvertiserNote == null) ? string.Empty : this.AdvertiserNote.ToString(),
				(this.JobArchiveId == null) ? string.Empty : this.JobArchiveId.ToString(),
				(this.Draft == null) ? string.Empty : this.Draft.ToString(),
				(this.JobApplicationTypeId == null) ? string.Empty : this.JobApplicationTypeId.ToString(),
				(this.ExternalXmlFilename == null) ? string.Empty : this.ExternalXmlFilename.ToString(),
				(this.CustomQuestionnaireXml == null) ? string.Empty : this.CustomQuestionnaireXml.ToString(),
				(this.ExternalPdfFilename == null) ? string.Empty : this.ExternalPdfFilename.ToString(),
				(this.FileDownloaded == null) ? string.Empty : this.FileDownloaded.ToString(),
				(this.AppliedWith == null) ? string.Empty : this.AppliedWith.ToString(),
				(this.ScreeningQuestionaireXml == null) ? string.Empty : this.ScreeningQuestionaireXml.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'JobApplication' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class JobApplicationEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// JobApplicationID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "JobApplication"</remarks>
		public System.Int32 JobApplicationId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ApplicationDate : 
		/// </summary>
		public System.DateTime?		  ApplicationDate = null;
		
		/// <summary>
		/// JobID : 
		/// </summary>
		public System.Int32?		  JobId = null;
		
		/// <summary>
		/// MemberID : 
		/// </summary>
		public System.Int32?		  MemberId = null;
		
		/// <summary>
		/// MemberResumeFile : 
		/// </summary>
		public System.String		  MemberResumeFile = null;
		
		/// <summary>
		/// MemberCoverLetterFile : 
		/// </summary>
		public System.String		  MemberCoverLetterFile = null;
		
		/// <summary>
		/// ApplicationStatus : 
		/// </summary>
		public System.Int32?		  ApplicationStatus = null;
		
		/// <summary>
		/// JobAppValidateID : 
		/// </summary>
		public System.Guid		  JobAppValidateId = Guid.Empty;
		
		/// <summary>
		/// SiteID_Referral : 
		/// </summary>
		public System.Int32?		  SiteIdReferral = null;
		
		/// <summary>
		/// URL_Referral : 
		/// </summary>
		public System.String		  UrlReferral = null;
		
		/// <summary>
		/// ApplicantGrade : 
		/// </summary>
		public System.Int32?		  ApplicantGrade = null;
		
		/// <summary>
		/// LastViewedDate : 
		/// </summary>
		public System.DateTime?		  LastViewedDate = null;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		public System.String		  FirstName = string.Empty;
		
		/// <summary>
		/// Surname : 
		/// </summary>
		public System.String		  Surname = string.Empty;
		
		/// <summary>
		/// EmailAddress : 
		/// </summary>
		public System.String		  EmailAddress = string.Empty;
		
		/// <summary>
		/// MobilePhone : 
		/// </summary>
		public System.String		  MobilePhone = null;
		
		/// <summary>
		/// MemberNote : 
		/// </summary>
		public System.String		  MemberNote = null;
		
		/// <summary>
		/// AdvertiserNote : 
		/// </summary>
		public System.String		  AdvertiserNote = null;
		
		/// <summary>
		/// JobArchiveID : 
		/// </summary>
		public System.Int32?		  JobArchiveId = null;
		
		/// <summary>
		/// Draft : 
		/// </summary>
		public System.Boolean?		  Draft = null;
		
		/// <summary>
		/// JobApplicationTypeID : 
		/// </summary>
		public System.Int32?		  JobApplicationTypeId = null;
		
		/// <summary>
		/// ExternalXMLFilename : 
		/// </summary>
		public System.String		  ExternalXmlFilename = null;
		
		/// <summary>
		/// CustomQuestionnaireXML : 
		/// </summary>
		public System.String		  CustomQuestionnaireXml = null;
		
		/// <summary>
		/// ExternalPDFFilename : 
		/// </summary>
		public System.String		  ExternalPdfFilename = null;
		
		/// <summary>
		/// FileDownloaded : 
		/// </summary>
		public System.Boolean?		  FileDownloaded = null;
		
		/// <summary>
		/// AppliedWith : 
		/// </summary>
		public System.String		  AppliedWith = null;
		
		/// <summary>
		/// ScreeningQuestionaireXML : 
		/// </summary>
		public System.String		  ScreeningQuestionaireXml = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private JobsArchive _jobArchiveIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="JobsArchive"/>.
		/// </summary>
		/// <value>The source JobsArchive for JobArchiveId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual JobsArchive JobArchiveIdSource
      	{
            get { return this._jobArchiveIdSource; }
            set { this._jobArchiveIdSource = value; }
      	}
		private Jobs _jobIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Jobs"/>.
		/// </summary>
		/// <value>The source Jobs for JobId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Jobs JobIdSource
      	{
            get { return this._jobIdSource; }
            set { this._jobIdSource = value; }
      	}
		private Members _memberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Members"/>.
		/// </summary>
		/// <value>The source Members for MemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Members MemberIdSource
      	{
            get { return this._memberIdSource; }
            set { this._memberIdSource = value; }
      	}
		private Sites _siteIdReferralSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteIdReferral.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Sites SiteIdReferralSource
      	{
            get { return this._siteIdReferralSource; }
            set { this._siteIdReferralSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region JobApplicationNotesCollection
		
		private TList<JobApplicationNotes> _jobApplicationNotesJobApplicationId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobApplicationNotesJobApplicationId
		/// </summary>
		
		public TList<JobApplicationNotes> JobApplicationNotesCollection
		{
			get
			{
				if (_jobApplicationNotesJobApplicationId == null)
				{
				_jobApplicationNotesJobApplicationId = new TList<JobApplicationNotes>();
				}
	
				return _jobApplicationNotesJobApplicationId;
			}
			set { _jobApplicationNotesJobApplicationId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			JobApplicationEntityData _tmp = new JobApplicationEntityData();
						
			_tmp.JobApplicationId = this.JobApplicationId;
			
			_tmp.ApplicationDate = this.ApplicationDate;
			_tmp.JobId = this.JobId;
			_tmp.MemberId = this.MemberId;
			_tmp.MemberResumeFile = this.MemberResumeFile;
			_tmp.MemberCoverLetterFile = this.MemberCoverLetterFile;
			_tmp.ApplicationStatus = this.ApplicationStatus;
			_tmp.JobAppValidateId = this.JobAppValidateId;
			_tmp.SiteIdReferral = this.SiteIdReferral;
			_tmp.UrlReferral = this.UrlReferral;
			_tmp.ApplicantGrade = this.ApplicantGrade;
			_tmp.LastViewedDate = this.LastViewedDate;
			_tmp.FirstName = this.FirstName;
			_tmp.Surname = this.Surname;
			_tmp.EmailAddress = this.EmailAddress;
			_tmp.MobilePhone = this.MobilePhone;
			_tmp.MemberNote = this.MemberNote;
			_tmp.AdvertiserNote = this.AdvertiserNote;
			_tmp.JobArchiveId = this.JobArchiveId;
			_tmp.Draft = this.Draft;
			_tmp.JobApplicationTypeId = this.JobApplicationTypeId;
			_tmp.ExternalXmlFilename = this.ExternalXmlFilename;
			_tmp.CustomQuestionnaireXml = this.CustomQuestionnaireXml;
			_tmp.ExternalPdfFilename = this.ExternalPdfFilename;
			_tmp.FileDownloaded = this.FileDownloaded;
			_tmp.AppliedWith = this.AppliedWith;
			_tmp.ScreeningQuestionaireXml = this.ScreeningQuestionaireXml;
			
			#region Source Parent Composite Entities
			if (this.JobArchiveIdSource != null)
				_tmp.JobArchiveIdSource = MakeCopyOf(this.JobArchiveIdSource) as JobsArchive;
			if (this.JobIdSource != null)
				_tmp.JobIdSource = MakeCopyOf(this.JobIdSource) as Jobs;
			if (this.MemberIdSource != null)
				_tmp.MemberIdSource = MakeCopyOf(this.MemberIdSource) as Members;
			if (this.SiteIdReferralSource != null)
				_tmp.SiteIdReferralSource = MakeCopyOf(this.SiteIdReferralSource) as Sites;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._jobApplicationNotesJobApplicationId != null)
				_tmp.JobApplicationNotesCollection = (TList<JobApplicationNotes>) MakeCopyOf(this.JobApplicationNotesCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			JobApplicationEntityData _tmp = new JobApplicationEntityData();
						
			_tmp.JobApplicationId = this.JobApplicationId;
			
			_tmp.ApplicationDate = this.ApplicationDate;
			_tmp.JobId = this.JobId;
			_tmp.MemberId = this.MemberId;
			_tmp.MemberResumeFile = this.MemberResumeFile;
			_tmp.MemberCoverLetterFile = this.MemberCoverLetterFile;
			_tmp.ApplicationStatus = this.ApplicationStatus;
			_tmp.JobAppValidateId = this.JobAppValidateId;
			_tmp.SiteIdReferral = this.SiteIdReferral;
			_tmp.UrlReferral = this.UrlReferral;
			_tmp.ApplicantGrade = this.ApplicantGrade;
			_tmp.LastViewedDate = this.LastViewedDate;
			_tmp.FirstName = this.FirstName;
			_tmp.Surname = this.Surname;
			_tmp.EmailAddress = this.EmailAddress;
			_tmp.MobilePhone = this.MobilePhone;
			_tmp.MemberNote = this.MemberNote;
			_tmp.AdvertiserNote = this.AdvertiserNote;
			_tmp.JobArchiveId = this.JobArchiveId;
			_tmp.Draft = this.Draft;
			_tmp.JobApplicationTypeId = this.JobApplicationTypeId;
			_tmp.ExternalXmlFilename = this.ExternalXmlFilename;
			_tmp.CustomQuestionnaireXml = this.CustomQuestionnaireXml;
			_tmp.ExternalPdfFilename = this.ExternalPdfFilename;
			_tmp.FileDownloaded = this.FileDownloaded;
			_tmp.AppliedWith = this.AppliedWith;
			_tmp.ScreeningQuestionaireXml = this.ScreeningQuestionaireXml;
			
			#region Source Parent Composite Entities
			if (this.JobArchiveIdSource != null && existingCopies.Contains(this.JobArchiveIdSource))
				_tmp.JobArchiveIdSource = existingCopies[this.JobArchiveIdSource] as JobsArchive;
			else
				_tmp.JobArchiveIdSource = MakeCopyOf(this.JobArchiveIdSource, existingCopies) as JobsArchive;
			if (this.JobIdSource != null && existingCopies.Contains(this.JobIdSource))
				_tmp.JobIdSource = existingCopies[this.JobIdSource] as Jobs;
			else
				_tmp.JobIdSource = MakeCopyOf(this.JobIdSource, existingCopies) as Jobs;
			if (this.MemberIdSource != null && existingCopies.Contains(this.MemberIdSource))
				_tmp.MemberIdSource = existingCopies[this.MemberIdSource] as Members;
			else
				_tmp.MemberIdSource = MakeCopyOf(this.MemberIdSource, existingCopies) as Members;
			if (this.SiteIdReferralSource != null && existingCopies.Contains(this.SiteIdReferralSource))
				_tmp.SiteIdReferralSource = existingCopies[this.SiteIdReferralSource] as Sites;
			else
				_tmp.SiteIdReferralSource = MakeCopyOf(this.SiteIdReferralSource, existingCopies) as Sites;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.JobApplicationNotesCollection = (TList<JobApplicationNotes>) MakeCopyOf(this.JobApplicationNotesCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="JobApplicationColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(JobApplicationColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="JobApplicationColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(JobApplicationColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="JobApplicationColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(JobApplicationColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				JobApplicationEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new JobApplicationEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="JobApplicationColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(JobApplicationColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				JobApplicationEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new JobApplicationEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region JobApplicationEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="JobApplication"/> object.
	/// </remarks>
	public class JobApplicationEventArgs : System.EventArgs
	{
		private JobApplicationColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the JobApplicationEventArgs class.
		///</summary>
		public JobApplicationEventArgs(JobApplicationColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the JobApplicationEventArgs class.
		///</summary>
		public JobApplicationEventArgs(JobApplicationColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The JobApplicationColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="JobApplicationColumn" />
		public JobApplicationColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all JobApplication related events.
	///</summary>
	public delegate void JobApplicationEventHandler(object sender, JobApplicationEventArgs e);
	
	#region JobApplicationComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class JobApplicationComparer : System.Collections.Generic.IComparer<JobApplication>
	{
		JobApplicationColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:JobApplicationComparer"/> class.
        /// </summary>
		public JobApplicationComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:JobApplicationComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public JobApplicationComparer(JobApplicationColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="JobApplication"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="JobApplication"/> to compare.</param>
        /// <param name="b">The second <c>JobApplication</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(JobApplication a, JobApplication b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(JobApplication entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(JobApplication a, JobApplication b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public JobApplicationColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region JobApplicationKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="JobApplication"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class JobApplicationKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the JobApplicationKey class.
		/// </summary>
		public JobApplicationKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the JobApplicationKey class.
		/// </summary>
		public JobApplicationKey(JobApplicationBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.JobApplicationId = entity.JobApplicationId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the JobApplicationKey class.
		/// </summary>
		public JobApplicationKey(System.Int32 _jobApplicationId)
		{
			#region Init Properties

			this.JobApplicationId = _jobApplicationId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private JobApplicationBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public JobApplicationBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the JobApplicationId property
		private System.Int32 _jobApplicationId;
		
		/// <summary>
		/// Gets or sets the JobApplicationId property.
		/// </summary>
		public System.Int32 JobApplicationId
		{
			get { return _jobApplicationId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.JobApplicationId = value;
				
				_jobApplicationId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				JobApplicationId = ( values["JobApplicationId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["JobApplicationId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("JobApplicationId", JobApplicationId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("JobApplicationId: {0}{1}",
								JobApplicationId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region JobApplicationColumn Enum
	
	/// <summary>
	/// Enumerate the JobApplication columns.
	/// </summary>
	[Serializable]
	public enum JobApplicationColumn : int
	{
		/// <summary>
		/// JobApplicationId : 
		/// </summary>
		[EnumTextValue("JobApplicationID")]
		[ColumnEnum("JobApplicationID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		JobApplicationId = 1,
		/// <summary>
		/// ApplicationDate : 
		/// </summary>
		[EnumTextValue("ApplicationDate")]
		[ColumnEnum("ApplicationDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ApplicationDate = 2,
		/// <summary>
		/// JobId : 
		/// </summary>
		[EnumTextValue("JobID")]
		[ColumnEnum("JobID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		JobId = 3,
		/// <summary>
		/// MemberId : 
		/// </summary>
		[EnumTextValue("MemberID")]
		[ColumnEnum("MemberID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MemberId = 4,
		/// <summary>
		/// MemberResumeFile : 
		/// </summary>
		[EnumTextValue("MemberResumeFile")]
		[ColumnEnum("MemberResumeFile", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		MemberResumeFile = 5,
		/// <summary>
		/// MemberCoverLetterFile : 
		/// </summary>
		[EnumTextValue("MemberCoverLetterFile")]
		[ColumnEnum("MemberCoverLetterFile", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		MemberCoverLetterFile = 6,
		/// <summary>
		/// ApplicationStatus : 
		/// </summary>
		[EnumTextValue("ApplicationStatus")]
		[ColumnEnum("ApplicationStatus", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ApplicationStatus = 7,
		/// <summary>
		/// JobAppValidateId : 
		/// </summary>
		[EnumTextValue("JobAppValidateID")]
		[ColumnEnum("JobAppValidateID", typeof(System.Guid), System.Data.DbType.Guid, false, false, false)]
		JobAppValidateId = 8,
		/// <summary>
		/// SiteIdReferral : 
		/// </summary>
		[EnumTextValue("SiteID_Referral")]
		[ColumnEnum("SiteID_Referral", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SiteIdReferral = 9,
		/// <summary>
		/// UrlReferral : 
		/// </summary>
		[EnumTextValue("URL_Referral")]
		[ColumnEnum("URL_Referral", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		UrlReferral = 10,
		/// <summary>
		/// ApplicantGrade : 
		/// </summary>
		[EnumTextValue("ApplicantGrade")]
		[ColumnEnum("ApplicantGrade", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ApplicantGrade = 11,
		/// <summary>
		/// LastViewedDate : 
		/// </summary>
		[EnumTextValue("LastViewedDate")]
		[ColumnEnum("LastViewedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastViewedDate = 12,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("FirstName")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		FirstName = 13,
		/// <summary>
		/// Surname : 
		/// </summary>
		[EnumTextValue("Surname")]
		[ColumnEnum("Surname", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		Surname = 14,
		/// <summary>
		/// EmailAddress : 
		/// </summary>
		[EnumTextValue("EmailAddress")]
		[ColumnEnum("EmailAddress", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		EmailAddress = 15,
		/// <summary>
		/// MobilePhone : 
		/// </summary>
		[EnumTextValue("MobilePhone")]
		[ColumnEnum("MobilePhone", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 40)]
		MobilePhone = 16,
		/// <summary>
		/// MemberNote : 
		/// </summary>
		[EnumTextValue("MemberNote")]
		[ColumnEnum("MemberNote", typeof(System.String), System.Data.DbType.String, false, false, true)]
		MemberNote = 17,
		/// <summary>
		/// AdvertiserNote : 
		/// </summary>
		[EnumTextValue("AdvertiserNote")]
		[ColumnEnum("AdvertiserNote", typeof(System.String), System.Data.DbType.String, false, false, true)]
		AdvertiserNote = 18,
		/// <summary>
		/// JobArchiveId : 
		/// </summary>
		[EnumTextValue("JobArchiveID")]
		[ColumnEnum("JobArchiveID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		JobArchiveId = 19,
		/// <summary>
		/// Draft : 
		/// </summary>
		[EnumTextValue("Draft")]
		[ColumnEnum("Draft", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Draft = 20,
		/// <summary>
		/// JobApplicationTypeId : 
		/// </summary>
		[EnumTextValue("JobApplicationTypeID")]
		[ColumnEnum("JobApplicationTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		JobApplicationTypeId = 21,
		/// <summary>
		/// ExternalXmlFilename : 
		/// </summary>
		[EnumTextValue("ExternalXMLFilename")]
		[ColumnEnum("ExternalXMLFilename", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ExternalXmlFilename = 22,
		/// <summary>
		/// CustomQuestionnaireXml : 
		/// </summary>
		[EnumTextValue("CustomQuestionnaireXML")]
		[ColumnEnum("CustomQuestionnaireXML", typeof(System.String), System.Data.DbType.String, false, false, true)]
		CustomQuestionnaireXml = 23,
		/// <summary>
		/// ExternalPdfFilename : 
		/// </summary>
		[EnumTextValue("ExternalPDFFilename")]
		[ColumnEnum("ExternalPDFFilename", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ExternalPdfFilename = 24,
		/// <summary>
		/// FileDownloaded : 
		/// </summary>
		[EnumTextValue("FileDownloaded")]
		[ColumnEnum("FileDownloaded", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		FileDownloaded = 25,
		/// <summary>
		/// AppliedWith : 
		/// </summary>
		[EnumTextValue("AppliedWith")]
		[ColumnEnum("AppliedWith", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		AppliedWith = 26,
		/// <summary>
		/// ScreeningQuestionaireXml : 
		/// </summary>
		[EnumTextValue("ScreeningQuestionaireXML")]
		[ColumnEnum("ScreeningQuestionaireXML", typeof(System.String), System.Data.DbType.String, false, false, true)]
		ScreeningQuestionaireXml = 27
	}//End enum

	#endregion JobApplicationColumn Enum

} // end namespace

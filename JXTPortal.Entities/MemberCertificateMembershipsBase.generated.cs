
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file MemberCertificateMemberships.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'MemberCertificateMemberships' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MemberCertificateMembershipsBase : EntityBase, IMemberCertificateMemberships, IEntityId<MemberCertificateMembershipsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MemberCertificateMembershipsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MemberCertificateMembershipsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MemberCertificateMembershipsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MemberCertificateMemberships> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MemberCertificateMembershipsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MemberCertificateMembershipsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MemberCertificateMembershipsBase"/> instance.
		///</summary>
		public MemberCertificateMembershipsBase()
		{
			this.entityData = new MemberCertificateMembershipsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MemberCertificateMembershipsBase"/> instance.
		///</summary>
		///<param name="_memberId"></param>
		///<param name="_memberCertificateMembershipName"></param>
		///<param name="_certificationAuthority"></param>
		///<param name="_licenseNumber"></param>
		///<param name="_certificationUrl"></param>
		///<param name="_startMonth"></param>
		///<param name="_startYear"></param>
		///<param name="_endMonth"></param>
		///<param name="_endYear"></param>
		///<param name="_doesnotExpire"></param>
		///<param name="_lastModifiedDate"></param>
		public MemberCertificateMembershipsBase(System.Int32? _memberId, System.String _memberCertificateMembershipName, 
			System.String _certificationAuthority, System.String _licenseNumber, 
			System.String _certificationUrl, System.Int32? _startMonth, System.Int32? _startYear, 
			System.Int32? _endMonth, System.Int32? _endYear, System.Boolean? _doesnotExpire, 
			System.DateTime? _lastModifiedDate)
		{
			this.entityData = new MemberCertificateMembershipsEntityData();
			this.backupData = null;

			this.MemberId = _memberId;
			this.MemberCertificateMembershipName = _memberCertificateMembershipName;
			this.CertificationAuthority = _certificationAuthority;
			this.LicenseNumber = _licenseNumber;
			this.CertificationUrl = _certificationUrl;
			this.StartMonth = _startMonth;
			this.StartYear = _startYear;
			this.EndMonth = _endMonth;
			this.EndYear = _endYear;
			this.DoesnotExpire = _doesnotExpire;
			this.LastModifiedDate = _lastModifiedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MemberCertificateMemberships"/> instance.
		///</summary>
		///<param name="_memberId"></param>
		///<param name="_memberCertificateMembershipName"></param>
		///<param name="_certificationAuthority"></param>
		///<param name="_licenseNumber"></param>
		///<param name="_certificationUrl"></param>
		///<param name="_startMonth"></param>
		///<param name="_startYear"></param>
		///<param name="_endMonth"></param>
		///<param name="_endYear"></param>
		///<param name="_doesnotExpire"></param>
		///<param name="_lastModifiedDate"></param>
		public static MemberCertificateMemberships CreateMemberCertificateMemberships(System.Int32? _memberId, System.String _memberCertificateMembershipName, 
			System.String _certificationAuthority, System.String _licenseNumber, 
			System.String _certificationUrl, System.Int32? _startMonth, System.Int32? _startYear, 
			System.Int32? _endMonth, System.Int32? _endYear, System.Boolean? _doesnotExpire, 
			System.DateTime? _lastModifiedDate)
		{
			MemberCertificateMemberships newMemberCertificateMemberships = new MemberCertificateMemberships();
			newMemberCertificateMemberships.MemberId = _memberId;
			newMemberCertificateMemberships.MemberCertificateMembershipName = _memberCertificateMembershipName;
			newMemberCertificateMemberships.CertificationAuthority = _certificationAuthority;
			newMemberCertificateMemberships.LicenseNumber = _licenseNumber;
			newMemberCertificateMemberships.CertificationUrl = _certificationUrl;
			newMemberCertificateMemberships.StartMonth = _startMonth;
			newMemberCertificateMemberships.StartYear = _startYear;
			newMemberCertificateMemberships.EndMonth = _endMonth;
			newMemberCertificateMemberships.EndYear = _endYear;
			newMemberCertificateMemberships.DoesnotExpire = _doesnotExpire;
			newMemberCertificateMemberships.LastModifiedDate = _lastModifiedDate;
			return newMemberCertificateMemberships;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MemberCertificateMembershipId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MemberCertificateMembershipId
		{
			get
			{
				return this.entityData.MemberCertificateMembershipId; 
			}
			
			set
			{
				if (this.entityData.MemberCertificateMembershipId == value)
					return;
					
				OnColumnChanging(MemberCertificateMembershipsColumn.MemberCertificateMembershipId, this.entityData.MemberCertificateMembershipId);
				this.entityData.MemberCertificateMembershipId = value;
				this.EntityId.MemberCertificateMembershipId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberCertificateMembershipsColumn.MemberCertificateMembershipId, this.entityData.MemberCertificateMembershipId);
				OnPropertyChanged("MemberCertificateMembershipId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMemberIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MemberId
		{
			get
			{
				return this.entityData.MemberId; 
			}
			
			set
			{
				if (this.entityData.MemberId == value)
					return;
					
				OnColumnChanging(MemberCertificateMembershipsColumn.MemberId, this.entityData.MemberId);
				this.entityData.MemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberCertificateMembershipsColumn.MemberId, this.entityData.MemberId);
				OnPropertyChanged("MemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberCertificateMembershipName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 600)]
		public virtual System.String MemberCertificateMembershipName
		{
			get
			{
				return this.entityData.MemberCertificateMembershipName; 
			}
			
			set
			{
				if (this.entityData.MemberCertificateMembershipName == value)
					return;
					
				OnColumnChanging(MemberCertificateMembershipsColumn.MemberCertificateMembershipName, this.entityData.MemberCertificateMembershipName);
				this.entityData.MemberCertificateMembershipName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberCertificateMembershipsColumn.MemberCertificateMembershipName, this.entityData.MemberCertificateMembershipName);
				OnPropertyChanged("MemberCertificateMembershipName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CertificationAuthority property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String CertificationAuthority
		{
			get
			{
				return this.entityData.CertificationAuthority; 
			}
			
			set
			{
				if (this.entityData.CertificationAuthority == value)
					return;
					
				OnColumnChanging(MemberCertificateMembershipsColumn.CertificationAuthority, this.entityData.CertificationAuthority);
				this.entityData.CertificationAuthority = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberCertificateMembershipsColumn.CertificationAuthority, this.entityData.CertificationAuthority);
				OnPropertyChanged("CertificationAuthority");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LicenseNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String LicenseNumber
		{
			get
			{
				return this.entityData.LicenseNumber; 
			}
			
			set
			{
				if (this.entityData.LicenseNumber == value)
					return;
					
				OnColumnChanging(MemberCertificateMembershipsColumn.LicenseNumber, this.entityData.LicenseNumber);
				this.entityData.LicenseNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberCertificateMembershipsColumn.LicenseNumber, this.entityData.LicenseNumber);
				OnPropertyChanged("LicenseNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CertificationUrl property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 256)]
		public virtual System.String CertificationUrl
		{
			get
			{
				return this.entityData.CertificationUrl; 
			}
			
			set
			{
				if (this.entityData.CertificationUrl == value)
					return;
					
				OnColumnChanging(MemberCertificateMembershipsColumn.CertificationUrl, this.entityData.CertificationUrl);
				this.entityData.CertificationUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberCertificateMembershipsColumn.CertificationUrl, this.entityData.CertificationUrl);
				OnPropertyChanged("CertificationUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartMonth property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStartMonthNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? StartMonth
		{
			get
			{
				return this.entityData.StartMonth; 
			}
			
			set
			{
				if (this.entityData.StartMonth == value)
					return;
					
				OnColumnChanging(MemberCertificateMembershipsColumn.StartMonth, this.entityData.StartMonth);
				this.entityData.StartMonth = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberCertificateMembershipsColumn.StartMonth, this.entityData.StartMonth);
				OnPropertyChanged("StartMonth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartYear property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStartYearNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? StartYear
		{
			get
			{
				return this.entityData.StartYear; 
			}
			
			set
			{
				if (this.entityData.StartYear == value)
					return;
					
				OnColumnChanging(MemberCertificateMembershipsColumn.StartYear, this.entityData.StartYear);
				this.entityData.StartYear = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberCertificateMembershipsColumn.StartYear, this.entityData.StartYear);
				OnPropertyChanged("StartYear");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndMonth property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEndMonthNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? EndMonth
		{
			get
			{
				return this.entityData.EndMonth; 
			}
			
			set
			{
				if (this.entityData.EndMonth == value)
					return;
					
				OnColumnChanging(MemberCertificateMembershipsColumn.EndMonth, this.entityData.EndMonth);
				this.entityData.EndMonth = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberCertificateMembershipsColumn.EndMonth, this.entityData.EndMonth);
				OnPropertyChanged("EndMonth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndYear property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEndYearNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? EndYear
		{
			get
			{
				return this.entityData.EndYear; 
			}
			
			set
			{
				if (this.entityData.EndYear == value)
					return;
					
				OnColumnChanging(MemberCertificateMembershipsColumn.EndYear, this.entityData.EndYear);
				this.entityData.EndYear = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberCertificateMembershipsColumn.EndYear, this.entityData.EndYear);
				OnPropertyChanged("EndYear");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DoesnotExpire property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsDoesnotExpireNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? DoesnotExpire
		{
			get
			{
				return this.entityData.DoesnotExpire; 
			}
			
			set
			{
				if (this.entityData.DoesnotExpire == value)
					return;
					
				OnColumnChanging(MemberCertificateMembershipsColumn.DoesnotExpire, this.entityData.DoesnotExpire);
				this.entityData.DoesnotExpire = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberCertificateMembershipsColumn.DoesnotExpire, this.entityData.DoesnotExpire);
				OnPropertyChanged("DoesnotExpire");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModifiedDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModifiedDate
		{
			get
			{
				return this.entityData.LastModifiedDate; 
			}
			
			set
			{
				if (this.entityData.LastModifiedDate == value)
					return;
					
				OnColumnChanging(MemberCertificateMembershipsColumn.LastModifiedDate, this.entityData.LastModifiedDate);
				this.entityData.LastModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberCertificateMembershipsColumn.LastModifiedDate, this.entityData.LastModifiedDate);
				OnPropertyChanged("LastModifiedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Members"/>.
		/// </summary>
		/// <value>The source Members for MemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Members MemberIdSource
      	{
            get { return entityData.MemberIdSource; }
            set { entityData.MemberIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MemberCertificateMembershipName", "Member Certificate Membership Name", 600));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CertificationAuthority", "Certification Authority", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LicenseNumber", "License Number", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CertificationUrl", "Certification Url", 256));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "MemberCertificateMemberships"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MemberCertificateMembershipID", "MemberID", "MemberCertificateMembershipName", "CertificationAuthority", "LicenseNumber", "CertificationURL", "StartMonth", "StartYear", "EndMonth", "EndYear", "DoesnotExpire", "LastModifiedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MemberCertificateMembershipsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MemberCertificateMemberships) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MemberCertificateMemberships>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MemberCertificateMemberships);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MemberCertificateMemberships Entity 
		///</summary>
		protected virtual MemberCertificateMemberships Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MemberCertificateMemberships copy = new MemberCertificateMemberships();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MemberCertificateMembershipId = this.MemberCertificateMembershipId;
				copy.MemberId = this.MemberId;
				copy.MemberCertificateMembershipName = this.MemberCertificateMembershipName;
				copy.CertificationAuthority = this.CertificationAuthority;
				copy.LicenseNumber = this.LicenseNumber;
				copy.CertificationUrl = this.CertificationUrl;
				copy.StartMonth = this.StartMonth;
				copy.StartYear = this.StartYear;
				copy.EndMonth = this.EndMonth;
				copy.EndYear = this.EndYear;
				copy.DoesnotExpire = this.DoesnotExpire;
				copy.LastModifiedDate = this.LastModifiedDate;
			
			if (this.MemberIdSource != null && existingCopies.Contains(this.MemberIdSource))
				copy.MemberIdSource = existingCopies[this.MemberIdSource] as Members;
			else
				copy.MemberIdSource = MakeCopyOf(this.MemberIdSource, existingCopies) as Members;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MemberCertificateMemberships Entity 
		///</summary>
		public virtual MemberCertificateMemberships Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MemberCertificateMemberships Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MemberCertificateMemberships DeepCopy()
		{
			return EntityHelper.Clone<MemberCertificateMemberships>(this as MemberCertificateMemberships);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MemberCertificateMembershipsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MemberCertificateMembershipsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MemberCertificateMembershipsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MemberCertificateMembershipsColumn column)
		{
			switch(column)
			{
					case MemberCertificateMembershipsColumn.MemberCertificateMembershipId:
					return entityData.MemberCertificateMembershipId != _originalData.MemberCertificateMembershipId;
					case MemberCertificateMembershipsColumn.MemberId:
					return entityData.MemberId != _originalData.MemberId;
					case MemberCertificateMembershipsColumn.MemberCertificateMembershipName:
					return entityData.MemberCertificateMembershipName != _originalData.MemberCertificateMembershipName;
					case MemberCertificateMembershipsColumn.CertificationAuthority:
					return entityData.CertificationAuthority != _originalData.CertificationAuthority;
					case MemberCertificateMembershipsColumn.LicenseNumber:
					return entityData.LicenseNumber != _originalData.LicenseNumber;
					case MemberCertificateMembershipsColumn.CertificationUrl:
					return entityData.CertificationUrl != _originalData.CertificationUrl;
					case MemberCertificateMembershipsColumn.StartMonth:
					return entityData.StartMonth != _originalData.StartMonth;
					case MemberCertificateMembershipsColumn.StartYear:
					return entityData.StartYear != _originalData.StartYear;
					case MemberCertificateMembershipsColumn.EndMonth:
					return entityData.EndMonth != _originalData.EndMonth;
					case MemberCertificateMembershipsColumn.EndYear:
					return entityData.EndYear != _originalData.EndYear;
					case MemberCertificateMembershipsColumn.DoesnotExpire:
					return entityData.DoesnotExpire != _originalData.DoesnotExpire;
					case MemberCertificateMembershipsColumn.LastModifiedDate:
					return entityData.LastModifiedDate != _originalData.LastModifiedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MemberCertificateMembershipsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MemberCertificateMembershipId != _originalData.MemberCertificateMembershipId;
			result = result || entityData.MemberId != _originalData.MemberId;
			result = result || entityData.MemberCertificateMembershipName != _originalData.MemberCertificateMembershipName;
			result = result || entityData.CertificationAuthority != _originalData.CertificationAuthority;
			result = result || entityData.LicenseNumber != _originalData.LicenseNumber;
			result = result || entityData.CertificationUrl != _originalData.CertificationUrl;
			result = result || entityData.StartMonth != _originalData.StartMonth;
			result = result || entityData.StartYear != _originalData.StartYear;
			result = result || entityData.EndMonth != _originalData.EndMonth;
			result = result || entityData.EndYear != _originalData.EndYear;
			result = result || entityData.DoesnotExpire != _originalData.DoesnotExpire;
			result = result || entityData.LastModifiedDate != _originalData.LastModifiedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a MemberCertificateMemberships Entity with the original data.
		///</summary>
		public MemberCertificateMemberships GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMemberCertificateMemberships(
				_originalData.MemberId,
				_originalData.MemberCertificateMembershipName,
				_originalData.CertificationAuthority,
				_originalData.LicenseNumber,
				_originalData.CertificationUrl,
				_originalData.StartMonth,
				_originalData.StartYear,
				_originalData.EndMonth,
				_originalData.EndYear,
				_originalData.DoesnotExpire,
				_originalData.LastModifiedDate
				);
				
			return (MemberCertificateMemberships)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MemberCertificateMembershipsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MemberCertificateMembershipsBase)
				return ValueEquals(this, (MemberCertificateMembershipsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MemberCertificateMembershipsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MemberCertificateMembershipId.GetHashCode() ^ 
					((this.MemberId == null) ? string.Empty : this.MemberId.ToString()).GetHashCode() ^ 
					((this.MemberCertificateMembershipName == null) ? string.Empty : this.MemberCertificateMembershipName.ToString()).GetHashCode() ^ 
					((this.CertificationAuthority == null) ? string.Empty : this.CertificationAuthority.ToString()).GetHashCode() ^ 
					((this.LicenseNumber == null) ? string.Empty : this.LicenseNumber.ToString()).GetHashCode() ^ 
					((this.CertificationUrl == null) ? string.Empty : this.CertificationUrl.ToString()).GetHashCode() ^ 
					((this.StartMonth == null) ? string.Empty : this.StartMonth.ToString()).GetHashCode() ^ 
					((this.StartYear == null) ? string.Empty : this.StartYear.ToString()).GetHashCode() ^ 
					((this.EndMonth == null) ? string.Empty : this.EndMonth.ToString()).GetHashCode() ^ 
					((this.EndYear == null) ? string.Empty : this.EndYear.ToString()).GetHashCode() ^ 
					((this.DoesnotExpire == null) ? string.Empty : this.DoesnotExpire.ToString()).GetHashCode() ^ 
					((this.LastModifiedDate == null) ? string.Empty : this.LastModifiedDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MemberCertificateMembershipsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MemberCertificateMembershipsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MemberCertificateMembershipsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MemberCertificateMembershipsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MemberCertificateMembershipsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MemberCertificateMembershipsBase Object1, MemberCertificateMembershipsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MemberCertificateMembershipId != Object2.MemberCertificateMembershipId)
				equal = false;
			if ( Object1.MemberId != null && Object2.MemberId != null )
			{
				if (Object1.MemberId != Object2.MemberId)
					equal = false;
			}
			else if (Object1.MemberId == null ^ Object2.MemberId == null )
			{
				equal = false;
			}
			if ( Object1.MemberCertificateMembershipName != null && Object2.MemberCertificateMembershipName != null )
			{
				if (Object1.MemberCertificateMembershipName != Object2.MemberCertificateMembershipName)
					equal = false;
			}
			else if (Object1.MemberCertificateMembershipName == null ^ Object2.MemberCertificateMembershipName == null )
			{
				equal = false;
			}
			if ( Object1.CertificationAuthority != null && Object2.CertificationAuthority != null )
			{
				if (Object1.CertificationAuthority != Object2.CertificationAuthority)
					equal = false;
			}
			else if (Object1.CertificationAuthority == null ^ Object2.CertificationAuthority == null )
			{
				equal = false;
			}
			if ( Object1.LicenseNumber != null && Object2.LicenseNumber != null )
			{
				if (Object1.LicenseNumber != Object2.LicenseNumber)
					equal = false;
			}
			else if (Object1.LicenseNumber == null ^ Object2.LicenseNumber == null )
			{
				equal = false;
			}
			if ( Object1.CertificationUrl != null && Object2.CertificationUrl != null )
			{
				if (Object1.CertificationUrl != Object2.CertificationUrl)
					equal = false;
			}
			else if (Object1.CertificationUrl == null ^ Object2.CertificationUrl == null )
			{
				equal = false;
			}
			if ( Object1.StartMonth != null && Object2.StartMonth != null )
			{
				if (Object1.StartMonth != Object2.StartMonth)
					equal = false;
			}
			else if (Object1.StartMonth == null ^ Object2.StartMonth == null )
			{
				equal = false;
			}
			if ( Object1.StartYear != null && Object2.StartYear != null )
			{
				if (Object1.StartYear != Object2.StartYear)
					equal = false;
			}
			else if (Object1.StartYear == null ^ Object2.StartYear == null )
			{
				equal = false;
			}
			if ( Object1.EndMonth != null && Object2.EndMonth != null )
			{
				if (Object1.EndMonth != Object2.EndMonth)
					equal = false;
			}
			else if (Object1.EndMonth == null ^ Object2.EndMonth == null )
			{
				equal = false;
			}
			if ( Object1.EndYear != null && Object2.EndYear != null )
			{
				if (Object1.EndYear != Object2.EndYear)
					equal = false;
			}
			else if (Object1.EndYear == null ^ Object2.EndYear == null )
			{
				equal = false;
			}
			if ( Object1.DoesnotExpire != null && Object2.DoesnotExpire != null )
			{
				if (Object1.DoesnotExpire != Object2.DoesnotExpire)
					equal = false;
			}
			else if (Object1.DoesnotExpire == null ^ Object2.DoesnotExpire == null )
			{
				equal = false;
			}
			if ( Object1.LastModifiedDate != null && Object2.LastModifiedDate != null )
			{
				if (Object1.LastModifiedDate != Object2.LastModifiedDate)
					equal = false;
			}
			else if (Object1.LastModifiedDate == null ^ Object2.LastModifiedDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MemberCertificateMembershipsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MemberCertificateMembershipsComparer GetComparer()
        {
            return new MemberCertificateMembershipsComparer();
        }
        */

        // Comparer delegates back to MemberCertificateMemberships
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MemberCertificateMemberships rhs, MemberCertificateMembershipsColumn which)
        {
            switch (which)
            {
            	
            	
            	case MemberCertificateMembershipsColumn.MemberCertificateMembershipId:
            		return this.MemberCertificateMembershipId.CompareTo(rhs.MemberCertificateMembershipId);
            		
            		                 
            	
            	
            	case MemberCertificateMembershipsColumn.MemberId:
            		return this.MemberId.Value.CompareTo(rhs.MemberId.Value);
            		
            		                 
            	
            	
            	case MemberCertificateMembershipsColumn.MemberCertificateMembershipName:
            		return this.MemberCertificateMembershipName.CompareTo(rhs.MemberCertificateMembershipName);
            		
            		                 
            	
            	
            	case MemberCertificateMembershipsColumn.CertificationAuthority:
            		return this.CertificationAuthority.CompareTo(rhs.CertificationAuthority);
            		
            		                 
            	
            	
            	case MemberCertificateMembershipsColumn.LicenseNumber:
            		return this.LicenseNumber.CompareTo(rhs.LicenseNumber);
            		
            		                 
            	
            	
            	case MemberCertificateMembershipsColumn.CertificationUrl:
            		return this.CertificationUrl.CompareTo(rhs.CertificationUrl);
            		
            		                 
            	
            	
            	case MemberCertificateMembershipsColumn.StartMonth:
            		return this.StartMonth.Value.CompareTo(rhs.StartMonth.Value);
            		
            		                 
            	
            	
            	case MemberCertificateMembershipsColumn.StartYear:
            		return this.StartYear.Value.CompareTo(rhs.StartYear.Value);
            		
            		                 
            	
            	
            	case MemberCertificateMembershipsColumn.EndMonth:
            		return this.EndMonth.Value.CompareTo(rhs.EndMonth.Value);
            		
            		                 
            	
            	
            	case MemberCertificateMembershipsColumn.EndYear:
            		return this.EndYear.Value.CompareTo(rhs.EndYear.Value);
            		
            		                 
            	
            	
            	case MemberCertificateMembershipsColumn.DoesnotExpire:
            		return this.DoesnotExpire.Value.CompareTo(rhs.DoesnotExpire.Value);
            		
            		                 
            	
            	
            	case MemberCertificateMembershipsColumn.LastModifiedDate:
            		return this.LastModifiedDate.Value.CompareTo(rhs.LastModifiedDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MemberCertificateMembershipsKey> Members
		
		// member variable for the EntityId property
		private MemberCertificateMembershipsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MemberCertificateMembershipsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MemberCertificateMembershipsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MemberCertificateMemberships")
					.Append("|").Append( this.MemberCertificateMembershipId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- MemberCertificateMembershipId: {0}{12}- MemberId: {1}{12}- MemberCertificateMembershipName: {2}{12}- CertificationAuthority: {3}{12}- LicenseNumber: {4}{12}- CertificationUrl: {5}{12}- StartMonth: {6}{12}- StartYear: {7}{12}- EndMonth: {8}{12}- EndYear: {9}{12}- DoesnotExpire: {10}{12}- LastModifiedDate: {11}{12}{14}", 
				this.MemberCertificateMembershipId,
				(this.MemberId == null) ? string.Empty : this.MemberId.ToString(),
				(this.MemberCertificateMembershipName == null) ? string.Empty : this.MemberCertificateMembershipName.ToString(),
				(this.CertificationAuthority == null) ? string.Empty : this.CertificationAuthority.ToString(),
				(this.LicenseNumber == null) ? string.Empty : this.LicenseNumber.ToString(),
				(this.CertificationUrl == null) ? string.Empty : this.CertificationUrl.ToString(),
				(this.StartMonth == null) ? string.Empty : this.StartMonth.ToString(),
				(this.StartYear == null) ? string.Empty : this.StartYear.ToString(),
				(this.EndMonth == null) ? string.Empty : this.EndMonth.ToString(),
				(this.EndYear == null) ? string.Empty : this.EndYear.ToString(),
				(this.DoesnotExpire == null) ? string.Empty : this.DoesnotExpire.ToString(),
				(this.LastModifiedDate == null) ? string.Empty : this.LastModifiedDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'MemberCertificateMemberships' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MemberCertificateMembershipsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MemberCertificateMembershipID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "MemberCertificateMemberships"</remarks>
		public System.Int32 MemberCertificateMembershipId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// MemberID : 
		/// </summary>
		public System.Int32?		  MemberId = null;
		
		/// <summary>
		/// MemberCertificateMembershipName : 
		/// </summary>
		public System.String		  MemberCertificateMembershipName = null;
		
		/// <summary>
		/// CertificationAuthority : 
		/// </summary>
		public System.String		  CertificationAuthority = null;
		
		/// <summary>
		/// LicenseNumber : 
		/// </summary>
		public System.String		  LicenseNumber = null;
		
		/// <summary>
		/// CertificationURL : 
		/// </summary>
		public System.String		  CertificationUrl = null;
		
		/// <summary>
		/// StartMonth : 
		/// </summary>
		public System.Int32?		  StartMonth = null;
		
		/// <summary>
		/// StartYear : 
		/// </summary>
		public System.Int32?		  StartYear = null;
		
		/// <summary>
		/// EndMonth : 
		/// </summary>
		public System.Int32?		  EndMonth = null;
		
		/// <summary>
		/// EndYear : 
		/// </summary>
		public System.Int32?		  EndYear = null;
		
		/// <summary>
		/// DoesnotExpire : 
		/// </summary>
		public System.Boolean?		  DoesnotExpire = null;
		
		/// <summary>
		/// LastModifiedDate : 
		/// </summary>
		public System.DateTime?		  LastModifiedDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Members _memberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Members"/>.
		/// </summary>
		/// <value>The source Members for MemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Members MemberIdSource
      	{
            get { return this._memberIdSource; }
            set { this._memberIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MemberCertificateMembershipsEntityData _tmp = new MemberCertificateMembershipsEntityData();
						
			_tmp.MemberCertificateMembershipId = this.MemberCertificateMembershipId;
			
			_tmp.MemberId = this.MemberId;
			_tmp.MemberCertificateMembershipName = this.MemberCertificateMembershipName;
			_tmp.CertificationAuthority = this.CertificationAuthority;
			_tmp.LicenseNumber = this.LicenseNumber;
			_tmp.CertificationUrl = this.CertificationUrl;
			_tmp.StartMonth = this.StartMonth;
			_tmp.StartYear = this.StartYear;
			_tmp.EndMonth = this.EndMonth;
			_tmp.EndYear = this.EndYear;
			_tmp.DoesnotExpire = this.DoesnotExpire;
			_tmp.LastModifiedDate = this.LastModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.MemberIdSource != null)
				_tmp.MemberIdSource = MakeCopyOf(this.MemberIdSource) as Members;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MemberCertificateMembershipsEntityData _tmp = new MemberCertificateMembershipsEntityData();
						
			_tmp.MemberCertificateMembershipId = this.MemberCertificateMembershipId;
			
			_tmp.MemberId = this.MemberId;
			_tmp.MemberCertificateMembershipName = this.MemberCertificateMembershipName;
			_tmp.CertificationAuthority = this.CertificationAuthority;
			_tmp.LicenseNumber = this.LicenseNumber;
			_tmp.CertificationUrl = this.CertificationUrl;
			_tmp.StartMonth = this.StartMonth;
			_tmp.StartYear = this.StartYear;
			_tmp.EndMonth = this.EndMonth;
			_tmp.EndYear = this.EndYear;
			_tmp.DoesnotExpire = this.DoesnotExpire;
			_tmp.LastModifiedDate = this.LastModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.MemberIdSource != null && existingCopies.Contains(this.MemberIdSource))
				_tmp.MemberIdSource = existingCopies[this.MemberIdSource] as Members;
			else
				_tmp.MemberIdSource = MakeCopyOf(this.MemberIdSource, existingCopies) as Members;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberCertificateMembershipsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MemberCertificateMembershipsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberCertificateMembershipsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MemberCertificateMembershipsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberCertificateMembershipsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MemberCertificateMembershipsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MemberCertificateMembershipsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MemberCertificateMembershipsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberCertificateMembershipsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MemberCertificateMembershipsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MemberCertificateMembershipsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MemberCertificateMembershipsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MemberCertificateMembershipsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MemberCertificateMemberships"/> object.
	/// </remarks>
	public class MemberCertificateMembershipsEventArgs : System.EventArgs
	{
		private MemberCertificateMembershipsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MemberCertificateMembershipsEventArgs class.
		///</summary>
		public MemberCertificateMembershipsEventArgs(MemberCertificateMembershipsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MemberCertificateMembershipsEventArgs class.
		///</summary>
		public MemberCertificateMembershipsEventArgs(MemberCertificateMembershipsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MemberCertificateMembershipsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MemberCertificateMembershipsColumn" />
		public MemberCertificateMembershipsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MemberCertificateMemberships related events.
	///</summary>
	public delegate void MemberCertificateMembershipsEventHandler(object sender, MemberCertificateMembershipsEventArgs e);
	
	#region MemberCertificateMembershipsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MemberCertificateMembershipsComparer : System.Collections.Generic.IComparer<MemberCertificateMemberships>
	{
		MemberCertificateMembershipsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MemberCertificateMembershipsComparer"/> class.
        /// </summary>
		public MemberCertificateMembershipsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MemberCertificateMembershipsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MemberCertificateMembershipsComparer(MemberCertificateMembershipsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="MemberCertificateMemberships"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="MemberCertificateMemberships"/> to compare.</param>
        /// <param name="b">The second <c>MemberCertificateMemberships</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MemberCertificateMemberships a, MemberCertificateMemberships b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MemberCertificateMemberships entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MemberCertificateMemberships a, MemberCertificateMemberships b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MemberCertificateMembershipsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MemberCertificateMembershipsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MemberCertificateMemberships"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MemberCertificateMembershipsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MemberCertificateMembershipsKey class.
		/// </summary>
		public MemberCertificateMembershipsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MemberCertificateMembershipsKey class.
		/// </summary>
		public MemberCertificateMembershipsKey(MemberCertificateMembershipsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MemberCertificateMembershipId = entity.MemberCertificateMembershipId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MemberCertificateMembershipsKey class.
		/// </summary>
		public MemberCertificateMembershipsKey(System.Int32 _memberCertificateMembershipId)
		{
			#region Init Properties

			this.MemberCertificateMembershipId = _memberCertificateMembershipId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MemberCertificateMembershipsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MemberCertificateMembershipsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MemberCertificateMembershipId property
		private System.Int32 _memberCertificateMembershipId;
		
		/// <summary>
		/// Gets or sets the MemberCertificateMembershipId property.
		/// </summary>
		public System.Int32 MemberCertificateMembershipId
		{
			get { return _memberCertificateMembershipId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MemberCertificateMembershipId = value;
				
				_memberCertificateMembershipId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MemberCertificateMembershipId = ( values["MemberCertificateMembershipId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MemberCertificateMembershipId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MemberCertificateMembershipId", MemberCertificateMembershipId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MemberCertificateMembershipId: {0}{1}",
								MemberCertificateMembershipId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MemberCertificateMembershipsColumn Enum
	
	/// <summary>
	/// Enumerate the MemberCertificateMemberships columns.
	/// </summary>
	[Serializable]
	public enum MemberCertificateMembershipsColumn : int
	{
		/// <summary>
		/// MemberCertificateMembershipId : 
		/// </summary>
		[EnumTextValue("MemberCertificateMembershipID")]
		[ColumnEnum("MemberCertificateMembershipID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MemberCertificateMembershipId = 1,
		/// <summary>
		/// MemberId : 
		/// </summary>
		[EnumTextValue("MemberID")]
		[ColumnEnum("MemberID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MemberId = 2,
		/// <summary>
		/// MemberCertificateMembershipName : 
		/// </summary>
		[EnumTextValue("MemberCertificateMembershipName")]
		[ColumnEnum("MemberCertificateMembershipName", typeof(System.String), System.Data.DbType.String, false, false, true, 600)]
		MemberCertificateMembershipName = 3,
		/// <summary>
		/// CertificationAuthority : 
		/// </summary>
		[EnumTextValue("CertificationAuthority")]
		[ColumnEnum("CertificationAuthority", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		CertificationAuthority = 4,
		/// <summary>
		/// LicenseNumber : 
		/// </summary>
		[EnumTextValue("LicenseNumber")]
		[ColumnEnum("LicenseNumber", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		LicenseNumber = 5,
		/// <summary>
		/// CertificationUrl : 
		/// </summary>
		[EnumTextValue("CertificationURL")]
		[ColumnEnum("CertificationURL", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		CertificationUrl = 6,
		/// <summary>
		/// StartMonth : 
		/// </summary>
		[EnumTextValue("StartMonth")]
		[ColumnEnum("StartMonth", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		StartMonth = 7,
		/// <summary>
		/// StartYear : 
		/// </summary>
		[EnumTextValue("StartYear")]
		[ColumnEnum("StartYear", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		StartYear = 8,
		/// <summary>
		/// EndMonth : 
		/// </summary>
		[EnumTextValue("EndMonth")]
		[ColumnEnum("EndMonth", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EndMonth = 9,
		/// <summary>
		/// EndYear : 
		/// </summary>
		[EnumTextValue("EndYear")]
		[ColumnEnum("EndYear", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EndYear = 10,
		/// <summary>
		/// DoesnotExpire : 
		/// </summary>
		[EnumTextValue("DoesnotExpire")]
		[ColumnEnum("DoesnotExpire", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		DoesnotExpire = 11,
		/// <summary>
		/// LastModifiedDate : 
		/// </summary>
		[EnumTextValue("LastModifiedDate")]
		[ColumnEnum("LastModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModifiedDate = 12
	}//End enum

	#endregion MemberCertificateMembershipsColumn Enum

} // end namespace

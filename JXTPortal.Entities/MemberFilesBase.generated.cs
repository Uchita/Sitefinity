
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file MemberFiles.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'MemberFiles' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MemberFilesBase : EntityBase, IMemberFiles, IEntityId<MemberFilesKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MemberFilesEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MemberFilesEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MemberFilesEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MemberFiles> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MemberFilesEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MemberFilesEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MemberFilesBase"/> instance.
		///</summary>
		public MemberFilesBase()
		{
			this.entityData = new MemberFilesEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MemberFilesBase"/> instance.
		///</summary>
		///<param name="_memberId"></param>
		///<param name="_memberFileTypeId"></param>
		///<param name="_memberFileName"></param>
		///<param name="_memberFileSearchExtension"></param>
		///<param name="_memberFileContent"></param>
		///<param name="_memberFileTitle"></param>
		///<param name="_lastModifiedDate"></param>
		///<param name="_documentTypeId"></param>
		///<param name="_memberFileUrl"></param>
		public MemberFilesBase(System.Int32 _memberId, System.Int32 _memberFileTypeId, System.String _memberFileName, 
			System.String _memberFileSearchExtension, System.Byte[] _memberFileContent, System.String _memberFileTitle, 
			System.DateTime _lastModifiedDate, System.Int32? _documentTypeId, System.String _memberFileUrl)
		{
			this.entityData = new MemberFilesEntityData();
			this.backupData = null;

			this.MemberId = _memberId;
			this.MemberFileTypeId = _memberFileTypeId;
			this.MemberFileName = _memberFileName;
			this.MemberFileSearchExtension = _memberFileSearchExtension;
			this.MemberFileContent = _memberFileContent;
			this.MemberFileTitle = _memberFileTitle;
			this.LastModifiedDate = _lastModifiedDate;
			this.DocumentTypeId = _documentTypeId;
			this.MemberFileUrl = _memberFileUrl;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MemberFiles"/> instance.
		///</summary>
		///<param name="_memberId"></param>
		///<param name="_memberFileTypeId"></param>
		///<param name="_memberFileName"></param>
		///<param name="_memberFileSearchExtension"></param>
		///<param name="_memberFileContent"></param>
		///<param name="_memberFileTitle"></param>
		///<param name="_lastModifiedDate"></param>
		///<param name="_documentTypeId"></param>
		///<param name="_memberFileUrl"></param>
		public static MemberFiles CreateMemberFiles(System.Int32 _memberId, System.Int32 _memberFileTypeId, System.String _memberFileName, 
			System.String _memberFileSearchExtension, System.Byte[] _memberFileContent, System.String _memberFileTitle, 
			System.DateTime _lastModifiedDate, System.Int32? _documentTypeId, System.String _memberFileUrl)
		{
			MemberFiles newMemberFiles = new MemberFiles();
			newMemberFiles.MemberId = _memberId;
			newMemberFiles.MemberFileTypeId = _memberFileTypeId;
			newMemberFiles.MemberFileName = _memberFileName;
			newMemberFiles.MemberFileSearchExtension = _memberFileSearchExtension;
			newMemberFiles.MemberFileContent = _memberFileContent;
			newMemberFiles.MemberFileTitle = _memberFileTitle;
			newMemberFiles.LastModifiedDate = _lastModifiedDate;
			newMemberFiles.DocumentTypeId = _documentTypeId;
			newMemberFiles.MemberFileUrl = _memberFileUrl;
			return newMemberFiles;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MemberFileId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MemberFileId
		{
			get
			{
				return this.entityData.MemberFileId; 
			}
			
			set
			{
				if (this.entityData.MemberFileId == value)
					return;
					
				OnColumnChanging(MemberFilesColumn.MemberFileId, this.entityData.MemberFileId);
				this.entityData.MemberFileId = value;
				this.EntityId.MemberFileId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberFilesColumn.MemberFileId, this.entityData.MemberFileId);
				OnPropertyChanged("MemberFileId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MemberId
		{
			get
			{
				return this.entityData.MemberId; 
			}
			
			set
			{
				if (this.entityData.MemberId == value)
					return;
					
				OnColumnChanging(MemberFilesColumn.MemberId, this.entityData.MemberId);
				this.entityData.MemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberFilesColumn.MemberId, this.entityData.MemberId);
				OnPropertyChanged("MemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberFileTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MemberFileTypeId
		{
			get
			{
				return this.entityData.MemberFileTypeId; 
			}
			
			set
			{
				if (this.entityData.MemberFileTypeId == value)
					return;
					
				OnColumnChanging(MemberFilesColumn.MemberFileTypeId, this.entityData.MemberFileTypeId);
				this.entityData.MemberFileTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberFilesColumn.MemberFileTypeId, this.entityData.MemberFileTypeId);
				OnPropertyChanged("MemberFileTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberFileName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 500)]
		public virtual System.String MemberFileName
		{
			get
			{
				return this.entityData.MemberFileName; 
			}
			
			set
			{
				if (this.entityData.MemberFileName == value)
					return;
					
				OnColumnChanging(MemberFilesColumn.MemberFileName, this.entityData.MemberFileName);
				this.entityData.MemberFileName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberFilesColumn.MemberFileName, this.entityData.MemberFileName);
				OnPropertyChanged("MemberFileName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberFileSearchExtension property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 8)]
		public virtual System.String MemberFileSearchExtension
		{
			get
			{
				return this.entityData.MemberFileSearchExtension; 
			}
			
			set
			{
				if (this.entityData.MemberFileSearchExtension == value)
					return;
					
				OnColumnChanging(MemberFilesColumn.MemberFileSearchExtension, this.entityData.MemberFileSearchExtension);
				this.entityData.MemberFileSearchExtension = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberFilesColumn.MemberFileSearchExtension, this.entityData.MemberFileSearchExtension);
				OnPropertyChanged("MemberFileSearchExtension");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberFileContent property. 
		///		
		/// </summary>
		/// <value>This type is image.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte[] MemberFileContent
		{
			get
			{
				return this.entityData.MemberFileContent; 
			}
			
			set
			{
				if (this.entityData.MemberFileContent == value)
					return;
					
				OnColumnChanging(MemberFilesColumn.MemberFileContent, this.entityData.MemberFileContent);
				this.entityData.MemberFileContent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberFilesColumn.MemberFileContent, this.entityData.MemberFileContent);
				OnPropertyChanged("MemberFileContent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberFileTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 500)]
		public virtual System.String MemberFileTitle
		{
			get
			{
				return this.entityData.MemberFileTitle; 
			}
			
			set
			{
				if (this.entityData.MemberFileTitle == value)
					return;
					
				OnColumnChanging(MemberFilesColumn.MemberFileTitle, this.entityData.MemberFileTitle);
				this.entityData.MemberFileTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberFilesColumn.MemberFileTitle, this.entityData.MemberFileTitle);
				OnPropertyChanged("MemberFileTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastModifiedDate
		{
			get
			{
				return this.entityData.LastModifiedDate; 
			}
			
			set
			{
				if (this.entityData.LastModifiedDate == value)
					return;
					
				OnColumnChanging(MemberFilesColumn.LastModifiedDate, this.entityData.LastModifiedDate);
				this.entityData.LastModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberFilesColumn.LastModifiedDate, this.entityData.LastModifiedDate);
				OnPropertyChanged("LastModifiedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DocumentTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDocumentTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DocumentTypeId
		{
			get
			{
				return this.entityData.DocumentTypeId; 
			}
			
			set
			{
				if (this.entityData.DocumentTypeId == value)
					return;
					
				OnColumnChanging(MemberFilesColumn.DocumentTypeId, this.entityData.DocumentTypeId);
				this.entityData.DocumentTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberFilesColumn.DocumentTypeId, this.entityData.DocumentTypeId);
				OnPropertyChanged("DocumentTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberFileUrl property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String MemberFileUrl
		{
			get
			{
				return this.entityData.MemberFileUrl; 
			}
			
			set
			{
				if (this.entityData.MemberFileUrl == value)
					return;
					
				OnColumnChanging(MemberFilesColumn.MemberFileUrl, this.entityData.MemberFileUrl);
				this.entityData.MemberFileUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberFilesColumn.MemberFileUrl, this.entityData.MemberFileUrl);
				OnPropertyChanged("MemberFileUrl");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Members"/>.
		/// </summary>
		/// <value>The source Members for MemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Members MemberIdSource
      	{
            get { return entityData.MemberIdSource; }
            set { entityData.MemberIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="MemberFileTypes"/>.
		/// </summary>
		/// <value>The source MemberFileTypes for MemberFileTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MemberFileTypes MemberFileTypeIdSource
      	{
            get { return entityData.MemberFileTypeIdSource; }
            set { entityData.MemberFileTypeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MemberFileName", "Member File Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MemberFileName", "Member File Name", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MemberFileSearchExtension", "Member File Search Extension", 8));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MemberFileTitle", "Member File Title"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MemberFileTitle", "Member File Title", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MemberFileUrl", "Member File Url", 1000));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "MemberFiles"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MemberFileID", "MemberID", "MemberFileTypeID", "MemberFileName", "MemberFileSearchExtension", "MemberFileContent", "MemberFileTitle", "LastModifiedDate", "DocumentTypeID", "MemberFileUrl"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MemberFilesEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MemberFiles) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MemberFiles>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MemberFiles);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MemberFiles Entity 
		///</summary>
		protected virtual MemberFiles Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MemberFiles copy = new MemberFiles();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MemberFileId = this.MemberFileId;
				copy.MemberId = this.MemberId;
				copy.MemberFileTypeId = this.MemberFileTypeId;
				copy.MemberFileName = this.MemberFileName;
				copy.MemberFileSearchExtension = this.MemberFileSearchExtension;
				copy.MemberFileContent = this.MemberFileContent;
				copy.MemberFileTitle = this.MemberFileTitle;
				copy.LastModifiedDate = this.LastModifiedDate;
				copy.DocumentTypeId = this.DocumentTypeId;
				copy.MemberFileUrl = this.MemberFileUrl;
			
			if (this.MemberIdSource != null && existingCopies.Contains(this.MemberIdSource))
				copy.MemberIdSource = existingCopies[this.MemberIdSource] as Members;
			else
				copy.MemberIdSource = MakeCopyOf(this.MemberIdSource, existingCopies) as Members;
			if (this.MemberFileTypeIdSource != null && existingCopies.Contains(this.MemberFileTypeIdSource))
				copy.MemberFileTypeIdSource = existingCopies[this.MemberFileTypeIdSource] as MemberFileTypes;
			else
				copy.MemberFileTypeIdSource = MakeCopyOf(this.MemberFileTypeIdSource, existingCopies) as MemberFileTypes;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MemberFiles Entity 
		///</summary>
		public virtual MemberFiles Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MemberFiles Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MemberFiles DeepCopy()
		{
			return EntityHelper.Clone<MemberFiles>(this as MemberFiles);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MemberFilesEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MemberFilesEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MemberFilesEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MemberFilesColumn column)
		{
			switch(column)
			{
					case MemberFilesColumn.MemberFileId:
					return entityData.MemberFileId != _originalData.MemberFileId;
					case MemberFilesColumn.MemberId:
					return entityData.MemberId != _originalData.MemberId;
					case MemberFilesColumn.MemberFileTypeId:
					return entityData.MemberFileTypeId != _originalData.MemberFileTypeId;
					case MemberFilesColumn.MemberFileName:
					return entityData.MemberFileName != _originalData.MemberFileName;
					case MemberFilesColumn.MemberFileSearchExtension:
					return entityData.MemberFileSearchExtension != _originalData.MemberFileSearchExtension;
					case MemberFilesColumn.MemberFileContent:
					return entityData.MemberFileContent != _originalData.MemberFileContent;
					case MemberFilesColumn.MemberFileTitle:
					return entityData.MemberFileTitle != _originalData.MemberFileTitle;
					case MemberFilesColumn.LastModifiedDate:
					return entityData.LastModifiedDate != _originalData.LastModifiedDate;
					case MemberFilesColumn.DocumentTypeId:
					return entityData.DocumentTypeId != _originalData.DocumentTypeId;
					case MemberFilesColumn.MemberFileUrl:
					return entityData.MemberFileUrl != _originalData.MemberFileUrl;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MemberFilesColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MemberFileId != _originalData.MemberFileId;
			result = result || entityData.MemberId != _originalData.MemberId;
			result = result || entityData.MemberFileTypeId != _originalData.MemberFileTypeId;
			result = result || entityData.MemberFileName != _originalData.MemberFileName;
			result = result || entityData.MemberFileSearchExtension != _originalData.MemberFileSearchExtension;
			result = result || entityData.MemberFileContent != _originalData.MemberFileContent;
			result = result || entityData.MemberFileTitle != _originalData.MemberFileTitle;
			result = result || entityData.LastModifiedDate != _originalData.LastModifiedDate;
			result = result || entityData.DocumentTypeId != _originalData.DocumentTypeId;
			result = result || entityData.MemberFileUrl != _originalData.MemberFileUrl;
			return result;
		}	
		
		///<summary>
		///  Returns a MemberFiles Entity with the original data.
		///</summary>
		public MemberFiles GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMemberFiles(
				_originalData.MemberId,
				_originalData.MemberFileTypeId,
				_originalData.MemberFileName,
				_originalData.MemberFileSearchExtension,
				_originalData.MemberFileContent,
				_originalData.MemberFileTitle,
				_originalData.LastModifiedDate,
				_originalData.DocumentTypeId,
				_originalData.MemberFileUrl
				);
				
			return (MemberFiles)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MemberFilesBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MemberFilesBase)
				return ValueEquals(this, (MemberFilesBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MemberFilesBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MemberFileId.GetHashCode() ^ 
					this.MemberId.GetHashCode() ^ 
					this.MemberFileTypeId.GetHashCode() ^ 
					this.MemberFileName.GetHashCode() ^ 
					((this.MemberFileSearchExtension == null) ? string.Empty : this.MemberFileSearchExtension.ToString()).GetHashCode() ^ 
					((this.MemberFileContent == null) ? string.Empty : this.MemberFileContent.ToString()).GetHashCode() ^ 
					this.MemberFileTitle.GetHashCode() ^ 
					this.LastModifiedDate.GetHashCode() ^ 
					((this.DocumentTypeId == null) ? string.Empty : this.DocumentTypeId.ToString()).GetHashCode() ^ 
					((this.MemberFileUrl == null) ? string.Empty : this.MemberFileUrl.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MemberFilesBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MemberFilesBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MemberFilesBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MemberFilesBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MemberFilesBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MemberFilesBase Object1, MemberFilesBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MemberFileId != Object2.MemberFileId)
				equal = false;
			if (Object1.MemberId != Object2.MemberId)
				equal = false;
			if (Object1.MemberFileTypeId != Object2.MemberFileTypeId)
				equal = false;
			if (Object1.MemberFileName != Object2.MemberFileName)
				equal = false;
			if ( Object1.MemberFileSearchExtension != null && Object2.MemberFileSearchExtension != null )
			{
				if (Object1.MemberFileSearchExtension != Object2.MemberFileSearchExtension)
					equal = false;
			}
			else if (Object1.MemberFileSearchExtension == null ^ Object2.MemberFileSearchExtension == null )
			{
				equal = false;
			}
			if ( Object1.MemberFileContent != null && Object2.MemberFileContent != null )
			{
				if (Object1.MemberFileContent != Object2.MemberFileContent)
					equal = false;
			}
			else if (Object1.MemberFileContent == null ^ Object2.MemberFileContent == null )
			{
				equal = false;
			}
			if (Object1.MemberFileTitle != Object2.MemberFileTitle)
				equal = false;
			if (Object1.LastModifiedDate != Object2.LastModifiedDate)
				equal = false;
			if ( Object1.DocumentTypeId != null && Object2.DocumentTypeId != null )
			{
				if (Object1.DocumentTypeId != Object2.DocumentTypeId)
					equal = false;
			}
			else if (Object1.DocumentTypeId == null ^ Object2.DocumentTypeId == null )
			{
				equal = false;
			}
			if ( Object1.MemberFileUrl != null && Object2.MemberFileUrl != null )
			{
				if (Object1.MemberFileUrl != Object2.MemberFileUrl)
					equal = false;
			}
			else if (Object1.MemberFileUrl == null ^ Object2.MemberFileUrl == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MemberFilesBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MemberFilesComparer GetComparer()
        {
            return new MemberFilesComparer();
        }
        */

        // Comparer delegates back to MemberFiles
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MemberFiles rhs, MemberFilesColumn which)
        {
            switch (which)
            {
            	
            	
            	case MemberFilesColumn.MemberFileId:
            		return this.MemberFileId.CompareTo(rhs.MemberFileId);
            		
            		                 
            	
            	
            	case MemberFilesColumn.MemberId:
            		return this.MemberId.CompareTo(rhs.MemberId);
            		
            		                 
            	
            	
            	case MemberFilesColumn.MemberFileTypeId:
            		return this.MemberFileTypeId.CompareTo(rhs.MemberFileTypeId);
            		
            		                 
            	
            	
            	case MemberFilesColumn.MemberFileName:
            		return this.MemberFileName.CompareTo(rhs.MemberFileName);
            		
            		                 
            	
            	
            	case MemberFilesColumn.MemberFileSearchExtension:
            		return this.MemberFileSearchExtension.CompareTo(rhs.MemberFileSearchExtension);
            		
            		                 
            	
            		                 
            	
            	
            	case MemberFilesColumn.MemberFileTitle:
            		return this.MemberFileTitle.CompareTo(rhs.MemberFileTitle);
            		
            		                 
            	
            	
            	case MemberFilesColumn.LastModifiedDate:
            		return this.LastModifiedDate.CompareTo(rhs.LastModifiedDate);
            		
            		                 
            	
            	
            	case MemberFilesColumn.DocumentTypeId:
            		return this.DocumentTypeId.Value.CompareTo(rhs.DocumentTypeId.Value);
            		
            		                 
            	
            	
            	case MemberFilesColumn.MemberFileUrl:
            		return this.MemberFileUrl.CompareTo(rhs.MemberFileUrl);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MemberFilesKey> Members
		
		// member variable for the EntityId property
		private MemberFilesKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MemberFilesKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MemberFilesKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MemberFiles")
					.Append("|").Append( this.MemberFileId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- MemberFileId: {0}{10}- MemberId: {1}{10}- MemberFileTypeId: {2}{10}- MemberFileName: {3}{10}- MemberFileSearchExtension: {4}{10}- MemberFileContent: {5}{10}- MemberFileTitle: {6}{10}- LastModifiedDate: {7}{10}- DocumentTypeId: {8}{10}- MemberFileUrl: {9}{10}{12}", 
				this.MemberFileId,
				this.MemberId,
				this.MemberFileTypeId,
				this.MemberFileName,
				(this.MemberFileSearchExtension == null) ? string.Empty : this.MemberFileSearchExtension.ToString(),
				(this.MemberFileContent == null) ? string.Empty : this.MemberFileContent.ToString(),
				this.MemberFileTitle,
				this.LastModifiedDate,
				(this.DocumentTypeId == null) ? string.Empty : this.DocumentTypeId.ToString(),
				(this.MemberFileUrl == null) ? string.Empty : this.MemberFileUrl.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'MemberFiles' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MemberFilesEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MemberFileID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "MemberFiles"</remarks>
		public System.Int32 MemberFileId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// MemberID : 
		/// </summary>
		public System.Int32		  MemberId = (int)0;
		
		/// <summary>
		/// MemberFileTypeID : 
		/// </summary>
		public System.Int32		  MemberFileTypeId = (int)0;
		
		/// <summary>
		/// MemberFileName : 
		/// </summary>
		public System.String		  MemberFileName = string.Empty;
		
		/// <summary>
		/// MemberFileSearchExtension : 
		/// </summary>
		public System.String		  MemberFileSearchExtension = null;
		
		/// <summary>
		/// MemberFileContent : 
		/// </summary>
		public System.Byte[]		  MemberFileContent = null;
		
		/// <summary>
		/// MemberFileTitle : 
		/// </summary>
		public System.String		  MemberFileTitle = string.Empty;
		
		/// <summary>
		/// LastModifiedDate : 
		/// </summary>
		public System.DateTime		  LastModifiedDate = DateTime.MinValue;
		
		/// <summary>
		/// DocumentTypeID : 
		/// </summary>
		public System.Int32?		  DocumentTypeId = null;
		
		/// <summary>
		/// MemberFileUrl : 
		/// </summary>
		public System.String		  MemberFileUrl = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Members _memberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Members"/>.
		/// </summary>
		/// <value>The source Members for MemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Members MemberIdSource
      	{
            get { return this._memberIdSource; }
            set { this._memberIdSource = value; }
      	}
		private MemberFileTypes _memberFileTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="MemberFileTypes"/>.
		/// </summary>
		/// <value>The source MemberFileTypes for MemberFileTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual MemberFileTypes MemberFileTypeIdSource
      	{
            get { return this._memberFileTypeIdSource; }
            set { this._memberFileTypeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MemberFilesEntityData _tmp = new MemberFilesEntityData();
						
			_tmp.MemberFileId = this.MemberFileId;
			
			_tmp.MemberId = this.MemberId;
			_tmp.MemberFileTypeId = this.MemberFileTypeId;
			_tmp.MemberFileName = this.MemberFileName;
			_tmp.MemberFileSearchExtension = this.MemberFileSearchExtension;
			_tmp.MemberFileContent = this.MemberFileContent;
			_tmp.MemberFileTitle = this.MemberFileTitle;
			_tmp.LastModifiedDate = this.LastModifiedDate;
			_tmp.DocumentTypeId = this.DocumentTypeId;
			_tmp.MemberFileUrl = this.MemberFileUrl;
			
			#region Source Parent Composite Entities
			if (this.MemberIdSource != null)
				_tmp.MemberIdSource = MakeCopyOf(this.MemberIdSource) as Members;
			if (this.MemberFileTypeIdSource != null)
				_tmp.MemberFileTypeIdSource = MakeCopyOf(this.MemberFileTypeIdSource) as MemberFileTypes;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MemberFilesEntityData _tmp = new MemberFilesEntityData();
						
			_tmp.MemberFileId = this.MemberFileId;
			
			_tmp.MemberId = this.MemberId;
			_tmp.MemberFileTypeId = this.MemberFileTypeId;
			_tmp.MemberFileName = this.MemberFileName;
			_tmp.MemberFileSearchExtension = this.MemberFileSearchExtension;
			_tmp.MemberFileContent = this.MemberFileContent;
			_tmp.MemberFileTitle = this.MemberFileTitle;
			_tmp.LastModifiedDate = this.LastModifiedDate;
			_tmp.DocumentTypeId = this.DocumentTypeId;
			_tmp.MemberFileUrl = this.MemberFileUrl;
			
			#region Source Parent Composite Entities
			if (this.MemberIdSource != null && existingCopies.Contains(this.MemberIdSource))
				_tmp.MemberIdSource = existingCopies[this.MemberIdSource] as Members;
			else
				_tmp.MemberIdSource = MakeCopyOf(this.MemberIdSource, existingCopies) as Members;
			if (this.MemberFileTypeIdSource != null && existingCopies.Contains(this.MemberFileTypeIdSource))
				_tmp.MemberFileTypeIdSource = existingCopies[this.MemberFileTypeIdSource] as MemberFileTypes;
			else
				_tmp.MemberFileTypeIdSource = MakeCopyOf(this.MemberFileTypeIdSource, existingCopies) as MemberFileTypes;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberFilesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MemberFilesColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberFilesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MemberFilesColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberFilesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MemberFilesColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MemberFilesEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MemberFilesEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberFilesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MemberFilesColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MemberFilesEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MemberFilesEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MemberFilesEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MemberFiles"/> object.
	/// </remarks>
	public class MemberFilesEventArgs : System.EventArgs
	{
		private MemberFilesColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MemberFilesEventArgs class.
		///</summary>
		public MemberFilesEventArgs(MemberFilesColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MemberFilesEventArgs class.
		///</summary>
		public MemberFilesEventArgs(MemberFilesColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MemberFilesColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MemberFilesColumn" />
		public MemberFilesColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MemberFiles related events.
	///</summary>
	public delegate void MemberFilesEventHandler(object sender, MemberFilesEventArgs e);
	
	#region MemberFilesComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MemberFilesComparer : System.Collections.Generic.IComparer<MemberFiles>
	{
		MemberFilesColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MemberFilesComparer"/> class.
        /// </summary>
		public MemberFilesComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MemberFilesComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MemberFilesComparer(MemberFilesColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="MemberFiles"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="MemberFiles"/> to compare.</param>
        /// <param name="b">The second <c>MemberFiles</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MemberFiles a, MemberFiles b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MemberFiles entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MemberFiles a, MemberFiles b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MemberFilesColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MemberFilesKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MemberFiles"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MemberFilesKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MemberFilesKey class.
		/// </summary>
		public MemberFilesKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MemberFilesKey class.
		/// </summary>
		public MemberFilesKey(MemberFilesBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MemberFileId = entity.MemberFileId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MemberFilesKey class.
		/// </summary>
		public MemberFilesKey(System.Int32 _memberFileId)
		{
			#region Init Properties

			this.MemberFileId = _memberFileId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MemberFilesBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MemberFilesBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MemberFileId property
		private System.Int32 _memberFileId;
		
		/// <summary>
		/// Gets or sets the MemberFileId property.
		/// </summary>
		public System.Int32 MemberFileId
		{
			get { return _memberFileId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MemberFileId = value;
				
				_memberFileId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MemberFileId = ( values["MemberFileId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MemberFileId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MemberFileId", MemberFileId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MemberFileId: {0}{1}",
								MemberFileId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MemberFilesColumn Enum
	
	/// <summary>
	/// Enumerate the MemberFiles columns.
	/// </summary>
	[Serializable]
	public enum MemberFilesColumn : int
	{
		/// <summary>
		/// MemberFileId : 
		/// </summary>
		[EnumTextValue("MemberFileID")]
		[ColumnEnum("MemberFileID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MemberFileId = 1,
		/// <summary>
		/// MemberId : 
		/// </summary>
		[EnumTextValue("MemberID")]
		[ColumnEnum("MemberID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MemberId = 2,
		/// <summary>
		/// MemberFileTypeId : 
		/// </summary>
		[EnumTextValue("MemberFileTypeID")]
		[ColumnEnum("MemberFileTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MemberFileTypeId = 3,
		/// <summary>
		/// MemberFileName : 
		/// </summary>
		[EnumTextValue("MemberFileName")]
		[ColumnEnum("MemberFileName", typeof(System.String), System.Data.DbType.String, false, false, false, 500)]
		MemberFileName = 4,
		/// <summary>
		/// MemberFileSearchExtension : 
		/// </summary>
		[EnumTextValue("MemberFileSearchExtension")]
		[ColumnEnum("MemberFileSearchExtension", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 8)]
		MemberFileSearchExtension = 5,
		/// <summary>
		/// MemberFileContent : 
		/// </summary>
		[EnumTextValue("MemberFileContent")]
		[ColumnEnum("MemberFileContent", typeof(System.Byte[]), System.Data.DbType.Binary, false, false, true)]
		MemberFileContent = 6,
		/// <summary>
		/// MemberFileTitle : 
		/// </summary>
		[EnumTextValue("MemberFileTitle")]
		[ColumnEnum("MemberFileTitle", typeof(System.String), System.Data.DbType.String, false, false, false, 500)]
		MemberFileTitle = 7,
		/// <summary>
		/// LastModifiedDate : 
		/// </summary>
		[EnumTextValue("LastModifiedDate")]
		[ColumnEnum("LastModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastModifiedDate = 8,
		/// <summary>
		/// DocumentTypeId : 
		/// </summary>
		[EnumTextValue("DocumentTypeID")]
		[ColumnEnum("DocumentTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DocumentTypeId = 9,
		/// <summary>
		/// MemberFileUrl : 
		/// </summary>
		[EnumTextValue("MemberFileUrl")]
		[ColumnEnum("MemberFileUrl", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		MemberFileUrl = 10
	}//End enum

	#endregion MemberFilesColumn Enum

} // end namespace

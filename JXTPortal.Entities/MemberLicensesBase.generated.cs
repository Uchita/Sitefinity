
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file MemberLicenses.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'MemberLicenses' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MemberLicensesBase : EntityBase, IMemberLicenses, IEntityId<MemberLicensesKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MemberLicensesEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MemberLicensesEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MemberLicensesEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MemberLicenses> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MemberLicensesEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MemberLicensesEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MemberLicensesBase"/> instance.
		///</summary>
		public MemberLicensesBase()
		{
			this.entityData = new MemberLicensesEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MemberLicensesBase"/> instance.
		///</summary>
		///<param name="_memberId"></param>
		///<param name="_memberLicenseName"></param>
		///<param name="_licenseType"></param>
		///<param name="_issueDate"></param>
		///<param name="_expiryDate"></param>
		///<param name="_countryId"></param>
		///<param name="_state"></param>
		///<param name="_doesNotExpire"></param>
		///<param name="_lastModifiedDate"></param>
		public MemberLicensesBase(System.Int32? _memberId, System.String _memberLicenseName, 
			System.String _licenseType, System.DateTime? _issueDate, System.DateTime? _expiryDate, 
			System.Int32? _countryId, System.String _state, System.Boolean? _doesNotExpire, 
			System.DateTime? _lastModifiedDate)
		{
			this.entityData = new MemberLicensesEntityData();
			this.backupData = null;

			this.MemberId = _memberId;
			this.MemberLicenseName = _memberLicenseName;
			this.LicenseType = _licenseType;
			this.IssueDate = _issueDate;
			this.ExpiryDate = _expiryDate;
			this.CountryId = _countryId;
			this.State = _state;
			this.DoesNotExpire = _doesNotExpire;
			this.LastModifiedDate = _lastModifiedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MemberLicenses"/> instance.
		///</summary>
		///<param name="_memberId"></param>
		///<param name="_memberLicenseName"></param>
		///<param name="_licenseType"></param>
		///<param name="_issueDate"></param>
		///<param name="_expiryDate"></param>
		///<param name="_countryId"></param>
		///<param name="_state"></param>
		///<param name="_doesNotExpire"></param>
		///<param name="_lastModifiedDate"></param>
		public static MemberLicenses CreateMemberLicenses(System.Int32? _memberId, System.String _memberLicenseName, 
			System.String _licenseType, System.DateTime? _issueDate, System.DateTime? _expiryDate, 
			System.Int32? _countryId, System.String _state, System.Boolean? _doesNotExpire, 
			System.DateTime? _lastModifiedDate)
		{
			MemberLicenses newMemberLicenses = new MemberLicenses();
			newMemberLicenses.MemberId = _memberId;
			newMemberLicenses.MemberLicenseName = _memberLicenseName;
			newMemberLicenses.LicenseType = _licenseType;
			newMemberLicenses.IssueDate = _issueDate;
			newMemberLicenses.ExpiryDate = _expiryDate;
			newMemberLicenses.CountryId = _countryId;
			newMemberLicenses.State = _state;
			newMemberLicenses.DoesNotExpire = _doesNotExpire;
			newMemberLicenses.LastModifiedDate = _lastModifiedDate;
			return newMemberLicenses;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MemberLicenseId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MemberLicenseId
		{
			get
			{
				return this.entityData.MemberLicenseId; 
			}
			
			set
			{
				if (this.entityData.MemberLicenseId == value)
					return;
					
				OnColumnChanging(MemberLicensesColumn.MemberLicenseId, this.entityData.MemberLicenseId);
				this.entityData.MemberLicenseId = value;
				this.EntityId.MemberLicenseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberLicensesColumn.MemberLicenseId, this.entityData.MemberLicenseId);
				OnPropertyChanged("MemberLicenseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMemberIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MemberId
		{
			get
			{
				return this.entityData.MemberId; 
			}
			
			set
			{
				if (this.entityData.MemberId == value)
					return;
					
				OnColumnChanging(MemberLicensesColumn.MemberId, this.entityData.MemberId);
				this.entityData.MemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberLicensesColumn.MemberId, this.entityData.MemberId);
				OnPropertyChanged("MemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberLicenseName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String MemberLicenseName
		{
			get
			{
				return this.entityData.MemberLicenseName; 
			}
			
			set
			{
				if (this.entityData.MemberLicenseName == value)
					return;
					
				OnColumnChanging(MemberLicensesColumn.MemberLicenseName, this.entityData.MemberLicenseName);
				this.entityData.MemberLicenseName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberLicensesColumn.MemberLicenseName, this.entityData.MemberLicenseName);
				OnPropertyChanged("MemberLicenseName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LicenseType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String LicenseType
		{
			get
			{
				return this.entityData.LicenseType; 
			}
			
			set
			{
				if (this.entityData.LicenseType == value)
					return;
					
				OnColumnChanging(MemberLicensesColumn.LicenseType, this.entityData.LicenseType);
				this.entityData.LicenseType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberLicensesColumn.LicenseType, this.entityData.LicenseType);
				OnPropertyChanged("LicenseType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IssueDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsIssueDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? IssueDate
		{
			get
			{
				return this.entityData.IssueDate; 
			}
			
			set
			{
				if (this.entityData.IssueDate == value)
					return;
					
				OnColumnChanging(MemberLicensesColumn.IssueDate, this.entityData.IssueDate);
				this.entityData.IssueDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberLicensesColumn.IssueDate, this.entityData.IssueDate);
				OnPropertyChanged("IssueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpiryDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExpiryDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExpiryDate
		{
			get
			{
				return this.entityData.ExpiryDate; 
			}
			
			set
			{
				if (this.entityData.ExpiryDate == value)
					return;
					
				OnColumnChanging(MemberLicensesColumn.ExpiryDate, this.entityData.ExpiryDate);
				this.entityData.ExpiryDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberLicensesColumn.ExpiryDate, this.entityData.ExpiryDate);
				OnPropertyChanged("ExpiryDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CountryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCountryIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CountryId
		{
			get
			{
				return this.entityData.CountryId; 
			}
			
			set
			{
				if (this.entityData.CountryId == value)
					return;
					
				OnColumnChanging(MemberLicensesColumn.CountryId, this.entityData.CountryId);
				this.entityData.CountryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberLicensesColumn.CountryId, this.entityData.CountryId);
				OnPropertyChanged("CountryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the State property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String State
		{
			get
			{
				return this.entityData.State; 
			}
			
			set
			{
				if (this.entityData.State == value)
					return;
					
				OnColumnChanging(MemberLicensesColumn.State, this.entityData.State);
				this.entityData.State = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberLicensesColumn.State, this.entityData.State);
				OnPropertyChanged("State");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DoesNotExpire property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsDoesNotExpireNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? DoesNotExpire
		{
			get
			{
				return this.entityData.DoesNotExpire; 
			}
			
			set
			{
				if (this.entityData.DoesNotExpire == value)
					return;
					
				OnColumnChanging(MemberLicensesColumn.DoesNotExpire, this.entityData.DoesNotExpire);
				this.entityData.DoesNotExpire = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberLicensesColumn.DoesNotExpire, this.entityData.DoesNotExpire);
				OnPropertyChanged("DoesNotExpire");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModifiedDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModifiedDate
		{
			get
			{
				return this.entityData.LastModifiedDate; 
			}
			
			set
			{
				if (this.entityData.LastModifiedDate == value)
					return;
					
				OnColumnChanging(MemberLicensesColumn.LastModifiedDate, this.entityData.LastModifiedDate);
				this.entityData.LastModifiedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberLicensesColumn.LastModifiedDate, this.entityData.LastModifiedDate);
				OnPropertyChanged("LastModifiedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Members"/>.
		/// </summary>
		/// <value>The source Members for MemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Members MemberIdSource
      	{
            get { return entityData.MemberIdSource; }
            set { entityData.MemberIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MemberLicenseName", "Member License Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LicenseType", "License Type", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("State", "State", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "MemberLicenses"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MemberLicenseID", "MemberID", "MemberLicenseName", "LicenseType", "IssueDate", "ExpiryDate", "CountryID", "State", "DoesNotExpire", "LastModifiedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MemberLicensesEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MemberLicenses) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MemberLicenses>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MemberLicenses);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MemberLicenses Entity 
		///</summary>
		protected virtual MemberLicenses Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MemberLicenses copy = new MemberLicenses();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MemberLicenseId = this.MemberLicenseId;
				copy.MemberId = this.MemberId;
				copy.MemberLicenseName = this.MemberLicenseName;
				copy.LicenseType = this.LicenseType;
				copy.IssueDate = this.IssueDate;
				copy.ExpiryDate = this.ExpiryDate;
				copy.CountryId = this.CountryId;
				copy.State = this.State;
				copy.DoesNotExpire = this.DoesNotExpire;
				copy.LastModifiedDate = this.LastModifiedDate;
			
			if (this.MemberIdSource != null && existingCopies.Contains(this.MemberIdSource))
				copy.MemberIdSource = existingCopies[this.MemberIdSource] as Members;
			else
				copy.MemberIdSource = MakeCopyOf(this.MemberIdSource, existingCopies) as Members;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MemberLicenses Entity 
		///</summary>
		public virtual MemberLicenses Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MemberLicenses Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MemberLicenses DeepCopy()
		{
			return EntityHelper.Clone<MemberLicenses>(this as MemberLicenses);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MemberLicensesEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MemberLicensesEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MemberLicensesEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MemberLicensesColumn column)
		{
			switch(column)
			{
					case MemberLicensesColumn.MemberLicenseId:
					return entityData.MemberLicenseId != _originalData.MemberLicenseId;
					case MemberLicensesColumn.MemberId:
					return entityData.MemberId != _originalData.MemberId;
					case MemberLicensesColumn.MemberLicenseName:
					return entityData.MemberLicenseName != _originalData.MemberLicenseName;
					case MemberLicensesColumn.LicenseType:
					return entityData.LicenseType != _originalData.LicenseType;
					case MemberLicensesColumn.IssueDate:
					return entityData.IssueDate != _originalData.IssueDate;
					case MemberLicensesColumn.ExpiryDate:
					return entityData.ExpiryDate != _originalData.ExpiryDate;
					case MemberLicensesColumn.CountryId:
					return entityData.CountryId != _originalData.CountryId;
					case MemberLicensesColumn.State:
					return entityData.State != _originalData.State;
					case MemberLicensesColumn.DoesNotExpire:
					return entityData.DoesNotExpire != _originalData.DoesNotExpire;
					case MemberLicensesColumn.LastModifiedDate:
					return entityData.LastModifiedDate != _originalData.LastModifiedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MemberLicensesColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MemberLicenseId != _originalData.MemberLicenseId;
			result = result || entityData.MemberId != _originalData.MemberId;
			result = result || entityData.MemberLicenseName != _originalData.MemberLicenseName;
			result = result || entityData.LicenseType != _originalData.LicenseType;
			result = result || entityData.IssueDate != _originalData.IssueDate;
			result = result || entityData.ExpiryDate != _originalData.ExpiryDate;
			result = result || entityData.CountryId != _originalData.CountryId;
			result = result || entityData.State != _originalData.State;
			result = result || entityData.DoesNotExpire != _originalData.DoesNotExpire;
			result = result || entityData.LastModifiedDate != _originalData.LastModifiedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a MemberLicenses Entity with the original data.
		///</summary>
		public MemberLicenses GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMemberLicenses(
				_originalData.MemberId,
				_originalData.MemberLicenseName,
				_originalData.LicenseType,
				_originalData.IssueDate,
				_originalData.ExpiryDate,
				_originalData.CountryId,
				_originalData.State,
				_originalData.DoesNotExpire,
				_originalData.LastModifiedDate
				);
				
			return (MemberLicenses)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MemberLicensesBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MemberLicensesBase)
				return ValueEquals(this, (MemberLicensesBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MemberLicensesBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MemberLicenseId.GetHashCode() ^ 
					((this.MemberId == null) ? string.Empty : this.MemberId.ToString()).GetHashCode() ^ 
					((this.MemberLicenseName == null) ? string.Empty : this.MemberLicenseName.ToString()).GetHashCode() ^ 
					((this.LicenseType == null) ? string.Empty : this.LicenseType.ToString()).GetHashCode() ^ 
					((this.IssueDate == null) ? string.Empty : this.IssueDate.ToString()).GetHashCode() ^ 
					((this.ExpiryDate == null) ? string.Empty : this.ExpiryDate.ToString()).GetHashCode() ^ 
					((this.CountryId == null) ? string.Empty : this.CountryId.ToString()).GetHashCode() ^ 
					((this.State == null) ? string.Empty : this.State.ToString()).GetHashCode() ^ 
					((this.DoesNotExpire == null) ? string.Empty : this.DoesNotExpire.ToString()).GetHashCode() ^ 
					((this.LastModifiedDate == null) ? string.Empty : this.LastModifiedDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MemberLicensesBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MemberLicensesBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MemberLicensesBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MemberLicensesBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MemberLicensesBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MemberLicensesBase Object1, MemberLicensesBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MemberLicenseId != Object2.MemberLicenseId)
				equal = false;
			if ( Object1.MemberId != null && Object2.MemberId != null )
			{
				if (Object1.MemberId != Object2.MemberId)
					equal = false;
			}
			else if (Object1.MemberId == null ^ Object2.MemberId == null )
			{
				equal = false;
			}
			if ( Object1.MemberLicenseName != null && Object2.MemberLicenseName != null )
			{
				if (Object1.MemberLicenseName != Object2.MemberLicenseName)
					equal = false;
			}
			else if (Object1.MemberLicenseName == null ^ Object2.MemberLicenseName == null )
			{
				equal = false;
			}
			if ( Object1.LicenseType != null && Object2.LicenseType != null )
			{
				if (Object1.LicenseType != Object2.LicenseType)
					equal = false;
			}
			else if (Object1.LicenseType == null ^ Object2.LicenseType == null )
			{
				equal = false;
			}
			if ( Object1.IssueDate != null && Object2.IssueDate != null )
			{
				if (Object1.IssueDate != Object2.IssueDate)
					equal = false;
			}
			else if (Object1.IssueDate == null ^ Object2.IssueDate == null )
			{
				equal = false;
			}
			if ( Object1.ExpiryDate != null && Object2.ExpiryDate != null )
			{
				if (Object1.ExpiryDate != Object2.ExpiryDate)
					equal = false;
			}
			else if (Object1.ExpiryDate == null ^ Object2.ExpiryDate == null )
			{
				equal = false;
			}
			if ( Object1.CountryId != null && Object2.CountryId != null )
			{
				if (Object1.CountryId != Object2.CountryId)
					equal = false;
			}
			else if (Object1.CountryId == null ^ Object2.CountryId == null )
			{
				equal = false;
			}
			if ( Object1.State != null && Object2.State != null )
			{
				if (Object1.State != Object2.State)
					equal = false;
			}
			else if (Object1.State == null ^ Object2.State == null )
			{
				equal = false;
			}
			if ( Object1.DoesNotExpire != null && Object2.DoesNotExpire != null )
			{
				if (Object1.DoesNotExpire != Object2.DoesNotExpire)
					equal = false;
			}
			else if (Object1.DoesNotExpire == null ^ Object2.DoesNotExpire == null )
			{
				equal = false;
			}
			if ( Object1.LastModifiedDate != null && Object2.LastModifiedDate != null )
			{
				if (Object1.LastModifiedDate != Object2.LastModifiedDate)
					equal = false;
			}
			else if (Object1.LastModifiedDate == null ^ Object2.LastModifiedDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MemberLicensesBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MemberLicensesComparer GetComparer()
        {
            return new MemberLicensesComparer();
        }
        */

        // Comparer delegates back to MemberLicenses
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MemberLicenses rhs, MemberLicensesColumn which)
        {
            switch (which)
            {
            	
            	
            	case MemberLicensesColumn.MemberLicenseId:
            		return this.MemberLicenseId.CompareTo(rhs.MemberLicenseId);
            		
            		                 
            	
            	
            	case MemberLicensesColumn.MemberId:
            		return this.MemberId.Value.CompareTo(rhs.MemberId.Value);
            		
            		                 
            	
            	
            	case MemberLicensesColumn.MemberLicenseName:
            		return this.MemberLicenseName.CompareTo(rhs.MemberLicenseName);
            		
            		                 
            	
            	
            	case MemberLicensesColumn.LicenseType:
            		return this.LicenseType.CompareTo(rhs.LicenseType);
            		
            		                 
            	
            	
            	case MemberLicensesColumn.IssueDate:
            		return this.IssueDate.Value.CompareTo(rhs.IssueDate.Value);
            		
            		                 
            	
            	
            	case MemberLicensesColumn.ExpiryDate:
            		return this.ExpiryDate.Value.CompareTo(rhs.ExpiryDate.Value);
            		
            		                 
            	
            	
            	case MemberLicensesColumn.CountryId:
            		return this.CountryId.Value.CompareTo(rhs.CountryId.Value);
            		
            		                 
            	
            	
            	case MemberLicensesColumn.State:
            		return this.State.CompareTo(rhs.State);
            		
            		                 
            	
            	
            	case MemberLicensesColumn.DoesNotExpire:
            		return this.DoesNotExpire.Value.CompareTo(rhs.DoesNotExpire.Value);
            		
            		                 
            	
            	
            	case MemberLicensesColumn.LastModifiedDate:
            		return this.LastModifiedDate.Value.CompareTo(rhs.LastModifiedDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MemberLicensesKey> Members
		
		// member variable for the EntityId property
		private MemberLicensesKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MemberLicensesKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MemberLicensesKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MemberLicenses")
					.Append("|").Append( this.MemberLicenseId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- MemberLicenseId: {0}{10}- MemberId: {1}{10}- MemberLicenseName: {2}{10}- LicenseType: {3}{10}- IssueDate: {4}{10}- ExpiryDate: {5}{10}- CountryId: {6}{10}- State: {7}{10}- DoesNotExpire: {8}{10}- LastModifiedDate: {9}{10}{12}", 
				this.MemberLicenseId,
				(this.MemberId == null) ? string.Empty : this.MemberId.ToString(),
				(this.MemberLicenseName == null) ? string.Empty : this.MemberLicenseName.ToString(),
				(this.LicenseType == null) ? string.Empty : this.LicenseType.ToString(),
				(this.IssueDate == null) ? string.Empty : this.IssueDate.ToString(),
				(this.ExpiryDate == null) ? string.Empty : this.ExpiryDate.ToString(),
				(this.CountryId == null) ? string.Empty : this.CountryId.ToString(),
				(this.State == null) ? string.Empty : this.State.ToString(),
				(this.DoesNotExpire == null) ? string.Empty : this.DoesNotExpire.ToString(),
				(this.LastModifiedDate == null) ? string.Empty : this.LastModifiedDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'MemberLicenses' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MemberLicensesEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MemberLicenseID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "MemberLicenses"</remarks>
		public System.Int32 MemberLicenseId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// MemberID : 
		/// </summary>
		public System.Int32?		  MemberId = null;
		
		/// <summary>
		/// MemberLicenseName : 
		/// </summary>
		public System.String		  MemberLicenseName = null;
		
		/// <summary>
		/// LicenseType : 
		/// </summary>
		public System.String		  LicenseType = null;
		
		/// <summary>
		/// IssueDate : 
		/// </summary>
		public System.DateTime?		  IssueDate = null;
		
		/// <summary>
		/// ExpiryDate : 
		/// </summary>
		public System.DateTime?		  ExpiryDate = null;
		
		/// <summary>
		/// CountryID : 
		/// </summary>
		public System.Int32?		  CountryId = null;
		
		/// <summary>
		/// State : 
		/// </summary>
		public System.String		  State = null;
		
		/// <summary>
		/// DoesNotExpire : 
		/// </summary>
		public System.Boolean?		  DoesNotExpire = null;
		
		/// <summary>
		/// LastModifiedDate : 
		/// </summary>
		public System.DateTime?		  LastModifiedDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Members _memberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Members"/>.
		/// </summary>
		/// <value>The source Members for MemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Members MemberIdSource
      	{
            get { return this._memberIdSource; }
            set { this._memberIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MemberLicensesEntityData _tmp = new MemberLicensesEntityData();
						
			_tmp.MemberLicenseId = this.MemberLicenseId;
			
			_tmp.MemberId = this.MemberId;
			_tmp.MemberLicenseName = this.MemberLicenseName;
			_tmp.LicenseType = this.LicenseType;
			_tmp.IssueDate = this.IssueDate;
			_tmp.ExpiryDate = this.ExpiryDate;
			_tmp.CountryId = this.CountryId;
			_tmp.State = this.State;
			_tmp.DoesNotExpire = this.DoesNotExpire;
			_tmp.LastModifiedDate = this.LastModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.MemberIdSource != null)
				_tmp.MemberIdSource = MakeCopyOf(this.MemberIdSource) as Members;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MemberLicensesEntityData _tmp = new MemberLicensesEntityData();
						
			_tmp.MemberLicenseId = this.MemberLicenseId;
			
			_tmp.MemberId = this.MemberId;
			_tmp.MemberLicenseName = this.MemberLicenseName;
			_tmp.LicenseType = this.LicenseType;
			_tmp.IssueDate = this.IssueDate;
			_tmp.ExpiryDate = this.ExpiryDate;
			_tmp.CountryId = this.CountryId;
			_tmp.State = this.State;
			_tmp.DoesNotExpire = this.DoesNotExpire;
			_tmp.LastModifiedDate = this.LastModifiedDate;
			
			#region Source Parent Composite Entities
			if (this.MemberIdSource != null && existingCopies.Contains(this.MemberIdSource))
				_tmp.MemberIdSource = existingCopies[this.MemberIdSource] as Members;
			else
				_tmp.MemberIdSource = MakeCopyOf(this.MemberIdSource, existingCopies) as Members;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberLicensesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MemberLicensesColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberLicensesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MemberLicensesColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberLicensesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MemberLicensesColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MemberLicensesEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MemberLicensesEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberLicensesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MemberLicensesColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MemberLicensesEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MemberLicensesEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MemberLicensesEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MemberLicenses"/> object.
	/// </remarks>
	public class MemberLicensesEventArgs : System.EventArgs
	{
		private MemberLicensesColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MemberLicensesEventArgs class.
		///</summary>
		public MemberLicensesEventArgs(MemberLicensesColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MemberLicensesEventArgs class.
		///</summary>
		public MemberLicensesEventArgs(MemberLicensesColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MemberLicensesColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MemberLicensesColumn" />
		public MemberLicensesColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MemberLicenses related events.
	///</summary>
	public delegate void MemberLicensesEventHandler(object sender, MemberLicensesEventArgs e);
	
	#region MemberLicensesComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MemberLicensesComparer : System.Collections.Generic.IComparer<MemberLicenses>
	{
		MemberLicensesColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MemberLicensesComparer"/> class.
        /// </summary>
		public MemberLicensesComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MemberLicensesComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MemberLicensesComparer(MemberLicensesColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="MemberLicenses"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="MemberLicenses"/> to compare.</param>
        /// <param name="b">The second <c>MemberLicenses</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MemberLicenses a, MemberLicenses b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MemberLicenses entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MemberLicenses a, MemberLicenses b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MemberLicensesColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MemberLicensesKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MemberLicenses"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MemberLicensesKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MemberLicensesKey class.
		/// </summary>
		public MemberLicensesKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MemberLicensesKey class.
		/// </summary>
		public MemberLicensesKey(MemberLicensesBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MemberLicenseId = entity.MemberLicenseId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MemberLicensesKey class.
		/// </summary>
		public MemberLicensesKey(System.Int32 _memberLicenseId)
		{
			#region Init Properties

			this.MemberLicenseId = _memberLicenseId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MemberLicensesBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MemberLicensesBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MemberLicenseId property
		private System.Int32 _memberLicenseId;
		
		/// <summary>
		/// Gets or sets the MemberLicenseId property.
		/// </summary>
		public System.Int32 MemberLicenseId
		{
			get { return _memberLicenseId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MemberLicenseId = value;
				
				_memberLicenseId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MemberLicenseId = ( values["MemberLicenseId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MemberLicenseId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MemberLicenseId", MemberLicenseId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MemberLicenseId: {0}{1}",
								MemberLicenseId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MemberLicensesColumn Enum
	
	/// <summary>
	/// Enumerate the MemberLicenses columns.
	/// </summary>
	[Serializable]
	public enum MemberLicensesColumn : int
	{
		/// <summary>
		/// MemberLicenseId : 
		/// </summary>
		[EnumTextValue("MemberLicenseID")]
		[ColumnEnum("MemberLicenseID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MemberLicenseId = 1,
		/// <summary>
		/// MemberId : 
		/// </summary>
		[EnumTextValue("MemberID")]
		[ColumnEnum("MemberID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MemberId = 2,
		/// <summary>
		/// MemberLicenseName : 
		/// </summary>
		[EnumTextValue("MemberLicenseName")]
		[ColumnEnum("MemberLicenseName", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		MemberLicenseName = 3,
		/// <summary>
		/// LicenseType : 
		/// </summary>
		[EnumTextValue("LicenseType")]
		[ColumnEnum("LicenseType", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		LicenseType = 4,
		/// <summary>
		/// IssueDate : 
		/// </summary>
		[EnumTextValue("IssueDate")]
		[ColumnEnum("IssueDate", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		IssueDate = 5,
		/// <summary>
		/// ExpiryDate : 
		/// </summary>
		[EnumTextValue("ExpiryDate")]
		[ColumnEnum("ExpiryDate", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		ExpiryDate = 6,
		/// <summary>
		/// CountryId : 
		/// </summary>
		[EnumTextValue("CountryID")]
		[ColumnEnum("CountryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CountryId = 7,
		/// <summary>
		/// State : 
		/// </summary>
		[EnumTextValue("State")]
		[ColumnEnum("State", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		State = 8,
		/// <summary>
		/// DoesNotExpire : 
		/// </summary>
		[EnumTextValue("DoesNotExpire")]
		[ColumnEnum("DoesNotExpire", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		DoesNotExpire = 9,
		/// <summary>
		/// LastModifiedDate : 
		/// </summary>
		[EnumTextValue("LastModifiedDate")]
		[ColumnEnum("LastModifiedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModifiedDate = 10
	}//End enum

	#endregion MemberLicensesColumn Enum

} // end namespace


/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file MemberPositions.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'MemberPositions' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MemberPositionsBase : EntityBase, IMemberPositions, IEntityId<MemberPositionsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MemberPositionsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MemberPositionsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MemberPositionsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MemberPositions> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MemberPositionsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MemberPositionsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MemberPositionsBase"/> instance.
		///</summary>
		public MemberPositionsBase()
		{
			this.entityData = new MemberPositionsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MemberPositionsBase"/> instance.
		///</summary>
		///<param name="_linkedInInternalPositionId"></param>
		///<param name="_title"></param>
		///<param name="_summary"></param>
		///<param name="_companyId"></param>
		///<param name="_companyName"></param>
		///<param name="_companyIndustry"></param>
		///<param name="_startMonth"></param>
		///<param name="_startYear"></param>
		///<param name="_endMonth"></param>
		///<param name="_endYear"></param>
		///<param name="_isCurrent"></param>
		///<param name="_memberId"></param>
		///<param name="_organisationWebsite"></param>
		///<param name="_responsibilitiesAndAchievements"></param>
		///<param name="_typeOfDirectorship"></param>
		///<param name="_additionalRolesAndResponsibilities"></param>
		///<param name="_isDirectorship"></param>
		///<param name="_city"></param>
		///<param name="_countryId"></param>
		///<param name="_state"></param>
		public MemberPositionsBase(System.Int32? _linkedInInternalPositionId, System.String _title, 
			System.String _summary, System.Int32? _companyId, System.String _companyName, 
			System.String _companyIndustry, System.Int32? _startMonth, System.Int32? _startYear, 
			System.Int32? _endMonth, System.Int32? _endYear, System.Boolean _isCurrent, 
			System.Int32 _memberId, System.String _organisationWebsite, System.String _responsibilitiesAndAchievements, 
			System.String _typeOfDirectorship, System.String _additionalRolesAndResponsibilities, System.Boolean _isDirectorship, 
			System.String _city, System.Int32? _countryId, System.String _state)
		{
			this.entityData = new MemberPositionsEntityData();
			this.backupData = null;

			this.LinkedInInternalPositionId = _linkedInInternalPositionId;
			this.Title = _title;
			this.Summary = _summary;
			this.CompanyId = _companyId;
			this.CompanyName = _companyName;
			this.CompanyIndustry = _companyIndustry;
			this.StartMonth = _startMonth;
			this.StartYear = _startYear;
			this.EndMonth = _endMonth;
			this.EndYear = _endYear;
			this.IsCurrent = _isCurrent;
			this.MemberId = _memberId;
			this.OrganisationWebsite = _organisationWebsite;
			this.ResponsibilitiesAndAchievements = _responsibilitiesAndAchievements;
			this.TypeOfDirectorship = _typeOfDirectorship;
			this.AdditionalRolesAndResponsibilities = _additionalRolesAndResponsibilities;
			this.IsDirectorship = _isDirectorship;
			this.City = _city;
			this.CountryId = _countryId;
			this.State = _state;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MemberPositions"/> instance.
		///</summary>
		///<param name="_linkedInInternalPositionId"></param>
		///<param name="_title"></param>
		///<param name="_summary"></param>
		///<param name="_companyId"></param>
		///<param name="_companyName"></param>
		///<param name="_companyIndustry"></param>
		///<param name="_startMonth"></param>
		///<param name="_startYear"></param>
		///<param name="_endMonth"></param>
		///<param name="_endYear"></param>
		///<param name="_isCurrent"></param>
		///<param name="_memberId"></param>
		///<param name="_organisationWebsite"></param>
		///<param name="_responsibilitiesAndAchievements"></param>
		///<param name="_typeOfDirectorship"></param>
		///<param name="_additionalRolesAndResponsibilities"></param>
		///<param name="_isDirectorship"></param>
		///<param name="_city"></param>
		///<param name="_countryId"></param>
		///<param name="_state"></param>
		public static MemberPositions CreateMemberPositions(System.Int32? _linkedInInternalPositionId, System.String _title, 
			System.String _summary, System.Int32? _companyId, System.String _companyName, 
			System.String _companyIndustry, System.Int32? _startMonth, System.Int32? _startYear, 
			System.Int32? _endMonth, System.Int32? _endYear, System.Boolean _isCurrent, 
			System.Int32 _memberId, System.String _organisationWebsite, System.String _responsibilitiesAndAchievements, 
			System.String _typeOfDirectorship, System.String _additionalRolesAndResponsibilities, System.Boolean _isDirectorship, 
			System.String _city, System.Int32? _countryId, System.String _state)
		{
			MemberPositions newMemberPositions = new MemberPositions();
			newMemberPositions.LinkedInInternalPositionId = _linkedInInternalPositionId;
			newMemberPositions.Title = _title;
			newMemberPositions.Summary = _summary;
			newMemberPositions.CompanyId = _companyId;
			newMemberPositions.CompanyName = _companyName;
			newMemberPositions.CompanyIndustry = _companyIndustry;
			newMemberPositions.StartMonth = _startMonth;
			newMemberPositions.StartYear = _startYear;
			newMemberPositions.EndMonth = _endMonth;
			newMemberPositions.EndYear = _endYear;
			newMemberPositions.IsCurrent = _isCurrent;
			newMemberPositions.MemberId = _memberId;
			newMemberPositions.OrganisationWebsite = _organisationWebsite;
			newMemberPositions.ResponsibilitiesAndAchievements = _responsibilitiesAndAchievements;
			newMemberPositions.TypeOfDirectorship = _typeOfDirectorship;
			newMemberPositions.AdditionalRolesAndResponsibilities = _additionalRolesAndResponsibilities;
			newMemberPositions.IsDirectorship = _isDirectorship;
			newMemberPositions.City = _city;
			newMemberPositions.CountryId = _countryId;
			newMemberPositions.State = _state;
			return newMemberPositions;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MemberPositionId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MemberPositionId
		{
			get
			{
				return this.entityData.MemberPositionId; 
			}
			
			set
			{
				if (this.entityData.MemberPositionId == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.MemberPositionId, this.entityData.MemberPositionId);
				this.entityData.MemberPositionId = value;
				this.EntityId.MemberPositionId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.MemberPositionId, this.entityData.MemberPositionId);
				OnPropertyChanged("MemberPositionId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LinkedInInternalPositionId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLinkedInInternalPositionIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LinkedInInternalPositionId
		{
			get
			{
				return this.entityData.LinkedInInternalPositionId; 
			}
			
			set
			{
				if (this.entityData.LinkedInInternalPositionId == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.LinkedInInternalPositionId, this.entityData.LinkedInInternalPositionId);
				this.entityData.LinkedInInternalPositionId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.LinkedInInternalPositionId, this.entityData.LinkedInInternalPositionId);
				OnPropertyChanged("LinkedInInternalPositionId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Title property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Title
		{
			get
			{
				return this.entityData.Title; 
			}
			
			set
			{
				if (this.entityData.Title == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.Title, this.entityData.Title);
				this.entityData.Title = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.Title, this.entityData.Title);
				OnPropertyChanged("Title");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Summary property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Summary
		{
			get
			{
				return this.entityData.Summary; 
			}
			
			set
			{
				if (this.entityData.Summary == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.Summary, this.entityData.Summary);
				this.entityData.Summary = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.Summary, this.entityData.Summary);
				OnPropertyChanged("Summary");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCompanyIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CompanyId
		{
			get
			{
				return this.entityData.CompanyId; 
			}
			
			set
			{
				if (this.entityData.CompanyId == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.CompanyId, this.entityData.CompanyId);
				this.entityData.CompanyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.CompanyId, this.entityData.CompanyId);
				OnPropertyChanged("CompanyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String CompanyName
		{
			get
			{
				return this.entityData.CompanyName; 
			}
			
			set
			{
				if (this.entityData.CompanyName == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.CompanyName, this.entityData.CompanyName);
				this.entityData.CompanyName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.CompanyName, this.entityData.CompanyName);
				OnPropertyChanged("CompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyIndustry property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String CompanyIndustry
		{
			get
			{
				return this.entityData.CompanyIndustry; 
			}
			
			set
			{
				if (this.entityData.CompanyIndustry == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.CompanyIndustry, this.entityData.CompanyIndustry);
				this.entityData.CompanyIndustry = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.CompanyIndustry, this.entityData.CompanyIndustry);
				OnPropertyChanged("CompanyIndustry");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartMonth property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStartMonthNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? StartMonth
		{
			get
			{
				return this.entityData.StartMonth; 
			}
			
			set
			{
				if (this.entityData.StartMonth == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.StartMonth, this.entityData.StartMonth);
				this.entityData.StartMonth = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.StartMonth, this.entityData.StartMonth);
				OnPropertyChanged("StartMonth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartYear property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStartYearNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? StartYear
		{
			get
			{
				return this.entityData.StartYear; 
			}
			
			set
			{
				if (this.entityData.StartYear == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.StartYear, this.entityData.StartYear);
				this.entityData.StartYear = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.StartYear, this.entityData.StartYear);
				OnPropertyChanged("StartYear");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndMonth property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEndMonthNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? EndMonth
		{
			get
			{
				return this.entityData.EndMonth; 
			}
			
			set
			{
				if (this.entityData.EndMonth == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.EndMonth, this.entityData.EndMonth);
				this.entityData.EndMonth = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.EndMonth, this.entityData.EndMonth);
				OnPropertyChanged("EndMonth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndYear property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEndYearNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? EndYear
		{
			get
			{
				return this.entityData.EndYear; 
			}
			
			set
			{
				if (this.entityData.EndYear == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.EndYear, this.entityData.EndYear);
				this.entityData.EndYear = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.EndYear, this.entityData.EndYear);
				OnPropertyChanged("EndYear");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsCurrent property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsCurrent
		{
			get
			{
				return this.entityData.IsCurrent; 
			}
			
			set
			{
				if (this.entityData.IsCurrent == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.IsCurrent, this.entityData.IsCurrent);
				this.entityData.IsCurrent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.IsCurrent, this.entityData.IsCurrent);
				OnPropertyChanged("IsCurrent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MemberId
		{
			get
			{
				return this.entityData.MemberId; 
			}
			
			set
			{
				if (this.entityData.MemberId == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.MemberId, this.entityData.MemberId);
				this.entityData.MemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.MemberId, this.entityData.MemberId);
				OnPropertyChanged("MemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrganisationWebsite property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String OrganisationWebsite
		{
			get
			{
				return this.entityData.OrganisationWebsite; 
			}
			
			set
			{
				if (this.entityData.OrganisationWebsite == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.OrganisationWebsite, this.entityData.OrganisationWebsite);
				this.entityData.OrganisationWebsite = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.OrganisationWebsite, this.entityData.OrganisationWebsite);
				OnPropertyChanged("OrganisationWebsite");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResponsibilitiesAndAchievements property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String ResponsibilitiesAndAchievements
		{
			get
			{
				return this.entityData.ResponsibilitiesAndAchievements; 
			}
			
			set
			{
				if (this.entityData.ResponsibilitiesAndAchievements == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.ResponsibilitiesAndAchievements, this.entityData.ResponsibilitiesAndAchievements);
				this.entityData.ResponsibilitiesAndAchievements = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.ResponsibilitiesAndAchievements, this.entityData.ResponsibilitiesAndAchievements);
				OnPropertyChanged("ResponsibilitiesAndAchievements");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TypeOfDirectorship property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String TypeOfDirectorship
		{
			get
			{
				return this.entityData.TypeOfDirectorship; 
			}
			
			set
			{
				if (this.entityData.TypeOfDirectorship == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.TypeOfDirectorship, this.entityData.TypeOfDirectorship);
				this.entityData.TypeOfDirectorship = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.TypeOfDirectorship, this.entityData.TypeOfDirectorship);
				OnPropertyChanged("TypeOfDirectorship");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdditionalRolesAndResponsibilities property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String AdditionalRolesAndResponsibilities
		{
			get
			{
				return this.entityData.AdditionalRolesAndResponsibilities; 
			}
			
			set
			{
				if (this.entityData.AdditionalRolesAndResponsibilities == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.AdditionalRolesAndResponsibilities, this.entityData.AdditionalRolesAndResponsibilities);
				this.entityData.AdditionalRolesAndResponsibilities = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.AdditionalRolesAndResponsibilities, this.entityData.AdditionalRolesAndResponsibilities);
				OnPropertyChanged("AdditionalRolesAndResponsibilities");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsDirectorship property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsDirectorship
		{
			get
			{
				return this.entityData.IsDirectorship; 
			}
			
			set
			{
				if (this.entityData.IsDirectorship == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.IsDirectorship, this.entityData.IsDirectorship);
				this.entityData.IsDirectorship = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.IsDirectorship, this.entityData.IsDirectorship);
				OnPropertyChanged("IsDirectorship");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the City property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String City
		{
			get
			{
				return this.entityData.City; 
			}
			
			set
			{
				if (this.entityData.City == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.City, this.entityData.City);
				this.entityData.City = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.City, this.entityData.City);
				OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CountryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCountryIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CountryId
		{
			get
			{
				return this.entityData.CountryId; 
			}
			
			set
			{
				if (this.entityData.CountryId == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.CountryId, this.entityData.CountryId);
				this.entityData.CountryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.CountryId, this.entityData.CountryId);
				OnPropertyChanged("CountryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the State property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String State
		{
			get
			{
				return this.entityData.State; 
			}
			
			set
			{
				if (this.entityData.State == value)
					return;
					
				OnColumnChanging(MemberPositionsColumn.State, this.entityData.State);
				this.entityData.State = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberPositionsColumn.State, this.entityData.State);
				OnPropertyChanged("State");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Members"/>.
		/// </summary>
		/// <value>The source Members for MemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Members MemberIdSource
      	{
            get { return entityData.MemberIdSource; }
            set { entityData.MemberIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Title", "Title", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CompanyName", "Company Name", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CompanyIndustry", "Company Industry", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("OrganisationWebsite", "Organisation Website", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TypeOfDirectorship", "Type Of Directorship", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AdditionalRolesAndResponsibilities", "Additional Roles And Responsibilities", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("City", "City", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("State", "State", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "MemberPositions"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MemberPositionId", "LinkedInInternalPositionId", "Title", "Summary", "CompanyId", "CompanyName", "CompanyIndustry", "StartMonth", "StartYear", "EndMonth", "EndYear", "IsCurrent", "MemberID", "OrganisationWebsite", "ResponsibilitiesAndAchievements", "TypeOfDirectorship", "AdditionalRolesAndResponsibilities", "IsDirectorship", "City", "CountryID", "State"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MemberPositionsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MemberPositions) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MemberPositions>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MemberPositions);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MemberPositions Entity 
		///</summary>
		protected virtual MemberPositions Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MemberPositions copy = new MemberPositions();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MemberPositionId = this.MemberPositionId;
				copy.LinkedInInternalPositionId = this.LinkedInInternalPositionId;
				copy.Title = this.Title;
				copy.Summary = this.Summary;
				copy.CompanyId = this.CompanyId;
				copy.CompanyName = this.CompanyName;
				copy.CompanyIndustry = this.CompanyIndustry;
				copy.StartMonth = this.StartMonth;
				copy.StartYear = this.StartYear;
				copy.EndMonth = this.EndMonth;
				copy.EndYear = this.EndYear;
				copy.IsCurrent = this.IsCurrent;
				copy.MemberId = this.MemberId;
				copy.OrganisationWebsite = this.OrganisationWebsite;
				copy.ResponsibilitiesAndAchievements = this.ResponsibilitiesAndAchievements;
				copy.TypeOfDirectorship = this.TypeOfDirectorship;
				copy.AdditionalRolesAndResponsibilities = this.AdditionalRolesAndResponsibilities;
				copy.IsDirectorship = this.IsDirectorship;
				copy.City = this.City;
				copy.CountryId = this.CountryId;
				copy.State = this.State;
			
			if (this.MemberIdSource != null && existingCopies.Contains(this.MemberIdSource))
				copy.MemberIdSource = existingCopies[this.MemberIdSource] as Members;
			else
				copy.MemberIdSource = MakeCopyOf(this.MemberIdSource, existingCopies) as Members;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MemberPositions Entity 
		///</summary>
		public virtual MemberPositions Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MemberPositions Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MemberPositions DeepCopy()
		{
			return EntityHelper.Clone<MemberPositions>(this as MemberPositions);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MemberPositionsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MemberPositionsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MemberPositionsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MemberPositionsColumn column)
		{
			switch(column)
			{
					case MemberPositionsColumn.MemberPositionId:
					return entityData.MemberPositionId != _originalData.MemberPositionId;
					case MemberPositionsColumn.LinkedInInternalPositionId:
					return entityData.LinkedInInternalPositionId != _originalData.LinkedInInternalPositionId;
					case MemberPositionsColumn.Title:
					return entityData.Title != _originalData.Title;
					case MemberPositionsColumn.Summary:
					return entityData.Summary != _originalData.Summary;
					case MemberPositionsColumn.CompanyId:
					return entityData.CompanyId != _originalData.CompanyId;
					case MemberPositionsColumn.CompanyName:
					return entityData.CompanyName != _originalData.CompanyName;
					case MemberPositionsColumn.CompanyIndustry:
					return entityData.CompanyIndustry != _originalData.CompanyIndustry;
					case MemberPositionsColumn.StartMonth:
					return entityData.StartMonth != _originalData.StartMonth;
					case MemberPositionsColumn.StartYear:
					return entityData.StartYear != _originalData.StartYear;
					case MemberPositionsColumn.EndMonth:
					return entityData.EndMonth != _originalData.EndMonth;
					case MemberPositionsColumn.EndYear:
					return entityData.EndYear != _originalData.EndYear;
					case MemberPositionsColumn.IsCurrent:
					return entityData.IsCurrent != _originalData.IsCurrent;
					case MemberPositionsColumn.MemberId:
					return entityData.MemberId != _originalData.MemberId;
					case MemberPositionsColumn.OrganisationWebsite:
					return entityData.OrganisationWebsite != _originalData.OrganisationWebsite;
					case MemberPositionsColumn.ResponsibilitiesAndAchievements:
					return entityData.ResponsibilitiesAndAchievements != _originalData.ResponsibilitiesAndAchievements;
					case MemberPositionsColumn.TypeOfDirectorship:
					return entityData.TypeOfDirectorship != _originalData.TypeOfDirectorship;
					case MemberPositionsColumn.AdditionalRolesAndResponsibilities:
					return entityData.AdditionalRolesAndResponsibilities != _originalData.AdditionalRolesAndResponsibilities;
					case MemberPositionsColumn.IsDirectorship:
					return entityData.IsDirectorship != _originalData.IsDirectorship;
					case MemberPositionsColumn.City:
					return entityData.City != _originalData.City;
					case MemberPositionsColumn.CountryId:
					return entityData.CountryId != _originalData.CountryId;
					case MemberPositionsColumn.State:
					return entityData.State != _originalData.State;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MemberPositionsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MemberPositionId != _originalData.MemberPositionId;
			result = result || entityData.LinkedInInternalPositionId != _originalData.LinkedInInternalPositionId;
			result = result || entityData.Title != _originalData.Title;
			result = result || entityData.Summary != _originalData.Summary;
			result = result || entityData.CompanyId != _originalData.CompanyId;
			result = result || entityData.CompanyName != _originalData.CompanyName;
			result = result || entityData.CompanyIndustry != _originalData.CompanyIndustry;
			result = result || entityData.StartMonth != _originalData.StartMonth;
			result = result || entityData.StartYear != _originalData.StartYear;
			result = result || entityData.EndMonth != _originalData.EndMonth;
			result = result || entityData.EndYear != _originalData.EndYear;
			result = result || entityData.IsCurrent != _originalData.IsCurrent;
			result = result || entityData.MemberId != _originalData.MemberId;
			result = result || entityData.OrganisationWebsite != _originalData.OrganisationWebsite;
			result = result || entityData.ResponsibilitiesAndAchievements != _originalData.ResponsibilitiesAndAchievements;
			result = result || entityData.TypeOfDirectorship != _originalData.TypeOfDirectorship;
			result = result || entityData.AdditionalRolesAndResponsibilities != _originalData.AdditionalRolesAndResponsibilities;
			result = result || entityData.IsDirectorship != _originalData.IsDirectorship;
			result = result || entityData.City != _originalData.City;
			result = result || entityData.CountryId != _originalData.CountryId;
			result = result || entityData.State != _originalData.State;
			return result;
		}	
		
		///<summary>
		///  Returns a MemberPositions Entity with the original data.
		///</summary>
		public MemberPositions GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMemberPositions(
				_originalData.LinkedInInternalPositionId,
				_originalData.Title,
				_originalData.Summary,
				_originalData.CompanyId,
				_originalData.CompanyName,
				_originalData.CompanyIndustry,
				_originalData.StartMonth,
				_originalData.StartYear,
				_originalData.EndMonth,
				_originalData.EndYear,
				_originalData.IsCurrent,
				_originalData.MemberId,
				_originalData.OrganisationWebsite,
				_originalData.ResponsibilitiesAndAchievements,
				_originalData.TypeOfDirectorship,
				_originalData.AdditionalRolesAndResponsibilities,
				_originalData.IsDirectorship,
				_originalData.City,
				_originalData.CountryId,
				_originalData.State
				);
				
			return (MemberPositions)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MemberPositionsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MemberPositionsBase)
				return ValueEquals(this, (MemberPositionsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MemberPositionsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MemberPositionId.GetHashCode() ^ 
					((this.LinkedInInternalPositionId == null) ? string.Empty : this.LinkedInInternalPositionId.ToString()).GetHashCode() ^ 
					((this.Title == null) ? string.Empty : this.Title.ToString()).GetHashCode() ^ 
					((this.Summary == null) ? string.Empty : this.Summary.ToString()).GetHashCode() ^ 
					((this.CompanyId == null) ? string.Empty : this.CompanyId.ToString()).GetHashCode() ^ 
					((this.CompanyName == null) ? string.Empty : this.CompanyName.ToString()).GetHashCode() ^ 
					((this.CompanyIndustry == null) ? string.Empty : this.CompanyIndustry.ToString()).GetHashCode() ^ 
					((this.StartMonth == null) ? string.Empty : this.StartMonth.ToString()).GetHashCode() ^ 
					((this.StartYear == null) ? string.Empty : this.StartYear.ToString()).GetHashCode() ^ 
					((this.EndMonth == null) ? string.Empty : this.EndMonth.ToString()).GetHashCode() ^ 
					((this.EndYear == null) ? string.Empty : this.EndYear.ToString()).GetHashCode() ^ 
					this.IsCurrent.GetHashCode() ^ 
					this.MemberId.GetHashCode() ^ 
					((this.OrganisationWebsite == null) ? string.Empty : this.OrganisationWebsite.ToString()).GetHashCode() ^ 
					((this.ResponsibilitiesAndAchievements == null) ? string.Empty : this.ResponsibilitiesAndAchievements.ToString()).GetHashCode() ^ 
					((this.TypeOfDirectorship == null) ? string.Empty : this.TypeOfDirectorship.ToString()).GetHashCode() ^ 
					((this.AdditionalRolesAndResponsibilities == null) ? string.Empty : this.AdditionalRolesAndResponsibilities.ToString()).GetHashCode() ^ 
					this.IsDirectorship.GetHashCode() ^ 
					((this.City == null) ? string.Empty : this.City.ToString()).GetHashCode() ^ 
					((this.CountryId == null) ? string.Empty : this.CountryId.ToString()).GetHashCode() ^ 
					((this.State == null) ? string.Empty : this.State.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MemberPositionsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MemberPositionsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MemberPositionsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MemberPositionsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MemberPositionsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MemberPositionsBase Object1, MemberPositionsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MemberPositionId != Object2.MemberPositionId)
				equal = false;
			if ( Object1.LinkedInInternalPositionId != null && Object2.LinkedInInternalPositionId != null )
			{
				if (Object1.LinkedInInternalPositionId != Object2.LinkedInInternalPositionId)
					equal = false;
			}
			else if (Object1.LinkedInInternalPositionId == null ^ Object2.LinkedInInternalPositionId == null )
			{
				equal = false;
			}
			if ( Object1.Title != null && Object2.Title != null )
			{
				if (Object1.Title != Object2.Title)
					equal = false;
			}
			else if (Object1.Title == null ^ Object2.Title == null )
			{
				equal = false;
			}
			if ( Object1.Summary != null && Object2.Summary != null )
			{
				if (Object1.Summary != Object2.Summary)
					equal = false;
			}
			else if (Object1.Summary == null ^ Object2.Summary == null )
			{
				equal = false;
			}
			if ( Object1.CompanyId != null && Object2.CompanyId != null )
			{
				if (Object1.CompanyId != Object2.CompanyId)
					equal = false;
			}
			else if (Object1.CompanyId == null ^ Object2.CompanyId == null )
			{
				equal = false;
			}
			if ( Object1.CompanyName != null && Object2.CompanyName != null )
			{
				if (Object1.CompanyName != Object2.CompanyName)
					equal = false;
			}
			else if (Object1.CompanyName == null ^ Object2.CompanyName == null )
			{
				equal = false;
			}
			if ( Object1.CompanyIndustry != null && Object2.CompanyIndustry != null )
			{
				if (Object1.CompanyIndustry != Object2.CompanyIndustry)
					equal = false;
			}
			else if (Object1.CompanyIndustry == null ^ Object2.CompanyIndustry == null )
			{
				equal = false;
			}
			if ( Object1.StartMonth != null && Object2.StartMonth != null )
			{
				if (Object1.StartMonth != Object2.StartMonth)
					equal = false;
			}
			else if (Object1.StartMonth == null ^ Object2.StartMonth == null )
			{
				equal = false;
			}
			if ( Object1.StartYear != null && Object2.StartYear != null )
			{
				if (Object1.StartYear != Object2.StartYear)
					equal = false;
			}
			else if (Object1.StartYear == null ^ Object2.StartYear == null )
			{
				equal = false;
			}
			if ( Object1.EndMonth != null && Object2.EndMonth != null )
			{
				if (Object1.EndMonth != Object2.EndMonth)
					equal = false;
			}
			else if (Object1.EndMonth == null ^ Object2.EndMonth == null )
			{
				equal = false;
			}
			if ( Object1.EndYear != null && Object2.EndYear != null )
			{
				if (Object1.EndYear != Object2.EndYear)
					equal = false;
			}
			else if (Object1.EndYear == null ^ Object2.EndYear == null )
			{
				equal = false;
			}
			if (Object1.IsCurrent != Object2.IsCurrent)
				equal = false;
			if (Object1.MemberId != Object2.MemberId)
				equal = false;
			if ( Object1.OrganisationWebsite != null && Object2.OrganisationWebsite != null )
			{
				if (Object1.OrganisationWebsite != Object2.OrganisationWebsite)
					equal = false;
			}
			else if (Object1.OrganisationWebsite == null ^ Object2.OrganisationWebsite == null )
			{
				equal = false;
			}
			if ( Object1.ResponsibilitiesAndAchievements != null && Object2.ResponsibilitiesAndAchievements != null )
			{
				if (Object1.ResponsibilitiesAndAchievements != Object2.ResponsibilitiesAndAchievements)
					equal = false;
			}
			else if (Object1.ResponsibilitiesAndAchievements == null ^ Object2.ResponsibilitiesAndAchievements == null )
			{
				equal = false;
			}
			if ( Object1.TypeOfDirectorship != null && Object2.TypeOfDirectorship != null )
			{
				if (Object1.TypeOfDirectorship != Object2.TypeOfDirectorship)
					equal = false;
			}
			else if (Object1.TypeOfDirectorship == null ^ Object2.TypeOfDirectorship == null )
			{
				equal = false;
			}
			if ( Object1.AdditionalRolesAndResponsibilities != null && Object2.AdditionalRolesAndResponsibilities != null )
			{
				if (Object1.AdditionalRolesAndResponsibilities != Object2.AdditionalRolesAndResponsibilities)
					equal = false;
			}
			else if (Object1.AdditionalRolesAndResponsibilities == null ^ Object2.AdditionalRolesAndResponsibilities == null )
			{
				equal = false;
			}
			if (Object1.IsDirectorship != Object2.IsDirectorship)
				equal = false;
			if ( Object1.City != null && Object2.City != null )
			{
				if (Object1.City != Object2.City)
					equal = false;
			}
			else if (Object1.City == null ^ Object2.City == null )
			{
				equal = false;
			}
			if ( Object1.CountryId != null && Object2.CountryId != null )
			{
				if (Object1.CountryId != Object2.CountryId)
					equal = false;
			}
			else if (Object1.CountryId == null ^ Object2.CountryId == null )
			{
				equal = false;
			}
			if ( Object1.State != null && Object2.State != null )
			{
				if (Object1.State != Object2.State)
					equal = false;
			}
			else if (Object1.State == null ^ Object2.State == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MemberPositionsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MemberPositionsComparer GetComparer()
        {
            return new MemberPositionsComparer();
        }
        */

        // Comparer delegates back to MemberPositions
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MemberPositions rhs, MemberPositionsColumn which)
        {
            switch (which)
            {
            	
            	
            	case MemberPositionsColumn.MemberPositionId:
            		return this.MemberPositionId.CompareTo(rhs.MemberPositionId);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.LinkedInInternalPositionId:
            		return this.LinkedInInternalPositionId.Value.CompareTo(rhs.LinkedInInternalPositionId.Value);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.Title:
            		return this.Title.CompareTo(rhs.Title);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.Summary:
            		return this.Summary.CompareTo(rhs.Summary);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.CompanyId:
            		return this.CompanyId.Value.CompareTo(rhs.CompanyId.Value);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.CompanyName:
            		return this.CompanyName.CompareTo(rhs.CompanyName);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.CompanyIndustry:
            		return this.CompanyIndustry.CompareTo(rhs.CompanyIndustry);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.StartMonth:
            		return this.StartMonth.Value.CompareTo(rhs.StartMonth.Value);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.StartYear:
            		return this.StartYear.Value.CompareTo(rhs.StartYear.Value);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.EndMonth:
            		return this.EndMonth.Value.CompareTo(rhs.EndMonth.Value);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.EndYear:
            		return this.EndYear.Value.CompareTo(rhs.EndYear.Value);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.IsCurrent:
            		return this.IsCurrent.CompareTo(rhs.IsCurrent);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.MemberId:
            		return this.MemberId.CompareTo(rhs.MemberId);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.OrganisationWebsite:
            		return this.OrganisationWebsite.CompareTo(rhs.OrganisationWebsite);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.ResponsibilitiesAndAchievements:
            		return this.ResponsibilitiesAndAchievements.CompareTo(rhs.ResponsibilitiesAndAchievements);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.TypeOfDirectorship:
            		return this.TypeOfDirectorship.CompareTo(rhs.TypeOfDirectorship);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.AdditionalRolesAndResponsibilities:
            		return this.AdditionalRolesAndResponsibilities.CompareTo(rhs.AdditionalRolesAndResponsibilities);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.IsDirectorship:
            		return this.IsDirectorship.CompareTo(rhs.IsDirectorship);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.City:
            		return this.City.CompareTo(rhs.City);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.CountryId:
            		return this.CountryId.Value.CompareTo(rhs.CountryId.Value);
            		
            		                 
            	
            	
            	case MemberPositionsColumn.State:
            		return this.State.CompareTo(rhs.State);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MemberPositionsKey> Members
		
		// member variable for the EntityId property
		private MemberPositionsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MemberPositionsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MemberPositionsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MemberPositions")
					.Append("|").Append( this.MemberPositionId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{22}{21}- MemberPositionId: {0}{21}- LinkedInInternalPositionId: {1}{21}- Title: {2}{21}- Summary: {3}{21}- CompanyId: {4}{21}- CompanyName: {5}{21}- CompanyIndustry: {6}{21}- StartMonth: {7}{21}- StartYear: {8}{21}- EndMonth: {9}{21}- EndYear: {10}{21}- IsCurrent: {11}{21}- MemberId: {12}{21}- OrganisationWebsite: {13}{21}- ResponsibilitiesAndAchievements: {14}{21}- TypeOfDirectorship: {15}{21}- AdditionalRolesAndResponsibilities: {16}{21}- IsDirectorship: {17}{21}- City: {18}{21}- CountryId: {19}{21}- State: {20}{21}{23}", 
				this.MemberPositionId,
				(this.LinkedInInternalPositionId == null) ? string.Empty : this.LinkedInInternalPositionId.ToString(),
				(this.Title == null) ? string.Empty : this.Title.ToString(),
				(this.Summary == null) ? string.Empty : this.Summary.ToString(),
				(this.CompanyId == null) ? string.Empty : this.CompanyId.ToString(),
				(this.CompanyName == null) ? string.Empty : this.CompanyName.ToString(),
				(this.CompanyIndustry == null) ? string.Empty : this.CompanyIndustry.ToString(),
				(this.StartMonth == null) ? string.Empty : this.StartMonth.ToString(),
				(this.StartYear == null) ? string.Empty : this.StartYear.ToString(),
				(this.EndMonth == null) ? string.Empty : this.EndMonth.ToString(),
				(this.EndYear == null) ? string.Empty : this.EndYear.ToString(),
				this.IsCurrent,
				this.MemberId,
				(this.OrganisationWebsite == null) ? string.Empty : this.OrganisationWebsite.ToString(),
				(this.ResponsibilitiesAndAchievements == null) ? string.Empty : this.ResponsibilitiesAndAchievements.ToString(),
				(this.TypeOfDirectorship == null) ? string.Empty : this.TypeOfDirectorship.ToString(),
				(this.AdditionalRolesAndResponsibilities == null) ? string.Empty : this.AdditionalRolesAndResponsibilities.ToString(),
				this.IsDirectorship,
				(this.City == null) ? string.Empty : this.City.ToString(),
				(this.CountryId == null) ? string.Empty : this.CountryId.ToString(),
				(this.State == null) ? string.Empty : this.State.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'MemberPositions' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MemberPositionsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MemberPositionId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "MemberPositions"</remarks>
		public System.Int32 MemberPositionId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// LinkedInInternalPositionId : 
		/// </summary>
		public System.Int32?		  LinkedInInternalPositionId = null;
		
		/// <summary>
		/// Title : 
		/// </summary>
		public System.String		  Title = null;
		
		/// <summary>
		/// Summary : 
		/// </summary>
		public System.String		  Summary = null;
		
		/// <summary>
		/// CompanyId : 
		/// </summary>
		public System.Int32?		  CompanyId = null;
		
		/// <summary>
		/// CompanyName : 
		/// </summary>
		public System.String		  CompanyName = null;
		
		/// <summary>
		/// CompanyIndustry : 
		/// </summary>
		public System.String		  CompanyIndustry = null;
		
		/// <summary>
		/// StartMonth : 
		/// </summary>
		public System.Int32?		  StartMonth = null;
		
		/// <summary>
		/// StartYear : 
		/// </summary>
		public System.Int32?		  StartYear = null;
		
		/// <summary>
		/// EndMonth : 
		/// </summary>
		public System.Int32?		  EndMonth = null;
		
		/// <summary>
		/// EndYear : 
		/// </summary>
		public System.Int32?		  EndYear = null;
		
		/// <summary>
		/// IsCurrent : 
		/// </summary>
		public System.Boolean		  IsCurrent = false;
		
		/// <summary>
		/// MemberID : 
		/// </summary>
		public System.Int32		  MemberId = (int)0;
		
		/// <summary>
		/// OrganisationWebsite : 
		/// </summary>
		public System.String		  OrganisationWebsite = null;
		
		/// <summary>
		/// ResponsibilitiesAndAchievements : 
		/// </summary>
		public System.String		  ResponsibilitiesAndAchievements = null;
		
		/// <summary>
		/// TypeOfDirectorship : 
		/// </summary>
		public System.String		  TypeOfDirectorship = null;
		
		/// <summary>
		/// AdditionalRolesAndResponsibilities : 
		/// </summary>
		public System.String		  AdditionalRolesAndResponsibilities = null;
		
		/// <summary>
		/// IsDirectorship : 
		/// </summary>
		public System.Boolean		  IsDirectorship = false;
		
		/// <summary>
		/// City : 
		/// </summary>
		public System.String		  City = null;
		
		/// <summary>
		/// CountryID : 
		/// </summary>
		public System.Int32?		  CountryId = null;
		
		/// <summary>
		/// State : 
		/// </summary>
		public System.String		  State = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Members _memberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Members"/>.
		/// </summary>
		/// <value>The source Members for MemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Members MemberIdSource
      	{
            get { return this._memberIdSource; }
            set { this._memberIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MemberPositionsEntityData _tmp = new MemberPositionsEntityData();
						
			_tmp.MemberPositionId = this.MemberPositionId;
			
			_tmp.LinkedInInternalPositionId = this.LinkedInInternalPositionId;
			_tmp.Title = this.Title;
			_tmp.Summary = this.Summary;
			_tmp.CompanyId = this.CompanyId;
			_tmp.CompanyName = this.CompanyName;
			_tmp.CompanyIndustry = this.CompanyIndustry;
			_tmp.StartMonth = this.StartMonth;
			_tmp.StartYear = this.StartYear;
			_tmp.EndMonth = this.EndMonth;
			_tmp.EndYear = this.EndYear;
			_tmp.IsCurrent = this.IsCurrent;
			_tmp.MemberId = this.MemberId;
			_tmp.OrganisationWebsite = this.OrganisationWebsite;
			_tmp.ResponsibilitiesAndAchievements = this.ResponsibilitiesAndAchievements;
			_tmp.TypeOfDirectorship = this.TypeOfDirectorship;
			_tmp.AdditionalRolesAndResponsibilities = this.AdditionalRolesAndResponsibilities;
			_tmp.IsDirectorship = this.IsDirectorship;
			_tmp.City = this.City;
			_tmp.CountryId = this.CountryId;
			_tmp.State = this.State;
			
			#region Source Parent Composite Entities
			if (this.MemberIdSource != null)
				_tmp.MemberIdSource = MakeCopyOf(this.MemberIdSource) as Members;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MemberPositionsEntityData _tmp = new MemberPositionsEntityData();
						
			_tmp.MemberPositionId = this.MemberPositionId;
			
			_tmp.LinkedInInternalPositionId = this.LinkedInInternalPositionId;
			_tmp.Title = this.Title;
			_tmp.Summary = this.Summary;
			_tmp.CompanyId = this.CompanyId;
			_tmp.CompanyName = this.CompanyName;
			_tmp.CompanyIndustry = this.CompanyIndustry;
			_tmp.StartMonth = this.StartMonth;
			_tmp.StartYear = this.StartYear;
			_tmp.EndMonth = this.EndMonth;
			_tmp.EndYear = this.EndYear;
			_tmp.IsCurrent = this.IsCurrent;
			_tmp.MemberId = this.MemberId;
			_tmp.OrganisationWebsite = this.OrganisationWebsite;
			_tmp.ResponsibilitiesAndAchievements = this.ResponsibilitiesAndAchievements;
			_tmp.TypeOfDirectorship = this.TypeOfDirectorship;
			_tmp.AdditionalRolesAndResponsibilities = this.AdditionalRolesAndResponsibilities;
			_tmp.IsDirectorship = this.IsDirectorship;
			_tmp.City = this.City;
			_tmp.CountryId = this.CountryId;
			_tmp.State = this.State;
			
			#region Source Parent Composite Entities
			if (this.MemberIdSource != null && existingCopies.Contains(this.MemberIdSource))
				_tmp.MemberIdSource = existingCopies[this.MemberIdSource] as Members;
			else
				_tmp.MemberIdSource = MakeCopyOf(this.MemberIdSource, existingCopies) as Members;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberPositionsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MemberPositionsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberPositionsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MemberPositionsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberPositionsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MemberPositionsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MemberPositionsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MemberPositionsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberPositionsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MemberPositionsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MemberPositionsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MemberPositionsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MemberPositionsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MemberPositions"/> object.
	/// </remarks>
	public class MemberPositionsEventArgs : System.EventArgs
	{
		private MemberPositionsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MemberPositionsEventArgs class.
		///</summary>
		public MemberPositionsEventArgs(MemberPositionsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MemberPositionsEventArgs class.
		///</summary>
		public MemberPositionsEventArgs(MemberPositionsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MemberPositionsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MemberPositionsColumn" />
		public MemberPositionsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MemberPositions related events.
	///</summary>
	public delegate void MemberPositionsEventHandler(object sender, MemberPositionsEventArgs e);
	
	#region MemberPositionsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MemberPositionsComparer : System.Collections.Generic.IComparer<MemberPositions>
	{
		MemberPositionsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MemberPositionsComparer"/> class.
        /// </summary>
		public MemberPositionsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MemberPositionsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MemberPositionsComparer(MemberPositionsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="MemberPositions"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="MemberPositions"/> to compare.</param>
        /// <param name="b">The second <c>MemberPositions</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MemberPositions a, MemberPositions b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MemberPositions entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MemberPositions a, MemberPositions b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MemberPositionsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MemberPositionsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MemberPositions"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MemberPositionsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MemberPositionsKey class.
		/// </summary>
		public MemberPositionsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MemberPositionsKey class.
		/// </summary>
		public MemberPositionsKey(MemberPositionsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MemberPositionId = entity.MemberPositionId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MemberPositionsKey class.
		/// </summary>
		public MemberPositionsKey(System.Int32 _memberPositionId)
		{
			#region Init Properties

			this.MemberPositionId = _memberPositionId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MemberPositionsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MemberPositionsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MemberPositionId property
		private System.Int32 _memberPositionId;
		
		/// <summary>
		/// Gets or sets the MemberPositionId property.
		/// </summary>
		public System.Int32 MemberPositionId
		{
			get { return _memberPositionId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MemberPositionId = value;
				
				_memberPositionId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MemberPositionId = ( values["MemberPositionId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MemberPositionId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MemberPositionId", MemberPositionId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MemberPositionId: {0}{1}",
								MemberPositionId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MemberPositionsColumn Enum
	
	/// <summary>
	/// Enumerate the MemberPositions columns.
	/// </summary>
	[Serializable]
	public enum MemberPositionsColumn : int
	{
		/// <summary>
		/// MemberPositionId : 
		/// </summary>
		[EnumTextValue("MemberPositionId")]
		[ColumnEnum("MemberPositionId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MemberPositionId = 1,
		/// <summary>
		/// LinkedInInternalPositionId : 
		/// </summary>
		[EnumTextValue("LinkedInInternalPositionId")]
		[ColumnEnum("LinkedInInternalPositionId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LinkedInInternalPositionId = 2,
		/// <summary>
		/// Title : 
		/// </summary>
		[EnumTextValue("Title")]
		[ColumnEnum("Title", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Title = 3,
		/// <summary>
		/// Summary : 
		/// </summary>
		[EnumTextValue("Summary")]
		[ColumnEnum("Summary", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Summary = 4,
		/// <summary>
		/// CompanyId : 
		/// </summary>
		[EnumTextValue("CompanyId")]
		[ColumnEnum("CompanyId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CompanyId = 5,
		/// <summary>
		/// CompanyName : 
		/// </summary>
		[EnumTextValue("CompanyName")]
		[ColumnEnum("CompanyName", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		CompanyName = 6,
		/// <summary>
		/// CompanyIndustry : 
		/// </summary>
		[EnumTextValue("CompanyIndustry")]
		[ColumnEnum("CompanyIndustry", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		CompanyIndustry = 7,
		/// <summary>
		/// StartMonth : 
		/// </summary>
		[EnumTextValue("StartMonth")]
		[ColumnEnum("StartMonth", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		StartMonth = 8,
		/// <summary>
		/// StartYear : 
		/// </summary>
		[EnumTextValue("StartYear")]
		[ColumnEnum("StartYear", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		StartYear = 9,
		/// <summary>
		/// EndMonth : 
		/// </summary>
		[EnumTextValue("EndMonth")]
		[ColumnEnum("EndMonth", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EndMonth = 10,
		/// <summary>
		/// EndYear : 
		/// </summary>
		[EnumTextValue("EndYear")]
		[ColumnEnum("EndYear", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EndYear = 11,
		/// <summary>
		/// IsCurrent : 
		/// </summary>
		[EnumTextValue("IsCurrent")]
		[ColumnEnum("IsCurrent", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsCurrent = 12,
		/// <summary>
		/// MemberId : 
		/// </summary>
		[EnumTextValue("MemberID")]
		[ColumnEnum("MemberID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MemberId = 13,
		/// <summary>
		/// OrganisationWebsite : 
		/// </summary>
		[EnumTextValue("OrganisationWebsite")]
		[ColumnEnum("OrganisationWebsite", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		OrganisationWebsite = 14,
		/// <summary>
		/// ResponsibilitiesAndAchievements : 
		/// </summary>
		[EnumTextValue("ResponsibilitiesAndAchievements")]
		[ColumnEnum("ResponsibilitiesAndAchievements", typeof(System.String), System.Data.DbType.String, false, false, true)]
		ResponsibilitiesAndAchievements = 15,
		/// <summary>
		/// TypeOfDirectorship : 
		/// </summary>
		[EnumTextValue("TypeOfDirectorship")]
		[ColumnEnum("TypeOfDirectorship", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		TypeOfDirectorship = 16,
		/// <summary>
		/// AdditionalRolesAndResponsibilities : 
		/// </summary>
		[EnumTextValue("AdditionalRolesAndResponsibilities")]
		[ColumnEnum("AdditionalRolesAndResponsibilities", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		AdditionalRolesAndResponsibilities = 17,
		/// <summary>
		/// IsDirectorship : 
		/// </summary>
		[EnumTextValue("IsDirectorship")]
		[ColumnEnum("IsDirectorship", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsDirectorship = 18,
		/// <summary>
		/// City : 
		/// </summary>
		[EnumTextValue("City")]
		[ColumnEnum("City", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		City = 19,
		/// <summary>
		/// CountryId : 
		/// </summary>
		[EnumTextValue("CountryID")]
		[ColumnEnum("CountryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CountryId = 20,
		/// <summary>
		/// State : 
		/// </summary>
		[EnumTextValue("State")]
		[ColumnEnum("State", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		State = 21
	}//End enum

	#endregion MemberPositionsColumn Enum

} // end namespace

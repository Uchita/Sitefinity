
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file MemberQualification.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'MemberQualification' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MemberQualificationBase : EntityBase, IMemberQualification, IEntityId<MemberQualificationKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MemberQualificationEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MemberQualificationEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MemberQualificationEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MemberQualification> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MemberQualificationEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MemberQualificationEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MemberQualificationBase"/> instance.
		///</summary>
		public MemberQualificationBase()
		{
			this.entityData = new MemberQualificationEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MemberQualificationBase"/> instance.
		///</summary>
		///<param name="_linkedInInternalEducationId"></param>
		///<param name="_schoolName"></param>
		///<param name="_fieldOfStudy"></param>
		///<param name="_startYear"></param>
		///<param name="_endYear"></param>
		///<param name="_degree"></param>
		///<param name="_activities"></param>
		///<param name="_notes"></param>
		///<param name="_memberId"></param>
		///<param name="_city"></param>
		///<param name="_countryId"></param>
		///<param name="_qualificationLevelId"></param>
		///<param name="_qualificationLevelOther"></param>
		///<param name="_major"></param>
		///<param name="_present"></param>
		///<param name="_startMonth"></param>
		///<param name="_endMonth"></param>
		///<param name="_graduated"></param>
		///<param name="_nonGraduatedCredits"></param>
		public MemberQualificationBase(System.Int32? _linkedInInternalEducationId, System.String _schoolName, 
			System.String _fieldOfStudy, System.Int32? _startYear, System.Int32? _endYear, 
			System.String _degree, System.String _activities, System.String _notes, 
			System.Int32 _memberId, System.String _city, System.Int32? _countryId, 
			System.Int32? _qualificationLevelId, System.String _qualificationLevelOther, System.String _major, 
			System.Boolean? _present, System.Int32? _startMonth, System.Int32? _endMonth, 
			System.Boolean? _graduated, System.Int32? _nonGraduatedCredits)
		{
			this.entityData = new MemberQualificationEntityData();
			this.backupData = null;

			this.LinkedInInternalEducationId = _linkedInInternalEducationId;
			this.SchoolName = _schoolName;
			this.FieldOfStudy = _fieldOfStudy;
			this.StartYear = _startYear;
			this.EndYear = _endYear;
			this.Degree = _degree;
			this.Activities = _activities;
			this.Notes = _notes;
			this.MemberId = _memberId;
			this.City = _city;
			this.CountryId = _countryId;
			this.QualificationLevelId = _qualificationLevelId;
			this.QualificationLevelOther = _qualificationLevelOther;
			this.Major = _major;
			this.Present = _present;
			this.StartMonth = _startMonth;
			this.EndMonth = _endMonth;
			this.Graduated = _graduated;
			this.NonGraduatedCredits = _nonGraduatedCredits;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MemberQualification"/> instance.
		///</summary>
		///<param name="_linkedInInternalEducationId"></param>
		///<param name="_schoolName"></param>
		///<param name="_fieldOfStudy"></param>
		///<param name="_startYear"></param>
		///<param name="_endYear"></param>
		///<param name="_degree"></param>
		///<param name="_activities"></param>
		///<param name="_notes"></param>
		///<param name="_memberId"></param>
		///<param name="_city"></param>
		///<param name="_countryId"></param>
		///<param name="_qualificationLevelId"></param>
		///<param name="_qualificationLevelOther"></param>
		///<param name="_major"></param>
		///<param name="_present"></param>
		///<param name="_startMonth"></param>
		///<param name="_endMonth"></param>
		///<param name="_graduated"></param>
		///<param name="_nonGraduatedCredits"></param>
		public static MemberQualification CreateMemberQualification(System.Int32? _linkedInInternalEducationId, System.String _schoolName, 
			System.String _fieldOfStudy, System.Int32? _startYear, System.Int32? _endYear, 
			System.String _degree, System.String _activities, System.String _notes, 
			System.Int32 _memberId, System.String _city, System.Int32? _countryId, 
			System.Int32? _qualificationLevelId, System.String _qualificationLevelOther, System.String _major, 
			System.Boolean? _present, System.Int32? _startMonth, System.Int32? _endMonth, 
			System.Boolean? _graduated, System.Int32? _nonGraduatedCredits)
		{
			MemberQualification newMemberQualification = new MemberQualification();
			newMemberQualification.LinkedInInternalEducationId = _linkedInInternalEducationId;
			newMemberQualification.SchoolName = _schoolName;
			newMemberQualification.FieldOfStudy = _fieldOfStudy;
			newMemberQualification.StartYear = _startYear;
			newMemberQualification.EndYear = _endYear;
			newMemberQualification.Degree = _degree;
			newMemberQualification.Activities = _activities;
			newMemberQualification.Notes = _notes;
			newMemberQualification.MemberId = _memberId;
			newMemberQualification.City = _city;
			newMemberQualification.CountryId = _countryId;
			newMemberQualification.QualificationLevelId = _qualificationLevelId;
			newMemberQualification.QualificationLevelOther = _qualificationLevelOther;
			newMemberQualification.Major = _major;
			newMemberQualification.Present = _present;
			newMemberQualification.StartMonth = _startMonth;
			newMemberQualification.EndMonth = _endMonth;
			newMemberQualification.Graduated = _graduated;
			newMemberQualification.NonGraduatedCredits = _nonGraduatedCredits;
			return newMemberQualification;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MemberQualificationId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MemberQualificationId
		{
			get
			{
				return this.entityData.MemberQualificationId; 
			}
			
			set
			{
				if (this.entityData.MemberQualificationId == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.MemberQualificationId, this.entityData.MemberQualificationId);
				this.entityData.MemberQualificationId = value;
				this.EntityId.MemberQualificationId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.MemberQualificationId, this.entityData.MemberQualificationId);
				OnPropertyChanged("MemberQualificationId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LinkedInInternalEducationId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLinkedInInternalEducationIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LinkedInInternalEducationId
		{
			get
			{
				return this.entityData.LinkedInInternalEducationId; 
			}
			
			set
			{
				if (this.entityData.LinkedInInternalEducationId == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.LinkedInInternalEducationId, this.entityData.LinkedInInternalEducationId);
				this.entityData.LinkedInInternalEducationId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.LinkedInInternalEducationId, this.entityData.LinkedInInternalEducationId);
				OnPropertyChanged("LinkedInInternalEducationId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SchoolName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String SchoolName
		{
			get
			{
				return this.entityData.SchoolName; 
			}
			
			set
			{
				if (this.entityData.SchoolName == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.SchoolName, this.entityData.SchoolName);
				this.entityData.SchoolName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.SchoolName, this.entityData.SchoolName);
				OnPropertyChanged("SchoolName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FieldOfStudy property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String FieldOfStudy
		{
			get
			{
				return this.entityData.FieldOfStudy; 
			}
			
			set
			{
				if (this.entityData.FieldOfStudy == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.FieldOfStudy, this.entityData.FieldOfStudy);
				this.entityData.FieldOfStudy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.FieldOfStudy, this.entityData.FieldOfStudy);
				OnPropertyChanged("FieldOfStudy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartYear property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStartYearNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? StartYear
		{
			get
			{
				return this.entityData.StartYear; 
			}
			
			set
			{
				if (this.entityData.StartYear == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.StartYear, this.entityData.StartYear);
				this.entityData.StartYear = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.StartYear, this.entityData.StartYear);
				OnPropertyChanged("StartYear");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndYear property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEndYearNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? EndYear
		{
			get
			{
				return this.entityData.EndYear; 
			}
			
			set
			{
				if (this.entityData.EndYear == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.EndYear, this.entityData.EndYear);
				this.entityData.EndYear = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.EndYear, this.entityData.EndYear);
				OnPropertyChanged("EndYear");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Degree property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Degree
		{
			get
			{
				return this.entityData.Degree; 
			}
			
			set
			{
				if (this.entityData.Degree == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.Degree, this.entityData.Degree);
				this.entityData.Degree = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.Degree, this.entityData.Degree);
				OnPropertyChanged("Degree");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Activities property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 256)]
		public virtual System.String Activities
		{
			get
			{
				return this.entityData.Activities; 
			}
			
			set
			{
				if (this.entityData.Activities == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.Activities, this.entityData.Activities);
				this.entityData.Activities = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.Activities, this.entityData.Activities);
				OnPropertyChanged("Activities");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MemberId
		{
			get
			{
				return this.entityData.MemberId; 
			}
			
			set
			{
				if (this.entityData.MemberId == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.MemberId, this.entityData.MemberId);
				this.entityData.MemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.MemberId, this.entityData.MemberId);
				OnPropertyChanged("MemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the City property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String City
		{
			get
			{
				return this.entityData.City; 
			}
			
			set
			{
				if (this.entityData.City == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.City, this.entityData.City);
				this.entityData.City = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.City, this.entityData.City);
				OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CountryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCountryIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CountryId
		{
			get
			{
				return this.entityData.CountryId; 
			}
			
			set
			{
				if (this.entityData.CountryId == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.CountryId, this.entityData.CountryId);
				this.entityData.CountryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.CountryId, this.entityData.CountryId);
				OnPropertyChanged("CountryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QualificationLevelId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsQualificationLevelIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? QualificationLevelId
		{
			get
			{
				return this.entityData.QualificationLevelId; 
			}
			
			set
			{
				if (this.entityData.QualificationLevelId == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.QualificationLevelId, this.entityData.QualificationLevelId);
				this.entityData.QualificationLevelId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.QualificationLevelId, this.entityData.QualificationLevelId);
				OnPropertyChanged("QualificationLevelId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QualificationLevelOther property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String QualificationLevelOther
		{
			get
			{
				return this.entityData.QualificationLevelOther; 
			}
			
			set
			{
				if (this.entityData.QualificationLevelOther == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.QualificationLevelOther, this.entityData.QualificationLevelOther);
				this.entityData.QualificationLevelOther = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.QualificationLevelOther, this.entityData.QualificationLevelOther);
				OnPropertyChanged("QualificationLevelOther");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Major property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Major
		{
			get
			{
				return this.entityData.Major; 
			}
			
			set
			{
				if (this.entityData.Major == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.Major, this.entityData.Major);
				this.entityData.Major = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.Major, this.entityData.Major);
				OnPropertyChanged("Major");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Present property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsPresentNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Present
		{
			get
			{
				return this.entityData.Present; 
			}
			
			set
			{
				if (this.entityData.Present == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.Present, this.entityData.Present);
				this.entityData.Present = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.Present, this.entityData.Present);
				OnPropertyChanged("Present");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartMonth property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStartMonthNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? StartMonth
		{
			get
			{
				return this.entityData.StartMonth; 
			}
			
			set
			{
				if (this.entityData.StartMonth == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.StartMonth, this.entityData.StartMonth);
				this.entityData.StartMonth = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.StartMonth, this.entityData.StartMonth);
				OnPropertyChanged("StartMonth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndMonth property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEndMonthNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? EndMonth
		{
			get
			{
				return this.entityData.EndMonth; 
			}
			
			set
			{
				if (this.entityData.EndMonth == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.EndMonth, this.entityData.EndMonth);
				this.entityData.EndMonth = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.EndMonth, this.entityData.EndMonth);
				OnPropertyChanged("EndMonth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Graduated property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsGraduatedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Graduated
		{
			get
			{
				return this.entityData.Graduated; 
			}
			
			set
			{
				if (this.entityData.Graduated == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.Graduated, this.entityData.Graduated);
				this.entityData.Graduated = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.Graduated, this.entityData.Graduated);
				OnPropertyChanged("Graduated");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NonGraduatedCredits property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsNonGraduatedCreditsNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? NonGraduatedCredits
		{
			get
			{
				return this.entityData.NonGraduatedCredits; 
			}
			
			set
			{
				if (this.entityData.NonGraduatedCredits == value)
					return;
					
				OnColumnChanging(MemberQualificationColumn.NonGraduatedCredits, this.entityData.NonGraduatedCredits);
				this.entityData.NonGraduatedCredits = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberQualificationColumn.NonGraduatedCredits, this.entityData.NonGraduatedCredits);
				OnPropertyChanged("NonGraduatedCredits");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Members"/>.
		/// </summary>
		/// <value>The source Members for MemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Members MemberIdSource
      	{
            get { return entityData.MemberIdSource; }
            set { entityData.MemberIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SchoolName", "School Name", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FieldOfStudy", "Field Of Study", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Degree", "Degree", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Activities", "Activities", 256));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("City", "City", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("QualificationLevelOther", "Qualification Level Other", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Major", "Major", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "MemberQualification"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MemberQualificationId", "LinkedInInternalEducationId", "SchoolName", "FieldOfStudy", "StartYear", "EndYear", "Degree", "Activities", "Notes", "MemberID", "City", "CountryID", "QualificationLevelID", "QualificationLevelOther", "Major", "Present", "StartMonth", "EndMonth", "Graduated", "NonGraduatedCredits"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MemberQualificationEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MemberQualification) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MemberQualification>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MemberQualification);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MemberQualification Entity 
		///</summary>
		protected virtual MemberQualification Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MemberQualification copy = new MemberQualification();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MemberQualificationId = this.MemberQualificationId;
				copy.LinkedInInternalEducationId = this.LinkedInInternalEducationId;
				copy.SchoolName = this.SchoolName;
				copy.FieldOfStudy = this.FieldOfStudy;
				copy.StartYear = this.StartYear;
				copy.EndYear = this.EndYear;
				copy.Degree = this.Degree;
				copy.Activities = this.Activities;
				copy.Notes = this.Notes;
				copy.MemberId = this.MemberId;
				copy.City = this.City;
				copy.CountryId = this.CountryId;
				copy.QualificationLevelId = this.QualificationLevelId;
				copy.QualificationLevelOther = this.QualificationLevelOther;
				copy.Major = this.Major;
				copy.Present = this.Present;
				copy.StartMonth = this.StartMonth;
				copy.EndMonth = this.EndMonth;
				copy.Graduated = this.Graduated;
				copy.NonGraduatedCredits = this.NonGraduatedCredits;
			
			if (this.MemberIdSource != null && existingCopies.Contains(this.MemberIdSource))
				copy.MemberIdSource = existingCopies[this.MemberIdSource] as Members;
			else
				copy.MemberIdSource = MakeCopyOf(this.MemberIdSource, existingCopies) as Members;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MemberQualification Entity 
		///</summary>
		public virtual MemberQualification Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MemberQualification Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MemberQualification DeepCopy()
		{
			return EntityHelper.Clone<MemberQualification>(this as MemberQualification);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MemberQualificationEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MemberQualificationEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MemberQualificationEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MemberQualificationColumn column)
		{
			switch(column)
			{
					case MemberQualificationColumn.MemberQualificationId:
					return entityData.MemberQualificationId != _originalData.MemberQualificationId;
					case MemberQualificationColumn.LinkedInInternalEducationId:
					return entityData.LinkedInInternalEducationId != _originalData.LinkedInInternalEducationId;
					case MemberQualificationColumn.SchoolName:
					return entityData.SchoolName != _originalData.SchoolName;
					case MemberQualificationColumn.FieldOfStudy:
					return entityData.FieldOfStudy != _originalData.FieldOfStudy;
					case MemberQualificationColumn.StartYear:
					return entityData.StartYear != _originalData.StartYear;
					case MemberQualificationColumn.EndYear:
					return entityData.EndYear != _originalData.EndYear;
					case MemberQualificationColumn.Degree:
					return entityData.Degree != _originalData.Degree;
					case MemberQualificationColumn.Activities:
					return entityData.Activities != _originalData.Activities;
					case MemberQualificationColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case MemberQualificationColumn.MemberId:
					return entityData.MemberId != _originalData.MemberId;
					case MemberQualificationColumn.City:
					return entityData.City != _originalData.City;
					case MemberQualificationColumn.CountryId:
					return entityData.CountryId != _originalData.CountryId;
					case MemberQualificationColumn.QualificationLevelId:
					return entityData.QualificationLevelId != _originalData.QualificationLevelId;
					case MemberQualificationColumn.QualificationLevelOther:
					return entityData.QualificationLevelOther != _originalData.QualificationLevelOther;
					case MemberQualificationColumn.Major:
					return entityData.Major != _originalData.Major;
					case MemberQualificationColumn.Present:
					return entityData.Present != _originalData.Present;
					case MemberQualificationColumn.StartMonth:
					return entityData.StartMonth != _originalData.StartMonth;
					case MemberQualificationColumn.EndMonth:
					return entityData.EndMonth != _originalData.EndMonth;
					case MemberQualificationColumn.Graduated:
					return entityData.Graduated != _originalData.Graduated;
					case MemberQualificationColumn.NonGraduatedCredits:
					return entityData.NonGraduatedCredits != _originalData.NonGraduatedCredits;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MemberQualificationColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MemberQualificationId != _originalData.MemberQualificationId;
			result = result || entityData.LinkedInInternalEducationId != _originalData.LinkedInInternalEducationId;
			result = result || entityData.SchoolName != _originalData.SchoolName;
			result = result || entityData.FieldOfStudy != _originalData.FieldOfStudy;
			result = result || entityData.StartYear != _originalData.StartYear;
			result = result || entityData.EndYear != _originalData.EndYear;
			result = result || entityData.Degree != _originalData.Degree;
			result = result || entityData.Activities != _originalData.Activities;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.MemberId != _originalData.MemberId;
			result = result || entityData.City != _originalData.City;
			result = result || entityData.CountryId != _originalData.CountryId;
			result = result || entityData.QualificationLevelId != _originalData.QualificationLevelId;
			result = result || entityData.QualificationLevelOther != _originalData.QualificationLevelOther;
			result = result || entityData.Major != _originalData.Major;
			result = result || entityData.Present != _originalData.Present;
			result = result || entityData.StartMonth != _originalData.StartMonth;
			result = result || entityData.EndMonth != _originalData.EndMonth;
			result = result || entityData.Graduated != _originalData.Graduated;
			result = result || entityData.NonGraduatedCredits != _originalData.NonGraduatedCredits;
			return result;
		}	
		
		///<summary>
		///  Returns a MemberQualification Entity with the original data.
		///</summary>
		public MemberQualification GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMemberQualification(
				_originalData.LinkedInInternalEducationId,
				_originalData.SchoolName,
				_originalData.FieldOfStudy,
				_originalData.StartYear,
				_originalData.EndYear,
				_originalData.Degree,
				_originalData.Activities,
				_originalData.Notes,
				_originalData.MemberId,
				_originalData.City,
				_originalData.CountryId,
				_originalData.QualificationLevelId,
				_originalData.QualificationLevelOther,
				_originalData.Major,
				_originalData.Present,
				_originalData.StartMonth,
				_originalData.EndMonth,
				_originalData.Graduated,
				_originalData.NonGraduatedCredits
				);
				
			return (MemberQualification)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MemberQualificationBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MemberQualificationBase)
				return ValueEquals(this, (MemberQualificationBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MemberQualificationBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MemberQualificationId.GetHashCode() ^ 
					((this.LinkedInInternalEducationId == null) ? string.Empty : this.LinkedInInternalEducationId.ToString()).GetHashCode() ^ 
					((this.SchoolName == null) ? string.Empty : this.SchoolName.ToString()).GetHashCode() ^ 
					((this.FieldOfStudy == null) ? string.Empty : this.FieldOfStudy.ToString()).GetHashCode() ^ 
					((this.StartYear == null) ? string.Empty : this.StartYear.ToString()).GetHashCode() ^ 
					((this.EndYear == null) ? string.Empty : this.EndYear.ToString()).GetHashCode() ^ 
					((this.Degree == null) ? string.Empty : this.Degree.ToString()).GetHashCode() ^ 
					((this.Activities == null) ? string.Empty : this.Activities.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					this.MemberId.GetHashCode() ^ 
					((this.City == null) ? string.Empty : this.City.ToString()).GetHashCode() ^ 
					((this.CountryId == null) ? string.Empty : this.CountryId.ToString()).GetHashCode() ^ 
					((this.QualificationLevelId == null) ? string.Empty : this.QualificationLevelId.ToString()).GetHashCode() ^ 
					((this.QualificationLevelOther == null) ? string.Empty : this.QualificationLevelOther.ToString()).GetHashCode() ^ 
					((this.Major == null) ? string.Empty : this.Major.ToString()).GetHashCode() ^ 
					((this.Present == null) ? string.Empty : this.Present.ToString()).GetHashCode() ^ 
					((this.StartMonth == null) ? string.Empty : this.StartMonth.ToString()).GetHashCode() ^ 
					((this.EndMonth == null) ? string.Empty : this.EndMonth.ToString()).GetHashCode() ^ 
					((this.Graduated == null) ? string.Empty : this.Graduated.ToString()).GetHashCode() ^ 
					((this.NonGraduatedCredits == null) ? string.Empty : this.NonGraduatedCredits.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MemberQualificationBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MemberQualificationBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MemberQualificationBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MemberQualificationBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MemberQualificationBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MemberQualificationBase Object1, MemberQualificationBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MemberQualificationId != Object2.MemberQualificationId)
				equal = false;
			if ( Object1.LinkedInInternalEducationId != null && Object2.LinkedInInternalEducationId != null )
			{
				if (Object1.LinkedInInternalEducationId != Object2.LinkedInInternalEducationId)
					equal = false;
			}
			else if (Object1.LinkedInInternalEducationId == null ^ Object2.LinkedInInternalEducationId == null )
			{
				equal = false;
			}
			if ( Object1.SchoolName != null && Object2.SchoolName != null )
			{
				if (Object1.SchoolName != Object2.SchoolName)
					equal = false;
			}
			else if (Object1.SchoolName == null ^ Object2.SchoolName == null )
			{
				equal = false;
			}
			if ( Object1.FieldOfStudy != null && Object2.FieldOfStudy != null )
			{
				if (Object1.FieldOfStudy != Object2.FieldOfStudy)
					equal = false;
			}
			else if (Object1.FieldOfStudy == null ^ Object2.FieldOfStudy == null )
			{
				equal = false;
			}
			if ( Object1.StartYear != null && Object2.StartYear != null )
			{
				if (Object1.StartYear != Object2.StartYear)
					equal = false;
			}
			else if (Object1.StartYear == null ^ Object2.StartYear == null )
			{
				equal = false;
			}
			if ( Object1.EndYear != null && Object2.EndYear != null )
			{
				if (Object1.EndYear != Object2.EndYear)
					equal = false;
			}
			else if (Object1.EndYear == null ^ Object2.EndYear == null )
			{
				equal = false;
			}
			if ( Object1.Degree != null && Object2.Degree != null )
			{
				if (Object1.Degree != Object2.Degree)
					equal = false;
			}
			else if (Object1.Degree == null ^ Object2.Degree == null )
			{
				equal = false;
			}
			if ( Object1.Activities != null && Object2.Activities != null )
			{
				if (Object1.Activities != Object2.Activities)
					equal = false;
			}
			else if (Object1.Activities == null ^ Object2.Activities == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if (Object1.MemberId != Object2.MemberId)
				equal = false;
			if ( Object1.City != null && Object2.City != null )
			{
				if (Object1.City != Object2.City)
					equal = false;
			}
			else if (Object1.City == null ^ Object2.City == null )
			{
				equal = false;
			}
			if ( Object1.CountryId != null && Object2.CountryId != null )
			{
				if (Object1.CountryId != Object2.CountryId)
					equal = false;
			}
			else if (Object1.CountryId == null ^ Object2.CountryId == null )
			{
				equal = false;
			}
			if ( Object1.QualificationLevelId != null && Object2.QualificationLevelId != null )
			{
				if (Object1.QualificationLevelId != Object2.QualificationLevelId)
					equal = false;
			}
			else if (Object1.QualificationLevelId == null ^ Object2.QualificationLevelId == null )
			{
				equal = false;
			}
			if ( Object1.QualificationLevelOther != null && Object2.QualificationLevelOther != null )
			{
				if (Object1.QualificationLevelOther != Object2.QualificationLevelOther)
					equal = false;
			}
			else if (Object1.QualificationLevelOther == null ^ Object2.QualificationLevelOther == null )
			{
				equal = false;
			}
			if ( Object1.Major != null && Object2.Major != null )
			{
				if (Object1.Major != Object2.Major)
					equal = false;
			}
			else if (Object1.Major == null ^ Object2.Major == null )
			{
				equal = false;
			}
			if ( Object1.Present != null && Object2.Present != null )
			{
				if (Object1.Present != Object2.Present)
					equal = false;
			}
			else if (Object1.Present == null ^ Object2.Present == null )
			{
				equal = false;
			}
			if ( Object1.StartMonth != null && Object2.StartMonth != null )
			{
				if (Object1.StartMonth != Object2.StartMonth)
					equal = false;
			}
			else if (Object1.StartMonth == null ^ Object2.StartMonth == null )
			{
				equal = false;
			}
			if ( Object1.EndMonth != null && Object2.EndMonth != null )
			{
				if (Object1.EndMonth != Object2.EndMonth)
					equal = false;
			}
			else if (Object1.EndMonth == null ^ Object2.EndMonth == null )
			{
				equal = false;
			}
			if ( Object1.Graduated != null && Object2.Graduated != null )
			{
				if (Object1.Graduated != Object2.Graduated)
					equal = false;
			}
			else if (Object1.Graduated == null ^ Object2.Graduated == null )
			{
				equal = false;
			}
			if ( Object1.NonGraduatedCredits != null && Object2.NonGraduatedCredits != null )
			{
				if (Object1.NonGraduatedCredits != Object2.NonGraduatedCredits)
					equal = false;
			}
			else if (Object1.NonGraduatedCredits == null ^ Object2.NonGraduatedCredits == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MemberQualificationBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MemberQualificationComparer GetComparer()
        {
            return new MemberQualificationComparer();
        }
        */

        // Comparer delegates back to MemberQualification
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MemberQualification rhs, MemberQualificationColumn which)
        {
            switch (which)
            {
            	
            	
            	case MemberQualificationColumn.MemberQualificationId:
            		return this.MemberQualificationId.CompareTo(rhs.MemberQualificationId);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.LinkedInInternalEducationId:
            		return this.LinkedInInternalEducationId.Value.CompareTo(rhs.LinkedInInternalEducationId.Value);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.SchoolName:
            		return this.SchoolName.CompareTo(rhs.SchoolName);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.FieldOfStudy:
            		return this.FieldOfStudy.CompareTo(rhs.FieldOfStudy);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.StartYear:
            		return this.StartYear.Value.CompareTo(rhs.StartYear.Value);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.EndYear:
            		return this.EndYear.Value.CompareTo(rhs.EndYear.Value);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.Degree:
            		return this.Degree.CompareTo(rhs.Degree);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.Activities:
            		return this.Activities.CompareTo(rhs.Activities);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.MemberId:
            		return this.MemberId.CompareTo(rhs.MemberId);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.City:
            		return this.City.CompareTo(rhs.City);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.CountryId:
            		return this.CountryId.Value.CompareTo(rhs.CountryId.Value);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.QualificationLevelId:
            		return this.QualificationLevelId.Value.CompareTo(rhs.QualificationLevelId.Value);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.QualificationLevelOther:
            		return this.QualificationLevelOther.CompareTo(rhs.QualificationLevelOther);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.Major:
            		return this.Major.CompareTo(rhs.Major);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.Present:
            		return this.Present.Value.CompareTo(rhs.Present.Value);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.StartMonth:
            		return this.StartMonth.Value.CompareTo(rhs.StartMonth.Value);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.EndMonth:
            		return this.EndMonth.Value.CompareTo(rhs.EndMonth.Value);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.Graduated:
            		return this.Graduated.Value.CompareTo(rhs.Graduated.Value);
            		
            		                 
            	
            	
            	case MemberQualificationColumn.NonGraduatedCredits:
            		return this.NonGraduatedCredits.Value.CompareTo(rhs.NonGraduatedCredits.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MemberQualificationKey> Members
		
		// member variable for the EntityId property
		private MemberQualificationKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MemberQualificationKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MemberQualificationKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MemberQualification")
					.Append("|").Append( this.MemberQualificationId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- MemberQualificationId: {0}{20}- LinkedInInternalEducationId: {1}{20}- SchoolName: {2}{20}- FieldOfStudy: {3}{20}- StartYear: {4}{20}- EndYear: {5}{20}- Degree: {6}{20}- Activities: {7}{20}- Notes: {8}{20}- MemberId: {9}{20}- City: {10}{20}- CountryId: {11}{20}- QualificationLevelId: {12}{20}- QualificationLevelOther: {13}{20}- Major: {14}{20}- Present: {15}{20}- StartMonth: {16}{20}- EndMonth: {17}{20}- Graduated: {18}{20}- NonGraduatedCredits: {19}{20}{22}", 
				this.MemberQualificationId,
				(this.LinkedInInternalEducationId == null) ? string.Empty : this.LinkedInInternalEducationId.ToString(),
				(this.SchoolName == null) ? string.Empty : this.SchoolName.ToString(),
				(this.FieldOfStudy == null) ? string.Empty : this.FieldOfStudy.ToString(),
				(this.StartYear == null) ? string.Empty : this.StartYear.ToString(),
				(this.EndYear == null) ? string.Empty : this.EndYear.ToString(),
				(this.Degree == null) ? string.Empty : this.Degree.ToString(),
				(this.Activities == null) ? string.Empty : this.Activities.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				this.MemberId,
				(this.City == null) ? string.Empty : this.City.ToString(),
				(this.CountryId == null) ? string.Empty : this.CountryId.ToString(),
				(this.QualificationLevelId == null) ? string.Empty : this.QualificationLevelId.ToString(),
				(this.QualificationLevelOther == null) ? string.Empty : this.QualificationLevelOther.ToString(),
				(this.Major == null) ? string.Empty : this.Major.ToString(),
				(this.Present == null) ? string.Empty : this.Present.ToString(),
				(this.StartMonth == null) ? string.Empty : this.StartMonth.ToString(),
				(this.EndMonth == null) ? string.Empty : this.EndMonth.ToString(),
				(this.Graduated == null) ? string.Empty : this.Graduated.ToString(),
				(this.NonGraduatedCredits == null) ? string.Empty : this.NonGraduatedCredits.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'MemberQualification' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MemberQualificationEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MemberQualificationId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "MemberQualification"</remarks>
		public System.Int32 MemberQualificationId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// LinkedInInternalEducationId : 
		/// </summary>
		public System.Int32?		  LinkedInInternalEducationId = null;
		
		/// <summary>
		/// SchoolName : 
		/// </summary>
		public System.String		  SchoolName = null;
		
		/// <summary>
		/// FieldOfStudy : 
		/// </summary>
		public System.String		  FieldOfStudy = null;
		
		/// <summary>
		/// StartYear : 
		/// </summary>
		public System.Int32?		  StartYear = null;
		
		/// <summary>
		/// EndYear : 
		/// </summary>
		public System.Int32?		  EndYear = null;
		
		/// <summary>
		/// Degree : 
		/// </summary>
		public System.String		  Degree = null;
		
		/// <summary>
		/// Activities : 
		/// </summary>
		public System.String		  Activities = null;
		
		/// <summary>
		/// Notes : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// MemberID : 
		/// </summary>
		public System.Int32		  MemberId = (int)0;
		
		/// <summary>
		/// City : 
		/// </summary>
		public System.String		  City = null;
		
		/// <summary>
		/// CountryID : 
		/// </summary>
		public System.Int32?		  CountryId = null;
		
		/// <summary>
		/// QualificationLevelID : 
		/// </summary>
		public System.Int32?		  QualificationLevelId = null;
		
		/// <summary>
		/// QualificationLevelOther : 
		/// </summary>
		public System.String		  QualificationLevelOther = null;
		
		/// <summary>
		/// Major : 
		/// </summary>
		public System.String		  Major = null;
		
		/// <summary>
		/// Present : 
		/// </summary>
		public System.Boolean?		  Present = null;
		
		/// <summary>
		/// StartMonth : 
		/// </summary>
		public System.Int32?		  StartMonth = null;
		
		/// <summary>
		/// EndMonth : 
		/// </summary>
		public System.Int32?		  EndMonth = null;
		
		/// <summary>
		/// Graduated : 
		/// </summary>
		public System.Boolean?		  Graduated = null;
		
		/// <summary>
		/// NonGraduatedCredits : 
		/// </summary>
		public System.Int32?		  NonGraduatedCredits = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Members _memberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Members"/>.
		/// </summary>
		/// <value>The source Members for MemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Members MemberIdSource
      	{
            get { return this._memberIdSource; }
            set { this._memberIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MemberQualificationEntityData _tmp = new MemberQualificationEntityData();
						
			_tmp.MemberQualificationId = this.MemberQualificationId;
			
			_tmp.LinkedInInternalEducationId = this.LinkedInInternalEducationId;
			_tmp.SchoolName = this.SchoolName;
			_tmp.FieldOfStudy = this.FieldOfStudy;
			_tmp.StartYear = this.StartYear;
			_tmp.EndYear = this.EndYear;
			_tmp.Degree = this.Degree;
			_tmp.Activities = this.Activities;
			_tmp.Notes = this.Notes;
			_tmp.MemberId = this.MemberId;
			_tmp.City = this.City;
			_tmp.CountryId = this.CountryId;
			_tmp.QualificationLevelId = this.QualificationLevelId;
			_tmp.QualificationLevelOther = this.QualificationLevelOther;
			_tmp.Major = this.Major;
			_tmp.Present = this.Present;
			_tmp.StartMonth = this.StartMonth;
			_tmp.EndMonth = this.EndMonth;
			_tmp.Graduated = this.Graduated;
			_tmp.NonGraduatedCredits = this.NonGraduatedCredits;
			
			#region Source Parent Composite Entities
			if (this.MemberIdSource != null)
				_tmp.MemberIdSource = MakeCopyOf(this.MemberIdSource) as Members;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MemberQualificationEntityData _tmp = new MemberQualificationEntityData();
						
			_tmp.MemberQualificationId = this.MemberQualificationId;
			
			_tmp.LinkedInInternalEducationId = this.LinkedInInternalEducationId;
			_tmp.SchoolName = this.SchoolName;
			_tmp.FieldOfStudy = this.FieldOfStudy;
			_tmp.StartYear = this.StartYear;
			_tmp.EndYear = this.EndYear;
			_tmp.Degree = this.Degree;
			_tmp.Activities = this.Activities;
			_tmp.Notes = this.Notes;
			_tmp.MemberId = this.MemberId;
			_tmp.City = this.City;
			_tmp.CountryId = this.CountryId;
			_tmp.QualificationLevelId = this.QualificationLevelId;
			_tmp.QualificationLevelOther = this.QualificationLevelOther;
			_tmp.Major = this.Major;
			_tmp.Present = this.Present;
			_tmp.StartMonth = this.StartMonth;
			_tmp.EndMonth = this.EndMonth;
			_tmp.Graduated = this.Graduated;
			_tmp.NonGraduatedCredits = this.NonGraduatedCredits;
			
			#region Source Parent Composite Entities
			if (this.MemberIdSource != null && existingCopies.Contains(this.MemberIdSource))
				_tmp.MemberIdSource = existingCopies[this.MemberIdSource] as Members;
			else
				_tmp.MemberIdSource = MakeCopyOf(this.MemberIdSource, existingCopies) as Members;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberQualificationColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MemberQualificationColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberQualificationColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MemberQualificationColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberQualificationColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MemberQualificationColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MemberQualificationEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MemberQualificationEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberQualificationColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MemberQualificationColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MemberQualificationEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MemberQualificationEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MemberQualificationEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MemberQualification"/> object.
	/// </remarks>
	public class MemberQualificationEventArgs : System.EventArgs
	{
		private MemberQualificationColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MemberQualificationEventArgs class.
		///</summary>
		public MemberQualificationEventArgs(MemberQualificationColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MemberQualificationEventArgs class.
		///</summary>
		public MemberQualificationEventArgs(MemberQualificationColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MemberQualificationColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MemberQualificationColumn" />
		public MemberQualificationColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MemberQualification related events.
	///</summary>
	public delegate void MemberQualificationEventHandler(object sender, MemberQualificationEventArgs e);
	
	#region MemberQualificationComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MemberQualificationComparer : System.Collections.Generic.IComparer<MemberQualification>
	{
		MemberQualificationColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MemberQualificationComparer"/> class.
        /// </summary>
		public MemberQualificationComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MemberQualificationComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MemberQualificationComparer(MemberQualificationColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="MemberQualification"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="MemberQualification"/> to compare.</param>
        /// <param name="b">The second <c>MemberQualification</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MemberQualification a, MemberQualification b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MemberQualification entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MemberQualification a, MemberQualification b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MemberQualificationColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MemberQualificationKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MemberQualification"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MemberQualificationKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MemberQualificationKey class.
		/// </summary>
		public MemberQualificationKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MemberQualificationKey class.
		/// </summary>
		public MemberQualificationKey(MemberQualificationBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MemberQualificationId = entity.MemberQualificationId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MemberQualificationKey class.
		/// </summary>
		public MemberQualificationKey(System.Int32 _memberQualificationId)
		{
			#region Init Properties

			this.MemberQualificationId = _memberQualificationId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MemberQualificationBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MemberQualificationBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MemberQualificationId property
		private System.Int32 _memberQualificationId;
		
		/// <summary>
		/// Gets or sets the MemberQualificationId property.
		/// </summary>
		public System.Int32 MemberQualificationId
		{
			get { return _memberQualificationId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MemberQualificationId = value;
				
				_memberQualificationId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MemberQualificationId = ( values["MemberQualificationId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MemberQualificationId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MemberQualificationId", MemberQualificationId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MemberQualificationId: {0}{1}",
								MemberQualificationId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MemberQualificationColumn Enum
	
	/// <summary>
	/// Enumerate the MemberQualification columns.
	/// </summary>
	[Serializable]
	public enum MemberQualificationColumn : int
	{
		/// <summary>
		/// MemberQualificationId : 
		/// </summary>
		[EnumTextValue("MemberQualificationId")]
		[ColumnEnum("MemberQualificationId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MemberQualificationId = 1,
		/// <summary>
		/// LinkedInInternalEducationId : 
		/// </summary>
		[EnumTextValue("LinkedInInternalEducationId")]
		[ColumnEnum("LinkedInInternalEducationId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LinkedInInternalEducationId = 2,
		/// <summary>
		/// SchoolName : 
		/// </summary>
		[EnumTextValue("SchoolName")]
		[ColumnEnum("SchoolName", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		SchoolName = 3,
		/// <summary>
		/// FieldOfStudy : 
		/// </summary>
		[EnumTextValue("FieldOfStudy")]
		[ColumnEnum("FieldOfStudy", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		FieldOfStudy = 4,
		/// <summary>
		/// StartYear : 
		/// </summary>
		[EnumTextValue("StartYear")]
		[ColumnEnum("StartYear", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		StartYear = 5,
		/// <summary>
		/// EndYear : 
		/// </summary>
		[EnumTextValue("EndYear")]
		[ColumnEnum("EndYear", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EndYear = 6,
		/// <summary>
		/// Degree : 
		/// </summary>
		[EnumTextValue("Degree")]
		[ColumnEnum("Degree", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Degree = 7,
		/// <summary>
		/// Activities : 
		/// </summary>
		[EnumTextValue("Activities")]
		[ColumnEnum("Activities", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		Activities = 8,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("Notes")]
		[ColumnEnum("Notes", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Notes = 9,
		/// <summary>
		/// MemberId : 
		/// </summary>
		[EnumTextValue("MemberID")]
		[ColumnEnum("MemberID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MemberId = 10,
		/// <summary>
		/// City : 
		/// </summary>
		[EnumTextValue("City")]
		[ColumnEnum("City", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		City = 11,
		/// <summary>
		/// CountryId : 
		/// </summary>
		[EnumTextValue("CountryID")]
		[ColumnEnum("CountryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CountryId = 12,
		/// <summary>
		/// QualificationLevelId : 
		/// </summary>
		[EnumTextValue("QualificationLevelID")]
		[ColumnEnum("QualificationLevelID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		QualificationLevelId = 13,
		/// <summary>
		/// QualificationLevelOther : 
		/// </summary>
		[EnumTextValue("QualificationLevelOther")]
		[ColumnEnum("QualificationLevelOther", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		QualificationLevelOther = 14,
		/// <summary>
		/// Major : 
		/// </summary>
		[EnumTextValue("Major")]
		[ColumnEnum("Major", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Major = 15,
		/// <summary>
		/// Present : 
		/// </summary>
		[EnumTextValue("Present")]
		[ColumnEnum("Present", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Present = 16,
		/// <summary>
		/// StartMonth : 
		/// </summary>
		[EnumTextValue("StartMonth")]
		[ColumnEnum("StartMonth", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		StartMonth = 17,
		/// <summary>
		/// EndMonth : 
		/// </summary>
		[EnumTextValue("EndMonth")]
		[ColumnEnum("EndMonth", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EndMonth = 18,
		/// <summary>
		/// Graduated : 
		/// </summary>
		[EnumTextValue("Graduated")]
		[ColumnEnum("Graduated", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Graduated = 19,
		/// <summary>
		/// NonGraduatedCredits : 
		/// </summary>
		[EnumTextValue("NonGraduatedCredits")]
		[ColumnEnum("NonGraduatedCredits", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		NonGraduatedCredits = 20
	}//End enum

	#endregion MemberQualificationColumn Enum

} // end namespace

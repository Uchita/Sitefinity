
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file MemberWizard.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'MemberWizard' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MemberWizardBase : EntityBase, IMemberWizard, IEntityId<MemberWizardKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MemberWizardEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MemberWizardEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MemberWizardEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MemberWizard> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MemberWizardEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MemberWizardEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MemberWizardBase"/> instance.
		///</summary>
		public MemberWizardBase()
		{
			this.entityData = new MemberWizardEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MemberWizardBase"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_memberWizardParentId"></param>
		///<param name="_profileTitle"></param>
		///<param name="_cvTitle"></param>
		///<param name="_rolePreferencesTitle"></param>
		///<param name="_educationTitle"></param>
		///<param name="_membershipsTitle"></param>
		///<param name="_experienceTitle"></param>
		///<param name="_skillsTitle"></param>
		///<param name="_profileEnable"></param>
		///<param name="_cvEnable"></param>
		///<param name="_rolePreferencesEnable"></param>
		///<param name="_educationEnable"></param>
		///<param name="_membershipsEnable"></param>
		///<param name="_experienceEnable"></param>
		///<param name="_skillsEnable"></param>
		///<param name="_globalTemplate"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_lastModified"></param>
		///<param name="_directorshipTitle"></param>
		///<param name="_directorshipEnable"></param>
		///<param name="_skills"></param>
		///<param name="_licenseTypes"></param>
		///<param name="_summaryTitle"></param>
		///<param name="_personalDetailsTitle"></param>
		///<param name="_licensesTitle"></param>
		///<param name="_attachCoverLetterTitle"></param>
		///<param name="_languagesTitle"></param>
		///<param name="_referencesTitle"></param>
		///<param name="_customQuestionTitle"></param>
		///<param name="_summaryPoints"></param>
		///<param name="_personalDetailsPoints"></param>
		///<param name="_licensesPoints"></param>
		///<param name="_attachCoverLetterPoints"></param>
		///<param name="_languagesPoints"></param>
		///<param name="_referencesPoints"></param>
		///<param name="_customQuestionPoints"></param>
		///<param name="_profilePoints"></param>
		///<param name="_cvPoints"></param>
		///<param name="_rolePreferencesPoints"></param>
		///<param name="_educationPoints"></param>
		///<param name="_membershipsPoints"></param>
		///<param name="_experiencePoints"></param>
		///<param name="_skillsPoints"></param>
		///<param name="_directorshipPoints"></param>
		///<param name="_wizardLanguageXml"></param>
		///<param name="_customQuestionsXml"></param>
		///<param name="_minExperiencesEntry"></param>
		///<param name="_minReferencesEntry"></param>
		///<param name="_minEducationsEntry"></param>
		///<param name="_qualificationNames"></param>
		public MemberWizardBase(System.Int32? _siteId, System.Int32? _memberWizardParentId, 
			System.String _profileTitle, System.String _cvTitle, System.String _rolePreferencesTitle, 
			System.String _educationTitle, System.String _membershipsTitle, System.String _experienceTitle, 
			System.String _skillsTitle, System.Boolean? _profileEnable, System.Boolean? _cvEnable, 
			System.Boolean? _rolePreferencesEnable, System.Boolean? _educationEnable, System.Boolean? _membershipsEnable, 
			System.Boolean? _experienceEnable, System.Boolean? _skillsEnable, System.Boolean _globalTemplate, 
			System.Int32 _lastModifiedBy, System.DateTime _lastModified, System.String _directorshipTitle, 
			System.Boolean? _directorshipEnable, System.String _skills, System.String _licenseTypes, 
			System.String _summaryTitle, System.String _personalDetailsTitle, System.String _licensesTitle, 
			System.String _attachCoverLetterTitle, System.String _languagesTitle, System.String _referencesTitle, 
			System.String _customQuestionTitle, System.Int32 _summaryPoints, System.Int32 _personalDetailsPoints, 
			System.Int32 _licensesPoints, System.Int32 _attachCoverLetterPoints, System.Int32 _languagesPoints, 
			System.Int32 _referencesPoints, System.Int32 _customQuestionPoints, System.Int32 _profilePoints, 
			System.Int32 _cvPoints, System.Int32 _rolePreferencesPoints, System.Int32 _educationPoints, 
			System.Int32 _membershipsPoints, System.Int32 _experiencePoints, System.Int32 _skillsPoints, 
			System.Int32 _directorshipPoints, System.String _wizardLanguageXml, System.String _customQuestionsXml, 
			System.Int16 _minExperiencesEntry, System.Int16 _minReferencesEntry, System.Int16 _minEducationsEntry, 
			System.String _qualificationNames)
		{
			this.entityData = new MemberWizardEntityData();
			this.backupData = null;

			this.SiteId = _siteId;
			this.MemberWizardParentId = _memberWizardParentId;
			this.ProfileTitle = _profileTitle;
			this.CvTitle = _cvTitle;
			this.RolePreferencesTitle = _rolePreferencesTitle;
			this.EducationTitle = _educationTitle;
			this.MembershipsTitle = _membershipsTitle;
			this.ExperienceTitle = _experienceTitle;
			this.SkillsTitle = _skillsTitle;
			this.ProfileEnable = _profileEnable;
			this.CvEnable = _cvEnable;
			this.RolePreferencesEnable = _rolePreferencesEnable;
			this.EducationEnable = _educationEnable;
			this.MembershipsEnable = _membershipsEnable;
			this.ExperienceEnable = _experienceEnable;
			this.SkillsEnable = _skillsEnable;
			this.GlobalTemplate = _globalTemplate;
			this.LastModifiedBy = _lastModifiedBy;
			this.LastModified = _lastModified;
			this.DirectorshipTitle = _directorshipTitle;
			this.DirectorshipEnable = _directorshipEnable;
			this.Skills = _skills;
			this.LicenseTypes = _licenseTypes;
			this.SummaryTitle = _summaryTitle;
			this.PersonalDetailsTitle = _personalDetailsTitle;
			this.LicensesTitle = _licensesTitle;
			this.AttachCoverLetterTitle = _attachCoverLetterTitle;
			this.LanguagesTitle = _languagesTitle;
			this.ReferencesTitle = _referencesTitle;
			this.CustomQuestionTitle = _customQuestionTitle;
			this.SummaryPoints = _summaryPoints;
			this.PersonalDetailsPoints = _personalDetailsPoints;
			this.LicensesPoints = _licensesPoints;
			this.AttachCoverLetterPoints = _attachCoverLetterPoints;
			this.LanguagesPoints = _languagesPoints;
			this.ReferencesPoints = _referencesPoints;
			this.CustomQuestionPoints = _customQuestionPoints;
			this.ProfilePoints = _profilePoints;
			this.CvPoints = _cvPoints;
			this.RolePreferencesPoints = _rolePreferencesPoints;
			this.EducationPoints = _educationPoints;
			this.MembershipsPoints = _membershipsPoints;
			this.ExperiencePoints = _experiencePoints;
			this.SkillsPoints = _skillsPoints;
			this.DirectorshipPoints = _directorshipPoints;
			this.WizardLanguageXml = _wizardLanguageXml;
			this.CustomQuestionsXml = _customQuestionsXml;
			this.MinExperiencesEntry = _minExperiencesEntry;
			this.MinReferencesEntry = _minReferencesEntry;
			this.MinEducationsEntry = _minEducationsEntry;
			this.QualificationNames = _qualificationNames;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MemberWizard"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_memberWizardParentId"></param>
		///<param name="_profileTitle"></param>
		///<param name="_cvTitle"></param>
		///<param name="_rolePreferencesTitle"></param>
		///<param name="_educationTitle"></param>
		///<param name="_membershipsTitle"></param>
		///<param name="_experienceTitle"></param>
		///<param name="_skillsTitle"></param>
		///<param name="_profileEnable"></param>
		///<param name="_cvEnable"></param>
		///<param name="_rolePreferencesEnable"></param>
		///<param name="_educationEnable"></param>
		///<param name="_membershipsEnable"></param>
		///<param name="_experienceEnable"></param>
		///<param name="_skillsEnable"></param>
		///<param name="_globalTemplate"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_lastModified"></param>
		///<param name="_directorshipTitle"></param>
		///<param name="_directorshipEnable"></param>
		///<param name="_skills"></param>
		///<param name="_licenseTypes"></param>
		///<param name="_summaryTitle"></param>
		///<param name="_personalDetailsTitle"></param>
		///<param name="_licensesTitle"></param>
		///<param name="_attachCoverLetterTitle"></param>
		///<param name="_languagesTitle"></param>
		///<param name="_referencesTitle"></param>
		///<param name="_customQuestionTitle"></param>
		///<param name="_summaryPoints"></param>
		///<param name="_personalDetailsPoints"></param>
		///<param name="_licensesPoints"></param>
		///<param name="_attachCoverLetterPoints"></param>
		///<param name="_languagesPoints"></param>
		///<param name="_referencesPoints"></param>
		///<param name="_customQuestionPoints"></param>
		///<param name="_profilePoints"></param>
		///<param name="_cvPoints"></param>
		///<param name="_rolePreferencesPoints"></param>
		///<param name="_educationPoints"></param>
		///<param name="_membershipsPoints"></param>
		///<param name="_experiencePoints"></param>
		///<param name="_skillsPoints"></param>
		///<param name="_directorshipPoints"></param>
		///<param name="_wizardLanguageXml"></param>
		///<param name="_customQuestionsXml"></param>
		///<param name="_minExperiencesEntry"></param>
		///<param name="_minReferencesEntry"></param>
		///<param name="_minEducationsEntry"></param>
		///<param name="_qualificationNames"></param>
		public static MemberWizard CreateMemberWizard(System.Int32? _siteId, System.Int32? _memberWizardParentId, 
			System.String _profileTitle, System.String _cvTitle, System.String _rolePreferencesTitle, 
			System.String _educationTitle, System.String _membershipsTitle, System.String _experienceTitle, 
			System.String _skillsTitle, System.Boolean? _profileEnable, System.Boolean? _cvEnable, 
			System.Boolean? _rolePreferencesEnable, System.Boolean? _educationEnable, System.Boolean? _membershipsEnable, 
			System.Boolean? _experienceEnable, System.Boolean? _skillsEnable, System.Boolean _globalTemplate, 
			System.Int32 _lastModifiedBy, System.DateTime _lastModified, System.String _directorshipTitle, 
			System.Boolean? _directorshipEnable, System.String _skills, System.String _licenseTypes, 
			System.String _summaryTitle, System.String _personalDetailsTitle, System.String _licensesTitle, 
			System.String _attachCoverLetterTitle, System.String _languagesTitle, System.String _referencesTitle, 
			System.String _customQuestionTitle, System.Int32 _summaryPoints, System.Int32 _personalDetailsPoints, 
			System.Int32 _licensesPoints, System.Int32 _attachCoverLetterPoints, System.Int32 _languagesPoints, 
			System.Int32 _referencesPoints, System.Int32 _customQuestionPoints, System.Int32 _profilePoints, 
			System.Int32 _cvPoints, System.Int32 _rolePreferencesPoints, System.Int32 _educationPoints, 
			System.Int32 _membershipsPoints, System.Int32 _experiencePoints, System.Int32 _skillsPoints, 
			System.Int32 _directorshipPoints, System.String _wizardLanguageXml, System.String _customQuestionsXml, 
			System.Int16 _minExperiencesEntry, System.Int16 _minReferencesEntry, System.Int16 _minEducationsEntry, 
			System.String _qualificationNames)
		{
			MemberWizard newMemberWizard = new MemberWizard();
			newMemberWizard.SiteId = _siteId;
			newMemberWizard.MemberWizardParentId = _memberWizardParentId;
			newMemberWizard.ProfileTitle = _profileTitle;
			newMemberWizard.CvTitle = _cvTitle;
			newMemberWizard.RolePreferencesTitle = _rolePreferencesTitle;
			newMemberWizard.EducationTitle = _educationTitle;
			newMemberWizard.MembershipsTitle = _membershipsTitle;
			newMemberWizard.ExperienceTitle = _experienceTitle;
			newMemberWizard.SkillsTitle = _skillsTitle;
			newMemberWizard.ProfileEnable = _profileEnable;
			newMemberWizard.CvEnable = _cvEnable;
			newMemberWizard.RolePreferencesEnable = _rolePreferencesEnable;
			newMemberWizard.EducationEnable = _educationEnable;
			newMemberWizard.MembershipsEnable = _membershipsEnable;
			newMemberWizard.ExperienceEnable = _experienceEnable;
			newMemberWizard.SkillsEnable = _skillsEnable;
			newMemberWizard.GlobalTemplate = _globalTemplate;
			newMemberWizard.LastModifiedBy = _lastModifiedBy;
			newMemberWizard.LastModified = _lastModified;
			newMemberWizard.DirectorshipTitle = _directorshipTitle;
			newMemberWizard.DirectorshipEnable = _directorshipEnable;
			newMemberWizard.Skills = _skills;
			newMemberWizard.LicenseTypes = _licenseTypes;
			newMemberWizard.SummaryTitle = _summaryTitle;
			newMemberWizard.PersonalDetailsTitle = _personalDetailsTitle;
			newMemberWizard.LicensesTitle = _licensesTitle;
			newMemberWizard.AttachCoverLetterTitle = _attachCoverLetterTitle;
			newMemberWizard.LanguagesTitle = _languagesTitle;
			newMemberWizard.ReferencesTitle = _referencesTitle;
			newMemberWizard.CustomQuestionTitle = _customQuestionTitle;
			newMemberWizard.SummaryPoints = _summaryPoints;
			newMemberWizard.PersonalDetailsPoints = _personalDetailsPoints;
			newMemberWizard.LicensesPoints = _licensesPoints;
			newMemberWizard.AttachCoverLetterPoints = _attachCoverLetterPoints;
			newMemberWizard.LanguagesPoints = _languagesPoints;
			newMemberWizard.ReferencesPoints = _referencesPoints;
			newMemberWizard.CustomQuestionPoints = _customQuestionPoints;
			newMemberWizard.ProfilePoints = _profilePoints;
			newMemberWizard.CvPoints = _cvPoints;
			newMemberWizard.RolePreferencesPoints = _rolePreferencesPoints;
			newMemberWizard.EducationPoints = _educationPoints;
			newMemberWizard.MembershipsPoints = _membershipsPoints;
			newMemberWizard.ExperiencePoints = _experiencePoints;
			newMemberWizard.SkillsPoints = _skillsPoints;
			newMemberWizard.DirectorshipPoints = _directorshipPoints;
			newMemberWizard.WizardLanguageXml = _wizardLanguageXml;
			newMemberWizard.CustomQuestionsXml = _customQuestionsXml;
			newMemberWizard.MinExperiencesEntry = _minExperiencesEntry;
			newMemberWizard.MinReferencesEntry = _minReferencesEntry;
			newMemberWizard.MinEducationsEntry = _minEducationsEntry;
			newMemberWizard.QualificationNames = _qualificationNames;
			return newMemberWizard;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MemberWizardId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MemberWizardId
		{
			get
			{
				return this.entityData.MemberWizardId; 
			}
			
			set
			{
				if (this.entityData.MemberWizardId == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.MemberWizardId, this.entityData.MemberWizardId);
				this.entityData.MemberWizardId = value;
				this.EntityId.MemberWizardId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.MemberWizardId, this.entityData.MemberWizardId);
				OnPropertyChanged("MemberWizardId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSiteIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SiteId
		{
			get
			{
				return this.entityData.SiteId; 
			}
			
			set
			{
				if (this.entityData.SiteId == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.SiteId, this.entityData.SiteId);
				this.entityData.SiteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.SiteId, this.entityData.SiteId);
				OnPropertyChanged("SiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberWizardParentId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMemberWizardParentIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MemberWizardParentId
		{
			get
			{
				return this.entityData.MemberWizardParentId; 
			}
			
			set
			{
				if (this.entityData.MemberWizardParentId == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.MemberWizardParentId, this.entityData.MemberWizardParentId);
				this.entityData.MemberWizardParentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.MemberWizardParentId, this.entityData.MemberWizardParentId);
				OnPropertyChanged("MemberWizardParentId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProfileTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 512)]
		public virtual System.String ProfileTitle
		{
			get
			{
				return this.entityData.ProfileTitle; 
			}
			
			set
			{
				if (this.entityData.ProfileTitle == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.ProfileTitle, this.entityData.ProfileTitle);
				this.entityData.ProfileTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.ProfileTitle, this.entityData.ProfileTitle);
				OnPropertyChanged("ProfileTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CvTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 512)]
		public virtual System.String CvTitle
		{
			get
			{
				return this.entityData.CvTitle; 
			}
			
			set
			{
				if (this.entityData.CvTitle == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.CvTitle, this.entityData.CvTitle);
				this.entityData.CvTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.CvTitle, this.entityData.CvTitle);
				OnPropertyChanged("CvTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RolePreferencesTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 512)]
		public virtual System.String RolePreferencesTitle
		{
			get
			{
				return this.entityData.RolePreferencesTitle; 
			}
			
			set
			{
				if (this.entityData.RolePreferencesTitle == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.RolePreferencesTitle, this.entityData.RolePreferencesTitle);
				this.entityData.RolePreferencesTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.RolePreferencesTitle, this.entityData.RolePreferencesTitle);
				OnPropertyChanged("RolePreferencesTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EducationTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 512)]
		public virtual System.String EducationTitle
		{
			get
			{
				return this.entityData.EducationTitle; 
			}
			
			set
			{
				if (this.entityData.EducationTitle == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.EducationTitle, this.entityData.EducationTitle);
				this.entityData.EducationTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.EducationTitle, this.entityData.EducationTitle);
				OnPropertyChanged("EducationTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MembershipsTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 512)]
		public virtual System.String MembershipsTitle
		{
			get
			{
				return this.entityData.MembershipsTitle; 
			}
			
			set
			{
				if (this.entityData.MembershipsTitle == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.MembershipsTitle, this.entityData.MembershipsTitle);
				this.entityData.MembershipsTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.MembershipsTitle, this.entityData.MembershipsTitle);
				OnPropertyChanged("MembershipsTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExperienceTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 512)]
		public virtual System.String ExperienceTitle
		{
			get
			{
				return this.entityData.ExperienceTitle; 
			}
			
			set
			{
				if (this.entityData.ExperienceTitle == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.ExperienceTitle, this.entityData.ExperienceTitle);
				this.entityData.ExperienceTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.ExperienceTitle, this.entityData.ExperienceTitle);
				OnPropertyChanged("ExperienceTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SkillsTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 512)]
		public virtual System.String SkillsTitle
		{
			get
			{
				return this.entityData.SkillsTitle; 
			}
			
			set
			{
				if (this.entityData.SkillsTitle == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.SkillsTitle, this.entityData.SkillsTitle);
				this.entityData.SkillsTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.SkillsTitle, this.entityData.SkillsTitle);
				OnPropertyChanged("SkillsTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProfileEnable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsProfileEnableNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ProfileEnable
		{
			get
			{
				return this.entityData.ProfileEnable; 
			}
			
			set
			{
				if (this.entityData.ProfileEnable == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.ProfileEnable, this.entityData.ProfileEnable);
				this.entityData.ProfileEnable = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.ProfileEnable, this.entityData.ProfileEnable);
				OnPropertyChanged("ProfileEnable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CvEnable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsCvEnableNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? CvEnable
		{
			get
			{
				return this.entityData.CvEnable; 
			}
			
			set
			{
				if (this.entityData.CvEnable == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.CvEnable, this.entityData.CvEnable);
				this.entityData.CvEnable = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.CvEnable, this.entityData.CvEnable);
				OnPropertyChanged("CvEnable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RolePreferencesEnable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsRolePreferencesEnableNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? RolePreferencesEnable
		{
			get
			{
				return this.entityData.RolePreferencesEnable; 
			}
			
			set
			{
				if (this.entityData.RolePreferencesEnable == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.RolePreferencesEnable, this.entityData.RolePreferencesEnable);
				this.entityData.RolePreferencesEnable = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.RolePreferencesEnable, this.entityData.RolePreferencesEnable);
				OnPropertyChanged("RolePreferencesEnable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EducationEnable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEducationEnableNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? EducationEnable
		{
			get
			{
				return this.entityData.EducationEnable; 
			}
			
			set
			{
				if (this.entityData.EducationEnable == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.EducationEnable, this.entityData.EducationEnable);
				this.entityData.EducationEnable = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.EducationEnable, this.entityData.EducationEnable);
				OnPropertyChanged("EducationEnable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MembershipsEnable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsMembershipsEnableNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? MembershipsEnable
		{
			get
			{
				return this.entityData.MembershipsEnable; 
			}
			
			set
			{
				if (this.entityData.MembershipsEnable == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.MembershipsEnable, this.entityData.MembershipsEnable);
				this.entityData.MembershipsEnable = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.MembershipsEnable, this.entityData.MembershipsEnable);
				OnPropertyChanged("MembershipsEnable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExperienceEnable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsExperienceEnableNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ExperienceEnable
		{
			get
			{
				return this.entityData.ExperienceEnable; 
			}
			
			set
			{
				if (this.entityData.ExperienceEnable == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.ExperienceEnable, this.entityData.ExperienceEnable);
				this.entityData.ExperienceEnable = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.ExperienceEnable, this.entityData.ExperienceEnable);
				OnPropertyChanged("ExperienceEnable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SkillsEnable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsSkillsEnableNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? SkillsEnable
		{
			get
			{
				return this.entityData.SkillsEnable; 
			}
			
			set
			{
				if (this.entityData.SkillsEnable == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.SkillsEnable, this.entityData.SkillsEnable);
				this.entityData.SkillsEnable = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.SkillsEnable, this.entityData.SkillsEnable);
				OnPropertyChanged("SkillsEnable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GlobalTemplate property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean GlobalTemplate
		{
			get
			{
				return this.entityData.GlobalTemplate; 
			}
			
			set
			{
				if (this.entityData.GlobalTemplate == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.GlobalTemplate, this.entityData.GlobalTemplate);
				this.entityData.GlobalTemplate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.GlobalTemplate, this.entityData.GlobalTemplate);
				OnPropertyChanged("GlobalTemplate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LastModifiedBy
		{
			get
			{
				return this.entityData.LastModifiedBy; 
			}
			
			set
			{
				if (this.entityData.LastModifiedBy == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				this.entityData.LastModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				OnPropertyChanged("LastModifiedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModified property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastModified
		{
			get
			{
				return this.entityData.LastModified; 
			}
			
			set
			{
				if (this.entityData.LastModified == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.LastModified, this.entityData.LastModified);
				this.entityData.LastModified = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.LastModified, this.entityData.LastModified);
				OnPropertyChanged("LastModified");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DirectorshipTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 512)]
		public virtual System.String DirectorshipTitle
		{
			get
			{
				return this.entityData.DirectorshipTitle; 
			}
			
			set
			{
				if (this.entityData.DirectorshipTitle == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.DirectorshipTitle, this.entityData.DirectorshipTitle);
				this.entityData.DirectorshipTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.DirectorshipTitle, this.entityData.DirectorshipTitle);
				OnPropertyChanged("DirectorshipTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DirectorshipEnable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsDirectorshipEnableNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? DirectorshipEnable
		{
			get
			{
				return this.entityData.DirectorshipEnable; 
			}
			
			set
			{
				if (this.entityData.DirectorshipEnable == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.DirectorshipEnable, this.entityData.DirectorshipEnable);
				this.entityData.DirectorshipEnable = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.DirectorshipEnable, this.entityData.DirectorshipEnable);
				OnPropertyChanged("DirectorshipEnable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Skills property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Skills
		{
			get
			{
				return this.entityData.Skills; 
			}
			
			set
			{
				if (this.entityData.Skills == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.Skills, this.entityData.Skills);
				this.entityData.Skills = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.Skills, this.entityData.Skills);
				OnPropertyChanged("Skills");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LicenseTypes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String LicenseTypes
		{
			get
			{
				return this.entityData.LicenseTypes; 
			}
			
			set
			{
				if (this.entityData.LicenseTypes == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.LicenseTypes, this.entityData.LicenseTypes);
				this.entityData.LicenseTypes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.LicenseTypes, this.entityData.LicenseTypes);
				OnPropertyChanged("LicenseTypes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SummaryTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 512)]
		public virtual System.String SummaryTitle
		{
			get
			{
				return this.entityData.SummaryTitle; 
			}
			
			set
			{
				if (this.entityData.SummaryTitle == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.SummaryTitle, this.entityData.SummaryTitle);
				this.entityData.SummaryTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.SummaryTitle, this.entityData.SummaryTitle);
				OnPropertyChanged("SummaryTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PersonalDetailsTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 512)]
		public virtual System.String PersonalDetailsTitle
		{
			get
			{
				return this.entityData.PersonalDetailsTitle; 
			}
			
			set
			{
				if (this.entityData.PersonalDetailsTitle == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.PersonalDetailsTitle, this.entityData.PersonalDetailsTitle);
				this.entityData.PersonalDetailsTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.PersonalDetailsTitle, this.entityData.PersonalDetailsTitle);
				OnPropertyChanged("PersonalDetailsTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LicensesTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 512)]
		public virtual System.String LicensesTitle
		{
			get
			{
				return this.entityData.LicensesTitle; 
			}
			
			set
			{
				if (this.entityData.LicensesTitle == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.LicensesTitle, this.entityData.LicensesTitle);
				this.entityData.LicensesTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.LicensesTitle, this.entityData.LicensesTitle);
				OnPropertyChanged("LicensesTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AttachCoverLetterTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 512)]
		public virtual System.String AttachCoverLetterTitle
		{
			get
			{
				return this.entityData.AttachCoverLetterTitle; 
			}
			
			set
			{
				if (this.entityData.AttachCoverLetterTitle == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.AttachCoverLetterTitle, this.entityData.AttachCoverLetterTitle);
				this.entityData.AttachCoverLetterTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.AttachCoverLetterTitle, this.entityData.AttachCoverLetterTitle);
				OnPropertyChanged("AttachCoverLetterTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LanguagesTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 512)]
		public virtual System.String LanguagesTitle
		{
			get
			{
				return this.entityData.LanguagesTitle; 
			}
			
			set
			{
				if (this.entityData.LanguagesTitle == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.LanguagesTitle, this.entityData.LanguagesTitle);
				this.entityData.LanguagesTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.LanguagesTitle, this.entityData.LanguagesTitle);
				OnPropertyChanged("LanguagesTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReferencesTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 512)]
		public virtual System.String ReferencesTitle
		{
			get
			{
				return this.entityData.ReferencesTitle; 
			}
			
			set
			{
				if (this.entityData.ReferencesTitle == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.ReferencesTitle, this.entityData.ReferencesTitle);
				this.entityData.ReferencesTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.ReferencesTitle, this.entityData.ReferencesTitle);
				OnPropertyChanged("ReferencesTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomQuestionTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 512)]
		public virtual System.String CustomQuestionTitle
		{
			get
			{
				return this.entityData.CustomQuestionTitle; 
			}
			
			set
			{
				if (this.entityData.CustomQuestionTitle == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.CustomQuestionTitle, this.entityData.CustomQuestionTitle);
				this.entityData.CustomQuestionTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.CustomQuestionTitle, this.entityData.CustomQuestionTitle);
				OnPropertyChanged("CustomQuestionTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SummaryPoints property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SummaryPoints
		{
			get
			{
				return this.entityData.SummaryPoints; 
			}
			
			set
			{
				if (this.entityData.SummaryPoints == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.SummaryPoints, this.entityData.SummaryPoints);
				this.entityData.SummaryPoints = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.SummaryPoints, this.entityData.SummaryPoints);
				OnPropertyChanged("SummaryPoints");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PersonalDetailsPoints property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 PersonalDetailsPoints
		{
			get
			{
				return this.entityData.PersonalDetailsPoints; 
			}
			
			set
			{
				if (this.entityData.PersonalDetailsPoints == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.PersonalDetailsPoints, this.entityData.PersonalDetailsPoints);
				this.entityData.PersonalDetailsPoints = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.PersonalDetailsPoints, this.entityData.PersonalDetailsPoints);
				OnPropertyChanged("PersonalDetailsPoints");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LicensesPoints property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LicensesPoints
		{
			get
			{
				return this.entityData.LicensesPoints; 
			}
			
			set
			{
				if (this.entityData.LicensesPoints == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.LicensesPoints, this.entityData.LicensesPoints);
				this.entityData.LicensesPoints = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.LicensesPoints, this.entityData.LicensesPoints);
				OnPropertyChanged("LicensesPoints");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AttachCoverLetterPoints property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 AttachCoverLetterPoints
		{
			get
			{
				return this.entityData.AttachCoverLetterPoints; 
			}
			
			set
			{
				if (this.entityData.AttachCoverLetterPoints == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.AttachCoverLetterPoints, this.entityData.AttachCoverLetterPoints);
				this.entityData.AttachCoverLetterPoints = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.AttachCoverLetterPoints, this.entityData.AttachCoverLetterPoints);
				OnPropertyChanged("AttachCoverLetterPoints");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LanguagesPoints property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LanguagesPoints
		{
			get
			{
				return this.entityData.LanguagesPoints; 
			}
			
			set
			{
				if (this.entityData.LanguagesPoints == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.LanguagesPoints, this.entityData.LanguagesPoints);
				this.entityData.LanguagesPoints = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.LanguagesPoints, this.entityData.LanguagesPoints);
				OnPropertyChanged("LanguagesPoints");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReferencesPoints property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ReferencesPoints
		{
			get
			{
				return this.entityData.ReferencesPoints; 
			}
			
			set
			{
				if (this.entityData.ReferencesPoints == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.ReferencesPoints, this.entityData.ReferencesPoints);
				this.entityData.ReferencesPoints = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.ReferencesPoints, this.entityData.ReferencesPoints);
				OnPropertyChanged("ReferencesPoints");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomQuestionPoints property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CustomQuestionPoints
		{
			get
			{
				return this.entityData.CustomQuestionPoints; 
			}
			
			set
			{
				if (this.entityData.CustomQuestionPoints == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.CustomQuestionPoints, this.entityData.CustomQuestionPoints);
				this.entityData.CustomQuestionPoints = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.CustomQuestionPoints, this.entityData.CustomQuestionPoints);
				OnPropertyChanged("CustomQuestionPoints");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProfilePoints property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ProfilePoints
		{
			get
			{
				return this.entityData.ProfilePoints; 
			}
			
			set
			{
				if (this.entityData.ProfilePoints == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.ProfilePoints, this.entityData.ProfilePoints);
				this.entityData.ProfilePoints = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.ProfilePoints, this.entityData.ProfilePoints);
				OnPropertyChanged("ProfilePoints");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CvPoints property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CvPoints
		{
			get
			{
				return this.entityData.CvPoints; 
			}
			
			set
			{
				if (this.entityData.CvPoints == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.CvPoints, this.entityData.CvPoints);
				this.entityData.CvPoints = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.CvPoints, this.entityData.CvPoints);
				OnPropertyChanged("CvPoints");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RolePreferencesPoints property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 RolePreferencesPoints
		{
			get
			{
				return this.entityData.RolePreferencesPoints; 
			}
			
			set
			{
				if (this.entityData.RolePreferencesPoints == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.RolePreferencesPoints, this.entityData.RolePreferencesPoints);
				this.entityData.RolePreferencesPoints = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.RolePreferencesPoints, this.entityData.RolePreferencesPoints);
				OnPropertyChanged("RolePreferencesPoints");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EducationPoints property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 EducationPoints
		{
			get
			{
				return this.entityData.EducationPoints; 
			}
			
			set
			{
				if (this.entityData.EducationPoints == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.EducationPoints, this.entityData.EducationPoints);
				this.entityData.EducationPoints = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.EducationPoints, this.entityData.EducationPoints);
				OnPropertyChanged("EducationPoints");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MembershipsPoints property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MembershipsPoints
		{
			get
			{
				return this.entityData.MembershipsPoints; 
			}
			
			set
			{
				if (this.entityData.MembershipsPoints == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.MembershipsPoints, this.entityData.MembershipsPoints);
				this.entityData.MembershipsPoints = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.MembershipsPoints, this.entityData.MembershipsPoints);
				OnPropertyChanged("MembershipsPoints");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExperiencePoints property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ExperiencePoints
		{
			get
			{
				return this.entityData.ExperiencePoints; 
			}
			
			set
			{
				if (this.entityData.ExperiencePoints == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.ExperiencePoints, this.entityData.ExperiencePoints);
				this.entityData.ExperiencePoints = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.ExperiencePoints, this.entityData.ExperiencePoints);
				OnPropertyChanged("ExperiencePoints");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SkillsPoints property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SkillsPoints
		{
			get
			{
				return this.entityData.SkillsPoints; 
			}
			
			set
			{
				if (this.entityData.SkillsPoints == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.SkillsPoints, this.entityData.SkillsPoints);
				this.entityData.SkillsPoints = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.SkillsPoints, this.entityData.SkillsPoints);
				OnPropertyChanged("SkillsPoints");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DirectorshipPoints property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 DirectorshipPoints
		{
			get
			{
				return this.entityData.DirectorshipPoints; 
			}
			
			set
			{
				if (this.entityData.DirectorshipPoints == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.DirectorshipPoints, this.entityData.DirectorshipPoints);
				this.entityData.DirectorshipPoints = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.DirectorshipPoints, this.entityData.DirectorshipPoints);
				OnPropertyChanged("DirectorshipPoints");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WizardLanguageXml property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String WizardLanguageXml
		{
			get
			{
				return this.entityData.WizardLanguageXml; 
			}
			
			set
			{
				if (this.entityData.WizardLanguageXml == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.WizardLanguageXml, this.entityData.WizardLanguageXml);
				this.entityData.WizardLanguageXml = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.WizardLanguageXml, this.entityData.WizardLanguageXml);
				OnPropertyChanged("WizardLanguageXml");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomQuestionsXml property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String CustomQuestionsXml
		{
			get
			{
				return this.entityData.CustomQuestionsXml; 
			}
			
			set
			{
				if (this.entityData.CustomQuestionsXml == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.CustomQuestionsXml, this.entityData.CustomQuestionsXml);
				this.entityData.CustomQuestionsXml = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.CustomQuestionsXml, this.entityData.CustomQuestionsXml);
				OnPropertyChanged("CustomQuestionsXml");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinExperiencesEntry property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int16 MinExperiencesEntry
		{
			get
			{
				return this.entityData.MinExperiencesEntry; 
			}
			
			set
			{
				if (this.entityData.MinExperiencesEntry == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.MinExperiencesEntry, this.entityData.MinExperiencesEntry);
				this.entityData.MinExperiencesEntry = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.MinExperiencesEntry, this.entityData.MinExperiencesEntry);
				OnPropertyChanged("MinExperiencesEntry");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinReferencesEntry property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int16 MinReferencesEntry
		{
			get
			{
				return this.entityData.MinReferencesEntry; 
			}
			
			set
			{
				if (this.entityData.MinReferencesEntry == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.MinReferencesEntry, this.entityData.MinReferencesEntry);
				this.entityData.MinReferencesEntry = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.MinReferencesEntry, this.entityData.MinReferencesEntry);
				OnPropertyChanged("MinReferencesEntry");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinEducationsEntry property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int16 MinEducationsEntry
		{
			get
			{
				return this.entityData.MinEducationsEntry; 
			}
			
			set
			{
				if (this.entityData.MinEducationsEntry == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.MinEducationsEntry, this.entityData.MinEducationsEntry);
				this.entityData.MinEducationsEntry = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.MinEducationsEntry, this.entityData.MinEducationsEntry);
				OnPropertyChanged("MinEducationsEntry");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QualificationNames property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String QualificationNames
		{
			get
			{
				return this.entityData.QualificationNames; 
			}
			
			set
			{
				if (this.entityData.QualificationNames == value)
					return;
					
				OnColumnChanging(MemberWizardColumn.QualificationNames, this.entityData.QualificationNames);
				this.entityData.QualificationNames = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MemberWizardColumn.QualificationNames, this.entityData.QualificationNames);
				OnPropertyChanged("QualificationNames");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return entityData.LastModifiedBySource; }
            set { entityData.LastModifiedBySource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Sites SiteIdSource
      	{
            get { return entityData.SiteIdSource; }
            set { entityData.SiteIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ProfileTitle", "Profile Title"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ProfileTitle", "Profile Title", 512));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CvTitle", "Cv Title"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CvTitle", "Cv Title", 512));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("RolePreferencesTitle", "Role Preferences Title"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RolePreferencesTitle", "Role Preferences Title", 512));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("EducationTitle", "Education Title"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EducationTitle", "Education Title", 512));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MembershipsTitle", "Memberships Title"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MembershipsTitle", "Memberships Title", 512));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ExperienceTitle", "Experience Title"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ExperienceTitle", "Experience Title", 512));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SkillsTitle", "Skills Title"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SkillsTitle", "Skills Title", 512));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DirectorshipTitle", "Directorship Title"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DirectorshipTitle", "Directorship Title", 512));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SummaryTitle", "Summary Title", 512));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PersonalDetailsTitle", "Personal Details Title", 512));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LicensesTitle", "Licenses Title", 512));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AttachCoverLetterTitle", "Attach Cover Letter Title", 512));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LanguagesTitle", "Languages Title", 512));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ReferencesTitle", "References Title", 512));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CustomQuestionTitle", "Custom Question Title", 512));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "MemberWizard"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MemberWizardID", "SiteID", "MemberWizardParentID", "ProfileTitle", "CVTitle", "RolePreferencesTitle", "EducationTitle", "MembershipsTitle", "ExperienceTitle", "SkillsTitle", "ProfileEnable", "CVEnable", "RolePreferencesEnable", "EducationEnable", "MembershipsEnable", "ExperienceEnable", "SkillsEnable", "GlobalTemplate", "LastModifiedBy", "LastModified", "DirectorshipTitle", "DirectorshipEnable", "Skills", "LicenseTypes", "SummaryTitle", "PersonalDetailsTitle", "LicensesTitle", "AttachCoverLetterTitle", "LanguagesTitle", "ReferencesTitle", "CustomQuestionTitle", "SummaryPoints", "PersonalDetailsPoints", "LicensesPoints", "AttachCoverLetterPoints", "LanguagesPoints", "ReferencesPoints", "CustomQuestionPoints", "ProfilePoints", "CVPoints", "RolePreferencesPoints", "EducationPoints", "MembershipsPoints", "ExperiencePoints", "SkillsPoints", "DirectorshipPoints", "WizardLanguageXML", "CustomQuestionsXML", "MinExperiencesEntry", "MinReferencesEntry", "MinEducationsEntry", "QualificationNames"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MemberWizardEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MemberWizard) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MemberWizard>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MemberWizard);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MemberWizard Entity 
		///</summary>
		protected virtual MemberWizard Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MemberWizard copy = new MemberWizard();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MemberWizardId = this.MemberWizardId;
				copy.SiteId = this.SiteId;
				copy.MemberWizardParentId = this.MemberWizardParentId;
				copy.ProfileTitle = this.ProfileTitle;
				copy.CvTitle = this.CvTitle;
				copy.RolePreferencesTitle = this.RolePreferencesTitle;
				copy.EducationTitle = this.EducationTitle;
				copy.MembershipsTitle = this.MembershipsTitle;
				copy.ExperienceTitle = this.ExperienceTitle;
				copy.SkillsTitle = this.SkillsTitle;
				copy.ProfileEnable = this.ProfileEnable;
				copy.CvEnable = this.CvEnable;
				copy.RolePreferencesEnable = this.RolePreferencesEnable;
				copy.EducationEnable = this.EducationEnable;
				copy.MembershipsEnable = this.MembershipsEnable;
				copy.ExperienceEnable = this.ExperienceEnable;
				copy.SkillsEnable = this.SkillsEnable;
				copy.GlobalTemplate = this.GlobalTemplate;
				copy.LastModifiedBy = this.LastModifiedBy;
				copy.LastModified = this.LastModified;
				copy.DirectorshipTitle = this.DirectorshipTitle;
				copy.DirectorshipEnable = this.DirectorshipEnable;
				copy.Skills = this.Skills;
				copy.LicenseTypes = this.LicenseTypes;
				copy.SummaryTitle = this.SummaryTitle;
				copy.PersonalDetailsTitle = this.PersonalDetailsTitle;
				copy.LicensesTitle = this.LicensesTitle;
				copy.AttachCoverLetterTitle = this.AttachCoverLetterTitle;
				copy.LanguagesTitle = this.LanguagesTitle;
				copy.ReferencesTitle = this.ReferencesTitle;
				copy.CustomQuestionTitle = this.CustomQuestionTitle;
				copy.SummaryPoints = this.SummaryPoints;
				copy.PersonalDetailsPoints = this.PersonalDetailsPoints;
				copy.LicensesPoints = this.LicensesPoints;
				copy.AttachCoverLetterPoints = this.AttachCoverLetterPoints;
				copy.LanguagesPoints = this.LanguagesPoints;
				copy.ReferencesPoints = this.ReferencesPoints;
				copy.CustomQuestionPoints = this.CustomQuestionPoints;
				copy.ProfilePoints = this.ProfilePoints;
				copy.CvPoints = this.CvPoints;
				copy.RolePreferencesPoints = this.RolePreferencesPoints;
				copy.EducationPoints = this.EducationPoints;
				copy.MembershipsPoints = this.MembershipsPoints;
				copy.ExperiencePoints = this.ExperiencePoints;
				copy.SkillsPoints = this.SkillsPoints;
				copy.DirectorshipPoints = this.DirectorshipPoints;
				copy.WizardLanguageXml = this.WizardLanguageXml;
				copy.CustomQuestionsXml = this.CustomQuestionsXml;
				copy.MinExperiencesEntry = this.MinExperiencesEntry;
				copy.MinReferencesEntry = this.MinReferencesEntry;
				copy.MinEducationsEntry = this.MinEducationsEntry;
				copy.QualificationNames = this.QualificationNames;
			
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				copy.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				copy.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				copy.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				copy.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MemberWizard Entity 
		///</summary>
		public virtual MemberWizard Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MemberWizard Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MemberWizard DeepCopy()
		{
			return EntityHelper.Clone<MemberWizard>(this as MemberWizard);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MemberWizardEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MemberWizardEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MemberWizardEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MemberWizardColumn column)
		{
			switch(column)
			{
					case MemberWizardColumn.MemberWizardId:
					return entityData.MemberWizardId != _originalData.MemberWizardId;
					case MemberWizardColumn.SiteId:
					return entityData.SiteId != _originalData.SiteId;
					case MemberWizardColumn.MemberWizardParentId:
					return entityData.MemberWizardParentId != _originalData.MemberWizardParentId;
					case MemberWizardColumn.ProfileTitle:
					return entityData.ProfileTitle != _originalData.ProfileTitle;
					case MemberWizardColumn.CvTitle:
					return entityData.CvTitle != _originalData.CvTitle;
					case MemberWizardColumn.RolePreferencesTitle:
					return entityData.RolePreferencesTitle != _originalData.RolePreferencesTitle;
					case MemberWizardColumn.EducationTitle:
					return entityData.EducationTitle != _originalData.EducationTitle;
					case MemberWizardColumn.MembershipsTitle:
					return entityData.MembershipsTitle != _originalData.MembershipsTitle;
					case MemberWizardColumn.ExperienceTitle:
					return entityData.ExperienceTitle != _originalData.ExperienceTitle;
					case MemberWizardColumn.SkillsTitle:
					return entityData.SkillsTitle != _originalData.SkillsTitle;
					case MemberWizardColumn.ProfileEnable:
					return entityData.ProfileEnable != _originalData.ProfileEnable;
					case MemberWizardColumn.CvEnable:
					return entityData.CvEnable != _originalData.CvEnable;
					case MemberWizardColumn.RolePreferencesEnable:
					return entityData.RolePreferencesEnable != _originalData.RolePreferencesEnable;
					case MemberWizardColumn.EducationEnable:
					return entityData.EducationEnable != _originalData.EducationEnable;
					case MemberWizardColumn.MembershipsEnable:
					return entityData.MembershipsEnable != _originalData.MembershipsEnable;
					case MemberWizardColumn.ExperienceEnable:
					return entityData.ExperienceEnable != _originalData.ExperienceEnable;
					case MemberWizardColumn.SkillsEnable:
					return entityData.SkillsEnable != _originalData.SkillsEnable;
					case MemberWizardColumn.GlobalTemplate:
					return entityData.GlobalTemplate != _originalData.GlobalTemplate;
					case MemberWizardColumn.LastModifiedBy:
					return entityData.LastModifiedBy != _originalData.LastModifiedBy;
					case MemberWizardColumn.LastModified:
					return entityData.LastModified != _originalData.LastModified;
					case MemberWizardColumn.DirectorshipTitle:
					return entityData.DirectorshipTitle != _originalData.DirectorshipTitle;
					case MemberWizardColumn.DirectorshipEnable:
					return entityData.DirectorshipEnable != _originalData.DirectorshipEnable;
					case MemberWizardColumn.Skills:
					return entityData.Skills != _originalData.Skills;
					case MemberWizardColumn.LicenseTypes:
					return entityData.LicenseTypes != _originalData.LicenseTypes;
					case MemberWizardColumn.SummaryTitle:
					return entityData.SummaryTitle != _originalData.SummaryTitle;
					case MemberWizardColumn.PersonalDetailsTitle:
					return entityData.PersonalDetailsTitle != _originalData.PersonalDetailsTitle;
					case MemberWizardColumn.LicensesTitle:
					return entityData.LicensesTitle != _originalData.LicensesTitle;
					case MemberWizardColumn.AttachCoverLetterTitle:
					return entityData.AttachCoverLetterTitle != _originalData.AttachCoverLetterTitle;
					case MemberWizardColumn.LanguagesTitle:
					return entityData.LanguagesTitle != _originalData.LanguagesTitle;
					case MemberWizardColumn.ReferencesTitle:
					return entityData.ReferencesTitle != _originalData.ReferencesTitle;
					case MemberWizardColumn.CustomQuestionTitle:
					return entityData.CustomQuestionTitle != _originalData.CustomQuestionTitle;
					case MemberWizardColumn.SummaryPoints:
					return entityData.SummaryPoints != _originalData.SummaryPoints;
					case MemberWizardColumn.PersonalDetailsPoints:
					return entityData.PersonalDetailsPoints != _originalData.PersonalDetailsPoints;
					case MemberWizardColumn.LicensesPoints:
					return entityData.LicensesPoints != _originalData.LicensesPoints;
					case MemberWizardColumn.AttachCoverLetterPoints:
					return entityData.AttachCoverLetterPoints != _originalData.AttachCoverLetterPoints;
					case MemberWizardColumn.LanguagesPoints:
					return entityData.LanguagesPoints != _originalData.LanguagesPoints;
					case MemberWizardColumn.ReferencesPoints:
					return entityData.ReferencesPoints != _originalData.ReferencesPoints;
					case MemberWizardColumn.CustomQuestionPoints:
					return entityData.CustomQuestionPoints != _originalData.CustomQuestionPoints;
					case MemberWizardColumn.ProfilePoints:
					return entityData.ProfilePoints != _originalData.ProfilePoints;
					case MemberWizardColumn.CvPoints:
					return entityData.CvPoints != _originalData.CvPoints;
					case MemberWizardColumn.RolePreferencesPoints:
					return entityData.RolePreferencesPoints != _originalData.RolePreferencesPoints;
					case MemberWizardColumn.EducationPoints:
					return entityData.EducationPoints != _originalData.EducationPoints;
					case MemberWizardColumn.MembershipsPoints:
					return entityData.MembershipsPoints != _originalData.MembershipsPoints;
					case MemberWizardColumn.ExperiencePoints:
					return entityData.ExperiencePoints != _originalData.ExperiencePoints;
					case MemberWizardColumn.SkillsPoints:
					return entityData.SkillsPoints != _originalData.SkillsPoints;
					case MemberWizardColumn.DirectorshipPoints:
					return entityData.DirectorshipPoints != _originalData.DirectorshipPoints;
					case MemberWizardColumn.WizardLanguageXml:
					return entityData.WizardLanguageXml != _originalData.WizardLanguageXml;
					case MemberWizardColumn.CustomQuestionsXml:
					return entityData.CustomQuestionsXml != _originalData.CustomQuestionsXml;
					case MemberWizardColumn.MinExperiencesEntry:
					return entityData.MinExperiencesEntry != _originalData.MinExperiencesEntry;
					case MemberWizardColumn.MinReferencesEntry:
					return entityData.MinReferencesEntry != _originalData.MinReferencesEntry;
					case MemberWizardColumn.MinEducationsEntry:
					return entityData.MinEducationsEntry != _originalData.MinEducationsEntry;
					case MemberWizardColumn.QualificationNames:
					return entityData.QualificationNames != _originalData.QualificationNames;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MemberWizardColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MemberWizardId != _originalData.MemberWizardId;
			result = result || entityData.SiteId != _originalData.SiteId;
			result = result || entityData.MemberWizardParentId != _originalData.MemberWizardParentId;
			result = result || entityData.ProfileTitle != _originalData.ProfileTitle;
			result = result || entityData.CvTitle != _originalData.CvTitle;
			result = result || entityData.RolePreferencesTitle != _originalData.RolePreferencesTitle;
			result = result || entityData.EducationTitle != _originalData.EducationTitle;
			result = result || entityData.MembershipsTitle != _originalData.MembershipsTitle;
			result = result || entityData.ExperienceTitle != _originalData.ExperienceTitle;
			result = result || entityData.SkillsTitle != _originalData.SkillsTitle;
			result = result || entityData.ProfileEnable != _originalData.ProfileEnable;
			result = result || entityData.CvEnable != _originalData.CvEnable;
			result = result || entityData.RolePreferencesEnable != _originalData.RolePreferencesEnable;
			result = result || entityData.EducationEnable != _originalData.EducationEnable;
			result = result || entityData.MembershipsEnable != _originalData.MembershipsEnable;
			result = result || entityData.ExperienceEnable != _originalData.ExperienceEnable;
			result = result || entityData.SkillsEnable != _originalData.SkillsEnable;
			result = result || entityData.GlobalTemplate != _originalData.GlobalTemplate;
			result = result || entityData.LastModifiedBy != _originalData.LastModifiedBy;
			result = result || entityData.LastModified != _originalData.LastModified;
			result = result || entityData.DirectorshipTitle != _originalData.DirectorshipTitle;
			result = result || entityData.DirectorshipEnable != _originalData.DirectorshipEnable;
			result = result || entityData.Skills != _originalData.Skills;
			result = result || entityData.LicenseTypes != _originalData.LicenseTypes;
			result = result || entityData.SummaryTitle != _originalData.SummaryTitle;
			result = result || entityData.PersonalDetailsTitle != _originalData.PersonalDetailsTitle;
			result = result || entityData.LicensesTitle != _originalData.LicensesTitle;
			result = result || entityData.AttachCoverLetterTitle != _originalData.AttachCoverLetterTitle;
			result = result || entityData.LanguagesTitle != _originalData.LanguagesTitle;
			result = result || entityData.ReferencesTitle != _originalData.ReferencesTitle;
			result = result || entityData.CustomQuestionTitle != _originalData.CustomQuestionTitle;
			result = result || entityData.SummaryPoints != _originalData.SummaryPoints;
			result = result || entityData.PersonalDetailsPoints != _originalData.PersonalDetailsPoints;
			result = result || entityData.LicensesPoints != _originalData.LicensesPoints;
			result = result || entityData.AttachCoverLetterPoints != _originalData.AttachCoverLetterPoints;
			result = result || entityData.LanguagesPoints != _originalData.LanguagesPoints;
			result = result || entityData.ReferencesPoints != _originalData.ReferencesPoints;
			result = result || entityData.CustomQuestionPoints != _originalData.CustomQuestionPoints;
			result = result || entityData.ProfilePoints != _originalData.ProfilePoints;
			result = result || entityData.CvPoints != _originalData.CvPoints;
			result = result || entityData.RolePreferencesPoints != _originalData.RolePreferencesPoints;
			result = result || entityData.EducationPoints != _originalData.EducationPoints;
			result = result || entityData.MembershipsPoints != _originalData.MembershipsPoints;
			result = result || entityData.ExperiencePoints != _originalData.ExperiencePoints;
			result = result || entityData.SkillsPoints != _originalData.SkillsPoints;
			result = result || entityData.DirectorshipPoints != _originalData.DirectorshipPoints;
			result = result || entityData.WizardLanguageXml != _originalData.WizardLanguageXml;
			result = result || entityData.CustomQuestionsXml != _originalData.CustomQuestionsXml;
			result = result || entityData.MinExperiencesEntry != _originalData.MinExperiencesEntry;
			result = result || entityData.MinReferencesEntry != _originalData.MinReferencesEntry;
			result = result || entityData.MinEducationsEntry != _originalData.MinEducationsEntry;
			result = result || entityData.QualificationNames != _originalData.QualificationNames;
			return result;
		}	
		
		///<summary>
		///  Returns a MemberWizard Entity with the original data.
		///</summary>
		public MemberWizard GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMemberWizard(
				_originalData.SiteId,
				_originalData.MemberWizardParentId,
				_originalData.ProfileTitle,
				_originalData.CvTitle,
				_originalData.RolePreferencesTitle,
				_originalData.EducationTitle,
				_originalData.MembershipsTitle,
				_originalData.ExperienceTitle,
				_originalData.SkillsTitle,
				_originalData.ProfileEnable,
				_originalData.CvEnable,
				_originalData.RolePreferencesEnable,
				_originalData.EducationEnable,
				_originalData.MembershipsEnable,
				_originalData.ExperienceEnable,
				_originalData.SkillsEnable,
				_originalData.GlobalTemplate,
				_originalData.LastModifiedBy,
				_originalData.LastModified,
				_originalData.DirectorshipTitle,
				_originalData.DirectorshipEnable,
				_originalData.Skills,
				_originalData.LicenseTypes,
				_originalData.SummaryTitle,
				_originalData.PersonalDetailsTitle,
				_originalData.LicensesTitle,
				_originalData.AttachCoverLetterTitle,
				_originalData.LanguagesTitle,
				_originalData.ReferencesTitle,
				_originalData.CustomQuestionTitle,
				_originalData.SummaryPoints,
				_originalData.PersonalDetailsPoints,
				_originalData.LicensesPoints,
				_originalData.AttachCoverLetterPoints,
				_originalData.LanguagesPoints,
				_originalData.ReferencesPoints,
				_originalData.CustomQuestionPoints,
				_originalData.ProfilePoints,
				_originalData.CvPoints,
				_originalData.RolePreferencesPoints,
				_originalData.EducationPoints,
				_originalData.MembershipsPoints,
				_originalData.ExperiencePoints,
				_originalData.SkillsPoints,
				_originalData.DirectorshipPoints,
				_originalData.WizardLanguageXml,
				_originalData.CustomQuestionsXml,
				_originalData.MinExperiencesEntry,
				_originalData.MinReferencesEntry,
				_originalData.MinEducationsEntry,
				_originalData.QualificationNames
				);
				
			return (MemberWizard)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MemberWizardBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MemberWizardBase)
				return ValueEquals(this, (MemberWizardBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MemberWizardBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MemberWizardId.GetHashCode() ^ 
					((this.SiteId == null) ? string.Empty : this.SiteId.ToString()).GetHashCode() ^ 
					((this.MemberWizardParentId == null) ? string.Empty : this.MemberWizardParentId.ToString()).GetHashCode() ^ 
					this.ProfileTitle.GetHashCode() ^ 
					this.CvTitle.GetHashCode() ^ 
					this.RolePreferencesTitle.GetHashCode() ^ 
					this.EducationTitle.GetHashCode() ^ 
					this.MembershipsTitle.GetHashCode() ^ 
					this.ExperienceTitle.GetHashCode() ^ 
					this.SkillsTitle.GetHashCode() ^ 
					((this.ProfileEnable == null) ? string.Empty : this.ProfileEnable.ToString()).GetHashCode() ^ 
					((this.CvEnable == null) ? string.Empty : this.CvEnable.ToString()).GetHashCode() ^ 
					((this.RolePreferencesEnable == null) ? string.Empty : this.RolePreferencesEnable.ToString()).GetHashCode() ^ 
					((this.EducationEnable == null) ? string.Empty : this.EducationEnable.ToString()).GetHashCode() ^ 
					((this.MembershipsEnable == null) ? string.Empty : this.MembershipsEnable.ToString()).GetHashCode() ^ 
					((this.ExperienceEnable == null) ? string.Empty : this.ExperienceEnable.ToString()).GetHashCode() ^ 
					((this.SkillsEnable == null) ? string.Empty : this.SkillsEnable.ToString()).GetHashCode() ^ 
					this.GlobalTemplate.GetHashCode() ^ 
					this.LastModifiedBy.GetHashCode() ^ 
					this.LastModified.GetHashCode() ^ 
					this.DirectorshipTitle.GetHashCode() ^ 
					((this.DirectorshipEnable == null) ? string.Empty : this.DirectorshipEnable.ToString()).GetHashCode() ^ 
					((this.Skills == null) ? string.Empty : this.Skills.ToString()).GetHashCode() ^ 
					((this.LicenseTypes == null) ? string.Empty : this.LicenseTypes.ToString()).GetHashCode() ^ 
					((this.SummaryTitle == null) ? string.Empty : this.SummaryTitle.ToString()).GetHashCode() ^ 
					((this.PersonalDetailsTitle == null) ? string.Empty : this.PersonalDetailsTitle.ToString()).GetHashCode() ^ 
					((this.LicensesTitle == null) ? string.Empty : this.LicensesTitle.ToString()).GetHashCode() ^ 
					((this.AttachCoverLetterTitle == null) ? string.Empty : this.AttachCoverLetterTitle.ToString()).GetHashCode() ^ 
					((this.LanguagesTitle == null) ? string.Empty : this.LanguagesTitle.ToString()).GetHashCode() ^ 
					((this.ReferencesTitle == null) ? string.Empty : this.ReferencesTitle.ToString()).GetHashCode() ^ 
					((this.CustomQuestionTitle == null) ? string.Empty : this.CustomQuestionTitle.ToString()).GetHashCode() ^ 
					this.SummaryPoints.GetHashCode() ^ 
					this.PersonalDetailsPoints.GetHashCode() ^ 
					this.LicensesPoints.GetHashCode() ^ 
					this.AttachCoverLetterPoints.GetHashCode() ^ 
					this.LanguagesPoints.GetHashCode() ^ 
					this.ReferencesPoints.GetHashCode() ^ 
					this.CustomQuestionPoints.GetHashCode() ^ 
					this.ProfilePoints.GetHashCode() ^ 
					this.CvPoints.GetHashCode() ^ 
					this.RolePreferencesPoints.GetHashCode() ^ 
					this.EducationPoints.GetHashCode() ^ 
					this.MembershipsPoints.GetHashCode() ^ 
					this.ExperiencePoints.GetHashCode() ^ 
					this.SkillsPoints.GetHashCode() ^ 
					this.DirectorshipPoints.GetHashCode() ^ 
					((this.WizardLanguageXml == null) ? string.Empty : this.WizardLanguageXml.ToString()).GetHashCode() ^ 
					((this.CustomQuestionsXml == null) ? string.Empty : this.CustomQuestionsXml.ToString()).GetHashCode() ^ 
					this.MinExperiencesEntry.GetHashCode() ^ 
					this.MinReferencesEntry.GetHashCode() ^ 
					this.MinEducationsEntry.GetHashCode() ^ 
					((this.QualificationNames == null) ? string.Empty : this.QualificationNames.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MemberWizardBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MemberWizardBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MemberWizardBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MemberWizardBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MemberWizardBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MemberWizardBase Object1, MemberWizardBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MemberWizardId != Object2.MemberWizardId)
				equal = false;
			if ( Object1.SiteId != null && Object2.SiteId != null )
			{
				if (Object1.SiteId != Object2.SiteId)
					equal = false;
			}
			else if (Object1.SiteId == null ^ Object2.SiteId == null )
			{
				equal = false;
			}
			if ( Object1.MemberWizardParentId != null && Object2.MemberWizardParentId != null )
			{
				if (Object1.MemberWizardParentId != Object2.MemberWizardParentId)
					equal = false;
			}
			else if (Object1.MemberWizardParentId == null ^ Object2.MemberWizardParentId == null )
			{
				equal = false;
			}
			if (Object1.ProfileTitle != Object2.ProfileTitle)
				equal = false;
			if (Object1.CvTitle != Object2.CvTitle)
				equal = false;
			if (Object1.RolePreferencesTitle != Object2.RolePreferencesTitle)
				equal = false;
			if (Object1.EducationTitle != Object2.EducationTitle)
				equal = false;
			if (Object1.MembershipsTitle != Object2.MembershipsTitle)
				equal = false;
			if (Object1.ExperienceTitle != Object2.ExperienceTitle)
				equal = false;
			if (Object1.SkillsTitle != Object2.SkillsTitle)
				equal = false;
			if ( Object1.ProfileEnable != null && Object2.ProfileEnable != null )
			{
				if (Object1.ProfileEnable != Object2.ProfileEnable)
					equal = false;
			}
			else if (Object1.ProfileEnable == null ^ Object2.ProfileEnable == null )
			{
				equal = false;
			}
			if ( Object1.CvEnable != null && Object2.CvEnable != null )
			{
				if (Object1.CvEnable != Object2.CvEnable)
					equal = false;
			}
			else if (Object1.CvEnable == null ^ Object2.CvEnable == null )
			{
				equal = false;
			}
			if ( Object1.RolePreferencesEnable != null && Object2.RolePreferencesEnable != null )
			{
				if (Object1.RolePreferencesEnable != Object2.RolePreferencesEnable)
					equal = false;
			}
			else if (Object1.RolePreferencesEnable == null ^ Object2.RolePreferencesEnable == null )
			{
				equal = false;
			}
			if ( Object1.EducationEnable != null && Object2.EducationEnable != null )
			{
				if (Object1.EducationEnable != Object2.EducationEnable)
					equal = false;
			}
			else if (Object1.EducationEnable == null ^ Object2.EducationEnable == null )
			{
				equal = false;
			}
			if ( Object1.MembershipsEnable != null && Object2.MembershipsEnable != null )
			{
				if (Object1.MembershipsEnable != Object2.MembershipsEnable)
					equal = false;
			}
			else if (Object1.MembershipsEnable == null ^ Object2.MembershipsEnable == null )
			{
				equal = false;
			}
			if ( Object1.ExperienceEnable != null && Object2.ExperienceEnable != null )
			{
				if (Object1.ExperienceEnable != Object2.ExperienceEnable)
					equal = false;
			}
			else if (Object1.ExperienceEnable == null ^ Object2.ExperienceEnable == null )
			{
				equal = false;
			}
			if ( Object1.SkillsEnable != null && Object2.SkillsEnable != null )
			{
				if (Object1.SkillsEnable != Object2.SkillsEnable)
					equal = false;
			}
			else if (Object1.SkillsEnable == null ^ Object2.SkillsEnable == null )
			{
				equal = false;
			}
			if (Object1.GlobalTemplate != Object2.GlobalTemplate)
				equal = false;
			if (Object1.LastModifiedBy != Object2.LastModifiedBy)
				equal = false;
			if (Object1.LastModified != Object2.LastModified)
				equal = false;
			if (Object1.DirectorshipTitle != Object2.DirectorshipTitle)
				equal = false;
			if ( Object1.DirectorshipEnable != null && Object2.DirectorshipEnable != null )
			{
				if (Object1.DirectorshipEnable != Object2.DirectorshipEnable)
					equal = false;
			}
			else if (Object1.DirectorshipEnable == null ^ Object2.DirectorshipEnable == null )
			{
				equal = false;
			}
			if ( Object1.Skills != null && Object2.Skills != null )
			{
				if (Object1.Skills != Object2.Skills)
					equal = false;
			}
			else if (Object1.Skills == null ^ Object2.Skills == null )
			{
				equal = false;
			}
			if ( Object1.LicenseTypes != null && Object2.LicenseTypes != null )
			{
				if (Object1.LicenseTypes != Object2.LicenseTypes)
					equal = false;
			}
			else if (Object1.LicenseTypes == null ^ Object2.LicenseTypes == null )
			{
				equal = false;
			}
			if ( Object1.SummaryTitle != null && Object2.SummaryTitle != null )
			{
				if (Object1.SummaryTitle != Object2.SummaryTitle)
					equal = false;
			}
			else if (Object1.SummaryTitle == null ^ Object2.SummaryTitle == null )
			{
				equal = false;
			}
			if ( Object1.PersonalDetailsTitle != null && Object2.PersonalDetailsTitle != null )
			{
				if (Object1.PersonalDetailsTitle != Object2.PersonalDetailsTitle)
					equal = false;
			}
			else if (Object1.PersonalDetailsTitle == null ^ Object2.PersonalDetailsTitle == null )
			{
				equal = false;
			}
			if ( Object1.LicensesTitle != null && Object2.LicensesTitle != null )
			{
				if (Object1.LicensesTitle != Object2.LicensesTitle)
					equal = false;
			}
			else if (Object1.LicensesTitle == null ^ Object2.LicensesTitle == null )
			{
				equal = false;
			}
			if ( Object1.AttachCoverLetterTitle != null && Object2.AttachCoverLetterTitle != null )
			{
				if (Object1.AttachCoverLetterTitle != Object2.AttachCoverLetterTitle)
					equal = false;
			}
			else if (Object1.AttachCoverLetterTitle == null ^ Object2.AttachCoverLetterTitle == null )
			{
				equal = false;
			}
			if ( Object1.LanguagesTitle != null && Object2.LanguagesTitle != null )
			{
				if (Object1.LanguagesTitle != Object2.LanguagesTitle)
					equal = false;
			}
			else if (Object1.LanguagesTitle == null ^ Object2.LanguagesTitle == null )
			{
				equal = false;
			}
			if ( Object1.ReferencesTitle != null && Object2.ReferencesTitle != null )
			{
				if (Object1.ReferencesTitle != Object2.ReferencesTitle)
					equal = false;
			}
			else if (Object1.ReferencesTitle == null ^ Object2.ReferencesTitle == null )
			{
				equal = false;
			}
			if ( Object1.CustomQuestionTitle != null && Object2.CustomQuestionTitle != null )
			{
				if (Object1.CustomQuestionTitle != Object2.CustomQuestionTitle)
					equal = false;
			}
			else if (Object1.CustomQuestionTitle == null ^ Object2.CustomQuestionTitle == null )
			{
				equal = false;
			}
			if (Object1.SummaryPoints != Object2.SummaryPoints)
				equal = false;
			if (Object1.PersonalDetailsPoints != Object2.PersonalDetailsPoints)
				equal = false;
			if (Object1.LicensesPoints != Object2.LicensesPoints)
				equal = false;
			if (Object1.AttachCoverLetterPoints != Object2.AttachCoverLetterPoints)
				equal = false;
			if (Object1.LanguagesPoints != Object2.LanguagesPoints)
				equal = false;
			if (Object1.ReferencesPoints != Object2.ReferencesPoints)
				equal = false;
			if (Object1.CustomQuestionPoints != Object2.CustomQuestionPoints)
				equal = false;
			if (Object1.ProfilePoints != Object2.ProfilePoints)
				equal = false;
			if (Object1.CvPoints != Object2.CvPoints)
				equal = false;
			if (Object1.RolePreferencesPoints != Object2.RolePreferencesPoints)
				equal = false;
			if (Object1.EducationPoints != Object2.EducationPoints)
				equal = false;
			if (Object1.MembershipsPoints != Object2.MembershipsPoints)
				equal = false;
			if (Object1.ExperiencePoints != Object2.ExperiencePoints)
				equal = false;
			if (Object1.SkillsPoints != Object2.SkillsPoints)
				equal = false;
			if (Object1.DirectorshipPoints != Object2.DirectorshipPoints)
				equal = false;
			if ( Object1.WizardLanguageXml != null && Object2.WizardLanguageXml != null )
			{
				if (Object1.WizardLanguageXml != Object2.WizardLanguageXml)
					equal = false;
			}
			else if (Object1.WizardLanguageXml == null ^ Object2.WizardLanguageXml == null )
			{
				equal = false;
			}
			if ( Object1.CustomQuestionsXml != null && Object2.CustomQuestionsXml != null )
			{
				if (Object1.CustomQuestionsXml != Object2.CustomQuestionsXml)
					equal = false;
			}
			else if (Object1.CustomQuestionsXml == null ^ Object2.CustomQuestionsXml == null )
			{
				equal = false;
			}
			if (Object1.MinExperiencesEntry != Object2.MinExperiencesEntry)
				equal = false;
			if (Object1.MinReferencesEntry != Object2.MinReferencesEntry)
				equal = false;
			if (Object1.MinEducationsEntry != Object2.MinEducationsEntry)
				equal = false;
			if ( Object1.QualificationNames != null && Object2.QualificationNames != null )
			{
				if (Object1.QualificationNames != Object2.QualificationNames)
					equal = false;
			}
			else if (Object1.QualificationNames == null ^ Object2.QualificationNames == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MemberWizardBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MemberWizardComparer GetComparer()
        {
            return new MemberWizardComparer();
        }
        */

        // Comparer delegates back to MemberWizard
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MemberWizard rhs, MemberWizardColumn which)
        {
            switch (which)
            {
            	
            	
            	case MemberWizardColumn.MemberWizardId:
            		return this.MemberWizardId.CompareTo(rhs.MemberWizardId);
            		
            		                 
            	
            	
            	case MemberWizardColumn.SiteId:
            		return this.SiteId.Value.CompareTo(rhs.SiteId.Value);
            		
            		                 
            	
            	
            	case MemberWizardColumn.MemberWizardParentId:
            		return this.MemberWizardParentId.Value.CompareTo(rhs.MemberWizardParentId.Value);
            		
            		                 
            	
            	
            	case MemberWizardColumn.ProfileTitle:
            		return this.ProfileTitle.CompareTo(rhs.ProfileTitle);
            		
            		                 
            	
            	
            	case MemberWizardColumn.CvTitle:
            		return this.CvTitle.CompareTo(rhs.CvTitle);
            		
            		                 
            	
            	
            	case MemberWizardColumn.RolePreferencesTitle:
            		return this.RolePreferencesTitle.CompareTo(rhs.RolePreferencesTitle);
            		
            		                 
            	
            	
            	case MemberWizardColumn.EducationTitle:
            		return this.EducationTitle.CompareTo(rhs.EducationTitle);
            		
            		                 
            	
            	
            	case MemberWizardColumn.MembershipsTitle:
            		return this.MembershipsTitle.CompareTo(rhs.MembershipsTitle);
            		
            		                 
            	
            	
            	case MemberWizardColumn.ExperienceTitle:
            		return this.ExperienceTitle.CompareTo(rhs.ExperienceTitle);
            		
            		                 
            	
            	
            	case MemberWizardColumn.SkillsTitle:
            		return this.SkillsTitle.CompareTo(rhs.SkillsTitle);
            		
            		                 
            	
            	
            	case MemberWizardColumn.ProfileEnable:
            		return this.ProfileEnable.Value.CompareTo(rhs.ProfileEnable.Value);
            		
            		                 
            	
            	
            	case MemberWizardColumn.CvEnable:
            		return this.CvEnable.Value.CompareTo(rhs.CvEnable.Value);
            		
            		                 
            	
            	
            	case MemberWizardColumn.RolePreferencesEnable:
            		return this.RolePreferencesEnable.Value.CompareTo(rhs.RolePreferencesEnable.Value);
            		
            		                 
            	
            	
            	case MemberWizardColumn.EducationEnable:
            		return this.EducationEnable.Value.CompareTo(rhs.EducationEnable.Value);
            		
            		                 
            	
            	
            	case MemberWizardColumn.MembershipsEnable:
            		return this.MembershipsEnable.Value.CompareTo(rhs.MembershipsEnable.Value);
            		
            		                 
            	
            	
            	case MemberWizardColumn.ExperienceEnable:
            		return this.ExperienceEnable.Value.CompareTo(rhs.ExperienceEnable.Value);
            		
            		                 
            	
            	
            	case MemberWizardColumn.SkillsEnable:
            		return this.SkillsEnable.Value.CompareTo(rhs.SkillsEnable.Value);
            		
            		                 
            	
            	
            	case MemberWizardColumn.GlobalTemplate:
            		return this.GlobalTemplate.CompareTo(rhs.GlobalTemplate);
            		
            		                 
            	
            	
            	case MemberWizardColumn.LastModifiedBy:
            		return this.LastModifiedBy.CompareTo(rhs.LastModifiedBy);
            		
            		                 
            	
            	
            	case MemberWizardColumn.LastModified:
            		return this.LastModified.CompareTo(rhs.LastModified);
            		
            		                 
            	
            	
            	case MemberWizardColumn.DirectorshipTitle:
            		return this.DirectorshipTitle.CompareTo(rhs.DirectorshipTitle);
            		
            		                 
            	
            	
            	case MemberWizardColumn.DirectorshipEnable:
            		return this.DirectorshipEnable.Value.CompareTo(rhs.DirectorshipEnable.Value);
            		
            		                 
            	
            	
            	case MemberWizardColumn.Skills:
            		return this.Skills.CompareTo(rhs.Skills);
            		
            		                 
            	
            	
            	case MemberWizardColumn.LicenseTypes:
            		return this.LicenseTypes.CompareTo(rhs.LicenseTypes);
            		
            		                 
            	
            	
            	case MemberWizardColumn.SummaryTitle:
            		return this.SummaryTitle.CompareTo(rhs.SummaryTitle);
            		
            		                 
            	
            	
            	case MemberWizardColumn.PersonalDetailsTitle:
            		return this.PersonalDetailsTitle.CompareTo(rhs.PersonalDetailsTitle);
            		
            		                 
            	
            	
            	case MemberWizardColumn.LicensesTitle:
            		return this.LicensesTitle.CompareTo(rhs.LicensesTitle);
            		
            		                 
            	
            	
            	case MemberWizardColumn.AttachCoverLetterTitle:
            		return this.AttachCoverLetterTitle.CompareTo(rhs.AttachCoverLetterTitle);
            		
            		                 
            	
            	
            	case MemberWizardColumn.LanguagesTitle:
            		return this.LanguagesTitle.CompareTo(rhs.LanguagesTitle);
            		
            		                 
            	
            	
            	case MemberWizardColumn.ReferencesTitle:
            		return this.ReferencesTitle.CompareTo(rhs.ReferencesTitle);
            		
            		                 
            	
            	
            	case MemberWizardColumn.CustomQuestionTitle:
            		return this.CustomQuestionTitle.CompareTo(rhs.CustomQuestionTitle);
            		
            		                 
            	
            	
            	case MemberWizardColumn.SummaryPoints:
            		return this.SummaryPoints.CompareTo(rhs.SummaryPoints);
            		
            		                 
            	
            	
            	case MemberWizardColumn.PersonalDetailsPoints:
            		return this.PersonalDetailsPoints.CompareTo(rhs.PersonalDetailsPoints);
            		
            		                 
            	
            	
            	case MemberWizardColumn.LicensesPoints:
            		return this.LicensesPoints.CompareTo(rhs.LicensesPoints);
            		
            		                 
            	
            	
            	case MemberWizardColumn.AttachCoverLetterPoints:
            		return this.AttachCoverLetterPoints.CompareTo(rhs.AttachCoverLetterPoints);
            		
            		                 
            	
            	
            	case MemberWizardColumn.LanguagesPoints:
            		return this.LanguagesPoints.CompareTo(rhs.LanguagesPoints);
            		
            		                 
            	
            	
            	case MemberWizardColumn.ReferencesPoints:
            		return this.ReferencesPoints.CompareTo(rhs.ReferencesPoints);
            		
            		                 
            	
            	
            	case MemberWizardColumn.CustomQuestionPoints:
            		return this.CustomQuestionPoints.CompareTo(rhs.CustomQuestionPoints);
            		
            		                 
            	
            	
            	case MemberWizardColumn.ProfilePoints:
            		return this.ProfilePoints.CompareTo(rhs.ProfilePoints);
            		
            		                 
            	
            	
            	case MemberWizardColumn.CvPoints:
            		return this.CvPoints.CompareTo(rhs.CvPoints);
            		
            		                 
            	
            	
            	case MemberWizardColumn.RolePreferencesPoints:
            		return this.RolePreferencesPoints.CompareTo(rhs.RolePreferencesPoints);
            		
            		                 
            	
            	
            	case MemberWizardColumn.EducationPoints:
            		return this.EducationPoints.CompareTo(rhs.EducationPoints);
            		
            		                 
            	
            	
            	case MemberWizardColumn.MembershipsPoints:
            		return this.MembershipsPoints.CompareTo(rhs.MembershipsPoints);
            		
            		                 
            	
            	
            	case MemberWizardColumn.ExperiencePoints:
            		return this.ExperiencePoints.CompareTo(rhs.ExperiencePoints);
            		
            		                 
            	
            	
            	case MemberWizardColumn.SkillsPoints:
            		return this.SkillsPoints.CompareTo(rhs.SkillsPoints);
            		
            		                 
            	
            	
            	case MemberWizardColumn.DirectorshipPoints:
            		return this.DirectorshipPoints.CompareTo(rhs.DirectorshipPoints);
            		
            		                 
            	
            	
            	case MemberWizardColumn.WizardLanguageXml:
            		return this.WizardLanguageXml.CompareTo(rhs.WizardLanguageXml);
            		
            		                 
            	
            	
            	case MemberWizardColumn.CustomQuestionsXml:
            		return this.CustomQuestionsXml.CompareTo(rhs.CustomQuestionsXml);
            		
            		                 
            	
            	
            	case MemberWizardColumn.MinExperiencesEntry:
            		return this.MinExperiencesEntry.CompareTo(rhs.MinExperiencesEntry);
            		
            		                 
            	
            	
            	case MemberWizardColumn.MinReferencesEntry:
            		return this.MinReferencesEntry.CompareTo(rhs.MinReferencesEntry);
            		
            		                 
            	
            	
            	case MemberWizardColumn.MinEducationsEntry:
            		return this.MinEducationsEntry.CompareTo(rhs.MinEducationsEntry);
            		
            		                 
            	
            	
            	case MemberWizardColumn.QualificationNames:
            		return this.QualificationNames.CompareTo(rhs.QualificationNames);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MemberWizardKey> Members
		
		// member variable for the EntityId property
		private MemberWizardKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MemberWizardKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MemberWizardKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MemberWizard")
					.Append("|").Append( this.MemberWizardId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{53}{52}- MemberWizardId: {0}{52}- SiteId: {1}{52}- MemberWizardParentId: {2}{52}- ProfileTitle: {3}{52}- CvTitle: {4}{52}- RolePreferencesTitle: {5}{52}- EducationTitle: {6}{52}- MembershipsTitle: {7}{52}- ExperienceTitle: {8}{52}- SkillsTitle: {9}{52}- ProfileEnable: {10}{52}- CvEnable: {11}{52}- RolePreferencesEnable: {12}{52}- EducationEnable: {13}{52}- MembershipsEnable: {14}{52}- ExperienceEnable: {15}{52}- SkillsEnable: {16}{52}- GlobalTemplate: {17}{52}- LastModifiedBy: {18}{52}- LastModified: {19}{52}- DirectorshipTitle: {20}{52}- DirectorshipEnable: {21}{52}- Skills: {22}{52}- LicenseTypes: {23}{52}- SummaryTitle: {24}{52}- PersonalDetailsTitle: {25}{52}- LicensesTitle: {26}{52}- AttachCoverLetterTitle: {27}{52}- LanguagesTitle: {28}{52}- ReferencesTitle: {29}{52}- CustomQuestionTitle: {30}{52}- SummaryPoints: {31}{52}- PersonalDetailsPoints: {32}{52}- LicensesPoints: {33}{52}- AttachCoverLetterPoints: {34}{52}- LanguagesPoints: {35}{52}- ReferencesPoints: {36}{52}- CustomQuestionPoints: {37}{52}- ProfilePoints: {38}{52}- CvPoints: {39}{52}- RolePreferencesPoints: {40}{52}- EducationPoints: {41}{52}- MembershipsPoints: {42}{52}- ExperiencePoints: {43}{52}- SkillsPoints: {44}{52}- DirectorshipPoints: {45}{52}- WizardLanguageXml: {46}{52}- CustomQuestionsXml: {47}{52}- MinExperiencesEntry: {48}{52}- MinReferencesEntry: {49}{52}- MinEducationsEntry: {50}{52}- QualificationNames: {51}{52}{54}", 
				this.MemberWizardId,
				(this.SiteId == null) ? string.Empty : this.SiteId.ToString(),
				(this.MemberWizardParentId == null) ? string.Empty : this.MemberWizardParentId.ToString(),
				this.ProfileTitle,
				this.CvTitle,
				this.RolePreferencesTitle,
				this.EducationTitle,
				this.MembershipsTitle,
				this.ExperienceTitle,
				this.SkillsTitle,
				(this.ProfileEnable == null) ? string.Empty : this.ProfileEnable.ToString(),
				(this.CvEnable == null) ? string.Empty : this.CvEnable.ToString(),
				(this.RolePreferencesEnable == null) ? string.Empty : this.RolePreferencesEnable.ToString(),
				(this.EducationEnable == null) ? string.Empty : this.EducationEnable.ToString(),
				(this.MembershipsEnable == null) ? string.Empty : this.MembershipsEnable.ToString(),
				(this.ExperienceEnable == null) ? string.Empty : this.ExperienceEnable.ToString(),
				(this.SkillsEnable == null) ? string.Empty : this.SkillsEnable.ToString(),
				this.GlobalTemplate,
				this.LastModifiedBy,
				this.LastModified,
				this.DirectorshipTitle,
				(this.DirectorshipEnable == null) ? string.Empty : this.DirectorshipEnable.ToString(),
				(this.Skills == null) ? string.Empty : this.Skills.ToString(),
				(this.LicenseTypes == null) ? string.Empty : this.LicenseTypes.ToString(),
				(this.SummaryTitle == null) ? string.Empty : this.SummaryTitle.ToString(),
				(this.PersonalDetailsTitle == null) ? string.Empty : this.PersonalDetailsTitle.ToString(),
				(this.LicensesTitle == null) ? string.Empty : this.LicensesTitle.ToString(),
				(this.AttachCoverLetterTitle == null) ? string.Empty : this.AttachCoverLetterTitle.ToString(),
				(this.LanguagesTitle == null) ? string.Empty : this.LanguagesTitle.ToString(),
				(this.ReferencesTitle == null) ? string.Empty : this.ReferencesTitle.ToString(),
				(this.CustomQuestionTitle == null) ? string.Empty : this.CustomQuestionTitle.ToString(),
				this.SummaryPoints,
				this.PersonalDetailsPoints,
				this.LicensesPoints,
				this.AttachCoverLetterPoints,
				this.LanguagesPoints,
				this.ReferencesPoints,
				this.CustomQuestionPoints,
				this.ProfilePoints,
				this.CvPoints,
				this.RolePreferencesPoints,
				this.EducationPoints,
				this.MembershipsPoints,
				this.ExperiencePoints,
				this.SkillsPoints,
				this.DirectorshipPoints,
				(this.WizardLanguageXml == null) ? string.Empty : this.WizardLanguageXml.ToString(),
				(this.CustomQuestionsXml == null) ? string.Empty : this.CustomQuestionsXml.ToString(),
				this.MinExperiencesEntry,
				this.MinReferencesEntry,
				this.MinEducationsEntry,
				(this.QualificationNames == null) ? string.Empty : this.QualificationNames.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'MemberWizard' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MemberWizardEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MemberWizardID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "MemberWizard"</remarks>
		public System.Int32 MemberWizardId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SiteID : 
		/// </summary>
		public System.Int32?		  SiteId = null;
		
		/// <summary>
		/// MemberWizardParentID : 
		/// </summary>
		public System.Int32?		  MemberWizardParentId = null;
		
		/// <summary>
		/// ProfileTitle : 
		/// </summary>
		public System.String		  ProfileTitle = string.Empty;
		
		/// <summary>
		/// CVTitle : 
		/// </summary>
		public System.String		  CvTitle = string.Empty;
		
		/// <summary>
		/// RolePreferencesTitle : 
		/// </summary>
		public System.String		  RolePreferencesTitle = string.Empty;
		
		/// <summary>
		/// EducationTitle : 
		/// </summary>
		public System.String		  EducationTitle = string.Empty;
		
		/// <summary>
		/// MembershipsTitle : 
		/// </summary>
		public System.String		  MembershipsTitle = string.Empty;
		
		/// <summary>
		/// ExperienceTitle : 
		/// </summary>
		public System.String		  ExperienceTitle = string.Empty;
		
		/// <summary>
		/// SkillsTitle : 
		/// </summary>
		public System.String		  SkillsTitle = string.Empty;
		
		/// <summary>
		/// ProfileEnable : 
		/// </summary>
		public System.Boolean?		  ProfileEnable = null;
		
		/// <summary>
		/// CVEnable : 
		/// </summary>
		public System.Boolean?		  CvEnable = null;
		
		/// <summary>
		/// RolePreferencesEnable : 
		/// </summary>
		public System.Boolean?		  RolePreferencesEnable = null;
		
		/// <summary>
		/// EducationEnable : 
		/// </summary>
		public System.Boolean?		  EducationEnable = null;
		
		/// <summary>
		/// MembershipsEnable : 
		/// </summary>
		public System.Boolean?		  MembershipsEnable = null;
		
		/// <summary>
		/// ExperienceEnable : 
		/// </summary>
		public System.Boolean?		  ExperienceEnable = null;
		
		/// <summary>
		/// SkillsEnable : 
		/// </summary>
		public System.Boolean?		  SkillsEnable = null;
		
		/// <summary>
		/// GlobalTemplate : 
		/// </summary>
		public System.Boolean		  GlobalTemplate = false;
		
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		public System.Int32		  LastModifiedBy = (int)0;
		
		/// <summary>
		/// LastModified : 
		/// </summary>
		public System.DateTime		  LastModified = DateTime.MinValue;
		
		/// <summary>
		/// DirectorshipTitle : 
		/// </summary>
		public System.String		  DirectorshipTitle = string.Empty;
		
		/// <summary>
		/// DirectorshipEnable : 
		/// </summary>
		public System.Boolean?		  DirectorshipEnable = null;
		
		/// <summary>
		/// Skills : 
		/// </summary>
		public System.String		  Skills = null;
		
		/// <summary>
		/// LicenseTypes : 
		/// </summary>
		public System.String		  LicenseTypes = null;
		
		/// <summary>
		/// SummaryTitle : 
		/// </summary>
		public System.String		  SummaryTitle = null;
		
		/// <summary>
		/// PersonalDetailsTitle : 
		/// </summary>
		public System.String		  PersonalDetailsTitle = null;
		
		/// <summary>
		/// LicensesTitle : 
		/// </summary>
		public System.String		  LicensesTitle = null;
		
		/// <summary>
		/// AttachCoverLetterTitle : 
		/// </summary>
		public System.String		  AttachCoverLetterTitle = null;
		
		/// <summary>
		/// LanguagesTitle : 
		/// </summary>
		public System.String		  LanguagesTitle = null;
		
		/// <summary>
		/// ReferencesTitle : 
		/// </summary>
		public System.String		  ReferencesTitle = null;
		
		/// <summary>
		/// CustomQuestionTitle : 
		/// </summary>
		public System.String		  CustomQuestionTitle = null;
		
		/// <summary>
		/// SummaryPoints : 
		/// </summary>
		public System.Int32		  SummaryPoints = (int)0;
		
		/// <summary>
		/// PersonalDetailsPoints : 
		/// </summary>
		public System.Int32		  PersonalDetailsPoints = (int)0;
		
		/// <summary>
		/// LicensesPoints : 
		/// </summary>
		public System.Int32		  LicensesPoints = (int)0;
		
		/// <summary>
		/// AttachCoverLetterPoints : 
		/// </summary>
		public System.Int32		  AttachCoverLetterPoints = (int)0;
		
		/// <summary>
		/// LanguagesPoints : 
		/// </summary>
		public System.Int32		  LanguagesPoints = (int)0;
		
		/// <summary>
		/// ReferencesPoints : 
		/// </summary>
		public System.Int32		  ReferencesPoints = (int)0;
		
		/// <summary>
		/// CustomQuestionPoints : 
		/// </summary>
		public System.Int32		  CustomQuestionPoints = (int)0;
		
		/// <summary>
		/// ProfilePoints : 
		/// </summary>
		public System.Int32		  ProfilePoints = (int)0;
		
		/// <summary>
		/// CVPoints : 
		/// </summary>
		public System.Int32		  CvPoints = (int)0;
		
		/// <summary>
		/// RolePreferencesPoints : 
		/// </summary>
		public System.Int32		  RolePreferencesPoints = (int)0;
		
		/// <summary>
		/// EducationPoints : 
		/// </summary>
		public System.Int32		  EducationPoints = (int)0;
		
		/// <summary>
		/// MembershipsPoints : 
		/// </summary>
		public System.Int32		  MembershipsPoints = (int)0;
		
		/// <summary>
		/// ExperiencePoints : 
		/// </summary>
		public System.Int32		  ExperiencePoints = (int)0;
		
		/// <summary>
		/// SkillsPoints : 
		/// </summary>
		public System.Int32		  SkillsPoints = (int)0;
		
		/// <summary>
		/// DirectorshipPoints : 
		/// </summary>
		public System.Int32		  DirectorshipPoints = (int)0;
		
		/// <summary>
		/// WizardLanguageXML : 
		/// </summary>
		public System.String		  WizardLanguageXml = null;
		
		/// <summary>
		/// CustomQuestionsXML : 
		/// </summary>
		public System.String		  CustomQuestionsXml = null;
		
		/// <summary>
		/// MinExperiencesEntry : 
		/// </summary>
		public System.Int16		  MinExperiencesEntry = (short)0;
		
		/// <summary>
		/// MinReferencesEntry : 
		/// </summary>
		public System.Int16		  MinReferencesEntry = (short)0;
		
		/// <summary>
		/// MinEducationsEntry : 
		/// </summary>
		public System.Int16		  MinEducationsEntry = (short)0;
		
		/// <summary>
		/// QualificationNames : 
		/// </summary>
		public System.String		  QualificationNames = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdminUsers _lastModifiedBySource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return this._lastModifiedBySource; }
            set { this._lastModifiedBySource = value; }
      	}
		private Sites _siteIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Sites SiteIdSource
      	{
            get { return this._siteIdSource; }
            set { this._siteIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MemberWizardEntityData _tmp = new MemberWizardEntityData();
						
			_tmp.MemberWizardId = this.MemberWizardId;
			
			_tmp.SiteId = this.SiteId;
			_tmp.MemberWizardParentId = this.MemberWizardParentId;
			_tmp.ProfileTitle = this.ProfileTitle;
			_tmp.CvTitle = this.CvTitle;
			_tmp.RolePreferencesTitle = this.RolePreferencesTitle;
			_tmp.EducationTitle = this.EducationTitle;
			_tmp.MembershipsTitle = this.MembershipsTitle;
			_tmp.ExperienceTitle = this.ExperienceTitle;
			_tmp.SkillsTitle = this.SkillsTitle;
			_tmp.ProfileEnable = this.ProfileEnable;
			_tmp.CvEnable = this.CvEnable;
			_tmp.RolePreferencesEnable = this.RolePreferencesEnable;
			_tmp.EducationEnable = this.EducationEnable;
			_tmp.MembershipsEnable = this.MembershipsEnable;
			_tmp.ExperienceEnable = this.ExperienceEnable;
			_tmp.SkillsEnable = this.SkillsEnable;
			_tmp.GlobalTemplate = this.GlobalTemplate;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.LastModified = this.LastModified;
			_tmp.DirectorshipTitle = this.DirectorshipTitle;
			_tmp.DirectorshipEnable = this.DirectorshipEnable;
			_tmp.Skills = this.Skills;
			_tmp.LicenseTypes = this.LicenseTypes;
			_tmp.SummaryTitle = this.SummaryTitle;
			_tmp.PersonalDetailsTitle = this.PersonalDetailsTitle;
			_tmp.LicensesTitle = this.LicensesTitle;
			_tmp.AttachCoverLetterTitle = this.AttachCoverLetterTitle;
			_tmp.LanguagesTitle = this.LanguagesTitle;
			_tmp.ReferencesTitle = this.ReferencesTitle;
			_tmp.CustomQuestionTitle = this.CustomQuestionTitle;
			_tmp.SummaryPoints = this.SummaryPoints;
			_tmp.PersonalDetailsPoints = this.PersonalDetailsPoints;
			_tmp.LicensesPoints = this.LicensesPoints;
			_tmp.AttachCoverLetterPoints = this.AttachCoverLetterPoints;
			_tmp.LanguagesPoints = this.LanguagesPoints;
			_tmp.ReferencesPoints = this.ReferencesPoints;
			_tmp.CustomQuestionPoints = this.CustomQuestionPoints;
			_tmp.ProfilePoints = this.ProfilePoints;
			_tmp.CvPoints = this.CvPoints;
			_tmp.RolePreferencesPoints = this.RolePreferencesPoints;
			_tmp.EducationPoints = this.EducationPoints;
			_tmp.MembershipsPoints = this.MembershipsPoints;
			_tmp.ExperiencePoints = this.ExperiencePoints;
			_tmp.SkillsPoints = this.SkillsPoints;
			_tmp.DirectorshipPoints = this.DirectorshipPoints;
			_tmp.WizardLanguageXml = this.WizardLanguageXml;
			_tmp.CustomQuestionsXml = this.CustomQuestionsXml;
			_tmp.MinExperiencesEntry = this.MinExperiencesEntry;
			_tmp.MinReferencesEntry = this.MinReferencesEntry;
			_tmp.MinEducationsEntry = this.MinEducationsEntry;
			_tmp.QualificationNames = this.QualificationNames;
			
			#region Source Parent Composite Entities
			if (this.LastModifiedBySource != null)
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource) as AdminUsers;
			if (this.SiteIdSource != null)
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource) as Sites;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MemberWizardEntityData _tmp = new MemberWizardEntityData();
						
			_tmp.MemberWizardId = this.MemberWizardId;
			
			_tmp.SiteId = this.SiteId;
			_tmp.MemberWizardParentId = this.MemberWizardParentId;
			_tmp.ProfileTitle = this.ProfileTitle;
			_tmp.CvTitle = this.CvTitle;
			_tmp.RolePreferencesTitle = this.RolePreferencesTitle;
			_tmp.EducationTitle = this.EducationTitle;
			_tmp.MembershipsTitle = this.MembershipsTitle;
			_tmp.ExperienceTitle = this.ExperienceTitle;
			_tmp.SkillsTitle = this.SkillsTitle;
			_tmp.ProfileEnable = this.ProfileEnable;
			_tmp.CvEnable = this.CvEnable;
			_tmp.RolePreferencesEnable = this.RolePreferencesEnable;
			_tmp.EducationEnable = this.EducationEnable;
			_tmp.MembershipsEnable = this.MembershipsEnable;
			_tmp.ExperienceEnable = this.ExperienceEnable;
			_tmp.SkillsEnable = this.SkillsEnable;
			_tmp.GlobalTemplate = this.GlobalTemplate;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.LastModified = this.LastModified;
			_tmp.DirectorshipTitle = this.DirectorshipTitle;
			_tmp.DirectorshipEnable = this.DirectorshipEnable;
			_tmp.Skills = this.Skills;
			_tmp.LicenseTypes = this.LicenseTypes;
			_tmp.SummaryTitle = this.SummaryTitle;
			_tmp.PersonalDetailsTitle = this.PersonalDetailsTitle;
			_tmp.LicensesTitle = this.LicensesTitle;
			_tmp.AttachCoverLetterTitle = this.AttachCoverLetterTitle;
			_tmp.LanguagesTitle = this.LanguagesTitle;
			_tmp.ReferencesTitle = this.ReferencesTitle;
			_tmp.CustomQuestionTitle = this.CustomQuestionTitle;
			_tmp.SummaryPoints = this.SummaryPoints;
			_tmp.PersonalDetailsPoints = this.PersonalDetailsPoints;
			_tmp.LicensesPoints = this.LicensesPoints;
			_tmp.AttachCoverLetterPoints = this.AttachCoverLetterPoints;
			_tmp.LanguagesPoints = this.LanguagesPoints;
			_tmp.ReferencesPoints = this.ReferencesPoints;
			_tmp.CustomQuestionPoints = this.CustomQuestionPoints;
			_tmp.ProfilePoints = this.ProfilePoints;
			_tmp.CvPoints = this.CvPoints;
			_tmp.RolePreferencesPoints = this.RolePreferencesPoints;
			_tmp.EducationPoints = this.EducationPoints;
			_tmp.MembershipsPoints = this.MembershipsPoints;
			_tmp.ExperiencePoints = this.ExperiencePoints;
			_tmp.SkillsPoints = this.SkillsPoints;
			_tmp.DirectorshipPoints = this.DirectorshipPoints;
			_tmp.WizardLanguageXml = this.WizardLanguageXml;
			_tmp.CustomQuestionsXml = this.CustomQuestionsXml;
			_tmp.MinExperiencesEntry = this.MinExperiencesEntry;
			_tmp.MinReferencesEntry = this.MinReferencesEntry;
			_tmp.MinEducationsEntry = this.MinEducationsEntry;
			_tmp.QualificationNames = this.QualificationNames;
			
			#region Source Parent Composite Entities
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				_tmp.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				_tmp.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberWizardColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MemberWizardColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberWizardColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MemberWizardColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberWizardColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MemberWizardColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MemberWizardEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MemberWizardEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MemberWizardColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MemberWizardColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MemberWizardEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MemberWizardEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MemberWizardEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MemberWizard"/> object.
	/// </remarks>
	public class MemberWizardEventArgs : System.EventArgs
	{
		private MemberWizardColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MemberWizardEventArgs class.
		///</summary>
		public MemberWizardEventArgs(MemberWizardColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MemberWizardEventArgs class.
		///</summary>
		public MemberWizardEventArgs(MemberWizardColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MemberWizardColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MemberWizardColumn" />
		public MemberWizardColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MemberWizard related events.
	///</summary>
	public delegate void MemberWizardEventHandler(object sender, MemberWizardEventArgs e);
	
	#region MemberWizardComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MemberWizardComparer : System.Collections.Generic.IComparer<MemberWizard>
	{
		MemberWizardColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MemberWizardComparer"/> class.
        /// </summary>
		public MemberWizardComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MemberWizardComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MemberWizardComparer(MemberWizardColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="MemberWizard"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="MemberWizard"/> to compare.</param>
        /// <param name="b">The second <c>MemberWizard</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MemberWizard a, MemberWizard b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MemberWizard entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MemberWizard a, MemberWizard b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MemberWizardColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MemberWizardKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MemberWizard"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MemberWizardKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MemberWizardKey class.
		/// </summary>
		public MemberWizardKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MemberWizardKey class.
		/// </summary>
		public MemberWizardKey(MemberWizardBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MemberWizardId = entity.MemberWizardId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MemberWizardKey class.
		/// </summary>
		public MemberWizardKey(System.Int32 _memberWizardId)
		{
			#region Init Properties

			this.MemberWizardId = _memberWizardId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MemberWizardBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MemberWizardBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MemberWizardId property
		private System.Int32 _memberWizardId;
		
		/// <summary>
		/// Gets or sets the MemberWizardId property.
		/// </summary>
		public System.Int32 MemberWizardId
		{
			get { return _memberWizardId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MemberWizardId = value;
				
				_memberWizardId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MemberWizardId = ( values["MemberWizardId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MemberWizardId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MemberWizardId", MemberWizardId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MemberWizardId: {0}{1}",
								MemberWizardId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MemberWizardColumn Enum
	
	/// <summary>
	/// Enumerate the MemberWizard columns.
	/// </summary>
	[Serializable]
	public enum MemberWizardColumn : int
	{
		/// <summary>
		/// MemberWizardId : 
		/// </summary>
		[EnumTextValue("MemberWizardID")]
		[ColumnEnum("MemberWizardID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MemberWizardId = 1,
		/// <summary>
		/// SiteId : 
		/// </summary>
		[EnumTextValue("SiteID")]
		[ColumnEnum("SiteID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SiteId = 2,
		/// <summary>
		/// MemberWizardParentId : 
		/// </summary>
		[EnumTextValue("MemberWizardParentID")]
		[ColumnEnum("MemberWizardParentID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MemberWizardParentId = 3,
		/// <summary>
		/// ProfileTitle : 
		/// </summary>
		[EnumTextValue("ProfileTitle")]
		[ColumnEnum("ProfileTitle", typeof(System.String), System.Data.DbType.String, false, false, false, 512)]
		ProfileTitle = 4,
		/// <summary>
		/// CvTitle : 
		/// </summary>
		[EnumTextValue("CVTitle")]
		[ColumnEnum("CVTitle", typeof(System.String), System.Data.DbType.String, false, false, false, 512)]
		CvTitle = 5,
		/// <summary>
		/// RolePreferencesTitle : 
		/// </summary>
		[EnumTextValue("RolePreferencesTitle")]
		[ColumnEnum("RolePreferencesTitle", typeof(System.String), System.Data.DbType.String, false, false, false, 512)]
		RolePreferencesTitle = 6,
		/// <summary>
		/// EducationTitle : 
		/// </summary>
		[EnumTextValue("EducationTitle")]
		[ColumnEnum("EducationTitle", typeof(System.String), System.Data.DbType.String, false, false, false, 512)]
		EducationTitle = 7,
		/// <summary>
		/// MembershipsTitle : 
		/// </summary>
		[EnumTextValue("MembershipsTitle")]
		[ColumnEnum("MembershipsTitle", typeof(System.String), System.Data.DbType.String, false, false, false, 512)]
		MembershipsTitle = 8,
		/// <summary>
		/// ExperienceTitle : 
		/// </summary>
		[EnumTextValue("ExperienceTitle")]
		[ColumnEnum("ExperienceTitle", typeof(System.String), System.Data.DbType.String, false, false, false, 512)]
		ExperienceTitle = 9,
		/// <summary>
		/// SkillsTitle : 
		/// </summary>
		[EnumTextValue("SkillsTitle")]
		[ColumnEnum("SkillsTitle", typeof(System.String), System.Data.DbType.String, false, false, false, 512)]
		SkillsTitle = 10,
		/// <summary>
		/// ProfileEnable : 
		/// </summary>
		[EnumTextValue("ProfileEnable")]
		[ColumnEnum("ProfileEnable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ProfileEnable = 11,
		/// <summary>
		/// CvEnable : 
		/// </summary>
		[EnumTextValue("CVEnable")]
		[ColumnEnum("CVEnable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		CvEnable = 12,
		/// <summary>
		/// RolePreferencesEnable : 
		/// </summary>
		[EnumTextValue("RolePreferencesEnable")]
		[ColumnEnum("RolePreferencesEnable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		RolePreferencesEnable = 13,
		/// <summary>
		/// EducationEnable : 
		/// </summary>
		[EnumTextValue("EducationEnable")]
		[ColumnEnum("EducationEnable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		EducationEnable = 14,
		/// <summary>
		/// MembershipsEnable : 
		/// </summary>
		[EnumTextValue("MembershipsEnable")]
		[ColumnEnum("MembershipsEnable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		MembershipsEnable = 15,
		/// <summary>
		/// ExperienceEnable : 
		/// </summary>
		[EnumTextValue("ExperienceEnable")]
		[ColumnEnum("ExperienceEnable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ExperienceEnable = 16,
		/// <summary>
		/// SkillsEnable : 
		/// </summary>
		[EnumTextValue("SkillsEnable")]
		[ColumnEnum("SkillsEnable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		SkillsEnable = 17,
		/// <summary>
		/// GlobalTemplate : 
		/// </summary>
		[EnumTextValue("GlobalTemplate")]
		[ColumnEnum("GlobalTemplate", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		GlobalTemplate = 18,
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		[EnumTextValue("LastModifiedBy")]
		[ColumnEnum("LastModifiedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LastModifiedBy = 19,
		/// <summary>
		/// LastModified : 
		/// </summary>
		[EnumTextValue("LastModified")]
		[ColumnEnum("LastModified", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastModified = 20,
		/// <summary>
		/// DirectorshipTitle : 
		/// </summary>
		[EnumTextValue("DirectorshipTitle")]
		[ColumnEnum("DirectorshipTitle", typeof(System.String), System.Data.DbType.String, false, false, false, 512)]
		DirectorshipTitle = 21,
		/// <summary>
		/// DirectorshipEnable : 
		/// </summary>
		[EnumTextValue("DirectorshipEnable")]
		[ColumnEnum("DirectorshipEnable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		DirectorshipEnable = 22,
		/// <summary>
		/// Skills : 
		/// </summary>
		[EnumTextValue("Skills")]
		[ColumnEnum("Skills", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Skills = 23,
		/// <summary>
		/// LicenseTypes : 
		/// </summary>
		[EnumTextValue("LicenseTypes")]
		[ColumnEnum("LicenseTypes", typeof(System.String), System.Data.DbType.String, false, false, true)]
		LicenseTypes = 24,
		/// <summary>
		/// SummaryTitle : 
		/// </summary>
		[EnumTextValue("SummaryTitle")]
		[ColumnEnum("SummaryTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 512)]
		SummaryTitle = 25,
		/// <summary>
		/// PersonalDetailsTitle : 
		/// </summary>
		[EnumTextValue("PersonalDetailsTitle")]
		[ColumnEnum("PersonalDetailsTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 512)]
		PersonalDetailsTitle = 26,
		/// <summary>
		/// LicensesTitle : 
		/// </summary>
		[EnumTextValue("LicensesTitle")]
		[ColumnEnum("LicensesTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 512)]
		LicensesTitle = 27,
		/// <summary>
		/// AttachCoverLetterTitle : 
		/// </summary>
		[EnumTextValue("AttachCoverLetterTitle")]
		[ColumnEnum("AttachCoverLetterTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 512)]
		AttachCoverLetterTitle = 28,
		/// <summary>
		/// LanguagesTitle : 
		/// </summary>
		[EnumTextValue("LanguagesTitle")]
		[ColumnEnum("LanguagesTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 512)]
		LanguagesTitle = 29,
		/// <summary>
		/// ReferencesTitle : 
		/// </summary>
		[EnumTextValue("ReferencesTitle")]
		[ColumnEnum("ReferencesTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 512)]
		ReferencesTitle = 30,
		/// <summary>
		/// CustomQuestionTitle : 
		/// </summary>
		[EnumTextValue("CustomQuestionTitle")]
		[ColumnEnum("CustomQuestionTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 512)]
		CustomQuestionTitle = 31,
		/// <summary>
		/// SummaryPoints : 
		/// </summary>
		[EnumTextValue("SummaryPoints")]
		[ColumnEnum("SummaryPoints", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SummaryPoints = 32,
		/// <summary>
		/// PersonalDetailsPoints : 
		/// </summary>
		[EnumTextValue("PersonalDetailsPoints")]
		[ColumnEnum("PersonalDetailsPoints", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		PersonalDetailsPoints = 33,
		/// <summary>
		/// LicensesPoints : 
		/// </summary>
		[EnumTextValue("LicensesPoints")]
		[ColumnEnum("LicensesPoints", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LicensesPoints = 34,
		/// <summary>
		/// AttachCoverLetterPoints : 
		/// </summary>
		[EnumTextValue("AttachCoverLetterPoints")]
		[ColumnEnum("AttachCoverLetterPoints", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		AttachCoverLetterPoints = 35,
		/// <summary>
		/// LanguagesPoints : 
		/// </summary>
		[EnumTextValue("LanguagesPoints")]
		[ColumnEnum("LanguagesPoints", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LanguagesPoints = 36,
		/// <summary>
		/// ReferencesPoints : 
		/// </summary>
		[EnumTextValue("ReferencesPoints")]
		[ColumnEnum("ReferencesPoints", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ReferencesPoints = 37,
		/// <summary>
		/// CustomQuestionPoints : 
		/// </summary>
		[EnumTextValue("CustomQuestionPoints")]
		[ColumnEnum("CustomQuestionPoints", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CustomQuestionPoints = 38,
		/// <summary>
		/// ProfilePoints : 
		/// </summary>
		[EnumTextValue("ProfilePoints")]
		[ColumnEnum("ProfilePoints", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ProfilePoints = 39,
		/// <summary>
		/// CvPoints : 
		/// </summary>
		[EnumTextValue("CVPoints")]
		[ColumnEnum("CVPoints", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CvPoints = 40,
		/// <summary>
		/// RolePreferencesPoints : 
		/// </summary>
		[EnumTextValue("RolePreferencesPoints")]
		[ColumnEnum("RolePreferencesPoints", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		RolePreferencesPoints = 41,
		/// <summary>
		/// EducationPoints : 
		/// </summary>
		[EnumTextValue("EducationPoints")]
		[ColumnEnum("EducationPoints", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		EducationPoints = 42,
		/// <summary>
		/// MembershipsPoints : 
		/// </summary>
		[EnumTextValue("MembershipsPoints")]
		[ColumnEnum("MembershipsPoints", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MembershipsPoints = 43,
		/// <summary>
		/// ExperiencePoints : 
		/// </summary>
		[EnumTextValue("ExperiencePoints")]
		[ColumnEnum("ExperiencePoints", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ExperiencePoints = 44,
		/// <summary>
		/// SkillsPoints : 
		/// </summary>
		[EnumTextValue("SkillsPoints")]
		[ColumnEnum("SkillsPoints", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SkillsPoints = 45,
		/// <summary>
		/// DirectorshipPoints : 
		/// </summary>
		[EnumTextValue("DirectorshipPoints")]
		[ColumnEnum("DirectorshipPoints", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DirectorshipPoints = 46,
		/// <summary>
		/// WizardLanguageXml : 
		/// </summary>
		[EnumTextValue("WizardLanguageXML")]
		[ColumnEnum("WizardLanguageXML", typeof(System.String), System.Data.DbType.String, false, false, true)]
		WizardLanguageXml = 47,
		/// <summary>
		/// CustomQuestionsXml : 
		/// </summary>
		[EnumTextValue("CustomQuestionsXML")]
		[ColumnEnum("CustomQuestionsXML", typeof(System.String), System.Data.DbType.String, false, false, true)]
		CustomQuestionsXml = 48,
		/// <summary>
		/// MinExperiencesEntry : 
		/// </summary>
		[EnumTextValue("MinExperiencesEntry")]
		[ColumnEnum("MinExperiencesEntry", typeof(System.Int16), System.Data.DbType.Int16, false, false, false)]
		MinExperiencesEntry = 49,
		/// <summary>
		/// MinReferencesEntry : 
		/// </summary>
		[EnumTextValue("MinReferencesEntry")]
		[ColumnEnum("MinReferencesEntry", typeof(System.Int16), System.Data.DbType.Int16, false, false, false)]
		MinReferencesEntry = 50,
		/// <summary>
		/// MinEducationsEntry : 
		/// </summary>
		[EnumTextValue("MinEducationsEntry")]
		[ColumnEnum("MinEducationsEntry", typeof(System.Int16), System.Data.DbType.Int16, false, false, false)]
		MinEducationsEntry = 51,
		/// <summary>
		/// QualificationNames : 
		/// </summary>
		[EnumTextValue("QualificationNames")]
		[ColumnEnum("QualificationNames", typeof(System.String), System.Data.DbType.String, false, false, true)]
		QualificationNames = 52
	}//End enum

	#endregion MemberWizardColumn Enum

} // end namespace

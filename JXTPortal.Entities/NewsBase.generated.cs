
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file News.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'News' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class NewsBase : EntityBase, INews, IEntityId<NewsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private NewsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private NewsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private NewsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<News> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event NewsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event NewsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="NewsBase"/> instance.
		///</summary>
		public NewsBase()
		{
			this.entityData = new NewsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="NewsBase"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_newsCategoryId"></param>
		///<param name="_subject"></param>
		///<param name="_content"></param>
		///<param name="_postDate"></param>
		///<param name="_valid"></param>
		///<param name="_sequence"></param>
		///<param name="_lastModified"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_searchField"></param>
		///<param name="_tags"></param>
		///<param name="_metaTitle"></param>
		///<param name="_metaKeywords"></param>
		///<param name="_metaDescription"></param>
		///<param name="_pageFriendlyName"></param>
		///<param name="_newsIndustryId"></param>
		///<param name="_newsTypeIds"></param>
		///<param name="_customXml"></param>
		///<param name="_imageUrl"></param>
		///<param name="_author"></param>
		public NewsBase(System.Int32 _siteId, System.Int32 _newsCategoryId, System.String _subject, 
			System.String _content, System.DateTime _postDate, System.Boolean? _valid, System.Int32? _sequence, System.DateTime? _lastModified, 
			System.Int32 _lastModifiedBy, System.String _searchField, System.String _tags, System.String _metaTitle, System.String _metaKeywords, 
			System.String _metaDescription, System.String _pageFriendlyName, System.Int32? _newsIndustryId, System.String _newsTypeIds, 
			System.String _customXml, System.String _imageUrl, System.String _author)
		{
			this.entityData = new NewsEntityData();
			this.backupData = null;

			this.SiteId = _siteId;
			this.NewsCategoryId = _newsCategoryId;
			this.Subject = _subject;
			this.Content = _content;
			this.PostDate = _postDate;
			this.Valid = _valid;
			this.Sequence = _sequence;
			this.LastModified = _lastModified;
			this.LastModifiedBy = _lastModifiedBy;
			this.SearchField = _searchField;
			this.Tags = _tags;
			this.MetaTitle = _metaTitle;
			this.MetaKeywords = _metaKeywords;
			this.MetaDescription = _metaDescription;
			this.PageFriendlyName = _pageFriendlyName;
			this.NewsIndustryId = _newsIndustryId;
			this.NewsTypeIds = _newsTypeIds;
			this.CustomXml = _customXml;
			this.ImageUrl = _imageUrl;
			this.Author = _author;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="News"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_newsCategoryId"></param>
		///<param name="_subject"></param>
		///<param name="_content"></param>
		///<param name="_postDate"></param>
		///<param name="_valid"></param>
		///<param name="_sequence"></param>
		///<param name="_lastModified"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_searchField"></param>
		///<param name="_tags"></param>
		///<param name="_metaTitle"></param>
		///<param name="_metaKeywords"></param>
		///<param name="_metaDescription"></param>
		///<param name="_pageFriendlyName"></param>
		///<param name="_newsIndustryId"></param>
		///<param name="_newsTypeIds"></param>
		///<param name="_customXml"></param>
		///<param name="_imageUrl"></param>
		///<param name="_author"></param>
		public static News CreateNews(System.Int32 _siteId, System.Int32 _newsCategoryId, System.String _subject, 
			System.String _content, System.DateTime _postDate, System.Boolean? _valid, System.Int32? _sequence, System.DateTime? _lastModified, 
			System.Int32 _lastModifiedBy, System.String _searchField, System.String _tags, System.String _metaTitle, System.String _metaKeywords, 
			System.String _metaDescription, System.String _pageFriendlyName, System.Int32? _newsIndustryId, System.String _newsTypeIds, 
			System.String _customXml, System.String _imageUrl, System.String _author)
		{
			News newNews = new News();
			newNews.SiteId = _siteId;
			newNews.NewsCategoryId = _newsCategoryId;
			newNews.Subject = _subject;
			newNews.Content = _content;
			newNews.PostDate = _postDate;
			newNews.Valid = _valid;
			newNews.Sequence = _sequence;
			newNews.LastModified = _lastModified;
			newNews.LastModifiedBy = _lastModifiedBy;
			newNews.SearchField = _searchField;
			newNews.Tags = _tags;
			newNews.MetaTitle = _metaTitle;
			newNews.MetaKeywords = _metaKeywords;
			newNews.MetaDescription = _metaDescription;
			newNews.PageFriendlyName = _pageFriendlyName;
			newNews.NewsIndustryId = _newsIndustryId;
			newNews.NewsTypeIds = _newsTypeIds;
			newNews.CustomXml = _customXml;
			newNews.ImageUrl = _imageUrl;
			newNews.Author = _author;
			return newNews;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the NewsId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 NewsId
		{
			get
			{
				return this.entityData.NewsId; 
			}
			
			set
			{
				if (this.entityData.NewsId == value)
					return;
					
				OnColumnChanging(NewsColumn.NewsId, this.entityData.NewsId);
				this.entityData.NewsId = value;
				this.EntityId.NewsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.NewsId, this.entityData.NewsId);
				OnPropertyChanged("NewsId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SiteId
		{
			get
			{
				return this.entityData.SiteId; 
			}
			
			set
			{
				if (this.entityData.SiteId == value)
					return;
					
				OnColumnChanging(NewsColumn.SiteId, this.entityData.SiteId);
				this.entityData.SiteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.SiteId, this.entityData.SiteId);
				OnPropertyChanged("SiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NewsCategoryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 NewsCategoryId
		{
			get
			{
				return this.entityData.NewsCategoryId; 
			}
			
			set
			{
				if (this.entityData.NewsCategoryId == value)
					return;
					
				OnColumnChanging(NewsColumn.NewsCategoryId, this.entityData.NewsCategoryId);
				this.entityData.NewsCategoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.NewsCategoryId, this.entityData.NewsCategoryId);
				OnPropertyChanged("NewsCategoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Subject property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String Subject
		{
			get
			{
				return this.entityData.Subject; 
			}
			
			set
			{
				if (this.entityData.Subject == value)
					return;
					
				OnColumnChanging(NewsColumn.Subject, this.entityData.Subject);
				this.entityData.Subject = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.Subject, this.entityData.Subject);
				OnPropertyChanged("Subject");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Content property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Content
		{
			get
			{
				return this.entityData.Content; 
			}
			
			set
			{
				if (this.entityData.Content == value)
					return;
					
				OnColumnChanging(NewsColumn.Content, this.entityData.Content);
				this.entityData.Content = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.Content, this.entityData.Content);
				OnPropertyChanged("Content");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PostDate property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime PostDate
		{
			get
			{
				return this.entityData.PostDate; 
			}
			
			set
			{
				if (this.entityData.PostDate == value)
					return;
					
				OnColumnChanging(NewsColumn.PostDate, this.entityData.PostDate);
				this.entityData.PostDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.PostDate, this.entityData.PostDate);
				OnPropertyChanged("PostDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Valid property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsValidNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Valid
		{
			get
			{
				return this.entityData.Valid; 
			}
			
			set
			{
				if (this.entityData.Valid == value)
					return;
					
				OnColumnChanging(NewsColumn.Valid, this.entityData.Valid);
				this.entityData.Valid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.Valid, this.entityData.Valid);
				OnPropertyChanged("Valid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sequence property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSequenceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Sequence
		{
			get
			{
				return this.entityData.Sequence; 
			}
			
			set
			{
				if (this.entityData.Sequence == value)
					return;
					
				OnColumnChanging(NewsColumn.Sequence, this.entityData.Sequence);
				this.entityData.Sequence = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.Sequence, this.entityData.Sequence);
				OnPropertyChanged("Sequence");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModified property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModifiedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModified
		{
			get
			{
				return this.entityData.LastModified; 
			}
			
			set
			{
				if (this.entityData.LastModified == value)
					return;
					
				OnColumnChanging(NewsColumn.LastModified, this.entityData.LastModified);
				this.entityData.LastModified = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.LastModified, this.entityData.LastModified);
				OnPropertyChanged("LastModified");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LastModifiedBy
		{
			get
			{
				return this.entityData.LastModifiedBy; 
			}
			
			set
			{
				if (this.entityData.LastModifiedBy == value)
					return;
					
				OnColumnChanging(NewsColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				this.entityData.LastModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				OnPropertyChanged("LastModifiedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SearchField property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String SearchField
		{
			get
			{
				return this.entityData.SearchField; 
			}
			
			set
			{
				if (this.entityData.SearchField == value)
					return;
					
				OnColumnChanging(NewsColumn.SearchField, this.entityData.SearchField);
				this.entityData.SearchField = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.SearchField, this.entityData.SearchField);
				OnPropertyChanged("SearchField");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Tags property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Tags
		{
			get
			{
				return this.entityData.Tags; 
			}
			
			set
			{
				if (this.entityData.Tags == value)
					return;
					
				OnColumnChanging(NewsColumn.Tags, this.entityData.Tags);
				this.entityData.Tags = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.Tags, this.entityData.Tags);
				OnPropertyChanged("Tags");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MetaTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String MetaTitle
		{
			get
			{
				return this.entityData.MetaTitle; 
			}
			
			set
			{
				if (this.entityData.MetaTitle == value)
					return;
					
				OnColumnChanging(NewsColumn.MetaTitle, this.entityData.MetaTitle);
				this.entityData.MetaTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.MetaTitle, this.entityData.MetaTitle);
				OnPropertyChanged("MetaTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MetaKeywords property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 510)]
		public virtual System.String MetaKeywords
		{
			get
			{
				return this.entityData.MetaKeywords; 
			}
			
			set
			{
				if (this.entityData.MetaKeywords == value)
					return;
					
				OnColumnChanging(NewsColumn.MetaKeywords, this.entityData.MetaKeywords);
				this.entityData.MetaKeywords = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.MetaKeywords, this.entityData.MetaKeywords);
				OnPropertyChanged("MetaKeywords");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MetaDescription property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1024)]
		public virtual System.String MetaDescription
		{
			get
			{
				return this.entityData.MetaDescription; 
			}
			
			set
			{
				if (this.entityData.MetaDescription == value)
					return;
					
				OnColumnChanging(NewsColumn.MetaDescription, this.entityData.MetaDescription);
				this.entityData.MetaDescription = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.MetaDescription, this.entityData.MetaDescription);
				OnPropertyChanged("MetaDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PageFriendlyName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String PageFriendlyName
		{
			get
			{
				return this.entityData.PageFriendlyName; 
			}
			
			set
			{
				if (this.entityData.PageFriendlyName == value)
					return;
					
				OnColumnChanging(NewsColumn.PageFriendlyName, this.entityData.PageFriendlyName);
				this.entityData.PageFriendlyName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.PageFriendlyName, this.entityData.PageFriendlyName);
				OnPropertyChanged("PageFriendlyName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NewsIndustryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsNewsIndustryIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? NewsIndustryId
		{
			get
			{
				return this.entityData.NewsIndustryId; 
			}
			
			set
			{
				if (this.entityData.NewsIndustryId == value)
					return;
					
				OnColumnChanging(NewsColumn.NewsIndustryId, this.entityData.NewsIndustryId);
				this.entityData.NewsIndustryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.NewsIndustryId, this.entityData.NewsIndustryId);
				OnPropertyChanged("NewsIndustryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NewsTypeIds property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String NewsTypeIds
		{
			get
			{
				return this.entityData.NewsTypeIds; 
			}
			
			set
			{
				if (this.entityData.NewsTypeIds == value)
					return;
					
				OnColumnChanging(NewsColumn.NewsTypeIds, this.entityData.NewsTypeIds);
				this.entityData.NewsTypeIds = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.NewsTypeIds, this.entityData.NewsTypeIds);
				OnPropertyChanged("NewsTypeIds");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomXml property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String CustomXml
		{
			get
			{
				return this.entityData.CustomXml; 
			}
			
			set
			{
				if (this.entityData.CustomXml == value)
					return;
					
				OnColumnChanging(NewsColumn.CustomXml, this.entityData.CustomXml);
				this.entityData.CustomXml = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.CustomXml, this.entityData.CustomXml);
				OnPropertyChanged("CustomXml");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImageUrl property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String ImageUrl
		{
			get
			{
				return this.entityData.ImageUrl; 
			}
			
			set
			{
				if (this.entityData.ImageUrl == value)
					return;
					
				OnColumnChanging(NewsColumn.ImageUrl, this.entityData.ImageUrl);
				this.entityData.ImageUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.ImageUrl, this.entityData.ImageUrl);
				OnPropertyChanged("ImageUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Author property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Author
		{
			get
			{
				return this.entityData.Author; 
			}
			
			set
			{
				if (this.entityData.Author == value)
					return;
					
				OnColumnChanging(NewsColumn.Author, this.entityData.Author);
				this.entityData.Author = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(NewsColumn.Author, this.entityData.Author);
				OnPropertyChanged("Author");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return entityData.LastModifiedBySource; }
            set { entityData.LastModifiedBySource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="NewsCategories"/>.
		/// </summary>
		/// <value>The source NewsCategories for NewsCategoryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual NewsCategories NewsCategoryIdSource
      	{
            get { return entityData.NewsCategoryIdSource; }
            set { entityData.NewsCategoryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Sites SiteIdSource
      	{
            get { return entityData.SiteIdSource; }
            set { entityData.SiteIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Subject", "Subject"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Subject", "Subject", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Tags", "Tags", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MetaTitle", "Meta Title", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MetaKeywords", "Meta Keywords", 510));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MetaDescription", "Meta Description", 1024));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PageFriendlyName", "Page Friendly Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PageFriendlyName", "Page Friendly Name", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NewsTypeIds", "News Type Ids", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ImageUrl", "Image Url", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Author", "Author", 255));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "News"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"NewsID", "SiteID", "NewsCategoryID", "Subject", "Content", "PostDate", "Valid", "Sequence", "LastModified", "LastModifiedBy", "SearchField", "Tags", "MetaTitle", "MetaKeywords", "MetaDescription", "PageFriendlyName", "NewsIndustryID", "NewsTypeIDs", "CustomXML", "ImageURL", "Author"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as NewsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (News) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<News>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as News);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed News Entity 
		///</summary>
		protected virtual News Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			News copy = new News();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.NewsId = this.NewsId;
				copy.SiteId = this.SiteId;
				copy.NewsCategoryId = this.NewsCategoryId;
				copy.Subject = this.Subject;
				copy.Content = this.Content;
				copy.PostDate = this.PostDate;
				copy.Valid = this.Valid;
				copy.Sequence = this.Sequence;
				copy.LastModified = this.LastModified;
				copy.LastModifiedBy = this.LastModifiedBy;
				copy.SearchField = this.SearchField;
				copy.Tags = this.Tags;
				copy.MetaTitle = this.MetaTitle;
				copy.MetaKeywords = this.MetaKeywords;
				copy.MetaDescription = this.MetaDescription;
				copy.PageFriendlyName = this.PageFriendlyName;
				copy.NewsIndustryId = this.NewsIndustryId;
				copy.NewsTypeIds = this.NewsTypeIds;
				copy.CustomXml = this.CustomXml;
				copy.ImageUrl = this.ImageUrl;
				copy.Author = this.Author;
			
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				copy.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				copy.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			if (this.NewsCategoryIdSource != null && existingCopies.Contains(this.NewsCategoryIdSource))
				copy.NewsCategoryIdSource = existingCopies[this.NewsCategoryIdSource] as NewsCategories;
			else
				copy.NewsCategoryIdSource = MakeCopyOf(this.NewsCategoryIdSource, existingCopies) as NewsCategories;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				copy.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				copy.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed News Entity 
		///</summary>
		public virtual News Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed News Entity which is a deep copy of the current entity.
		///</summary>
		public virtual News DeepCopy()
		{
			return EntityHelper.Clone<News>(this as News);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as NewsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new NewsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as NewsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(NewsColumn column)
		{
			switch(column)
			{
					case NewsColumn.NewsId:
					return entityData.NewsId != _originalData.NewsId;
					case NewsColumn.SiteId:
					return entityData.SiteId != _originalData.SiteId;
					case NewsColumn.NewsCategoryId:
					return entityData.NewsCategoryId != _originalData.NewsCategoryId;
					case NewsColumn.Subject:
					return entityData.Subject != _originalData.Subject;
					case NewsColumn.Content:
					return entityData.Content != _originalData.Content;
					case NewsColumn.PostDate:
					return entityData.PostDate != _originalData.PostDate;
					case NewsColumn.Valid:
					return entityData.Valid != _originalData.Valid;
					case NewsColumn.Sequence:
					return entityData.Sequence != _originalData.Sequence;
					case NewsColumn.LastModified:
					return entityData.LastModified != _originalData.LastModified;
					case NewsColumn.LastModifiedBy:
					return entityData.LastModifiedBy != _originalData.LastModifiedBy;
					case NewsColumn.SearchField:
					return entityData.SearchField != _originalData.SearchField;
					case NewsColumn.Tags:
					return entityData.Tags != _originalData.Tags;
					case NewsColumn.MetaTitle:
					return entityData.MetaTitle != _originalData.MetaTitle;
					case NewsColumn.MetaKeywords:
					return entityData.MetaKeywords != _originalData.MetaKeywords;
					case NewsColumn.MetaDescription:
					return entityData.MetaDescription != _originalData.MetaDescription;
					case NewsColumn.PageFriendlyName:
					return entityData.PageFriendlyName != _originalData.PageFriendlyName;
					case NewsColumn.NewsIndustryId:
					return entityData.NewsIndustryId != _originalData.NewsIndustryId;
					case NewsColumn.NewsTypeIds:
					return entityData.NewsTypeIds != _originalData.NewsTypeIds;
					case NewsColumn.CustomXml:
					return entityData.CustomXml != _originalData.CustomXml;
					case NewsColumn.ImageUrl:
					return entityData.ImageUrl != _originalData.ImageUrl;
					case NewsColumn.Author:
					return entityData.Author != _originalData.Author;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< NewsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.NewsId != _originalData.NewsId;
			result = result || entityData.SiteId != _originalData.SiteId;
			result = result || entityData.NewsCategoryId != _originalData.NewsCategoryId;
			result = result || entityData.Subject != _originalData.Subject;
			result = result || entityData.Content != _originalData.Content;
			result = result || entityData.PostDate != _originalData.PostDate;
			result = result || entityData.Valid != _originalData.Valid;
			result = result || entityData.Sequence != _originalData.Sequence;
			result = result || entityData.LastModified != _originalData.LastModified;
			result = result || entityData.LastModifiedBy != _originalData.LastModifiedBy;
			result = result || entityData.SearchField != _originalData.SearchField;
			result = result || entityData.Tags != _originalData.Tags;
			result = result || entityData.MetaTitle != _originalData.MetaTitle;
			result = result || entityData.MetaKeywords != _originalData.MetaKeywords;
			result = result || entityData.MetaDescription != _originalData.MetaDescription;
			result = result || entityData.PageFriendlyName != _originalData.PageFriendlyName;
			result = result || entityData.NewsIndustryId != _originalData.NewsIndustryId;
			result = result || entityData.NewsTypeIds != _originalData.NewsTypeIds;
			result = result || entityData.CustomXml != _originalData.CustomXml;
			result = result || entityData.ImageUrl != _originalData.ImageUrl;
			result = result || entityData.Author != _originalData.Author;
			return result;
		}	
		
		///<summary>
		///  Returns a News Entity with the original data.
		///</summary>
		public News GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateNews(
				_originalData.SiteId,
				_originalData.NewsCategoryId,
				_originalData.Subject,
				_originalData.Content,
				_originalData.PostDate,
				_originalData.Valid,
				_originalData.Sequence,
				_originalData.LastModified,
				_originalData.LastModifiedBy,
				_originalData.SearchField,
				_originalData.Tags,
				_originalData.MetaTitle,
				_originalData.MetaKeywords,
				_originalData.MetaDescription,
				_originalData.PageFriendlyName,
				_originalData.NewsIndustryId,
				_originalData.NewsTypeIds,
				_originalData.CustomXml,
				_originalData.ImageUrl,
				_originalData.Author
				);
				
			return (News)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="NewsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is NewsBase)
				return ValueEquals(this, (NewsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="NewsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.NewsId.GetHashCode() ^ 
					this.SiteId.GetHashCode() ^ 
					this.NewsCategoryId.GetHashCode() ^ 
					this.Subject.GetHashCode() ^ 
					((this.Content == null) ? string.Empty : this.Content.ToString()).GetHashCode() ^ 
					this.PostDate.GetHashCode() ^ 
					((this.Valid == null) ? string.Empty : this.Valid.ToString()).GetHashCode() ^ 
					((this.Sequence == null) ? string.Empty : this.Sequence.ToString()).GetHashCode() ^ 
					((this.LastModified == null) ? string.Empty : this.LastModified.ToString()).GetHashCode() ^ 
					this.LastModifiedBy.GetHashCode() ^ 
					((this.SearchField == null) ? string.Empty : this.SearchField.ToString()).GetHashCode() ^ 
					((this.Tags == null) ? string.Empty : this.Tags.ToString()).GetHashCode() ^ 
					((this.MetaTitle == null) ? string.Empty : this.MetaTitle.ToString()).GetHashCode() ^ 
					((this.MetaKeywords == null) ? string.Empty : this.MetaKeywords.ToString()).GetHashCode() ^ 
					((this.MetaDescription == null) ? string.Empty : this.MetaDescription.ToString()).GetHashCode() ^ 
					this.PageFriendlyName.GetHashCode() ^ 
					((this.NewsIndustryId == null) ? string.Empty : this.NewsIndustryId.ToString()).GetHashCode() ^ 
					((this.NewsTypeIds == null) ? string.Empty : this.NewsTypeIds.ToString()).GetHashCode() ^ 
					((this.CustomXml == null) ? string.Empty : this.CustomXml.ToString()).GetHashCode() ^ 
					((this.ImageUrl == null) ? string.Empty : this.ImageUrl.ToString()).GetHashCode() ^ 
					((this.Author == null) ? string.Empty : this.Author.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="NewsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(NewsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="NewsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="NewsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="NewsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(NewsBase Object1, NewsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.NewsId != Object2.NewsId)
				equal = false;
			if (Object1.SiteId != Object2.SiteId)
				equal = false;
			if (Object1.NewsCategoryId != Object2.NewsCategoryId)
				equal = false;
			if (Object1.Subject != Object2.Subject)
				equal = false;
			if ( Object1.Content != null && Object2.Content != null )
			{
				if (Object1.Content != Object2.Content)
					equal = false;
			}
			else if (Object1.Content == null ^ Object2.Content == null )
			{
				equal = false;
			}
			if (Object1.PostDate != Object2.PostDate)
				equal = false;
			if ( Object1.Valid != null && Object2.Valid != null )
			{
				if (Object1.Valid != Object2.Valid)
					equal = false;
			}
			else if (Object1.Valid == null ^ Object2.Valid == null )
			{
				equal = false;
			}
			if ( Object1.Sequence != null && Object2.Sequence != null )
			{
				if (Object1.Sequence != Object2.Sequence)
					equal = false;
			}
			else if (Object1.Sequence == null ^ Object2.Sequence == null )
			{
				equal = false;
			}
			if ( Object1.LastModified != null && Object2.LastModified != null )
			{
				if (Object1.LastModified != Object2.LastModified)
					equal = false;
			}
			else if (Object1.LastModified == null ^ Object2.LastModified == null )
			{
				equal = false;
			}
			if (Object1.LastModifiedBy != Object2.LastModifiedBy)
				equal = false;
			if ( Object1.SearchField != null && Object2.SearchField != null )
			{
				if (Object1.SearchField != Object2.SearchField)
					equal = false;
			}
			else if (Object1.SearchField == null ^ Object2.SearchField == null )
			{
				equal = false;
			}
			if ( Object1.Tags != null && Object2.Tags != null )
			{
				if (Object1.Tags != Object2.Tags)
					equal = false;
			}
			else if (Object1.Tags == null ^ Object2.Tags == null )
			{
				equal = false;
			}
			if ( Object1.MetaTitle != null && Object2.MetaTitle != null )
			{
				if (Object1.MetaTitle != Object2.MetaTitle)
					equal = false;
			}
			else if (Object1.MetaTitle == null ^ Object2.MetaTitle == null )
			{
				equal = false;
			}
			if ( Object1.MetaKeywords != null && Object2.MetaKeywords != null )
			{
				if (Object1.MetaKeywords != Object2.MetaKeywords)
					equal = false;
			}
			else if (Object1.MetaKeywords == null ^ Object2.MetaKeywords == null )
			{
				equal = false;
			}
			if ( Object1.MetaDescription != null && Object2.MetaDescription != null )
			{
				if (Object1.MetaDescription != Object2.MetaDescription)
					equal = false;
			}
			else if (Object1.MetaDescription == null ^ Object2.MetaDescription == null )
			{
				equal = false;
			}
			if (Object1.PageFriendlyName != Object2.PageFriendlyName)
				equal = false;
			if ( Object1.NewsIndustryId != null && Object2.NewsIndustryId != null )
			{
				if (Object1.NewsIndustryId != Object2.NewsIndustryId)
					equal = false;
			}
			else if (Object1.NewsIndustryId == null ^ Object2.NewsIndustryId == null )
			{
				equal = false;
			}
			if ( Object1.NewsTypeIds != null && Object2.NewsTypeIds != null )
			{
				if (Object1.NewsTypeIds != Object2.NewsTypeIds)
					equal = false;
			}
			else if (Object1.NewsTypeIds == null ^ Object2.NewsTypeIds == null )
			{
				equal = false;
			}
			if ( Object1.CustomXml != null && Object2.CustomXml != null )
			{
				if (Object1.CustomXml != Object2.CustomXml)
					equal = false;
			}
			else if (Object1.CustomXml == null ^ Object2.CustomXml == null )
			{
				equal = false;
			}
			if ( Object1.ImageUrl != null && Object2.ImageUrl != null )
			{
				if (Object1.ImageUrl != Object2.ImageUrl)
					equal = false;
			}
			else if (Object1.ImageUrl == null ^ Object2.ImageUrl == null )
			{
				equal = false;
			}
			if ( Object1.Author != null && Object2.Author != null )
			{
				if (Object1.Author != Object2.Author)
					equal = false;
			}
			else if (Object1.Author == null ^ Object2.Author == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((NewsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static NewsComparer GetComparer()
        {
            return new NewsComparer();
        }
        */

        // Comparer delegates back to News
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(News rhs, NewsColumn which)
        {
            switch (which)
            {
            	
            	
            	case NewsColumn.NewsId:
            		return this.NewsId.CompareTo(rhs.NewsId);
            		
            		                 
            	
            	
            	case NewsColumn.SiteId:
            		return this.SiteId.CompareTo(rhs.SiteId);
            		
            		                 
            	
            	
            	case NewsColumn.NewsCategoryId:
            		return this.NewsCategoryId.CompareTo(rhs.NewsCategoryId);
            		
            		                 
            	
            	
            	case NewsColumn.Subject:
            		return this.Subject.CompareTo(rhs.Subject);
            		
            		                 
            	
            	
            	case NewsColumn.Content:
            		return this.Content.CompareTo(rhs.Content);
            		
            		                 
            	
            	
            	case NewsColumn.PostDate:
            		return this.PostDate.CompareTo(rhs.PostDate);
            		
            		                 
            	
            	
            	case NewsColumn.Valid:
            		return this.Valid.Value.CompareTo(rhs.Valid.Value);
            		
            		                 
            	
            	
            	case NewsColumn.Sequence:
            		return this.Sequence.Value.CompareTo(rhs.Sequence.Value);
            		
            		                 
            	
            	
            	case NewsColumn.LastModified:
            		return this.LastModified.Value.CompareTo(rhs.LastModified.Value);
            		
            		                 
            	
            	
            	case NewsColumn.LastModifiedBy:
            		return this.LastModifiedBy.CompareTo(rhs.LastModifiedBy);
            		
            		                 
            	
            	
            	case NewsColumn.SearchField:
            		return this.SearchField.CompareTo(rhs.SearchField);
            		
            		                 
            	
            	
            	case NewsColumn.Tags:
            		return this.Tags.CompareTo(rhs.Tags);
            		
            		                 
            	
            	
            	case NewsColumn.MetaTitle:
            		return this.MetaTitle.CompareTo(rhs.MetaTitle);
            		
            		                 
            	
            	
            	case NewsColumn.MetaKeywords:
            		return this.MetaKeywords.CompareTo(rhs.MetaKeywords);
            		
            		                 
            	
            	
            	case NewsColumn.MetaDescription:
            		return this.MetaDescription.CompareTo(rhs.MetaDescription);
            		
            		                 
            	
            	
            	case NewsColumn.PageFriendlyName:
            		return this.PageFriendlyName.CompareTo(rhs.PageFriendlyName);
            		
            		                 
            	
            	
            	case NewsColumn.NewsIndustryId:
            		return this.NewsIndustryId.Value.CompareTo(rhs.NewsIndustryId.Value);
            		
            		                 
            	
            	
            	case NewsColumn.NewsTypeIds:
            		return this.NewsTypeIds.CompareTo(rhs.NewsTypeIds);
            		
            		                 
            	
            	
            	case NewsColumn.CustomXml:
            		return this.CustomXml.CompareTo(rhs.CustomXml);
            		
            		                 
            	
            	
            	case NewsColumn.ImageUrl:
            		return this.ImageUrl.CompareTo(rhs.ImageUrl);
            		
            		                 
            	
            	
            	case NewsColumn.Author:
            		return this.Author.CompareTo(rhs.Author);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<NewsKey> Members
		
		// member variable for the EntityId property
		private NewsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual NewsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new NewsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("News")
					.Append("|").Append( this.NewsId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{22}{21}- NewsId: {0}{21}- SiteId: {1}{21}- NewsCategoryId: {2}{21}- Subject: {3}{21}- Content: {4}{21}- PostDate: {5}{21}- Valid: {6}{21}- Sequence: {7}{21}- LastModified: {8}{21}- LastModifiedBy: {9}{21}- SearchField: {10}{21}- Tags: {11}{21}- MetaTitle: {12}{21}- MetaKeywords: {13}{21}- MetaDescription: {14}{21}- PageFriendlyName: {15}{21}- NewsIndustryId: {16}{21}- NewsTypeIds: {17}{21}- CustomXml: {18}{21}- ImageUrl: {19}{21}- Author: {20}{21}{23}", 
				this.NewsId,
				this.SiteId,
				this.NewsCategoryId,
				this.Subject,
				(this.Content == null) ? string.Empty : this.Content.ToString(),
				this.PostDate,
				(this.Valid == null) ? string.Empty : this.Valid.ToString(),
				(this.Sequence == null) ? string.Empty : this.Sequence.ToString(),
				(this.LastModified == null) ? string.Empty : this.LastModified.ToString(),
				this.LastModifiedBy,
				(this.SearchField == null) ? string.Empty : this.SearchField.ToString(),
				(this.Tags == null) ? string.Empty : this.Tags.ToString(),
				(this.MetaTitle == null) ? string.Empty : this.MetaTitle.ToString(),
				(this.MetaKeywords == null) ? string.Empty : this.MetaKeywords.ToString(),
				(this.MetaDescription == null) ? string.Empty : this.MetaDescription.ToString(),
				this.PageFriendlyName,
				(this.NewsIndustryId == null) ? string.Empty : this.NewsIndustryId.ToString(),
				(this.NewsTypeIds == null) ? string.Empty : this.NewsTypeIds.ToString(),
				(this.CustomXml == null) ? string.Empty : this.CustomXml.ToString(),
				(this.ImageUrl == null) ? string.Empty : this.ImageUrl.ToString(),
				(this.Author == null) ? string.Empty : this.Author.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'News' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class NewsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// NewsID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "News"</remarks>
		public System.Int32 NewsId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SiteID : 
		/// </summary>
		public System.Int32		  SiteId = (int)0;
		
		/// <summary>
		/// NewsCategoryID : 
		/// </summary>
		public System.Int32		  NewsCategoryId = (int)0;
		
		/// <summary>
		/// Subject : 
		/// </summary>
		public System.String		  Subject = string.Empty;
		
		/// <summary>
		/// Content : 
		/// </summary>
		public System.String		  Content = null;
		
		/// <summary>
		/// PostDate : 
		/// </summary>
		public System.DateTime		  PostDate = DateTime.MinValue;
		
		/// <summary>
		/// Valid : 
		/// </summary>
		public System.Boolean?		  Valid = null;
		
		/// <summary>
		/// Sequence : 
		/// </summary>
		public System.Int32?		  Sequence = null;
		
		/// <summary>
		/// LastModified : 
		/// </summary>
		public System.DateTime?		  LastModified = null;
		
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		public System.Int32		  LastModifiedBy = (int)0;
		
		/// <summary>
		/// SearchField : 
		/// </summary>
		public System.String		  SearchField = null;
		
		/// <summary>
		/// Tags : 
		/// </summary>
		public System.String		  Tags = null;
		
		/// <summary>
		/// MetaTitle : 
		/// </summary>
		public System.String		  MetaTitle = null;
		
		/// <summary>
		/// MetaKeywords : 
		/// </summary>
		public System.String		  MetaKeywords = null;
		
		/// <summary>
		/// MetaDescription : 
		/// </summary>
		public System.String		  MetaDescription = null;
		
		/// <summary>
		/// PageFriendlyName : 
		/// </summary>
		public System.String		  PageFriendlyName = string.Empty;
		
		/// <summary>
		/// NewsIndustryID : 
		/// </summary>
		public System.Int32?		  NewsIndustryId = null;
		
		/// <summary>
		/// NewsTypeIDs : 
		/// </summary>
		public System.String		  NewsTypeIds = null;
		
		/// <summary>
		/// CustomXML : 
		/// </summary>
		public System.String		  CustomXml = null;
		
		/// <summary>
		/// ImageURL : 
		/// </summary>
		public System.String		  ImageUrl = null;
		
		/// <summary>
		/// Author : 
		/// </summary>
		public System.String		  Author = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdminUsers _lastModifiedBySource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return this._lastModifiedBySource; }
            set { this._lastModifiedBySource = value; }
      	}
		private NewsCategories _newsCategoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="NewsCategories"/>.
		/// </summary>
		/// <value>The source NewsCategories for NewsCategoryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual NewsCategories NewsCategoryIdSource
      	{
            get { return this._newsCategoryIdSource; }
            set { this._newsCategoryIdSource = value; }
      	}
		private Sites _siteIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Sites SiteIdSource
      	{
            get { return this._siteIdSource; }
            set { this._siteIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			NewsEntityData _tmp = new NewsEntityData();
						
			_tmp.NewsId = this.NewsId;
			
			_tmp.SiteId = this.SiteId;
			_tmp.NewsCategoryId = this.NewsCategoryId;
			_tmp.Subject = this.Subject;
			_tmp.Content = this.Content;
			_tmp.PostDate = this.PostDate;
			_tmp.Valid = this.Valid;
			_tmp.Sequence = this.Sequence;
			_tmp.LastModified = this.LastModified;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.SearchField = this.SearchField;
			_tmp.Tags = this.Tags;
			_tmp.MetaTitle = this.MetaTitle;
			_tmp.MetaKeywords = this.MetaKeywords;
			_tmp.MetaDescription = this.MetaDescription;
			_tmp.PageFriendlyName = this.PageFriendlyName;
			_tmp.NewsIndustryId = this.NewsIndustryId;
			_tmp.NewsTypeIds = this.NewsTypeIds;
			_tmp.CustomXml = this.CustomXml;
			_tmp.ImageUrl = this.ImageUrl;
			_tmp.Author = this.Author;
			
			#region Source Parent Composite Entities
			if (this.LastModifiedBySource != null)
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource) as AdminUsers;
			if (this.NewsCategoryIdSource != null)
				_tmp.NewsCategoryIdSource = MakeCopyOf(this.NewsCategoryIdSource) as NewsCategories;
			if (this.SiteIdSource != null)
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource) as Sites;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			NewsEntityData _tmp = new NewsEntityData();
						
			_tmp.NewsId = this.NewsId;
			
			_tmp.SiteId = this.SiteId;
			_tmp.NewsCategoryId = this.NewsCategoryId;
			_tmp.Subject = this.Subject;
			_tmp.Content = this.Content;
			_tmp.PostDate = this.PostDate;
			_tmp.Valid = this.Valid;
			_tmp.Sequence = this.Sequence;
			_tmp.LastModified = this.LastModified;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.SearchField = this.SearchField;
			_tmp.Tags = this.Tags;
			_tmp.MetaTitle = this.MetaTitle;
			_tmp.MetaKeywords = this.MetaKeywords;
			_tmp.MetaDescription = this.MetaDescription;
			_tmp.PageFriendlyName = this.PageFriendlyName;
			_tmp.NewsIndustryId = this.NewsIndustryId;
			_tmp.NewsTypeIds = this.NewsTypeIds;
			_tmp.CustomXml = this.CustomXml;
			_tmp.ImageUrl = this.ImageUrl;
			_tmp.Author = this.Author;
			
			#region Source Parent Composite Entities
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				_tmp.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			if (this.NewsCategoryIdSource != null && existingCopies.Contains(this.NewsCategoryIdSource))
				_tmp.NewsCategoryIdSource = existingCopies[this.NewsCategoryIdSource] as NewsCategories;
			else
				_tmp.NewsCategoryIdSource = MakeCopyOf(this.NewsCategoryIdSource, existingCopies) as NewsCategories;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				_tmp.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="NewsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(NewsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="NewsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(NewsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="NewsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(NewsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				NewsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new NewsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="NewsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(NewsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				NewsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new NewsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region NewsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="News"/> object.
	/// </remarks>
	public class NewsEventArgs : System.EventArgs
	{
		private NewsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the NewsEventArgs class.
		///</summary>
		public NewsEventArgs(NewsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the NewsEventArgs class.
		///</summary>
		public NewsEventArgs(NewsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The NewsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="NewsColumn" />
		public NewsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all News related events.
	///</summary>
	public delegate void NewsEventHandler(object sender, NewsEventArgs e);
	
	#region NewsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class NewsComparer : System.Collections.Generic.IComparer<News>
	{
		NewsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:NewsComparer"/> class.
        /// </summary>
		public NewsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:NewsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public NewsComparer(NewsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="News"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="News"/> to compare.</param>
        /// <param name="b">The second <c>News</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(News a, News b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(News entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(News a, News b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public NewsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region NewsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="News"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class NewsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the NewsKey class.
		/// </summary>
		public NewsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the NewsKey class.
		/// </summary>
		public NewsKey(NewsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.NewsId = entity.NewsId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the NewsKey class.
		/// </summary>
		public NewsKey(System.Int32 _newsId)
		{
			#region Init Properties

			this.NewsId = _newsId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private NewsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public NewsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the NewsId property
		private System.Int32 _newsId;
		
		/// <summary>
		/// Gets or sets the NewsId property.
		/// </summary>
		public System.Int32 NewsId
		{
			get { return _newsId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.NewsId = value;
				
				_newsId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				NewsId = ( values["NewsId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["NewsId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("NewsId", NewsId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("NewsId: {0}{1}",
								NewsId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region NewsColumn Enum
	
	/// <summary>
	/// Enumerate the News columns.
	/// </summary>
	[Serializable]
	public enum NewsColumn : int
	{
		/// <summary>
		/// NewsId : 
		/// </summary>
		[EnumTextValue("NewsID")]
		[ColumnEnum("NewsID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		NewsId = 1,
		/// <summary>
		/// SiteId : 
		/// </summary>
		[EnumTextValue("SiteID")]
		[ColumnEnum("SiteID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteId = 2,
		/// <summary>
		/// NewsCategoryId : 
		/// </summary>
		[EnumTextValue("NewsCategoryID")]
		[ColumnEnum("NewsCategoryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		NewsCategoryId = 3,
		/// <summary>
		/// Subject : 
		/// </summary>
		[EnumTextValue("Subject")]
		[ColumnEnum("Subject", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		Subject = 4,
		/// <summary>
		/// Content : 
		/// </summary>
		[EnumTextValue("Content")]
		[ColumnEnum("Content", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Content = 5,
		/// <summary>
		/// PostDate : 
		/// </summary>
		[EnumTextValue("PostDate")]
		[ColumnEnum("PostDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		PostDate = 6,
		/// <summary>
		/// Valid : 
		/// </summary>
		[EnumTextValue("Valid")]
		[ColumnEnum("Valid", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Valid = 7,
		/// <summary>
		/// Sequence : 
		/// </summary>
		[EnumTextValue("Sequence")]
		[ColumnEnum("Sequence", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Sequence = 8,
		/// <summary>
		/// LastModified : 
		/// </summary>
		[EnumTextValue("LastModified")]
		[ColumnEnum("LastModified", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModified = 9,
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		[EnumTextValue("LastModifiedBy")]
		[ColumnEnum("LastModifiedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LastModifiedBy = 10,
		/// <summary>
		/// SearchField : 
		/// </summary>
		[EnumTextValue("SearchField")]
		[ColumnEnum("SearchField", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SearchField = 11,
		/// <summary>
		/// Tags : 
		/// </summary>
		[EnumTextValue("Tags")]
		[ColumnEnum("Tags", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Tags = 12,
		/// <summary>
		/// MetaTitle : 
		/// </summary>
		[EnumTextValue("MetaTitle")]
		[ColumnEnum("MetaTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		MetaTitle = 13,
		/// <summary>
		/// MetaKeywords : 
		/// </summary>
		[EnumTextValue("MetaKeywords")]
		[ColumnEnum("MetaKeywords", typeof(System.String), System.Data.DbType.String, false, false, true, 510)]
		MetaKeywords = 14,
		/// <summary>
		/// MetaDescription : 
		/// </summary>
		[EnumTextValue("MetaDescription")]
		[ColumnEnum("MetaDescription", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		MetaDescription = 15,
		/// <summary>
		/// PageFriendlyName : 
		/// </summary>
		[EnumTextValue("PageFriendlyName")]
		[ColumnEnum("PageFriendlyName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		PageFriendlyName = 16,
		/// <summary>
		/// NewsIndustryId : 
		/// </summary>
		[EnumTextValue("NewsIndustryID")]
		[ColumnEnum("NewsIndustryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		NewsIndustryId = 17,
		/// <summary>
		/// NewsTypeIds : 
		/// </summary>
		[EnumTextValue("NewsTypeIDs")]
		[ColumnEnum("NewsTypeIDs", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		NewsTypeIds = 18,
		/// <summary>
		/// CustomXml : 
		/// </summary>
		[EnumTextValue("CustomXML")]
		[ColumnEnum("CustomXML", typeof(System.String), System.Data.DbType.String, false, false, true)]
		CustomXml = 19,
		/// <summary>
		/// ImageUrl : 
		/// </summary>
		[EnumTextValue("ImageURL")]
		[ColumnEnum("ImageURL", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ImageUrl = 20,
		/// <summary>
		/// Author : 
		/// </summary>
		[EnumTextValue("Author")]
		[ColumnEnum("Author", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Author = 21
	}//End enum

	#endregion NewsColumn Enum

} // end namespace


/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ScreeningQuestions.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'ScreeningQuestions' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ScreeningQuestionsBase : EntityBase, IScreeningQuestions, IEntityId<ScreeningQuestionsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ScreeningQuestionsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ScreeningQuestionsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ScreeningQuestionsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ScreeningQuestions> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScreeningQuestionsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScreeningQuestionsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ScreeningQuestionsBase"/> instance.
		///</summary>
		public ScreeningQuestionsBase()
		{
			this.entityData = new ScreeningQuestionsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ScreeningQuestionsBase"/> instance.
		///</summary>
		///<param name="_screeningQuestionIndex"></param>
		///<param name="_questionTitle"></param>
		///<param name="_questionType"></param>
		///<param name="_mandatory"></param>
		///<param name="_languageId"></param>
		///<param name="_knockoutValue"></param>
		///<param name="_options"></param>
		///<param name="_visible"></param>
		///<param name="_lastModified"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_lastModifiedByAdvertiserUserId"></param>
		public ScreeningQuestionsBase(System.Int32 _screeningQuestionIndex, System.String _questionTitle, 
			System.Int32 _questionType, System.Boolean _mandatory, System.Int32 _languageId, 
			System.String _knockoutValue, System.String _options, System.Boolean _visible, 
			System.DateTime? _lastModified, System.Int32? _lastModifiedBy, System.Int32? _lastModifiedByAdvertiserUserId)
		{
			this.entityData = new ScreeningQuestionsEntityData();
			this.backupData = null;

			this.ScreeningQuestionIndex = _screeningQuestionIndex;
			this.QuestionTitle = _questionTitle;
			this.QuestionType = _questionType;
			this.Mandatory = _mandatory;
			this.LanguageId = _languageId;
			this.KnockoutValue = _knockoutValue;
			this.Options = _options;
			this.Visible = _visible;
			this.LastModified = _lastModified;
			this.LastModifiedBy = _lastModifiedBy;
			this.LastModifiedByAdvertiserUserId = _lastModifiedByAdvertiserUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ScreeningQuestions"/> instance.
		///</summary>
		///<param name="_screeningQuestionIndex"></param>
		///<param name="_questionTitle"></param>
		///<param name="_questionType"></param>
		///<param name="_mandatory"></param>
		///<param name="_languageId"></param>
		///<param name="_knockoutValue"></param>
		///<param name="_options"></param>
		///<param name="_visible"></param>
		///<param name="_lastModified"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_lastModifiedByAdvertiserUserId"></param>
		public static ScreeningQuestions CreateScreeningQuestions(System.Int32 _screeningQuestionIndex, System.String _questionTitle, 
			System.Int32 _questionType, System.Boolean _mandatory, System.Int32 _languageId, 
			System.String _knockoutValue, System.String _options, System.Boolean _visible, 
			System.DateTime? _lastModified, System.Int32? _lastModifiedBy, System.Int32? _lastModifiedByAdvertiserUserId)
		{
			ScreeningQuestions newScreeningQuestions = new ScreeningQuestions();
			newScreeningQuestions.ScreeningQuestionIndex = _screeningQuestionIndex;
			newScreeningQuestions.QuestionTitle = _questionTitle;
			newScreeningQuestions.QuestionType = _questionType;
			newScreeningQuestions.Mandatory = _mandatory;
			newScreeningQuestions.LanguageId = _languageId;
			newScreeningQuestions.KnockoutValue = _knockoutValue;
			newScreeningQuestions.Options = _options;
			newScreeningQuestions.Visible = _visible;
			newScreeningQuestions.LastModified = _lastModified;
			newScreeningQuestions.LastModifiedBy = _lastModifiedBy;
			newScreeningQuestions.LastModifiedByAdvertiserUserId = _lastModifiedByAdvertiserUserId;
			return newScreeningQuestions;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ScreeningQuestionId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 ScreeningQuestionId
		{
			get
			{
				return this.entityData.ScreeningQuestionId; 
			}
			
			set
			{
				if (this.entityData.ScreeningQuestionId == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsColumn.ScreeningQuestionId, this.entityData.ScreeningQuestionId);
				this.entityData.ScreeningQuestionId = value;
				this.EntityId.ScreeningQuestionId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsColumn.ScreeningQuestionId, this.entityData.ScreeningQuestionId);
				OnPropertyChanged("ScreeningQuestionId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScreeningQuestionIndex property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ScreeningQuestionIndex
		{
			get
			{
				return this.entityData.ScreeningQuestionIndex; 
			}
			
			set
			{
				if (this.entityData.ScreeningQuestionIndex == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsColumn.ScreeningQuestionIndex, this.entityData.ScreeningQuestionIndex);
				this.entityData.ScreeningQuestionIndex = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsColumn.ScreeningQuestionIndex, this.entityData.ScreeningQuestionIndex);
				OnPropertyChanged("ScreeningQuestionIndex");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QuestionTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 512)]
		public virtual System.String QuestionTitle
		{
			get
			{
				return this.entityData.QuestionTitle; 
			}
			
			set
			{
				if (this.entityData.QuestionTitle == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsColumn.QuestionTitle, this.entityData.QuestionTitle);
				this.entityData.QuestionTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsColumn.QuestionTitle, this.entityData.QuestionTitle);
				OnPropertyChanged("QuestionTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QuestionType property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 QuestionType
		{
			get
			{
				return this.entityData.QuestionType; 
			}
			
			set
			{
				if (this.entityData.QuestionType == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsColumn.QuestionType, this.entityData.QuestionType);
				this.entityData.QuestionType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsColumn.QuestionType, this.entityData.QuestionType);
				OnPropertyChanged("QuestionType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Mandatory property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Mandatory
		{
			get
			{
				return this.entityData.Mandatory; 
			}
			
			set
			{
				if (this.entityData.Mandatory == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsColumn.Mandatory, this.entityData.Mandatory);
				this.entityData.Mandatory = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsColumn.Mandatory, this.entityData.Mandatory);
				OnPropertyChanged("Mandatory");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LanguageId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LanguageId
		{
			get
			{
				return this.entityData.LanguageId; 
			}
			
			set
			{
				if (this.entityData.LanguageId == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsColumn.LanguageId, this.entityData.LanguageId);
				this.entityData.LanguageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsColumn.LanguageId, this.entityData.LanguageId);
				OnPropertyChanged("LanguageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the KnockoutValue property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 512)]
		public virtual System.String KnockoutValue
		{
			get
			{
				return this.entityData.KnockoutValue; 
			}
			
			set
			{
				if (this.entityData.KnockoutValue == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsColumn.KnockoutValue, this.entityData.KnockoutValue);
				this.entityData.KnockoutValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsColumn.KnockoutValue, this.entityData.KnockoutValue);
				OnPropertyChanged("KnockoutValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Options property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String Options
		{
			get
			{
				return this.entityData.Options; 
			}
			
			set
			{
				if (this.entityData.Options == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsColumn.Options, this.entityData.Options);
				this.entityData.Options = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsColumn.Options, this.entityData.Options);
				OnPropertyChanged("Options");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Visible property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Visible
		{
			get
			{
				return this.entityData.Visible; 
			}
			
			set
			{
				if (this.entityData.Visible == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsColumn.Visible, this.entityData.Visible);
				this.entityData.Visible = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsColumn.Visible, this.entityData.Visible);
				OnPropertyChanged("Visible");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModified property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModifiedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModified
		{
			get
			{
				return this.entityData.LastModified; 
			}
			
			set
			{
				if (this.entityData.LastModified == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsColumn.LastModified, this.entityData.LastModified);
				this.entityData.LastModified = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsColumn.LastModified, this.entityData.LastModified);
				OnPropertyChanged("LastModified");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModifiedByNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModifiedBy
		{
			get
			{
				return this.entityData.LastModifiedBy; 
			}
			
			set
			{
				if (this.entityData.LastModifiedBy == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				this.entityData.LastModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				OnPropertyChanged("LastModifiedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedByAdvertiserUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModifiedByAdvertiserUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModifiedByAdvertiserUserId
		{
			get
			{
				return this.entityData.LastModifiedByAdvertiserUserId; 
			}
			
			set
			{
				if (this.entityData.LastModifiedByAdvertiserUserId == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsColumn.LastModifiedByAdvertiserUserId, this.entityData.LastModifiedByAdvertiserUserId);
				this.entityData.LastModifiedByAdvertiserUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsColumn.LastModifiedByAdvertiserUserId, this.entityData.LastModifiedByAdvertiserUserId);
				OnPropertyChanged("LastModifiedByAdvertiserUserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Languages"/>.
		/// </summary>
		/// <value>The source Languages for LanguageId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Languages LanguageIdSource
      	{
            get { return entityData.LanguageIdSource; }
            set { entityData.LanguageIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return entityData.LastModifiedBySource; }
            set { entityData.LastModifiedBySource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdvertiserUsers"/>.
		/// </summary>
		/// <value>The source AdvertiserUsers for LastModifiedByAdvertiserUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdvertiserUsers LastModifiedByAdvertiserUserIdSource
      	{
            get { return entityData.LastModifiedByAdvertiserUserIdSource; }
            set { entityData.LastModifiedByAdvertiserUserIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of JobApplicationScreeningAnswers objects
		///	which are related to this object through the relation FK__JobApplic__Scree__0E5398AD
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<JobApplicationScreeningAnswers> JobApplicationScreeningAnswersCollection
		{
			get { return entityData.JobApplicationScreeningAnswersCollection; }
			set { entityData.JobApplicationScreeningAnswersCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScreeningQuestionsMappings objects
		///	which are related to this object through the relation FK__Screening__Scree__1500963C
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScreeningQuestionsMappings> ScreeningQuestionsMappingsCollection
		{
			get { return entityData.ScreeningQuestionsMappingsCollection; }
			set { entityData.ScreeningQuestionsMappingsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of JobScreeningQuestions objects
		///	which are related to this object through the relation FK__JobScreen__Scree__098EE390
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<JobScreeningQuestions> JobScreeningQuestionsCollection
		{
			get { return entityData.JobScreeningQuestionsCollection; }
			set { entityData.JobScreeningQuestionsCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("QuestionTitle", "Question Title"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("QuestionTitle", "Question Title", 512));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("KnockoutValue", "Knockout Value", 512));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Options", "Options", 1000));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ScreeningQuestions"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ScreeningQuestionId", "ScreeningQuestionIndex", "QuestionTitle", "QuestionType", "Mandatory", "LanguageId", "KnockoutValue", "Options", "Visible", "LastModified", "LastModifiedBy", "LastModifiedByAdvertiserUserId"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ScreeningQuestionsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ScreeningQuestions) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ScreeningQuestions>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ScreeningQuestions);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ScreeningQuestions Entity 
		///</summary>
		protected virtual ScreeningQuestions Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ScreeningQuestions copy = new ScreeningQuestions();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ScreeningQuestionId = this.ScreeningQuestionId;
				copy.ScreeningQuestionIndex = this.ScreeningQuestionIndex;
				copy.QuestionTitle = this.QuestionTitle;
				copy.QuestionType = this.QuestionType;
				copy.Mandatory = this.Mandatory;
				copy.LanguageId = this.LanguageId;
				copy.KnockoutValue = this.KnockoutValue;
				copy.Options = this.Options;
				copy.Visible = this.Visible;
				copy.LastModified = this.LastModified;
				copy.LastModifiedBy = this.LastModifiedBy;
				copy.LastModifiedByAdvertiserUserId = this.LastModifiedByAdvertiserUserId;
			
			if (this.LanguageIdSource != null && existingCopies.Contains(this.LanguageIdSource))
				copy.LanguageIdSource = existingCopies[this.LanguageIdSource] as Languages;
			else
				copy.LanguageIdSource = MakeCopyOf(this.LanguageIdSource, existingCopies) as Languages;
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				copy.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				copy.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			if (this.LastModifiedByAdvertiserUserIdSource != null && existingCopies.Contains(this.LastModifiedByAdvertiserUserIdSource))
				copy.LastModifiedByAdvertiserUserIdSource = existingCopies[this.LastModifiedByAdvertiserUserIdSource] as AdvertiserUsers;
			else
				copy.LastModifiedByAdvertiserUserIdSource = MakeCopyOf(this.LastModifiedByAdvertiserUserIdSource, existingCopies) as AdvertiserUsers;
		
			//deep copy nested objects
			copy.JobApplicationScreeningAnswersCollection = (TList<JobApplicationScreeningAnswers>) MakeCopyOf(this.JobApplicationScreeningAnswersCollection, existingCopies); 
			copy.ScreeningQuestionsMappingsCollection = (TList<ScreeningQuestionsMappings>) MakeCopyOf(this.ScreeningQuestionsMappingsCollection, existingCopies); 
			copy.JobScreeningQuestionsCollection = (TList<JobScreeningQuestions>) MakeCopyOf(this.JobScreeningQuestionsCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ScreeningQuestions Entity 
		///</summary>
		public virtual ScreeningQuestions Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ScreeningQuestions Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ScreeningQuestions DeepCopy()
		{
			return EntityHelper.Clone<ScreeningQuestions>(this as ScreeningQuestions);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ScreeningQuestionsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ScreeningQuestionsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ScreeningQuestionsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ScreeningQuestionsColumn column)
		{
			switch(column)
			{
					case ScreeningQuestionsColumn.ScreeningQuestionId:
					return entityData.ScreeningQuestionId != _originalData.ScreeningQuestionId;
					case ScreeningQuestionsColumn.ScreeningQuestionIndex:
					return entityData.ScreeningQuestionIndex != _originalData.ScreeningQuestionIndex;
					case ScreeningQuestionsColumn.QuestionTitle:
					return entityData.QuestionTitle != _originalData.QuestionTitle;
					case ScreeningQuestionsColumn.QuestionType:
					return entityData.QuestionType != _originalData.QuestionType;
					case ScreeningQuestionsColumn.Mandatory:
					return entityData.Mandatory != _originalData.Mandatory;
					case ScreeningQuestionsColumn.LanguageId:
					return entityData.LanguageId != _originalData.LanguageId;
					case ScreeningQuestionsColumn.KnockoutValue:
					return entityData.KnockoutValue != _originalData.KnockoutValue;
					case ScreeningQuestionsColumn.Options:
					return entityData.Options != _originalData.Options;
					case ScreeningQuestionsColumn.Visible:
					return entityData.Visible != _originalData.Visible;
					case ScreeningQuestionsColumn.LastModified:
					return entityData.LastModified != _originalData.LastModified;
					case ScreeningQuestionsColumn.LastModifiedBy:
					return entityData.LastModifiedBy != _originalData.LastModifiedBy;
					case ScreeningQuestionsColumn.LastModifiedByAdvertiserUserId:
					return entityData.LastModifiedByAdvertiserUserId != _originalData.LastModifiedByAdvertiserUserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ScreeningQuestionsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ScreeningQuestionId != _originalData.ScreeningQuestionId;
			result = result || entityData.ScreeningQuestionIndex != _originalData.ScreeningQuestionIndex;
			result = result || entityData.QuestionTitle != _originalData.QuestionTitle;
			result = result || entityData.QuestionType != _originalData.QuestionType;
			result = result || entityData.Mandatory != _originalData.Mandatory;
			result = result || entityData.LanguageId != _originalData.LanguageId;
			result = result || entityData.KnockoutValue != _originalData.KnockoutValue;
			result = result || entityData.Options != _originalData.Options;
			result = result || entityData.Visible != _originalData.Visible;
			result = result || entityData.LastModified != _originalData.LastModified;
			result = result || entityData.LastModifiedBy != _originalData.LastModifiedBy;
			result = result || entityData.LastModifiedByAdvertiserUserId != _originalData.LastModifiedByAdvertiserUserId;
			return result;
		}	
		
		///<summary>
		///  Returns a ScreeningQuestions Entity with the original data.
		///</summary>
		public ScreeningQuestions GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateScreeningQuestions(
				_originalData.ScreeningQuestionIndex,
				_originalData.QuestionTitle,
				_originalData.QuestionType,
				_originalData.Mandatory,
				_originalData.LanguageId,
				_originalData.KnockoutValue,
				_originalData.Options,
				_originalData.Visible,
				_originalData.LastModified,
				_originalData.LastModifiedBy,
				_originalData.LastModifiedByAdvertiserUserId
				);
				
			return (ScreeningQuestions)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ScreeningQuestionsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ScreeningQuestionsBase)
				return ValueEquals(this, (ScreeningQuestionsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ScreeningQuestionsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ScreeningQuestionId.GetHashCode() ^ 
					this.ScreeningQuestionIndex.GetHashCode() ^ 
					this.QuestionTitle.GetHashCode() ^ 
					this.QuestionType.GetHashCode() ^ 
					this.Mandatory.GetHashCode() ^ 
					this.LanguageId.GetHashCode() ^ 
					((this.KnockoutValue == null) ? string.Empty : this.KnockoutValue.ToString()).GetHashCode() ^ 
					((this.Options == null) ? string.Empty : this.Options.ToString()).GetHashCode() ^ 
					this.Visible.GetHashCode() ^ 
					((this.LastModified == null) ? string.Empty : this.LastModified.ToString()).GetHashCode() ^ 
					((this.LastModifiedBy == null) ? string.Empty : this.LastModifiedBy.ToString()).GetHashCode() ^ 
					((this.LastModifiedByAdvertiserUserId == null) ? string.Empty : this.LastModifiedByAdvertiserUserId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ScreeningQuestionsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ScreeningQuestionsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ScreeningQuestionsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ScreeningQuestionsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ScreeningQuestionsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ScreeningQuestionsBase Object1, ScreeningQuestionsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ScreeningQuestionId != Object2.ScreeningQuestionId)
				equal = false;
			if (Object1.ScreeningQuestionIndex != Object2.ScreeningQuestionIndex)
				equal = false;
			if (Object1.QuestionTitle != Object2.QuestionTitle)
				equal = false;
			if (Object1.QuestionType != Object2.QuestionType)
				equal = false;
			if (Object1.Mandatory != Object2.Mandatory)
				equal = false;
			if (Object1.LanguageId != Object2.LanguageId)
				equal = false;
			if ( Object1.KnockoutValue != null && Object2.KnockoutValue != null )
			{
				if (Object1.KnockoutValue != Object2.KnockoutValue)
					equal = false;
			}
			else if (Object1.KnockoutValue == null ^ Object2.KnockoutValue == null )
			{
				equal = false;
			}
			if ( Object1.Options != null && Object2.Options != null )
			{
				if (Object1.Options != Object2.Options)
					equal = false;
			}
			else if (Object1.Options == null ^ Object2.Options == null )
			{
				equal = false;
			}
			if (Object1.Visible != Object2.Visible)
				equal = false;
			if ( Object1.LastModified != null && Object2.LastModified != null )
			{
				if (Object1.LastModified != Object2.LastModified)
					equal = false;
			}
			else if (Object1.LastModified == null ^ Object2.LastModified == null )
			{
				equal = false;
			}
			if ( Object1.LastModifiedBy != null && Object2.LastModifiedBy != null )
			{
				if (Object1.LastModifiedBy != Object2.LastModifiedBy)
					equal = false;
			}
			else if (Object1.LastModifiedBy == null ^ Object2.LastModifiedBy == null )
			{
				equal = false;
			}
			if ( Object1.LastModifiedByAdvertiserUserId != null && Object2.LastModifiedByAdvertiserUserId != null )
			{
				if (Object1.LastModifiedByAdvertiserUserId != Object2.LastModifiedByAdvertiserUserId)
					equal = false;
			}
			else if (Object1.LastModifiedByAdvertiserUserId == null ^ Object2.LastModifiedByAdvertiserUserId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ScreeningQuestionsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ScreeningQuestionsComparer GetComparer()
        {
            return new ScreeningQuestionsComparer();
        }
        */

        // Comparer delegates back to ScreeningQuestions
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ScreeningQuestions rhs, ScreeningQuestionsColumn which)
        {
            switch (which)
            {
            	
            	
            	case ScreeningQuestionsColumn.ScreeningQuestionId:
            		return this.ScreeningQuestionId.CompareTo(rhs.ScreeningQuestionId);
            		
            		                 
            	
            	
            	case ScreeningQuestionsColumn.ScreeningQuestionIndex:
            		return this.ScreeningQuestionIndex.CompareTo(rhs.ScreeningQuestionIndex);
            		
            		                 
            	
            	
            	case ScreeningQuestionsColumn.QuestionTitle:
            		return this.QuestionTitle.CompareTo(rhs.QuestionTitle);
            		
            		                 
            	
            	
            	case ScreeningQuestionsColumn.QuestionType:
            		return this.QuestionType.CompareTo(rhs.QuestionType);
            		
            		                 
            	
            	
            	case ScreeningQuestionsColumn.Mandatory:
            		return this.Mandatory.CompareTo(rhs.Mandatory);
            		
            		                 
            	
            	
            	case ScreeningQuestionsColumn.LanguageId:
            		return this.LanguageId.CompareTo(rhs.LanguageId);
            		
            		                 
            	
            	
            	case ScreeningQuestionsColumn.KnockoutValue:
            		return this.KnockoutValue.CompareTo(rhs.KnockoutValue);
            		
            		                 
            	
            	
            	case ScreeningQuestionsColumn.Options:
            		return this.Options.CompareTo(rhs.Options);
            		
            		                 
            	
            	
            	case ScreeningQuestionsColumn.Visible:
            		return this.Visible.CompareTo(rhs.Visible);
            		
            		                 
            	
            	
            	case ScreeningQuestionsColumn.LastModified:
            		return this.LastModified.Value.CompareTo(rhs.LastModified.Value);
            		
            		                 
            	
            	
            	case ScreeningQuestionsColumn.LastModifiedBy:
            		return this.LastModifiedBy.Value.CompareTo(rhs.LastModifiedBy.Value);
            		
            		                 
            	
            	
            	case ScreeningQuestionsColumn.LastModifiedByAdvertiserUserId:
            		return this.LastModifiedByAdvertiserUserId.Value.CompareTo(rhs.LastModifiedByAdvertiserUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ScreeningQuestionsKey> Members
		
		// member variable for the EntityId property
		private ScreeningQuestionsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ScreeningQuestionsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ScreeningQuestionsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ScreeningQuestions")
					.Append("|").Append( this.ScreeningQuestionId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- ScreeningQuestionId: {0}{12}- ScreeningQuestionIndex: {1}{12}- QuestionTitle: {2}{12}- QuestionType: {3}{12}- Mandatory: {4}{12}- LanguageId: {5}{12}- KnockoutValue: {6}{12}- Options: {7}{12}- Visible: {8}{12}- LastModified: {9}{12}- LastModifiedBy: {10}{12}- LastModifiedByAdvertiserUserId: {11}{12}{14}", 
				this.ScreeningQuestionId,
				this.ScreeningQuestionIndex,
				this.QuestionTitle,
				this.QuestionType,
				this.Mandatory,
				this.LanguageId,
				(this.KnockoutValue == null) ? string.Empty : this.KnockoutValue.ToString(),
				(this.Options == null) ? string.Empty : this.Options.ToString(),
				this.Visible,
				(this.LastModified == null) ? string.Empty : this.LastModified.ToString(),
				(this.LastModifiedBy == null) ? string.Empty : this.LastModifiedBy.ToString(),
				(this.LastModifiedByAdvertiserUserId == null) ? string.Empty : this.LastModifiedByAdvertiserUserId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ScreeningQuestions' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ScreeningQuestionsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ScreeningQuestionId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ScreeningQuestions"</remarks>
		public System.Int32 ScreeningQuestionId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ScreeningQuestionIndex : 
		/// </summary>
		public System.Int32		  ScreeningQuestionIndex = (int)0;
		
		/// <summary>
		/// QuestionTitle : 
		/// </summary>
		public System.String		  QuestionTitle = string.Empty;
		
		/// <summary>
		/// QuestionType : 
		/// </summary>
		public System.Int32		  QuestionType = (int)0;
		
		/// <summary>
		/// Mandatory : 
		/// </summary>
		public System.Boolean		  Mandatory = false;
		
		/// <summary>
		/// LanguageId : 
		/// </summary>
		public System.Int32		  LanguageId = (int)0;
		
		/// <summary>
		/// KnockoutValue : 
		/// </summary>
		public System.String		  KnockoutValue = null;
		
		/// <summary>
		/// Options : 
		/// </summary>
		public System.String		  Options = null;
		
		/// <summary>
		/// Visible : 
		/// </summary>
		public System.Boolean		  Visible = false;
		
		/// <summary>
		/// LastModified : 
		/// </summary>
		public System.DateTime?		  LastModified = null;
		
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		public System.Int32?		  LastModifiedBy = null;
		
		/// <summary>
		/// LastModifiedByAdvertiserUserId : 
		/// </summary>
		public System.Int32?		  LastModifiedByAdvertiserUserId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Languages _languageIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Languages"/>.
		/// </summary>
		/// <value>The source Languages for LanguageId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Languages LanguageIdSource
      	{
            get { return this._languageIdSource; }
            set { this._languageIdSource = value; }
      	}
		private AdminUsers _lastModifiedBySource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return this._lastModifiedBySource; }
            set { this._lastModifiedBySource = value; }
      	}
		private AdvertiserUsers _lastModifiedByAdvertiserUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdvertiserUsers"/>.
		/// </summary>
		/// <value>The source AdvertiserUsers for LastModifiedByAdvertiserUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdvertiserUsers LastModifiedByAdvertiserUserIdSource
      	{
            get { return this._lastModifiedByAdvertiserUserIdSource; }
            set { this._lastModifiedByAdvertiserUserIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region JobApplicationScreeningAnswersCollection
		
		private TList<JobApplicationScreeningAnswers> _jobApplicationScreeningAnswersScreeningQuestionId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobApplicationScreeningAnswersScreeningQuestionId
		/// </summary>
		
		public TList<JobApplicationScreeningAnswers> JobApplicationScreeningAnswersCollection
		{
			get
			{
				if (_jobApplicationScreeningAnswersScreeningQuestionId == null)
				{
				_jobApplicationScreeningAnswersScreeningQuestionId = new TList<JobApplicationScreeningAnswers>();
				}
	
				return _jobApplicationScreeningAnswersScreeningQuestionId;
			}
			set { _jobApplicationScreeningAnswersScreeningQuestionId = value; }
		}
		
		#endregion

		#region ScreeningQuestionsMappingsCollection
		
		private TList<ScreeningQuestionsMappings> _screeningQuestionsMappingsScreeningQuestionId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _screeningQuestionsMappingsScreeningQuestionId
		/// </summary>
		
		public TList<ScreeningQuestionsMappings> ScreeningQuestionsMappingsCollection
		{
			get
			{
				if (_screeningQuestionsMappingsScreeningQuestionId == null)
				{
				_screeningQuestionsMappingsScreeningQuestionId = new TList<ScreeningQuestionsMappings>();
				}
	
				return _screeningQuestionsMappingsScreeningQuestionId;
			}
			set { _screeningQuestionsMappingsScreeningQuestionId = value; }
		}
		
		#endregion

		#region JobScreeningQuestionsCollection
		
		private TList<JobScreeningQuestions> _jobScreeningQuestionsScreeningQuestionId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobScreeningQuestionsScreeningQuestionId
		/// </summary>
		
		public TList<JobScreeningQuestions> JobScreeningQuestionsCollection
		{
			get
			{
				if (_jobScreeningQuestionsScreeningQuestionId == null)
				{
				_jobScreeningQuestionsScreeningQuestionId = new TList<JobScreeningQuestions>();
				}
	
				return _jobScreeningQuestionsScreeningQuestionId;
			}
			set { _jobScreeningQuestionsScreeningQuestionId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ScreeningQuestionsEntityData _tmp = new ScreeningQuestionsEntityData();
						
			_tmp.ScreeningQuestionId = this.ScreeningQuestionId;
			
			_tmp.ScreeningQuestionIndex = this.ScreeningQuestionIndex;
			_tmp.QuestionTitle = this.QuestionTitle;
			_tmp.QuestionType = this.QuestionType;
			_tmp.Mandatory = this.Mandatory;
			_tmp.LanguageId = this.LanguageId;
			_tmp.KnockoutValue = this.KnockoutValue;
			_tmp.Options = this.Options;
			_tmp.Visible = this.Visible;
			_tmp.LastModified = this.LastModified;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.LastModifiedByAdvertiserUserId = this.LastModifiedByAdvertiserUserId;
			
			#region Source Parent Composite Entities
			if (this.LanguageIdSource != null)
				_tmp.LanguageIdSource = MakeCopyOf(this.LanguageIdSource) as Languages;
			if (this.LastModifiedBySource != null)
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource) as AdminUsers;
			if (this.LastModifiedByAdvertiserUserIdSource != null)
				_tmp.LastModifiedByAdvertiserUserIdSource = MakeCopyOf(this.LastModifiedByAdvertiserUserIdSource) as AdvertiserUsers;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._jobApplicationScreeningAnswersScreeningQuestionId != null)
				_tmp.JobApplicationScreeningAnswersCollection = (TList<JobApplicationScreeningAnswers>) MakeCopyOf(this.JobApplicationScreeningAnswersCollection); 
			if (this._screeningQuestionsMappingsScreeningQuestionId != null)
				_tmp.ScreeningQuestionsMappingsCollection = (TList<ScreeningQuestionsMappings>) MakeCopyOf(this.ScreeningQuestionsMappingsCollection); 
			if (this._jobScreeningQuestionsScreeningQuestionId != null)
				_tmp.JobScreeningQuestionsCollection = (TList<JobScreeningQuestions>) MakeCopyOf(this.JobScreeningQuestionsCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ScreeningQuestionsEntityData _tmp = new ScreeningQuestionsEntityData();
						
			_tmp.ScreeningQuestionId = this.ScreeningQuestionId;
			
			_tmp.ScreeningQuestionIndex = this.ScreeningQuestionIndex;
			_tmp.QuestionTitle = this.QuestionTitle;
			_tmp.QuestionType = this.QuestionType;
			_tmp.Mandatory = this.Mandatory;
			_tmp.LanguageId = this.LanguageId;
			_tmp.KnockoutValue = this.KnockoutValue;
			_tmp.Options = this.Options;
			_tmp.Visible = this.Visible;
			_tmp.LastModified = this.LastModified;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.LastModifiedByAdvertiserUserId = this.LastModifiedByAdvertiserUserId;
			
			#region Source Parent Composite Entities
			if (this.LanguageIdSource != null && existingCopies.Contains(this.LanguageIdSource))
				_tmp.LanguageIdSource = existingCopies[this.LanguageIdSource] as Languages;
			else
				_tmp.LanguageIdSource = MakeCopyOf(this.LanguageIdSource, existingCopies) as Languages;
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				_tmp.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			if (this.LastModifiedByAdvertiserUserIdSource != null && existingCopies.Contains(this.LastModifiedByAdvertiserUserIdSource))
				_tmp.LastModifiedByAdvertiserUserIdSource = existingCopies[this.LastModifiedByAdvertiserUserIdSource] as AdvertiserUsers;
			else
				_tmp.LastModifiedByAdvertiserUserIdSource = MakeCopyOf(this.LastModifiedByAdvertiserUserIdSource, existingCopies) as AdvertiserUsers;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.JobApplicationScreeningAnswersCollection = (TList<JobApplicationScreeningAnswers>) MakeCopyOf(this.JobApplicationScreeningAnswersCollection, existingCopies); 
			_tmp.ScreeningQuestionsMappingsCollection = (TList<ScreeningQuestionsMappings>) MakeCopyOf(this.ScreeningQuestionsMappingsCollection, existingCopies); 
			_tmp.JobScreeningQuestionsCollection = (TList<JobScreeningQuestions>) MakeCopyOf(this.JobScreeningQuestionsCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScreeningQuestionsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ScreeningQuestionsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScreeningQuestionsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ScreeningQuestionsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScreeningQuestionsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ScreeningQuestionsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ScreeningQuestionsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ScreeningQuestionsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScreeningQuestionsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ScreeningQuestionsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ScreeningQuestionsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ScreeningQuestionsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ScreeningQuestionsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ScreeningQuestions"/> object.
	/// </remarks>
	public class ScreeningQuestionsEventArgs : System.EventArgs
	{
		private ScreeningQuestionsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ScreeningQuestionsEventArgs class.
		///</summary>
		public ScreeningQuestionsEventArgs(ScreeningQuestionsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ScreeningQuestionsEventArgs class.
		///</summary>
		public ScreeningQuestionsEventArgs(ScreeningQuestionsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ScreeningQuestionsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ScreeningQuestionsColumn" />
		public ScreeningQuestionsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ScreeningQuestions related events.
	///</summary>
	public delegate void ScreeningQuestionsEventHandler(object sender, ScreeningQuestionsEventArgs e);
	
	#region ScreeningQuestionsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ScreeningQuestionsComparer : System.Collections.Generic.IComparer<ScreeningQuestions>
	{
		ScreeningQuestionsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ScreeningQuestionsComparer"/> class.
        /// </summary>
		public ScreeningQuestionsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ScreeningQuestionsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ScreeningQuestionsComparer(ScreeningQuestionsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ScreeningQuestions"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ScreeningQuestions"/> to compare.</param>
        /// <param name="b">The second <c>ScreeningQuestions</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ScreeningQuestions a, ScreeningQuestions b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ScreeningQuestions entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ScreeningQuestions a, ScreeningQuestions b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ScreeningQuestionsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ScreeningQuestionsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ScreeningQuestions"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ScreeningQuestionsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ScreeningQuestionsKey class.
		/// </summary>
		public ScreeningQuestionsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ScreeningQuestionsKey class.
		/// </summary>
		public ScreeningQuestionsKey(ScreeningQuestionsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ScreeningQuestionId = entity.ScreeningQuestionId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ScreeningQuestionsKey class.
		/// </summary>
		public ScreeningQuestionsKey(System.Int32 _screeningQuestionId)
		{
			#region Init Properties

			this.ScreeningQuestionId = _screeningQuestionId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ScreeningQuestionsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ScreeningQuestionsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ScreeningQuestionId property
		private System.Int32 _screeningQuestionId;
		
		/// <summary>
		/// Gets or sets the ScreeningQuestionId property.
		/// </summary>
		public System.Int32 ScreeningQuestionId
		{
			get { return _screeningQuestionId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ScreeningQuestionId = value;
				
				_screeningQuestionId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ScreeningQuestionId = ( values["ScreeningQuestionId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ScreeningQuestionId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ScreeningQuestionId", ScreeningQuestionId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ScreeningQuestionId: {0}{1}",
								ScreeningQuestionId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ScreeningQuestionsColumn Enum
	
	/// <summary>
	/// Enumerate the ScreeningQuestions columns.
	/// </summary>
	[Serializable]
	public enum ScreeningQuestionsColumn : int
	{
		/// <summary>
		/// ScreeningQuestionId : 
		/// </summary>
		[EnumTextValue("ScreeningQuestionId")]
		[ColumnEnum("ScreeningQuestionId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ScreeningQuestionId = 1,
		/// <summary>
		/// ScreeningQuestionIndex : 
		/// </summary>
		[EnumTextValue("ScreeningQuestionIndex")]
		[ColumnEnum("ScreeningQuestionIndex", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ScreeningQuestionIndex = 2,
		/// <summary>
		/// QuestionTitle : 
		/// </summary>
		[EnumTextValue("QuestionTitle")]
		[ColumnEnum("QuestionTitle", typeof(System.String), System.Data.DbType.String, false, false, false, 512)]
		QuestionTitle = 3,
		/// <summary>
		/// QuestionType : 
		/// </summary>
		[EnumTextValue("QuestionType")]
		[ColumnEnum("QuestionType", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		QuestionType = 4,
		/// <summary>
		/// Mandatory : 
		/// </summary>
		[EnumTextValue("Mandatory")]
		[ColumnEnum("Mandatory", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Mandatory = 5,
		/// <summary>
		/// LanguageId : 
		/// </summary>
		[EnumTextValue("LanguageId")]
		[ColumnEnum("LanguageId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LanguageId = 6,
		/// <summary>
		/// KnockoutValue : 
		/// </summary>
		[EnumTextValue("KnockoutValue")]
		[ColumnEnum("KnockoutValue", typeof(System.String), System.Data.DbType.String, false, false, true, 512)]
		KnockoutValue = 7,
		/// <summary>
		/// Options : 
		/// </summary>
		[EnumTextValue("Options")]
		[ColumnEnum("Options", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		Options = 8,
		/// <summary>
		/// Visible : 
		/// </summary>
		[EnumTextValue("Visible")]
		[ColumnEnum("Visible", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Visible = 9,
		/// <summary>
		/// LastModified : 
		/// </summary>
		[EnumTextValue("LastModified")]
		[ColumnEnum("LastModified", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModified = 10,
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		[EnumTextValue("LastModifiedBy")]
		[ColumnEnum("LastModifiedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModifiedBy = 11,
		/// <summary>
		/// LastModifiedByAdvertiserUserId : 
		/// </summary>
		[EnumTextValue("LastModifiedByAdvertiserUserId")]
		[ColumnEnum("LastModifiedByAdvertiserUserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModifiedByAdvertiserUserId = 12
	}//End enum

	#endregion ScreeningQuestionsColumn Enum

} // end namespace

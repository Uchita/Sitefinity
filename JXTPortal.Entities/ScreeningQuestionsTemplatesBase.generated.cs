
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ScreeningQuestionsTemplates.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'ScreeningQuestionsTemplates' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ScreeningQuestionsTemplatesBase : EntityBase, IScreeningQuestionsTemplates, IEntityId<ScreeningQuestionsTemplatesKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ScreeningQuestionsTemplatesEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ScreeningQuestionsTemplatesEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ScreeningQuestionsTemplatesEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ScreeningQuestionsTemplates> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScreeningQuestionsTemplatesEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScreeningQuestionsTemplatesEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ScreeningQuestionsTemplatesBase"/> instance.
		///</summary>
		public ScreeningQuestionsTemplatesBase()
		{
			this.entityData = new ScreeningQuestionsTemplatesEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ScreeningQuestionsTemplatesBase"/> instance.
		///</summary>
		///<param name="_templateName"></param>
		///<param name="_siteId"></param>
		///<param name="_visible"></param>
		///<param name="_lastModified"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_createdByAdvertiserId"></param>
		public ScreeningQuestionsTemplatesBase(System.String _templateName, System.Int32 _siteId, 
			System.Boolean _visible, System.DateTime? _lastModified, System.Int32? _lastModifiedBy, 
			System.Int32? _createdByAdvertiserId)
		{
			this.entityData = new ScreeningQuestionsTemplatesEntityData();
			this.backupData = null;

			this.TemplateName = _templateName;
			this.SiteId = _siteId;
			this.Visible = _visible;
			this.LastModified = _lastModified;
			this.LastModifiedBy = _lastModifiedBy;
			this.CreatedByAdvertiserId = _createdByAdvertiserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ScreeningQuestionsTemplates"/> instance.
		///</summary>
		///<param name="_templateName"></param>
		///<param name="_siteId"></param>
		///<param name="_visible"></param>
		///<param name="_lastModified"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_createdByAdvertiserId"></param>
		public static ScreeningQuestionsTemplates CreateScreeningQuestionsTemplates(System.String _templateName, System.Int32 _siteId, 
			System.Boolean _visible, System.DateTime? _lastModified, System.Int32? _lastModifiedBy, 
			System.Int32? _createdByAdvertiserId)
		{
			ScreeningQuestionsTemplates newScreeningQuestionsTemplates = new ScreeningQuestionsTemplates();
			newScreeningQuestionsTemplates.TemplateName = _templateName;
			newScreeningQuestionsTemplates.SiteId = _siteId;
			newScreeningQuestionsTemplates.Visible = _visible;
			newScreeningQuestionsTemplates.LastModified = _lastModified;
			newScreeningQuestionsTemplates.LastModifiedBy = _lastModifiedBy;
			newScreeningQuestionsTemplates.CreatedByAdvertiserId = _createdByAdvertiserId;
			return newScreeningQuestionsTemplates;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ScreeningQuestionsTemplateId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 ScreeningQuestionsTemplateId
		{
			get
			{
				return this.entityData.ScreeningQuestionsTemplateId; 
			}
			
			set
			{
				if (this.entityData.ScreeningQuestionsTemplateId == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsTemplatesColumn.ScreeningQuestionsTemplateId, this.entityData.ScreeningQuestionsTemplateId);
				this.entityData.ScreeningQuestionsTemplateId = value;
				this.EntityId.ScreeningQuestionsTemplateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsTemplatesColumn.ScreeningQuestionsTemplateId, this.entityData.ScreeningQuestionsTemplateId);
				OnPropertyChanged("ScreeningQuestionsTemplateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TemplateName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 512)]
		public virtual System.String TemplateName
		{
			get
			{
				return this.entityData.TemplateName; 
			}
			
			set
			{
				if (this.entityData.TemplateName == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsTemplatesColumn.TemplateName, this.entityData.TemplateName);
				this.entityData.TemplateName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsTemplatesColumn.TemplateName, this.entityData.TemplateName);
				OnPropertyChanged("TemplateName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SiteId
		{
			get
			{
				return this.entityData.SiteId; 
			}
			
			set
			{
				if (this.entityData.SiteId == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsTemplatesColumn.SiteId, this.entityData.SiteId);
				this.entityData.SiteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsTemplatesColumn.SiteId, this.entityData.SiteId);
				OnPropertyChanged("SiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Visible property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Visible
		{
			get
			{
				return this.entityData.Visible; 
			}
			
			set
			{
				if (this.entityData.Visible == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsTemplatesColumn.Visible, this.entityData.Visible);
				this.entityData.Visible = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsTemplatesColumn.Visible, this.entityData.Visible);
				OnPropertyChanged("Visible");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModified property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModifiedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModified
		{
			get
			{
				return this.entityData.LastModified; 
			}
			
			set
			{
				if (this.entityData.LastModified == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsTemplatesColumn.LastModified, this.entityData.LastModified);
				this.entityData.LastModified = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsTemplatesColumn.LastModified, this.entityData.LastModified);
				OnPropertyChanged("LastModified");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModifiedByNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModifiedBy
		{
			get
			{
				return this.entityData.LastModifiedBy; 
			}
			
			set
			{
				if (this.entityData.LastModifiedBy == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsTemplatesColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				this.entityData.LastModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsTemplatesColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				OnPropertyChanged("LastModifiedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedByAdvertiserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCreatedByAdvertiserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreatedByAdvertiserId
		{
			get
			{
				return this.entityData.CreatedByAdvertiserId; 
			}
			
			set
			{
				if (this.entityData.CreatedByAdvertiserId == value)
					return;
					
				OnColumnChanging(ScreeningQuestionsTemplatesColumn.CreatedByAdvertiserId, this.entityData.CreatedByAdvertiserId);
				this.entityData.CreatedByAdvertiserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScreeningQuestionsTemplatesColumn.CreatedByAdvertiserId, this.entityData.CreatedByAdvertiserId);
				OnPropertyChanged("CreatedByAdvertiserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Advertisers"/>.
		/// </summary>
		/// <value>The source Advertisers for CreatedByAdvertiserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Advertisers CreatedByAdvertiserIdSource
      	{
            get { return entityData.CreatedByAdvertiserIdSource; }
            set { entityData.CreatedByAdvertiserIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return entityData.LastModifiedBySource; }
            set { entityData.LastModifiedBySource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Sites SiteIdSource
      	{
            get { return entityData.SiteIdSource; }
            set { entityData.SiteIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of Jobs objects
		///	which are related to this object through the relation FK__Jobs__ScreeningQ__43CEFD10
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Jobs> JobsCollection
		{
			get { return entityData.JobsCollection; }
			set { entityData.JobsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScreeningQuestionsMappings objects
		///	which are related to this object through the relation FK__Screening__Scree__140C7203
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScreeningQuestionsMappings> ScreeningQuestionsMappingsCollection
		{
			get { return entityData.ScreeningQuestionsMappingsCollection; }
			set { entityData.ScreeningQuestionsMappingsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScreeningQuestionsTemplateOwners objects
		///	which are related to this object through the relation FK__Screening__Scree__643BCCA2
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScreeningQuestionsTemplateOwners> ScreeningQuestionsTemplateOwnersCollection
		{
			get { return entityData.ScreeningQuestionsTemplateOwnersCollection; }
			set { entityData.ScreeningQuestionsTemplateOwnersCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("TemplateName", "Template Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TemplateName", "Template Name", 512));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ScreeningQuestionsTemplates"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ScreeningQuestionsTemplateId", "TemplateName", "SiteId", "Visible", "LastModified", "LastModifiedBy", "CreatedByAdvertiserId"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ScreeningQuestionsTemplatesEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ScreeningQuestionsTemplates) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ScreeningQuestionsTemplates>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ScreeningQuestionsTemplates);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ScreeningQuestionsTemplates Entity 
		///</summary>
		protected virtual ScreeningQuestionsTemplates Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ScreeningQuestionsTemplates copy = new ScreeningQuestionsTemplates();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ScreeningQuestionsTemplateId = this.ScreeningQuestionsTemplateId;
				copy.TemplateName = this.TemplateName;
				copy.SiteId = this.SiteId;
				copy.Visible = this.Visible;
				copy.LastModified = this.LastModified;
				copy.LastModifiedBy = this.LastModifiedBy;
				copy.CreatedByAdvertiserId = this.CreatedByAdvertiserId;
			
			if (this.CreatedByAdvertiserIdSource != null && existingCopies.Contains(this.CreatedByAdvertiserIdSource))
				copy.CreatedByAdvertiserIdSource = existingCopies[this.CreatedByAdvertiserIdSource] as Advertisers;
			else
				copy.CreatedByAdvertiserIdSource = MakeCopyOf(this.CreatedByAdvertiserIdSource, existingCopies) as Advertisers;
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				copy.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				copy.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				copy.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				copy.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
		
			//deep copy nested objects
			copy.JobsCollection = (TList<Jobs>) MakeCopyOf(this.JobsCollection, existingCopies); 
			copy.ScreeningQuestionsMappingsCollection = (TList<ScreeningQuestionsMappings>) MakeCopyOf(this.ScreeningQuestionsMappingsCollection, existingCopies); 
			copy.ScreeningQuestionsTemplateOwnersCollection = (TList<ScreeningQuestionsTemplateOwners>) MakeCopyOf(this.ScreeningQuestionsTemplateOwnersCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ScreeningQuestionsTemplates Entity 
		///</summary>
		public virtual ScreeningQuestionsTemplates Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ScreeningQuestionsTemplates Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ScreeningQuestionsTemplates DeepCopy()
		{
			return EntityHelper.Clone<ScreeningQuestionsTemplates>(this as ScreeningQuestionsTemplates);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ScreeningQuestionsTemplatesEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ScreeningQuestionsTemplatesEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ScreeningQuestionsTemplatesEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ScreeningQuestionsTemplatesColumn column)
		{
			switch(column)
			{
					case ScreeningQuestionsTemplatesColumn.ScreeningQuestionsTemplateId:
					return entityData.ScreeningQuestionsTemplateId != _originalData.ScreeningQuestionsTemplateId;
					case ScreeningQuestionsTemplatesColumn.TemplateName:
					return entityData.TemplateName != _originalData.TemplateName;
					case ScreeningQuestionsTemplatesColumn.SiteId:
					return entityData.SiteId != _originalData.SiteId;
					case ScreeningQuestionsTemplatesColumn.Visible:
					return entityData.Visible != _originalData.Visible;
					case ScreeningQuestionsTemplatesColumn.LastModified:
					return entityData.LastModified != _originalData.LastModified;
					case ScreeningQuestionsTemplatesColumn.LastModifiedBy:
					return entityData.LastModifiedBy != _originalData.LastModifiedBy;
					case ScreeningQuestionsTemplatesColumn.CreatedByAdvertiserId:
					return entityData.CreatedByAdvertiserId != _originalData.CreatedByAdvertiserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ScreeningQuestionsTemplatesColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ScreeningQuestionsTemplateId != _originalData.ScreeningQuestionsTemplateId;
			result = result || entityData.TemplateName != _originalData.TemplateName;
			result = result || entityData.SiteId != _originalData.SiteId;
			result = result || entityData.Visible != _originalData.Visible;
			result = result || entityData.LastModified != _originalData.LastModified;
			result = result || entityData.LastModifiedBy != _originalData.LastModifiedBy;
			result = result || entityData.CreatedByAdvertiserId != _originalData.CreatedByAdvertiserId;
			return result;
		}	
		
		///<summary>
		///  Returns a ScreeningQuestionsTemplates Entity with the original data.
		///</summary>
		public ScreeningQuestionsTemplates GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateScreeningQuestionsTemplates(
				_originalData.TemplateName,
				_originalData.SiteId,
				_originalData.Visible,
				_originalData.LastModified,
				_originalData.LastModifiedBy,
				_originalData.CreatedByAdvertiserId
				);
				
			return (ScreeningQuestionsTemplates)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ScreeningQuestionsTemplatesBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ScreeningQuestionsTemplatesBase)
				return ValueEquals(this, (ScreeningQuestionsTemplatesBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ScreeningQuestionsTemplatesBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ScreeningQuestionsTemplateId.GetHashCode() ^ 
					this.TemplateName.GetHashCode() ^ 
					this.SiteId.GetHashCode() ^ 
					this.Visible.GetHashCode() ^ 
					((this.LastModified == null) ? string.Empty : this.LastModified.ToString()).GetHashCode() ^ 
					((this.LastModifiedBy == null) ? string.Empty : this.LastModifiedBy.ToString()).GetHashCode() ^ 
					((this.CreatedByAdvertiserId == null) ? string.Empty : this.CreatedByAdvertiserId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ScreeningQuestionsTemplatesBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ScreeningQuestionsTemplatesBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ScreeningQuestionsTemplatesBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ScreeningQuestionsTemplatesBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ScreeningQuestionsTemplatesBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ScreeningQuestionsTemplatesBase Object1, ScreeningQuestionsTemplatesBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ScreeningQuestionsTemplateId != Object2.ScreeningQuestionsTemplateId)
				equal = false;
			if (Object1.TemplateName != Object2.TemplateName)
				equal = false;
			if (Object1.SiteId != Object2.SiteId)
				equal = false;
			if (Object1.Visible != Object2.Visible)
				equal = false;
			if ( Object1.LastModified != null && Object2.LastModified != null )
			{
				if (Object1.LastModified != Object2.LastModified)
					equal = false;
			}
			else if (Object1.LastModified == null ^ Object2.LastModified == null )
			{
				equal = false;
			}
			if ( Object1.LastModifiedBy != null && Object2.LastModifiedBy != null )
			{
				if (Object1.LastModifiedBy != Object2.LastModifiedBy)
					equal = false;
			}
			else if (Object1.LastModifiedBy == null ^ Object2.LastModifiedBy == null )
			{
				equal = false;
			}
			if ( Object1.CreatedByAdvertiserId != null && Object2.CreatedByAdvertiserId != null )
			{
				if (Object1.CreatedByAdvertiserId != Object2.CreatedByAdvertiserId)
					equal = false;
			}
			else if (Object1.CreatedByAdvertiserId == null ^ Object2.CreatedByAdvertiserId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ScreeningQuestionsTemplatesBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ScreeningQuestionsTemplatesComparer GetComparer()
        {
            return new ScreeningQuestionsTemplatesComparer();
        }
        */

        // Comparer delegates back to ScreeningQuestionsTemplates
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ScreeningQuestionsTemplates rhs, ScreeningQuestionsTemplatesColumn which)
        {
            switch (which)
            {
            	
            	
            	case ScreeningQuestionsTemplatesColumn.ScreeningQuestionsTemplateId:
            		return this.ScreeningQuestionsTemplateId.CompareTo(rhs.ScreeningQuestionsTemplateId);
            		
            		                 
            	
            	
            	case ScreeningQuestionsTemplatesColumn.TemplateName:
            		return this.TemplateName.CompareTo(rhs.TemplateName);
            		
            		                 
            	
            	
            	case ScreeningQuestionsTemplatesColumn.SiteId:
            		return this.SiteId.CompareTo(rhs.SiteId);
            		
            		                 
            	
            	
            	case ScreeningQuestionsTemplatesColumn.Visible:
            		return this.Visible.CompareTo(rhs.Visible);
            		
            		                 
            	
            	
            	case ScreeningQuestionsTemplatesColumn.LastModified:
            		return this.LastModified.Value.CompareTo(rhs.LastModified.Value);
            		
            		                 
            	
            	
            	case ScreeningQuestionsTemplatesColumn.LastModifiedBy:
            		return this.LastModifiedBy.Value.CompareTo(rhs.LastModifiedBy.Value);
            		
            		                 
            	
            	
            	case ScreeningQuestionsTemplatesColumn.CreatedByAdvertiserId:
            		return this.CreatedByAdvertiserId.Value.CompareTo(rhs.CreatedByAdvertiserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ScreeningQuestionsTemplatesKey> Members
		
		// member variable for the EntityId property
		private ScreeningQuestionsTemplatesKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ScreeningQuestionsTemplatesKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ScreeningQuestionsTemplatesKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ScreeningQuestionsTemplates")
					.Append("|").Append( this.ScreeningQuestionsTemplateId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- ScreeningQuestionsTemplateId: {0}{7}- TemplateName: {1}{7}- SiteId: {2}{7}- Visible: {3}{7}- LastModified: {4}{7}- LastModifiedBy: {5}{7}- CreatedByAdvertiserId: {6}{7}{9}", 
				this.ScreeningQuestionsTemplateId,
				this.TemplateName,
				this.SiteId,
				this.Visible,
				(this.LastModified == null) ? string.Empty : this.LastModified.ToString(),
				(this.LastModifiedBy == null) ? string.Empty : this.LastModifiedBy.ToString(),
				(this.CreatedByAdvertiserId == null) ? string.Empty : this.CreatedByAdvertiserId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ScreeningQuestionsTemplates' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ScreeningQuestionsTemplatesEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ScreeningQuestionsTemplateId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ScreeningQuestionsTemplates"</remarks>
		public System.Int32 ScreeningQuestionsTemplateId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// TemplateName : 
		/// </summary>
		public System.String		  TemplateName = string.Empty;
		
		/// <summary>
		/// SiteId : 
		/// </summary>
		public System.Int32		  SiteId = (int)0;
		
		/// <summary>
		/// Visible : 
		/// </summary>
		public System.Boolean		  Visible = false;
		
		/// <summary>
		/// LastModified : 
		/// </summary>
		public System.DateTime?		  LastModified = null;
		
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		public System.Int32?		  LastModifiedBy = null;
		
		/// <summary>
		/// CreatedByAdvertiserId : 
		/// </summary>
		public System.Int32?		  CreatedByAdvertiserId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Advertisers _createdByAdvertiserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Advertisers"/>.
		/// </summary>
		/// <value>The source Advertisers for CreatedByAdvertiserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Advertisers CreatedByAdvertiserIdSource
      	{
            get { return this._createdByAdvertiserIdSource; }
            set { this._createdByAdvertiserIdSource = value; }
      	}
		private AdminUsers _lastModifiedBySource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return this._lastModifiedBySource; }
            set { this._lastModifiedBySource = value; }
      	}
		private Sites _siteIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Sites SiteIdSource
      	{
            get { return this._siteIdSource; }
            set { this._siteIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region JobsCollection
		
		private TList<Jobs> _jobsScreeningQuestionsTemplateId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobsScreeningQuestionsTemplateId
		/// </summary>
		
		public TList<Jobs> JobsCollection
		{
			get
			{
				if (_jobsScreeningQuestionsTemplateId == null)
				{
				_jobsScreeningQuestionsTemplateId = new TList<Jobs>();
				}
	
				return _jobsScreeningQuestionsTemplateId;
			}
			set { _jobsScreeningQuestionsTemplateId = value; }
		}
		
		#endregion

		#region ScreeningQuestionsMappingsCollection
		
		private TList<ScreeningQuestionsMappings> _screeningQuestionsMappingsScreeningQuestionsTemplateId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _screeningQuestionsMappingsScreeningQuestionsTemplateId
		/// </summary>
		
		public TList<ScreeningQuestionsMappings> ScreeningQuestionsMappingsCollection
		{
			get
			{
				if (_screeningQuestionsMappingsScreeningQuestionsTemplateId == null)
				{
				_screeningQuestionsMappingsScreeningQuestionsTemplateId = new TList<ScreeningQuestionsMappings>();
				}
	
				return _screeningQuestionsMappingsScreeningQuestionsTemplateId;
			}
			set { _screeningQuestionsMappingsScreeningQuestionsTemplateId = value; }
		}
		
		#endregion

		#region ScreeningQuestionsTemplateOwnersCollection
		
		private TList<ScreeningQuestionsTemplateOwners> _screeningQuestionsTemplateOwnersScreeningQuestionsTemplateId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _screeningQuestionsTemplateOwnersScreeningQuestionsTemplateId
		/// </summary>
		
		public TList<ScreeningQuestionsTemplateOwners> ScreeningQuestionsTemplateOwnersCollection
		{
			get
			{
				if (_screeningQuestionsTemplateOwnersScreeningQuestionsTemplateId == null)
				{
				_screeningQuestionsTemplateOwnersScreeningQuestionsTemplateId = new TList<ScreeningQuestionsTemplateOwners>();
				}
	
				return _screeningQuestionsTemplateOwnersScreeningQuestionsTemplateId;
			}
			set { _screeningQuestionsTemplateOwnersScreeningQuestionsTemplateId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ScreeningQuestionsTemplatesEntityData _tmp = new ScreeningQuestionsTemplatesEntityData();
						
			_tmp.ScreeningQuestionsTemplateId = this.ScreeningQuestionsTemplateId;
			
			_tmp.TemplateName = this.TemplateName;
			_tmp.SiteId = this.SiteId;
			_tmp.Visible = this.Visible;
			_tmp.LastModified = this.LastModified;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.CreatedByAdvertiserId = this.CreatedByAdvertiserId;
			
			#region Source Parent Composite Entities
			if (this.CreatedByAdvertiserIdSource != null)
				_tmp.CreatedByAdvertiserIdSource = MakeCopyOf(this.CreatedByAdvertiserIdSource) as Advertisers;
			if (this.LastModifiedBySource != null)
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource) as AdminUsers;
			if (this.SiteIdSource != null)
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource) as Sites;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._jobsScreeningQuestionsTemplateId != null)
				_tmp.JobsCollection = (TList<Jobs>) MakeCopyOf(this.JobsCollection); 
			if (this._screeningQuestionsMappingsScreeningQuestionsTemplateId != null)
				_tmp.ScreeningQuestionsMappingsCollection = (TList<ScreeningQuestionsMappings>) MakeCopyOf(this.ScreeningQuestionsMappingsCollection); 
			if (this._screeningQuestionsTemplateOwnersScreeningQuestionsTemplateId != null)
				_tmp.ScreeningQuestionsTemplateOwnersCollection = (TList<ScreeningQuestionsTemplateOwners>) MakeCopyOf(this.ScreeningQuestionsTemplateOwnersCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ScreeningQuestionsTemplatesEntityData _tmp = new ScreeningQuestionsTemplatesEntityData();
						
			_tmp.ScreeningQuestionsTemplateId = this.ScreeningQuestionsTemplateId;
			
			_tmp.TemplateName = this.TemplateName;
			_tmp.SiteId = this.SiteId;
			_tmp.Visible = this.Visible;
			_tmp.LastModified = this.LastModified;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.CreatedByAdvertiserId = this.CreatedByAdvertiserId;
			
			#region Source Parent Composite Entities
			if (this.CreatedByAdvertiserIdSource != null && existingCopies.Contains(this.CreatedByAdvertiserIdSource))
				_tmp.CreatedByAdvertiserIdSource = existingCopies[this.CreatedByAdvertiserIdSource] as Advertisers;
			else
				_tmp.CreatedByAdvertiserIdSource = MakeCopyOf(this.CreatedByAdvertiserIdSource, existingCopies) as Advertisers;
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				_tmp.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				_tmp.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.JobsCollection = (TList<Jobs>) MakeCopyOf(this.JobsCollection, existingCopies); 
			_tmp.ScreeningQuestionsMappingsCollection = (TList<ScreeningQuestionsMappings>) MakeCopyOf(this.ScreeningQuestionsMappingsCollection, existingCopies); 
			_tmp.ScreeningQuestionsTemplateOwnersCollection = (TList<ScreeningQuestionsTemplateOwners>) MakeCopyOf(this.ScreeningQuestionsTemplateOwnersCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScreeningQuestionsTemplatesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ScreeningQuestionsTemplatesColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScreeningQuestionsTemplatesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ScreeningQuestionsTemplatesColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScreeningQuestionsTemplatesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ScreeningQuestionsTemplatesColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ScreeningQuestionsTemplatesEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ScreeningQuestionsTemplatesEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScreeningQuestionsTemplatesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ScreeningQuestionsTemplatesColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ScreeningQuestionsTemplatesEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ScreeningQuestionsTemplatesEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ScreeningQuestionsTemplatesEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ScreeningQuestionsTemplates"/> object.
	/// </remarks>
	public class ScreeningQuestionsTemplatesEventArgs : System.EventArgs
	{
		private ScreeningQuestionsTemplatesColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ScreeningQuestionsTemplatesEventArgs class.
		///</summary>
		public ScreeningQuestionsTemplatesEventArgs(ScreeningQuestionsTemplatesColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ScreeningQuestionsTemplatesEventArgs class.
		///</summary>
		public ScreeningQuestionsTemplatesEventArgs(ScreeningQuestionsTemplatesColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ScreeningQuestionsTemplatesColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ScreeningQuestionsTemplatesColumn" />
		public ScreeningQuestionsTemplatesColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ScreeningQuestionsTemplates related events.
	///</summary>
	public delegate void ScreeningQuestionsTemplatesEventHandler(object sender, ScreeningQuestionsTemplatesEventArgs e);
	
	#region ScreeningQuestionsTemplatesComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ScreeningQuestionsTemplatesComparer : System.Collections.Generic.IComparer<ScreeningQuestionsTemplates>
	{
		ScreeningQuestionsTemplatesColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ScreeningQuestionsTemplatesComparer"/> class.
        /// </summary>
		public ScreeningQuestionsTemplatesComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ScreeningQuestionsTemplatesComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ScreeningQuestionsTemplatesComparer(ScreeningQuestionsTemplatesColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ScreeningQuestionsTemplates"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ScreeningQuestionsTemplates"/> to compare.</param>
        /// <param name="b">The second <c>ScreeningQuestionsTemplates</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ScreeningQuestionsTemplates a, ScreeningQuestionsTemplates b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ScreeningQuestionsTemplates entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ScreeningQuestionsTemplates a, ScreeningQuestionsTemplates b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ScreeningQuestionsTemplatesColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ScreeningQuestionsTemplatesKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ScreeningQuestionsTemplates"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ScreeningQuestionsTemplatesKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ScreeningQuestionsTemplatesKey class.
		/// </summary>
		public ScreeningQuestionsTemplatesKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ScreeningQuestionsTemplatesKey class.
		/// </summary>
		public ScreeningQuestionsTemplatesKey(ScreeningQuestionsTemplatesBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ScreeningQuestionsTemplateId = entity.ScreeningQuestionsTemplateId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ScreeningQuestionsTemplatesKey class.
		/// </summary>
		public ScreeningQuestionsTemplatesKey(System.Int32 _screeningQuestionsTemplateId)
		{
			#region Init Properties

			this.ScreeningQuestionsTemplateId = _screeningQuestionsTemplateId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ScreeningQuestionsTemplatesBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ScreeningQuestionsTemplatesBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ScreeningQuestionsTemplateId property
		private System.Int32 _screeningQuestionsTemplateId;
		
		/// <summary>
		/// Gets or sets the ScreeningQuestionsTemplateId property.
		/// </summary>
		public System.Int32 ScreeningQuestionsTemplateId
		{
			get { return _screeningQuestionsTemplateId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ScreeningQuestionsTemplateId = value;
				
				_screeningQuestionsTemplateId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ScreeningQuestionsTemplateId = ( values["ScreeningQuestionsTemplateId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ScreeningQuestionsTemplateId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ScreeningQuestionsTemplateId", ScreeningQuestionsTemplateId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ScreeningQuestionsTemplateId: {0}{1}",
								ScreeningQuestionsTemplateId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ScreeningQuestionsTemplatesColumn Enum
	
	/// <summary>
	/// Enumerate the ScreeningQuestionsTemplates columns.
	/// </summary>
	[Serializable]
	public enum ScreeningQuestionsTemplatesColumn : int
	{
		/// <summary>
		/// ScreeningQuestionsTemplateId : 
		/// </summary>
		[EnumTextValue("ScreeningQuestionsTemplateId")]
		[ColumnEnum("ScreeningQuestionsTemplateId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ScreeningQuestionsTemplateId = 1,
		/// <summary>
		/// TemplateName : 
		/// </summary>
		[EnumTextValue("TemplateName")]
		[ColumnEnum("TemplateName", typeof(System.String), System.Data.DbType.String, false, false, false, 512)]
		TemplateName = 2,
		/// <summary>
		/// SiteId : 
		/// </summary>
		[EnumTextValue("SiteId")]
		[ColumnEnum("SiteId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteId = 3,
		/// <summary>
		/// Visible : 
		/// </summary>
		[EnumTextValue("Visible")]
		[ColumnEnum("Visible", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Visible = 4,
		/// <summary>
		/// LastModified : 
		/// </summary>
		[EnumTextValue("LastModified")]
		[ColumnEnum("LastModified", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModified = 5,
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		[EnumTextValue("LastModifiedBy")]
		[ColumnEnum("LastModifiedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModifiedBy = 6,
		/// <summary>
		/// CreatedByAdvertiserId : 
		/// </summary>
		[EnumTextValue("CreatedByAdvertiserId")]
		[ColumnEnum("CreatedByAdvertiserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreatedByAdvertiserId = 7
	}//End enum

	#endregion ScreeningQuestionsTemplatesColumn Enum

} // end namespace

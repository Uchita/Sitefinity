
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Sites.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'Sites' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SitesBase : EntityBase, ISites, IEntityId<SitesKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SitesEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SitesEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SitesEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Sites> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SitesEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SitesEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SitesBase"/> instance.
		///</summary>
		public SitesBase()
		{
			this.entityData = new SitesEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SitesBase"/> instance.
		///</summary>
		///<param name="_siteName"></param>
		///<param name="_siteUrl"></param>
		///<param name="_siteDescription"></param>
		///<param name="_siteAdminLogo"></param>
		///<param name="_lastModified"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_live"></param>
		///<param name="_mobileEnabled"></param>
		///<param name="_mobileUrl"></param>
		///<param name="_siteAdminLogoUrl"></param>
		///<param name="_siteUrlAlias"></param>
		public SitesBase(System.String _siteName, System.String _siteUrl, System.String _siteDescription, 
			System.Byte[] _siteAdminLogo, System.DateTime _lastModified, System.Int32? _lastModifiedBy, System.Boolean? _live, 
			System.Boolean _mobileEnabled, System.String _mobileUrl, System.String _siteAdminLogoUrl, System.String _siteUrlAlias)
		{
			this.entityData = new SitesEntityData();
			this.backupData = null;

			this.SiteName = _siteName;
			this.SiteUrl = _siteUrl;
			this.SiteDescription = _siteDescription;
			this.SiteAdminLogo = _siteAdminLogo;
			this.LastModified = _lastModified;
			this.LastModifiedBy = _lastModifiedBy;
			this.Live = _live;
			this.MobileEnabled = _mobileEnabled;
			this.MobileUrl = _mobileUrl;
			this.SiteAdminLogoUrl = _siteAdminLogoUrl;
			this.SiteUrlAlias = _siteUrlAlias;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Sites"/> instance.
		///</summary>
		///<param name="_siteName"></param>
		///<param name="_siteUrl"></param>
		///<param name="_siteDescription"></param>
		///<param name="_siteAdminLogo"></param>
		///<param name="_lastModified"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_live"></param>
		///<param name="_mobileEnabled"></param>
		///<param name="_mobileUrl"></param>
		///<param name="_siteAdminLogoUrl"></param>
		///<param name="_siteUrlAlias"></param>
		public static Sites CreateSites(System.String _siteName, System.String _siteUrl, System.String _siteDescription, 
			System.Byte[] _siteAdminLogo, System.DateTime _lastModified, System.Int32? _lastModifiedBy, System.Boolean? _live, 
			System.Boolean _mobileEnabled, System.String _mobileUrl, System.String _siteAdminLogoUrl, System.String _siteUrlAlias)
		{
			Sites newSites = new Sites();
			newSites.SiteName = _siteName;
			newSites.SiteUrl = _siteUrl;
			newSites.SiteDescription = _siteDescription;
			newSites.SiteAdminLogo = _siteAdminLogo;
			newSites.LastModified = _lastModified;
			newSites.LastModifiedBy = _lastModifiedBy;
			newSites.Live = _live;
			newSites.MobileEnabled = _mobileEnabled;
			newSites.MobileUrl = _mobileUrl;
			newSites.SiteAdminLogoUrl = _siteAdminLogoUrl;
			newSites.SiteUrlAlias = _siteUrlAlias;
			return newSites;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SiteId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 SiteId
		{
			get
			{
				return this.entityData.SiteId; 
			}
			
			set
			{
				if (this.entityData.SiteId == value)
					return;
					
				OnColumnChanging(SitesColumn.SiteId, this.entityData.SiteId);
				this.entityData.SiteId = value;
				this.EntityId.SiteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SitesColumn.SiteId, this.entityData.SiteId);
				OnPropertyChanged("SiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String SiteName
		{
			get
			{
				return this.entityData.SiteName; 
			}
			
			set
			{
				if (this.entityData.SiteName == value)
					return;
					
				OnColumnChanging(SitesColumn.SiteName, this.entityData.SiteName);
				this.entityData.SiteName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SitesColumn.SiteName, this.entityData.SiteName);
				OnPropertyChanged("SiteName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteUrl property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String SiteUrl
		{
			get
			{
				return this.entityData.SiteUrl; 
			}
			
			set
			{
				if (this.entityData.SiteUrl == value)
					return;
					
				OnColumnChanging(SitesColumn.SiteUrl, this.entityData.SiteUrl);
				this.entityData.SiteUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SitesColumn.SiteUrl, this.entityData.SiteUrl);
				OnPropertyChanged("SiteUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteDescription property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String SiteDescription
		{
			get
			{
				return this.entityData.SiteDescription; 
			}
			
			set
			{
				if (this.entityData.SiteDescription == value)
					return;
					
				OnColumnChanging(SitesColumn.SiteDescription, this.entityData.SiteDescription);
				this.entityData.SiteDescription = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SitesColumn.SiteDescription, this.entityData.SiteDescription);
				OnPropertyChanged("SiteDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteAdminLogo property. 
		///		
		/// </summary>
		/// <value>This type is image.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte[] SiteAdminLogo
		{
			get
			{
				return this.entityData.SiteAdminLogo; 
			}
			
			set
			{
				if (this.entityData.SiteAdminLogo == value)
					return;
					
				OnColumnChanging(SitesColumn.SiteAdminLogo, this.entityData.SiteAdminLogo);
				this.entityData.SiteAdminLogo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SitesColumn.SiteAdminLogo, this.entityData.SiteAdminLogo);
				OnPropertyChanged("SiteAdminLogo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModified property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastModified
		{
			get
			{
				return this.entityData.LastModified; 
			}
			
			set
			{
				if (this.entityData.LastModified == value)
					return;
					
				OnColumnChanging(SitesColumn.LastModified, this.entityData.LastModified);
				this.entityData.LastModified = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SitesColumn.LastModified, this.entityData.LastModified);
				OnPropertyChanged("LastModified");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastModifiedByNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastModifiedBy
		{
			get
			{
				return this.entityData.LastModifiedBy; 
			}
			
			set
			{
				if (this.entityData.LastModifiedBy == value)
					return;
					
				OnColumnChanging(SitesColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				this.entityData.LastModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SitesColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				OnPropertyChanged("LastModifiedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Live property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsLiveNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Live
		{
			get
			{
				return this.entityData.Live; 
			}
			
			set
			{
				if (this.entityData.Live == value)
					return;
					
				OnColumnChanging(SitesColumn.Live, this.entityData.Live);
				this.entityData.Live = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SitesColumn.Live, this.entityData.Live);
				OnPropertyChanged("Live");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MobileEnabled property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean MobileEnabled
		{
			get
			{
				return this.entityData.MobileEnabled; 
			}
			
			set
			{
				if (this.entityData.MobileEnabled == value)
					return;
					
				OnColumnChanging(SitesColumn.MobileEnabled, this.entityData.MobileEnabled);
				this.entityData.MobileEnabled = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SitesColumn.MobileEnabled, this.entityData.MobileEnabled);
				OnPropertyChanged("MobileEnabled");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MobileUrl property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String MobileUrl
		{
			get
			{
				return this.entityData.MobileUrl; 
			}
			
			set
			{
				if (this.entityData.MobileUrl == value)
					return;
					
				OnColumnChanging(SitesColumn.MobileUrl, this.entityData.MobileUrl);
				this.entityData.MobileUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SitesColumn.MobileUrl, this.entityData.MobileUrl);
				OnPropertyChanged("MobileUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteAdminLogoUrl property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String SiteAdminLogoUrl
		{
			get
			{
				return this.entityData.SiteAdminLogoUrl; 
			}
			
			set
			{
				if (this.entityData.SiteAdminLogoUrl == value)
					return;
					
				OnColumnChanging(SitesColumn.SiteAdminLogoUrl, this.entityData.SiteAdminLogoUrl);
				this.entityData.SiteAdminLogoUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SitesColumn.SiteAdminLogoUrl, this.entityData.SiteAdminLogoUrl);
				OnPropertyChanged("SiteAdminLogoUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteUrlAlias property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String SiteUrlAlias
		{
			get
			{
				return this.entityData.SiteUrlAlias; 
			}
			
			set
			{
				if (this.entityData.SiteUrlAlias == value)
					return;
					
				OnColumnChanging(SitesColumn.SiteUrlAlias, this.entityData.SiteUrlAlias);
				this.entityData.SiteUrlAlias = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SitesColumn.SiteUrlAlias, this.entityData.SiteUrlAlias);
				OnPropertyChanged("SiteUrlAlias");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return entityData.LastModifiedBySource; }
            set { entityData.LastModifiedBySource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AvailableStatus objects
		///	which are related to this object through the relation FK__Available__SiteI__78F3E6EC
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AvailableStatus> AvailableStatusCollection
		{
			get { return entityData.AvailableStatusCollection; }
			set { entityData.AvailableStatusCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of JobApplication objects
		///	which are related to this object through the relation FK__JobApplic__SiteI__09D52582
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<JobApplication> JobApplicationCollection
		{
			get { return entityData.JobApplicationCollection; }
			set { entityData.JobApplicationCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of JobViews objects
		///	which are related to this object through the relation FK__JobViews__SiteID__462A06AB
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<JobViews> JobViewsCollection
		{
			get { return entityData.JobViewsCollection; }
			set { entityData.JobViewsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of IntegrationMappings objects
		///	which are related to this object through the relation FK_IntegrationMappings_SiteID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<IntegrationMappings> IntegrationMappingsCollection
		{
			get { return entityData.IntegrationMappingsCollection; }
			set { entityData.IntegrationMappingsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SiteResources objects
		///	which are related to this object through the relation FK__SiteResou__SiteI__2A92E03A
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteResources> SiteResourcesCollectionGetBySiteId
		{
			get { return entityData.SiteResourcesCollectionGetBySiteId; }
			set { entityData.SiteResourcesCollectionGetBySiteId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EmailTemplates objects
		///	which are related to this object through the relation FK__EmailTemp__SiteI__08D548FA
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EmailTemplates> EmailTemplatesCollection
		{
			get { return entityData.EmailTemplatesCollection; }
			set { entityData.EmailTemplatesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Members objects
		///	which are related to this object through the relation FK__Members__SiteID__0ABD916C
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Members> MembersCollection
		{
			get { return entityData.MembersCollection; }
			set { entityData.MembersCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Jobs objects
		///	which are related to this object through the relation FK__Jobs__SiteID__64C2D10D
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Jobs> JobsCollection
		{
			get { return entityData.JobsCollection; }
			set { entityData.JobsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of DynamicPageFiles objects
		///	which are related to this object through the relation FK__DynamicPa__SiteI__0A7378A9
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DynamicPageFiles> DynamicPageFilesCollection
		{
			get { return entityData.DynamicPageFilesCollection; }
			set { entityData.DynamicPageFilesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SiteMappings objects
		///	which are related to this object through the relation FK__SiteMappi__Maste__6201483D
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteMappings> SiteMappingsCollectionGetByMasterSiteId
		{
			get { return entityData.SiteMappingsCollectionGetByMasterSiteId; }
			set { entityData.SiteMappingsCollectionGetByMasterSiteId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SiteWebParts objects
		///	which are related to this object through the relation FK__SiteWebPa__SiteI__1446FBA6
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteWebParts> SiteWebPartsCollectionGetBySiteId
		{
			get { return entityData.SiteWebPartsCollectionGetBySiteId; }
			set { entityData.SiteWebPartsCollectionGetBySiteId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of JobCustomXml objects
		///	which are related to this object through the relation FK__JobCustom__SiteI__096F4FC2
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<JobCustomXml> JobCustomXmlCollection
		{
			get { return entityData.JobCustomXmlCollection; }
			set { entityData.JobCustomXmlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of DynamicPageWebPartTemplates objects
		///	which are related to this object through the relation FK__DynamicPa__SiteI__0E8E2250
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DynamicPageWebPartTemplates> DynamicPageWebPartTemplatesCollection
		{
			get { return entityData.DynamicPageWebPartTemplatesCollection; }
			set { entityData.DynamicPageWebPartTemplatesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of DynamicPages objects
		///	which are related to this object through the relation FK_DynamicPages_Sites
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DynamicPages> DynamicPagesCollection
		{
			get { return entityData.DynamicPagesCollection; }
			set { entityData.DynamicPagesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of NewsCategories objects
		///	which are related to this object through the relation FK__NewsCateg__SiteI__07E124C1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<NewsCategories> NewsCategoriesCollection
		{
			get { return entityData.NewsCategoriesCollection; }
			set { entityData.NewsCategoriesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SiteAdvertiserFilter objects
		///	which are related to this object through the relation FK__SiteAdver__SiteI__1EA559DF
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteAdvertiserFilter> SiteAdvertiserFilterCollection
		{
			get { return entityData.SiteAdvertiserFilterCollection; }
			set { entityData.SiteAdvertiserFilterCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of MemberMemberships objects
		///	which are related to this object through the relation FK__MemberMem__SiteI__0E8809B4
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MemberMemberships> MemberMembershipsCollection
		{
			get { return entityData.MemberMembershipsCollection; }
			set { entityData.MemberMembershipsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of JobTemplates objects
		///	which are related to this object through the relation FK__JobTempla__SiteI__5FFE1BF0
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<JobTemplates> JobTemplatesCollection
		{
			get { return entityData.JobTemplatesCollection; }
			set { entityData.JobTemplatesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SiteCountries objects
		///	which are related to this object through the relation FK__SiteCount__SiteI__7913E27D
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteCountries> SiteCountriesCollection
		{
			get { return entityData.SiteCountriesCollection; }
			set { entityData.SiteCountriesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of WebServiceLog objects
		///	which are related to this object through the relation FK__WebServic__SiteI__7C446C43
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<WebServiceLog> WebServiceLogCollection
		{
			get { return entityData.WebServiceLogCollection; }
			set { entityData.WebServiceLogCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SiteLocation objects
		///	which are related to this object through the relation FK__SiteLocat__SiteI__515009E6
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteLocation> SiteLocationCollection
		{
			get { return entityData.SiteLocationCollection; }
			set { entityData.SiteLocationCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SiteProfession objects
		///	which are related to this object through the relation FK__SiteProfe__SiteI__1BB31344
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteProfession> SiteProfessionCollection
		{
			get { return entityData.SiteProfessionCollection; }
			set { entityData.SiteProfessionCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of MemberWizard objects
		///	which are related to this object through the relation FK__MemberWiz__SiteI__293BFFF0
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MemberWizard> MemberWizardCollection
		{
			get { return entityData.MemberWizardCollection; }
			set { entityData.MemberWizardCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Industry objects
		///	which are related to this object through the relation FK_Industry_SiteID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Industry> IndustryCollection
		{
			get { return entityData.IndustryCollection; }
			set { entityData.IndustryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Consultants objects
		///	which are related to this object through the relation FK__Consultan__SiteI__777D1EBE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Consultants> ConsultantsCollection
		{
			get { return entityData.ConsultantsCollection; }
			set { entityData.ConsultantsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Files objects
		///	which are related to this object through the relation FK_Files_Sites
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Files> FilesCollection
		{
			get { return entityData.FilesCollection; }
			set { entityData.FilesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SiteResourcesXml objects
		///	which are related to this object through the relation FK__SiteResou__SiteI__3BBD6C3C
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteResourcesXml> SiteResourcesXmlCollection
		{
			get { return entityData.SiteResourcesXmlCollection; }
			set { entityData.SiteResourcesXmlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Advertisers objects
		///	which are related to this object through the relation FK__Advertise__SiteI__08362A7C
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Advertisers> AdvertisersCollection
		{
			get { return entityData.AdvertisersCollection; }
			set { entityData.AdvertisersCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of MemberStatus objects
		///	which are related to this object through the relation FK__MemberSta__SiteI__16292B7C
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MemberStatus> MemberStatusCollection
		{
			get { return entityData.MemberStatusCollection; }
			set { entityData.MemberStatusCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of WidgetContainers objects
		///	which are related to this object through the relation FK__WidgetCon__SiteI__4CAC1BB1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<WidgetContainers> WidgetContainersCollection
		{
			get { return entityData.WidgetContainersCollection; }
			set { entityData.WidgetContainersCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Folders objects
		///	which are related to this object through the relation FK_Folders_Sites
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Folders> FoldersCollection
		{
			get { return entityData.FoldersCollection; }
			set { entityData.FoldersCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SiteCustomMapping objects
		///	which are related to this object through the relation FK__SiteCusto__SiteI__142B3EA9
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteCustomMapping> SiteCustomMappingCollection
		{
			get { return entityData.SiteCustomMappingCollection; }
			set { entityData.SiteCustomMappingCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Profession objects
		///	which are related to this object through the relation FK__Professio__Refer__64049B05
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Profession> ProfessionCollection
		{
			get { return entityData.ProfessionCollection; }
			set { entityData.ProfessionCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdminUsers objects
		///	which are related to this object through the relation FK_AdminUsers_Sites
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdminUsers> AdminUsersCollection
		{
			get { return entityData.AdminUsersCollection; }
			set { entityData.AdminUsersCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of JobAlerts objects
		///	which are related to this object through the relation FK__JobAlerts__SiteI__1EF03DF9
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<JobAlerts> JobAlertsCollection
		{
			get { return entityData.JobAlertsCollection; }
			set { entityData.JobAlertsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of JobApplicationType objects
		///	which are related to this object through the relation FK__JobApplic__SiteI__1D9344A9
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<JobApplicationType> JobApplicationTypeCollection
		{
			get { return entityData.JobApplicationTypeCollection; }
			set { entityData.JobApplicationTypeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CustomWidget objects
		///	which are related to this object through the relation FK__CustomWid__SiteI__0B6120B2
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CustomWidget> CustomWidgetCollection
		{
			get { return entityData.CustomWidgetCollection; }
			set { entityData.CustomWidgetCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SiteMappings objects
		///	which are related to this object through the relation FK__SiteMappi__SiteI__610D2404
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteMappings> SiteMappingsCollectionGetBySiteId
		{
			get { return entityData.SiteMappingsCollectionGetBySiteId; }
			set { entityData.SiteMappingsCollectionGetBySiteId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SiteRoles objects
		///	which are related to this object through the relation FK__SiteRoles__SiteI__1D9B5BB6
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteRoles> SiteRolesCollection
		{
			get { return entityData.SiteRolesCollection; }
			set { entityData.SiteRolesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CustomPayment objects
		///	which are related to this object through the relation FK_CustomPayment_Sites
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CustomPayment> CustomPaymentCollection
		{
			get { return entityData.CustomPaymentCollection; }
			set { entityData.CustomPaymentCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Integrations objects
		///	which are related to this object through the relation fk_SiteID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Integrations> IntegrationsCollection
		{
			get { return entityData.IntegrationsCollection; }
			set { entityData.IntegrationsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Enquiries objects
		///	which are related to this object through the relation FK__Enquiries__SiteI__0D99FE17
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Enquiries> EnquiriesCollection
		{
			get { return entityData.EnquiriesCollection; }
			set { entityData.EnquiriesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SiteArea objects
		///	which are related to this object through the relation FK__SiteArea__SiteID__4F67C174
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteArea> SiteAreaCollection
		{
			get { return entityData.SiteAreaCollection; }
			set { entityData.SiteAreaCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of News objects
		///	which are related to this object through the relation FK__News__SiteID__09C96D33
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<News> NewsCollection
		{
			get { return entityData.NewsCollection; }
			set { entityData.NewsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SiteCurrencies objects
		///	which are related to this object through the relation FK__SiteCurre__SiteI__436CFC04
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteCurrencies> SiteCurrenciesCollection
		{
			get { return entityData.SiteCurrenciesCollection; }
			set { entityData.SiteCurrenciesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SiteWorkType objects
		///	which are related to this object through the relation FK__SiteWorkT__SiteI__216BEC9A
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteWorkType> SiteWorkTypeCollection
		{
			get { return entityData.SiteWorkTypeCollection; }
			set { entityData.SiteWorkTypeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of DynamicContent objects
		///	which are related to this object through the relation FK__DynamicCo__SiteI__62B3134F
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DynamicContent> DynamicContentCollection
		{
			get { return entityData.DynamicContentCollection; }
			set { entityData.DynamicContentCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of JobItemsType objects
		///	which are related to this object through the relation FK__JobItemsT__SiteI__5B3966D3
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<JobItemsType> JobItemsTypeCollection
		{
			get { return entityData.JobItemsTypeCollection; }
			set { entityData.JobItemsTypeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SiteSalaryType objects
		///	which are related to this object through the relation FK__SiteSalar__SiteI__5614BF03
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteSalaryType> SiteSalaryTypeCollection
		{
			get { return entityData.SiteSalaryTypeCollection; }
			set { entityData.SiteSalaryTypeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScreeningQuestionsTemplates objects
		///	which are related to this object through the relation FK__Screening__SiteI__25549791
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScreeningQuestionsTemplates> ScreeningQuestionsTemplatesCollection
		{
			get { return entityData.ScreeningQuestionsTemplatesCollection; }
			set { entityData.ScreeningQuestionsTemplatesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of JobsArchive objects
		///	which are related to this object through the relation FK__JobsArchi__SiteI__79BDEDF3
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<JobsArchive> JobsArchiveCollection
		{
			get { return entityData.JobsArchiveCollection; }
			set { entityData.JobsArchiveCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SiteLanguages objects
		///	which are related to this object through the relation FK__SiteLangu__SiteI__162F4418
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SiteLanguages> SiteLanguagesCollection
		{
			get { return entityData.SiteLanguagesCollection; }
			set { entityData.SiteLanguagesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CustomWidgetCssSelector objects
		///	which are related to this object through the relation FK__CustomWid__SiteI__05A8475C
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CustomWidgetCssSelector> CustomWidgetCssSelectorCollection
		{
			get { return entityData.CustomWidgetCssSelectorCollection; }
			set { entityData.CustomWidgetCssSelectorCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Educations objects
		///	which are related to this object through the relation FK__Education__SiteI__7ADC2F5E
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Educations> EducationsCollection
		{
			get { return entityData.EducationsCollection; }
			set { entityData.EducationsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GlobalSettings objects
		///	which are related to this object through the relation FK__GlobalSet__SiteI__125EB334
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GlobalSettings> GlobalSettingsCollection
		{
			get { return entityData.GlobalSettingsCollection; }
			set { entityData.GlobalSettingsCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SiteName", "Site Name", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SiteUrl", "Site Url", 500));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MobileUrl", "Mobile Url"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MobileUrl", "Mobile Url", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SiteAdminLogoUrl", "Site Admin Logo Url", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SiteUrlAlias", "Site Url Alias", 500));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Sites"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SiteID", "SiteName", "SiteURL", "SiteDescription", "SiteAdminLogo", "LastModified", "LastModifiedBy", "Live", "MobileEnabled", "MobileUrl", "SiteAdminLogoUrl", "SiteURLAlias"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SitesEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Sites) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Sites>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Sites);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Sites Entity 
		///</summary>
		protected virtual Sites Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Sites copy = new Sites();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SiteId = this.SiteId;
				copy.SiteName = this.SiteName;
				copy.SiteUrl = this.SiteUrl;
				copy.SiteDescription = this.SiteDescription;
				copy.SiteAdminLogo = this.SiteAdminLogo;
				copy.LastModified = this.LastModified;
				copy.LastModifiedBy = this.LastModifiedBy;
				copy.Live = this.Live;
				copy.MobileEnabled = this.MobileEnabled;
				copy.MobileUrl = this.MobileUrl;
				copy.SiteAdminLogoUrl = this.SiteAdminLogoUrl;
				copy.SiteUrlAlias = this.SiteUrlAlias;
			
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				copy.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				copy.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
		
			//deep copy nested objects
			copy.AvailableStatusCollection = (TList<AvailableStatus>) MakeCopyOf(this.AvailableStatusCollection, existingCopies); 
			copy.JobApplicationCollection = (TList<JobApplication>) MakeCopyOf(this.JobApplicationCollection, existingCopies); 
			copy.JobViewsCollection = (TList<JobViews>) MakeCopyOf(this.JobViewsCollection, existingCopies); 
			copy.IntegrationMappingsCollection = (TList<IntegrationMappings>) MakeCopyOf(this.IntegrationMappingsCollection, existingCopies); 
			copy.SiteResourcesCollectionGetBySiteId = (TList<SiteResources>) MakeCopyOf(this.SiteResourcesCollectionGetBySiteId, existingCopies); 
			copy.EmailTemplatesCollection = (TList<EmailTemplates>) MakeCopyOf(this.EmailTemplatesCollection, existingCopies); 
			copy.MembersCollection = (TList<Members>) MakeCopyOf(this.MembersCollection, existingCopies); 
			copy.JobsCollection = (TList<Jobs>) MakeCopyOf(this.JobsCollection, existingCopies); 
			copy.DynamicPageFilesCollection = (TList<DynamicPageFiles>) MakeCopyOf(this.DynamicPageFilesCollection, existingCopies); 
			copy.SiteMappingsCollectionGetByMasterSiteId = (TList<SiteMappings>) MakeCopyOf(this.SiteMappingsCollectionGetByMasterSiteId, existingCopies); 
			copy.SiteWebPartsCollectionGetBySiteId = (TList<SiteWebParts>) MakeCopyOf(this.SiteWebPartsCollectionGetBySiteId, existingCopies); 
			copy.JobCustomXmlCollection = (TList<JobCustomXml>) MakeCopyOf(this.JobCustomXmlCollection, existingCopies); 
			copy.DynamicPageWebPartTemplatesCollection = (TList<DynamicPageWebPartTemplates>) MakeCopyOf(this.DynamicPageWebPartTemplatesCollection, existingCopies); 
			copy.DynamicPagesCollection = (TList<DynamicPages>) MakeCopyOf(this.DynamicPagesCollection, existingCopies); 
			copy.NewsCategoriesCollection = (TList<NewsCategories>) MakeCopyOf(this.NewsCategoriesCollection, existingCopies); 
			copy.SiteAdvertiserFilterCollection = (TList<SiteAdvertiserFilter>) MakeCopyOf(this.SiteAdvertiserFilterCollection, existingCopies); 
			copy.MemberMembershipsCollection = (TList<MemberMemberships>) MakeCopyOf(this.MemberMembershipsCollection, existingCopies); 
			copy.JobTemplatesCollection = (TList<JobTemplates>) MakeCopyOf(this.JobTemplatesCollection, existingCopies); 
			copy.SiteCountriesCollection = (TList<SiteCountries>) MakeCopyOf(this.SiteCountriesCollection, existingCopies); 
			copy.WebServiceLogCollection = (TList<WebServiceLog>) MakeCopyOf(this.WebServiceLogCollection, existingCopies); 
			copy.SiteLocationCollection = (TList<SiteLocation>) MakeCopyOf(this.SiteLocationCollection, existingCopies); 
			copy.SiteProfessionCollection = (TList<SiteProfession>) MakeCopyOf(this.SiteProfessionCollection, existingCopies); 
			copy.MemberWizardCollection = (TList<MemberWizard>) MakeCopyOf(this.MemberWizardCollection, existingCopies); 
			copy.IndustryCollection = (TList<Industry>) MakeCopyOf(this.IndustryCollection, existingCopies); 
			copy.ConsultantsCollection = (TList<Consultants>) MakeCopyOf(this.ConsultantsCollection, existingCopies); 
			copy.FilesCollection = (TList<Files>) MakeCopyOf(this.FilesCollection, existingCopies); 
			copy.SiteResourcesXmlCollection = (TList<SiteResourcesXml>) MakeCopyOf(this.SiteResourcesXmlCollection, existingCopies); 
			copy.AdvertisersCollection = (TList<Advertisers>) MakeCopyOf(this.AdvertisersCollection, existingCopies); 
			copy.MemberStatusCollection = (TList<MemberStatus>) MakeCopyOf(this.MemberStatusCollection, existingCopies); 
			copy.WidgetContainersCollection = (TList<WidgetContainers>) MakeCopyOf(this.WidgetContainersCollection, existingCopies); 
			copy.FoldersCollection = (TList<Folders>) MakeCopyOf(this.FoldersCollection, existingCopies); 
			copy.SiteCustomMappingCollection = (TList<SiteCustomMapping>) MakeCopyOf(this.SiteCustomMappingCollection, existingCopies); 
			copy.ProfessionCollection = (TList<Profession>) MakeCopyOf(this.ProfessionCollection, existingCopies); 
			copy.AdminUsersCollection = (TList<AdminUsers>) MakeCopyOf(this.AdminUsersCollection, existingCopies); 
			copy.JobAlertsCollection = (TList<JobAlerts>) MakeCopyOf(this.JobAlertsCollection, existingCopies); 
			copy.JobApplicationTypeCollection = (TList<JobApplicationType>) MakeCopyOf(this.JobApplicationTypeCollection, existingCopies); 
			copy.CustomWidgetCollection = (TList<CustomWidget>) MakeCopyOf(this.CustomWidgetCollection, existingCopies); 
			copy.SiteMappingsCollectionGetBySiteId = (TList<SiteMappings>) MakeCopyOf(this.SiteMappingsCollectionGetBySiteId, existingCopies); 
			copy.SiteWebPartsCollectionGetBySiteId = (TList<SiteWebParts>) MakeCopyOf(this.SiteWebPartsCollectionGetBySiteId, existingCopies); 
			copy.SiteRolesCollection = (TList<SiteRoles>) MakeCopyOf(this.SiteRolesCollection, existingCopies); 
			copy.CustomPaymentCollection = (TList<CustomPayment>) MakeCopyOf(this.CustomPaymentCollection, existingCopies); 
			copy.IntegrationsCollection = (TList<Integrations>) MakeCopyOf(this.IntegrationsCollection, existingCopies); 
			copy.EnquiriesCollection = (TList<Enquiries>) MakeCopyOf(this.EnquiriesCollection, existingCopies); 
			copy.SiteAreaCollection = (TList<SiteArea>) MakeCopyOf(this.SiteAreaCollection, existingCopies); 
			copy.SiteResourcesCollectionGetBySiteId = (TList<SiteResources>) MakeCopyOf(this.SiteResourcesCollectionGetBySiteId, existingCopies); 
			copy.NewsCollection = (TList<News>) MakeCopyOf(this.NewsCollection, existingCopies); 
			copy.SiteCurrenciesCollection = (TList<SiteCurrencies>) MakeCopyOf(this.SiteCurrenciesCollection, existingCopies); 
			copy.SiteWorkTypeCollection = (TList<SiteWorkType>) MakeCopyOf(this.SiteWorkTypeCollection, existingCopies); 
			copy.DynamicContentCollection = (TList<DynamicContent>) MakeCopyOf(this.DynamicContentCollection, existingCopies); 
			copy.JobItemsTypeCollection = (TList<JobItemsType>) MakeCopyOf(this.JobItemsTypeCollection, existingCopies); 
			copy.SiteSalaryTypeCollection = (TList<SiteSalaryType>) MakeCopyOf(this.SiteSalaryTypeCollection, existingCopies); 
			copy.ScreeningQuestionsTemplatesCollection = (TList<ScreeningQuestionsTemplates>) MakeCopyOf(this.ScreeningQuestionsTemplatesCollection, existingCopies); 
			copy.JobsArchiveCollection = (TList<JobsArchive>) MakeCopyOf(this.JobsArchiveCollection, existingCopies); 
			copy.SiteLanguagesCollection = (TList<SiteLanguages>) MakeCopyOf(this.SiteLanguagesCollection, existingCopies); 
			copy.CustomWidgetCssSelectorCollection = (TList<CustomWidgetCssSelector>) MakeCopyOf(this.CustomWidgetCssSelectorCollection, existingCopies); 
			copy.EducationsCollection = (TList<Educations>) MakeCopyOf(this.EducationsCollection, existingCopies); 
			copy.GlobalSettingsCollection = (TList<GlobalSettings>) MakeCopyOf(this.GlobalSettingsCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Sites Entity 
		///</summary>
		public virtual Sites Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Sites Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Sites DeepCopy()
		{
			return EntityHelper.Clone<Sites>(this as Sites);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SitesEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SitesEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SitesEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SitesColumn column)
		{
			switch(column)
			{
					case SitesColumn.SiteId:
					return entityData.SiteId != _originalData.SiteId;
					case SitesColumn.SiteName:
					return entityData.SiteName != _originalData.SiteName;
					case SitesColumn.SiteUrl:
					return entityData.SiteUrl != _originalData.SiteUrl;
					case SitesColumn.SiteDescription:
					return entityData.SiteDescription != _originalData.SiteDescription;
					case SitesColumn.SiteAdminLogo:
					return entityData.SiteAdminLogo != _originalData.SiteAdminLogo;
					case SitesColumn.LastModified:
					return entityData.LastModified != _originalData.LastModified;
					case SitesColumn.LastModifiedBy:
					return entityData.LastModifiedBy != _originalData.LastModifiedBy;
					case SitesColumn.Live:
					return entityData.Live != _originalData.Live;
					case SitesColumn.MobileEnabled:
					return entityData.MobileEnabled != _originalData.MobileEnabled;
					case SitesColumn.MobileUrl:
					return entityData.MobileUrl != _originalData.MobileUrl;
					case SitesColumn.SiteAdminLogoUrl:
					return entityData.SiteAdminLogoUrl != _originalData.SiteAdminLogoUrl;
					case SitesColumn.SiteUrlAlias:
					return entityData.SiteUrlAlias != _originalData.SiteUrlAlias;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SitesColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SiteId != _originalData.SiteId;
			result = result || entityData.SiteName != _originalData.SiteName;
			result = result || entityData.SiteUrl != _originalData.SiteUrl;
			result = result || entityData.SiteDescription != _originalData.SiteDescription;
			result = result || entityData.SiteAdminLogo != _originalData.SiteAdminLogo;
			result = result || entityData.LastModified != _originalData.LastModified;
			result = result || entityData.LastModifiedBy != _originalData.LastModifiedBy;
			result = result || entityData.Live != _originalData.Live;
			result = result || entityData.MobileEnabled != _originalData.MobileEnabled;
			result = result || entityData.MobileUrl != _originalData.MobileUrl;
			result = result || entityData.SiteAdminLogoUrl != _originalData.SiteAdminLogoUrl;
			result = result || entityData.SiteUrlAlias != _originalData.SiteUrlAlias;
			return result;
		}	
		
		///<summary>
		///  Returns a Sites Entity with the original data.
		///</summary>
		public Sites GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSites(
				_originalData.SiteName,
				_originalData.SiteUrl,
				_originalData.SiteDescription,
				_originalData.SiteAdminLogo,
				_originalData.LastModified,
				_originalData.LastModifiedBy,
				_originalData.Live,
				_originalData.MobileEnabled,
				_originalData.MobileUrl,
				_originalData.SiteAdminLogoUrl,
				_originalData.SiteUrlAlias
				);
				
			return (Sites)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SitesBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SitesBase)
				return ValueEquals(this, (SitesBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SitesBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SiteId.GetHashCode() ^ 
					((this.SiteName == null) ? string.Empty : this.SiteName.ToString()).GetHashCode() ^ 
					((this.SiteUrl == null) ? string.Empty : this.SiteUrl.ToString()).GetHashCode() ^ 
					((this.SiteDescription == null) ? string.Empty : this.SiteDescription.ToString()).GetHashCode() ^ 
					((this.SiteAdminLogo == null) ? string.Empty : this.SiteAdminLogo.ToString()).GetHashCode() ^ 
					this.LastModified.GetHashCode() ^ 
					((this.LastModifiedBy == null) ? string.Empty : this.LastModifiedBy.ToString()).GetHashCode() ^ 
					((this.Live == null) ? string.Empty : this.Live.ToString()).GetHashCode() ^ 
					this.MobileEnabled.GetHashCode() ^ 
					this.MobileUrl.GetHashCode() ^ 
					((this.SiteAdminLogoUrl == null) ? string.Empty : this.SiteAdminLogoUrl.ToString()).GetHashCode() ^ 
					((this.SiteUrlAlias == null) ? string.Empty : this.SiteUrlAlias.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SitesBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SitesBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SitesBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SitesBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SitesBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SitesBase Object1, SitesBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SiteId != Object2.SiteId)
				equal = false;
			if ( Object1.SiteName != null && Object2.SiteName != null )
			{
				if (Object1.SiteName != Object2.SiteName)
					equal = false;
			}
			else if (Object1.SiteName == null ^ Object2.SiteName == null )
			{
				equal = false;
			}
			if ( Object1.SiteUrl != null && Object2.SiteUrl != null )
			{
				if (Object1.SiteUrl != Object2.SiteUrl)
					equal = false;
			}
			else if (Object1.SiteUrl == null ^ Object2.SiteUrl == null )
			{
				equal = false;
			}
			if ( Object1.SiteDescription != null && Object2.SiteDescription != null )
			{
				if (Object1.SiteDescription != Object2.SiteDescription)
					equal = false;
			}
			else if (Object1.SiteDescription == null ^ Object2.SiteDescription == null )
			{
				equal = false;
			}
			if ( Object1.SiteAdminLogo != null && Object2.SiteAdminLogo != null )
			{
				if (Object1.SiteAdminLogo != Object2.SiteAdminLogo)
					equal = false;
			}
			else if (Object1.SiteAdminLogo == null ^ Object2.SiteAdminLogo == null )
			{
				equal = false;
			}
			if (Object1.LastModified != Object2.LastModified)
				equal = false;
			if ( Object1.LastModifiedBy != null && Object2.LastModifiedBy != null )
			{
				if (Object1.LastModifiedBy != Object2.LastModifiedBy)
					equal = false;
			}
			else if (Object1.LastModifiedBy == null ^ Object2.LastModifiedBy == null )
			{
				equal = false;
			}
			if ( Object1.Live != null && Object2.Live != null )
			{
				if (Object1.Live != Object2.Live)
					equal = false;
			}
			else if (Object1.Live == null ^ Object2.Live == null )
			{
				equal = false;
			}
			if (Object1.MobileEnabled != Object2.MobileEnabled)
				equal = false;
			if (Object1.MobileUrl != Object2.MobileUrl)
				equal = false;
			if ( Object1.SiteAdminLogoUrl != null && Object2.SiteAdminLogoUrl != null )
			{
				if (Object1.SiteAdminLogoUrl != Object2.SiteAdminLogoUrl)
					equal = false;
			}
			else if (Object1.SiteAdminLogoUrl == null ^ Object2.SiteAdminLogoUrl == null )
			{
				equal = false;
			}
			if ( Object1.SiteUrlAlias != null && Object2.SiteUrlAlias != null )
			{
				if (Object1.SiteUrlAlias != Object2.SiteUrlAlias)
					equal = false;
			}
			else if (Object1.SiteUrlAlias == null ^ Object2.SiteUrlAlias == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SitesBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SitesComparer GetComparer()
        {
            return new SitesComparer();
        }
        */

        // Comparer delegates back to Sites
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Sites rhs, SitesColumn which)
        {
            switch (which)
            {
            	
            	
            	case SitesColumn.SiteId:
            		return this.SiteId.CompareTo(rhs.SiteId);
            		
            		                 
            	
            	
            	case SitesColumn.SiteName:
            		return this.SiteName.CompareTo(rhs.SiteName);
            		
            		                 
            	
            	
            	case SitesColumn.SiteUrl:
            		return this.SiteUrl.CompareTo(rhs.SiteUrl);
            		
            		                 
            	
            	
            	case SitesColumn.SiteDescription:
            		return this.SiteDescription.CompareTo(rhs.SiteDescription);
            		
            		                 
            	
            		                 
            	
            	
            	case SitesColumn.LastModified:
            		return this.LastModified.CompareTo(rhs.LastModified);
            		
            		                 
            	
            	
            	case SitesColumn.LastModifiedBy:
            		return this.LastModifiedBy.Value.CompareTo(rhs.LastModifiedBy.Value);
            		
            		                 
            	
            	
            	case SitesColumn.Live:
            		return this.Live.Value.CompareTo(rhs.Live.Value);
            		
            		                 
            	
            	
            	case SitesColumn.MobileEnabled:
            		return this.MobileEnabled.CompareTo(rhs.MobileEnabled);
            		
            		                 
            	
            	
            	case SitesColumn.MobileUrl:
            		return this.MobileUrl.CompareTo(rhs.MobileUrl);
            		
            		                 
            	
            	
            	case SitesColumn.SiteAdminLogoUrl:
            		return this.SiteAdminLogoUrl.CompareTo(rhs.SiteAdminLogoUrl);
            		
            		                 
            	
            	
            	case SitesColumn.SiteUrlAlias:
            		return this.SiteUrlAlias.CompareTo(rhs.SiteUrlAlias);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SitesKey> Members
		
		// member variable for the EntityId property
		private SitesKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SitesKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SitesKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Sites")
					.Append("|").Append( this.SiteId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- SiteId: {0}{12}- SiteName: {1}{12}- SiteUrl: {2}{12}- SiteDescription: {3}{12}- SiteAdminLogo: {4}{12}- LastModified: {5}{12}- LastModifiedBy: {6}{12}- Live: {7}{12}- MobileEnabled: {8}{12}- MobileUrl: {9}{12}- SiteAdminLogoUrl: {10}{12}- SiteUrlAlias: {11}{12}{14}", 
				this.SiteId,
				(this.SiteName == null) ? string.Empty : this.SiteName.ToString(),
				(this.SiteUrl == null) ? string.Empty : this.SiteUrl.ToString(),
				(this.SiteDescription == null) ? string.Empty : this.SiteDescription.ToString(),
				(this.SiteAdminLogo == null) ? string.Empty : this.SiteAdminLogo.ToString(),
				this.LastModified,
				(this.LastModifiedBy == null) ? string.Empty : this.LastModifiedBy.ToString(),
				(this.Live == null) ? string.Empty : this.Live.ToString(),
				this.MobileEnabled,
				this.MobileUrl,
				(this.SiteAdminLogoUrl == null) ? string.Empty : this.SiteAdminLogoUrl.ToString(),
				(this.SiteUrlAlias == null) ? string.Empty : this.SiteUrlAlias.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Sites' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SitesEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SiteID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Sites"</remarks>
		public System.Int32 SiteId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SiteName : 
		/// </summary>
		public System.String		  SiteName = null;
		
		/// <summary>
		/// SiteURL : 
		/// </summary>
		public System.String		  SiteUrl = null;
		
		/// <summary>
		/// SiteDescription : 
		/// </summary>
		public System.String		  SiteDescription = null;
		
		/// <summary>
		/// SiteAdminLogo : 
		/// </summary>
		public System.Byte[]		  SiteAdminLogo = null;
		
		/// <summary>
		/// LastModified : 
		/// </summary>
		public System.DateTime		  LastModified = DateTime.MinValue;
		
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		public System.Int32?		  LastModifiedBy = null;
		
		/// <summary>
		/// Live : 
		/// </summary>
		public System.Boolean?		  Live = null;
		
		/// <summary>
		/// MobileEnabled : 
		/// </summary>
		public System.Boolean		  MobileEnabled = false;
		
		/// <summary>
		/// MobileUrl : 
		/// </summary>
		public System.String		  MobileUrl = string.Empty;
		
		/// <summary>
		/// SiteAdminLogoUrl : 
		/// </summary>
		public System.String		  SiteAdminLogoUrl = null;
		
		/// <summary>
		/// SiteURLAlias : 
		/// </summary>
		public System.String		  SiteUrlAlias = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdminUsers _lastModifiedBySource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdminUsers"/>.
		/// </summary>
		/// <value>The source AdminUsers for LastModifiedBy.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdminUsers LastModifiedBySource
      	{
            get { return this._lastModifiedBySource; }
            set { this._lastModifiedBySource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AvailableStatusCollection
		
		private TList<AvailableStatus> _availableStatusSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _availableStatusSiteId
		/// </summary>
		
		public TList<AvailableStatus> AvailableStatusCollection
		{
			get
			{
				if (_availableStatusSiteId == null)
				{
				_availableStatusSiteId = new TList<AvailableStatus>();
				}
	
				return _availableStatusSiteId;
			}
			set { _availableStatusSiteId = value; }
		}
		
		#endregion

		#region JobApplicationCollection
		
		private TList<JobApplication> _jobApplicationSiteIdReferral;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobApplicationSiteIdReferral
		/// </summary>
		
		public TList<JobApplication> JobApplicationCollection
		{
			get
			{
				if (_jobApplicationSiteIdReferral == null)
				{
				_jobApplicationSiteIdReferral = new TList<JobApplication>();
				}
	
				return _jobApplicationSiteIdReferral;
			}
			set { _jobApplicationSiteIdReferral = value; }
		}
		
		#endregion

		#region JobViewsCollection
		
		private TList<JobViews> _jobViewsSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobViewsSiteId
		/// </summary>
		
		public TList<JobViews> JobViewsCollection
		{
			get
			{
				if (_jobViewsSiteId == null)
				{
				_jobViewsSiteId = new TList<JobViews>();
				}
	
				return _jobViewsSiteId;
			}
			set { _jobViewsSiteId = value; }
		}
		
		#endregion

		#region IntegrationMappingsCollection
		
		private TList<IntegrationMappings> _integrationMappingsSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _integrationMappingsSiteId
		/// </summary>
		
		public TList<IntegrationMappings> IntegrationMappingsCollection
		{
			get
			{
				if (_integrationMappingsSiteId == null)
				{
				_integrationMappingsSiteId = new TList<IntegrationMappings>();
				}
	
				return _integrationMappingsSiteId;
			}
			set { _integrationMappingsSiteId = value; }
		}
		
		#endregion

		#region SiteResourcesCollectionGetBySiteId
		
		private TList<SiteResources> _siteResourcesSiteIdGetBySiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteResourcesSiteIdGetBySiteId
		/// </summary>
		
		public TList<SiteResources> SiteResourcesCollectionGetBySiteId
		{
			get
			{
				if (_siteResourcesSiteIdGetBySiteId == null)
				{
				_siteResourcesSiteIdGetBySiteId = new TList<SiteResources>();
				}
	
				return _siteResourcesSiteIdGetBySiteId;
			}
			set { _siteResourcesSiteIdGetBySiteId = value; }
		}
		
		#endregion

		#region EmailTemplatesCollection
		
		private TList<EmailTemplates> _emailTemplatesSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _emailTemplatesSiteId
		/// </summary>
		
		public TList<EmailTemplates> EmailTemplatesCollection
		{
			get
			{
				if (_emailTemplatesSiteId == null)
				{
				_emailTemplatesSiteId = new TList<EmailTemplates>();
				}
	
				return _emailTemplatesSiteId;
			}
			set { _emailTemplatesSiteId = value; }
		}
		
		#endregion

		#region MembersCollection
		
		private TList<Members> _membersSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _membersSiteId
		/// </summary>
		
		public TList<Members> MembersCollection
		{
			get
			{
				if (_membersSiteId == null)
				{
				_membersSiteId = new TList<Members>();
				}
	
				return _membersSiteId;
			}
			set { _membersSiteId = value; }
		}
		
		#endregion

		#region JobsCollection
		
		private TList<Jobs> _jobsSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobsSiteId
		/// </summary>
		
		public TList<Jobs> JobsCollection
		{
			get
			{
				if (_jobsSiteId == null)
				{
				_jobsSiteId = new TList<Jobs>();
				}
	
				return _jobsSiteId;
			}
			set { _jobsSiteId = value; }
		}
		
		#endregion

		#region DynamicPageFilesCollection
		
		private TList<DynamicPageFiles> _dynamicPageFilesSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dynamicPageFilesSiteId
		/// </summary>
		
		public TList<DynamicPageFiles> DynamicPageFilesCollection
		{
			get
			{
				if (_dynamicPageFilesSiteId == null)
				{
				_dynamicPageFilesSiteId = new TList<DynamicPageFiles>();
				}
	
				return _dynamicPageFilesSiteId;
			}
			set { _dynamicPageFilesSiteId = value; }
		}
		
		#endregion

		#region SiteMappingsCollectionGetByMasterSiteId
		
		private TList<SiteMappings> _siteMappingsSiteIdGetByMasterSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteMappingsSiteIdGetByMasterSiteId
		/// </summary>
		
		public TList<SiteMappings> SiteMappingsCollectionGetByMasterSiteId
		{
			get
			{
				if (_siteMappingsSiteIdGetByMasterSiteId == null)
				{
				_siteMappingsSiteIdGetByMasterSiteId = new TList<SiteMappings>();
				}
	
				return _siteMappingsSiteIdGetByMasterSiteId;
			}
			set { _siteMappingsSiteIdGetByMasterSiteId = value; }
		}
		
		#endregion

		#region SiteWebPartsCollectionGetBySiteId
		
		private TList<SiteWebParts> _siteWebPartsSiteIdGetBySiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteWebPartsSiteIdGetBySiteId
		/// </summary>
		
		public TList<SiteWebParts> SiteWebPartsCollectionGetBySiteId
		{
			get
			{
				if (_siteWebPartsSiteIdGetBySiteId == null)
				{
				_siteWebPartsSiteIdGetBySiteId = new TList<SiteWebParts>();
				}
	
				return _siteWebPartsSiteIdGetBySiteId;
			}
			set { _siteWebPartsSiteIdGetBySiteId = value; }
		}
		
		#endregion

		#region JobCustomXmlCollection
		
		private TList<JobCustomXml> _jobCustomXmlSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobCustomXmlSiteId
		/// </summary>
		
		public TList<JobCustomXml> JobCustomXmlCollection
		{
			get
			{
				if (_jobCustomXmlSiteId == null)
				{
				_jobCustomXmlSiteId = new TList<JobCustomXml>();
				}
	
				return _jobCustomXmlSiteId;
			}
			set { _jobCustomXmlSiteId = value; }
		}
		
		#endregion

		#region DynamicPageWebPartTemplatesCollection
		
		private TList<DynamicPageWebPartTemplates> _dynamicPageWebPartTemplatesSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dynamicPageWebPartTemplatesSiteId
		/// </summary>
		
		public TList<DynamicPageWebPartTemplates> DynamicPageWebPartTemplatesCollection
		{
			get
			{
				if (_dynamicPageWebPartTemplatesSiteId == null)
				{
				_dynamicPageWebPartTemplatesSiteId = new TList<DynamicPageWebPartTemplates>();
				}
	
				return _dynamicPageWebPartTemplatesSiteId;
			}
			set { _dynamicPageWebPartTemplatesSiteId = value; }
		}
		
		#endregion

		#region DynamicPagesCollection
		
		private TList<DynamicPages> _dynamicPagesSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dynamicPagesSiteId
		/// </summary>
		
		public TList<DynamicPages> DynamicPagesCollection
		{
			get
			{
				if (_dynamicPagesSiteId == null)
				{
				_dynamicPagesSiteId = new TList<DynamicPages>();
				}
	
				return _dynamicPagesSiteId;
			}
			set { _dynamicPagesSiteId = value; }
		}
		
		#endregion

		#region NewsCategoriesCollection
		
		private TList<NewsCategories> _newsCategoriesSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _newsCategoriesSiteId
		/// </summary>
		
		public TList<NewsCategories> NewsCategoriesCollection
		{
			get
			{
				if (_newsCategoriesSiteId == null)
				{
				_newsCategoriesSiteId = new TList<NewsCategories>();
				}
	
				return _newsCategoriesSiteId;
			}
			set { _newsCategoriesSiteId = value; }
		}
		
		#endregion

		#region SiteAdvertiserFilterCollection
		
		private TList<SiteAdvertiserFilter> _siteAdvertiserFilterSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteAdvertiserFilterSiteId
		/// </summary>
		
		public TList<SiteAdvertiserFilter> SiteAdvertiserFilterCollection
		{
			get
			{
				if (_siteAdvertiserFilterSiteId == null)
				{
				_siteAdvertiserFilterSiteId = new TList<SiteAdvertiserFilter>();
				}
	
				return _siteAdvertiserFilterSiteId;
			}
			set { _siteAdvertiserFilterSiteId = value; }
		}
		
		#endregion

		#region MemberMembershipsCollection
		
		private TList<MemberMemberships> _memberMembershipsSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _memberMembershipsSiteId
		/// </summary>
		
		public TList<MemberMemberships> MemberMembershipsCollection
		{
			get
			{
				if (_memberMembershipsSiteId == null)
				{
				_memberMembershipsSiteId = new TList<MemberMemberships>();
				}
	
				return _memberMembershipsSiteId;
			}
			set { _memberMembershipsSiteId = value; }
		}
		
		#endregion

		#region JobTemplatesCollection
		
		private TList<JobTemplates> _jobTemplatesSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobTemplatesSiteId
		/// </summary>
		
		public TList<JobTemplates> JobTemplatesCollection
		{
			get
			{
				if (_jobTemplatesSiteId == null)
				{
				_jobTemplatesSiteId = new TList<JobTemplates>();
				}
	
				return _jobTemplatesSiteId;
			}
			set { _jobTemplatesSiteId = value; }
		}
		
		#endregion

		#region SiteCountriesCollection
		
		private TList<SiteCountries> _siteCountriesSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteCountriesSiteId
		/// </summary>
		
		public TList<SiteCountries> SiteCountriesCollection
		{
			get
			{
				if (_siteCountriesSiteId == null)
				{
				_siteCountriesSiteId = new TList<SiteCountries>();
				}
	
				return _siteCountriesSiteId;
			}
			set { _siteCountriesSiteId = value; }
		}
		
		#endregion

		#region WebServiceLogCollection
		
		private TList<WebServiceLog> _webServiceLogSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _webServiceLogSiteId
		/// </summary>
		
		public TList<WebServiceLog> WebServiceLogCollection
		{
			get
			{
				if (_webServiceLogSiteId == null)
				{
				_webServiceLogSiteId = new TList<WebServiceLog>();
				}
	
				return _webServiceLogSiteId;
			}
			set { _webServiceLogSiteId = value; }
		}
		
		#endregion

		#region SiteLocationCollection
		
		private TList<SiteLocation> _siteLocationSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteLocationSiteId
		/// </summary>
		
		public TList<SiteLocation> SiteLocationCollection
		{
			get
			{
				if (_siteLocationSiteId == null)
				{
				_siteLocationSiteId = new TList<SiteLocation>();
				}
	
				return _siteLocationSiteId;
			}
			set { _siteLocationSiteId = value; }
		}
		
		#endregion

		#region SiteProfessionCollection
		
		private TList<SiteProfession> _siteProfessionSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteProfessionSiteId
		/// </summary>
		
		public TList<SiteProfession> SiteProfessionCollection
		{
			get
			{
				if (_siteProfessionSiteId == null)
				{
				_siteProfessionSiteId = new TList<SiteProfession>();
				}
	
				return _siteProfessionSiteId;
			}
			set { _siteProfessionSiteId = value; }
		}
		
		#endregion

		#region MemberWizardCollection
		
		private TList<MemberWizard> _memberWizardSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _memberWizardSiteId
		/// </summary>
		
		public TList<MemberWizard> MemberWizardCollection
		{
			get
			{
				if (_memberWizardSiteId == null)
				{
				_memberWizardSiteId = new TList<MemberWizard>();
				}
	
				return _memberWizardSiteId;
			}
			set { _memberWizardSiteId = value; }
		}
		
		#endregion

		#region IndustryCollection
		
		private TList<Industry> _industrySiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _industrySiteId
		/// </summary>
		
		public TList<Industry> IndustryCollection
		{
			get
			{
				if (_industrySiteId == null)
				{
				_industrySiteId = new TList<Industry>();
				}
	
				return _industrySiteId;
			}
			set { _industrySiteId = value; }
		}
		
		#endregion

		#region ConsultantsCollection
		
		private TList<Consultants> _consultantsSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _consultantsSiteId
		/// </summary>
		
		public TList<Consultants> ConsultantsCollection
		{
			get
			{
				if (_consultantsSiteId == null)
				{
				_consultantsSiteId = new TList<Consultants>();
				}
	
				return _consultantsSiteId;
			}
			set { _consultantsSiteId = value; }
		}
		
		#endregion

		#region FilesCollection
		
		private TList<Files> _filesSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _filesSiteId
		/// </summary>
		
		public TList<Files> FilesCollection
		{
			get
			{
				if (_filesSiteId == null)
				{
				_filesSiteId = new TList<Files>();
				}
	
				return _filesSiteId;
			}
			set { _filesSiteId = value; }
		}
		
		#endregion

		#region SiteResourcesXmlCollection
		
		private TList<SiteResourcesXml> _siteResourcesXmlSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteResourcesXmlSiteId
		/// </summary>
		
		public TList<SiteResourcesXml> SiteResourcesXmlCollection
		{
			get
			{
				if (_siteResourcesXmlSiteId == null)
				{
				_siteResourcesXmlSiteId = new TList<SiteResourcesXml>();
				}
	
				return _siteResourcesXmlSiteId;
			}
			set { _siteResourcesXmlSiteId = value; }
		}
		
		#endregion

		#region AdvertisersCollection
		
		private TList<Advertisers> _advertisersSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _advertisersSiteId
		/// </summary>
		
		public TList<Advertisers> AdvertisersCollection
		{
			get
			{
				if (_advertisersSiteId == null)
				{
				_advertisersSiteId = new TList<Advertisers>();
				}
	
				return _advertisersSiteId;
			}
			set { _advertisersSiteId = value; }
		}
		
		#endregion

		#region MemberStatusCollection
		
		private TList<MemberStatus> _memberStatusSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _memberStatusSiteId
		/// </summary>
		
		public TList<MemberStatus> MemberStatusCollection
		{
			get
			{
				if (_memberStatusSiteId == null)
				{
				_memberStatusSiteId = new TList<MemberStatus>();
				}
	
				return _memberStatusSiteId;
			}
			set { _memberStatusSiteId = value; }
		}
		
		#endregion

		#region WidgetContainersCollection
		
		private TList<WidgetContainers> _widgetContainersSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _widgetContainersSiteId
		/// </summary>
		
		public TList<WidgetContainers> WidgetContainersCollection
		{
			get
			{
				if (_widgetContainersSiteId == null)
				{
				_widgetContainersSiteId = new TList<WidgetContainers>();
				}
	
				return _widgetContainersSiteId;
			}
			set { _widgetContainersSiteId = value; }
		}
		
		#endregion

		#region FoldersCollection
		
		private TList<Folders> _foldersSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _foldersSiteId
		/// </summary>
		
		public TList<Folders> FoldersCollection
		{
			get
			{
				if (_foldersSiteId == null)
				{
				_foldersSiteId = new TList<Folders>();
				}
	
				return _foldersSiteId;
			}
			set { _foldersSiteId = value; }
		}
		
		#endregion

		#region SiteCustomMappingCollection
		
		private TList<SiteCustomMapping> _siteCustomMappingSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteCustomMappingSiteId
		/// </summary>
		
		public TList<SiteCustomMapping> SiteCustomMappingCollection
		{
			get
			{
				if (_siteCustomMappingSiteId == null)
				{
				_siteCustomMappingSiteId = new TList<SiteCustomMapping>();
				}
	
				return _siteCustomMappingSiteId;
			}
			set { _siteCustomMappingSiteId = value; }
		}
		
		#endregion

		#region ProfessionCollection
		
		private TList<Profession> _professionReferredSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _professionReferredSiteId
		/// </summary>
		
		public TList<Profession> ProfessionCollection
		{
			get
			{
				if (_professionReferredSiteId == null)
				{
				_professionReferredSiteId = new TList<Profession>();
				}
	
				return _professionReferredSiteId;
			}
			set { _professionReferredSiteId = value; }
		}
		
		#endregion

		#region AdminUsersCollection
		
		private TList<AdminUsers> _adminUsersSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _adminUsersSiteId
		/// </summary>
		
		public TList<AdminUsers> AdminUsersCollection
		{
			get
			{
				if (_adminUsersSiteId == null)
				{
				_adminUsersSiteId = new TList<AdminUsers>();
				}
	
				return _adminUsersSiteId;
			}
			set { _adminUsersSiteId = value; }
		}
		
		#endregion

		#region JobAlertsCollection
		
		private TList<JobAlerts> _jobAlertsSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobAlertsSiteId
		/// </summary>
		
		public TList<JobAlerts> JobAlertsCollection
		{
			get
			{
				if (_jobAlertsSiteId == null)
				{
				_jobAlertsSiteId = new TList<JobAlerts>();
				}
	
				return _jobAlertsSiteId;
			}
			set { _jobAlertsSiteId = value; }
		}
		
		#endregion

		#region JobApplicationTypeCollection
		
		private TList<JobApplicationType> _jobApplicationTypeSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobApplicationTypeSiteId
		/// </summary>
		
		public TList<JobApplicationType> JobApplicationTypeCollection
		{
			get
			{
				if (_jobApplicationTypeSiteId == null)
				{
				_jobApplicationTypeSiteId = new TList<JobApplicationType>();
				}
	
				return _jobApplicationTypeSiteId;
			}
			set { _jobApplicationTypeSiteId = value; }
		}
		
		#endregion

		#region CustomWidgetCollection
		
		private TList<CustomWidget> _customWidgetSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customWidgetSiteId
		/// </summary>
		
		public TList<CustomWidget> CustomWidgetCollection
		{
			get
			{
				if (_customWidgetSiteId == null)
				{
				_customWidgetSiteId = new TList<CustomWidget>();
				}
	
				return _customWidgetSiteId;
			}
			set { _customWidgetSiteId = value; }
		}
		
		#endregion

		#region SiteMappingsCollectionGetBySiteId
		
		private TList<SiteMappings> _siteMappingsSiteIdGetBySiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteMappingsSiteIdGetBySiteId
		/// </summary>
		
		public TList<SiteMappings> SiteMappingsCollectionGetBySiteId
		{
			get
			{
				if (_siteMappingsSiteIdGetBySiteId == null)
				{
				_siteMappingsSiteIdGetBySiteId = new TList<SiteMappings>();
				}
	
				return _siteMappingsSiteIdGetBySiteId;
			}
			set { _siteMappingsSiteIdGetBySiteId = value; }
		}
		
		#endregion

		#region SiteRolesCollection
		
		private TList<SiteRoles> _siteRolesSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteRolesSiteId
		/// </summary>
		
		public TList<SiteRoles> SiteRolesCollection
		{
			get
			{
				if (_siteRolesSiteId == null)
				{
				_siteRolesSiteId = new TList<SiteRoles>();
				}
	
				return _siteRolesSiteId;
			}
			set { _siteRolesSiteId = value; }
		}
		
		#endregion

		#region CustomPaymentCollection
		
		private TList<CustomPayment> _customPaymentSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customPaymentSiteId
		/// </summary>
		
		public TList<CustomPayment> CustomPaymentCollection
		{
			get
			{
				if (_customPaymentSiteId == null)
				{
				_customPaymentSiteId = new TList<CustomPayment>();
				}
	
				return _customPaymentSiteId;
			}
			set { _customPaymentSiteId = value; }
		}
		
		#endregion

		#region IntegrationsCollection
		
		private TList<Integrations> _integrationsSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _integrationsSiteId
		/// </summary>
		
		public TList<Integrations> IntegrationsCollection
		{
			get
			{
				if (_integrationsSiteId == null)
				{
				_integrationsSiteId = new TList<Integrations>();
				}
	
				return _integrationsSiteId;
			}
			set { _integrationsSiteId = value; }
		}
		
		#endregion

		#region EnquiriesCollection
		
		private TList<Enquiries> _enquiriesSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _enquiriesSiteId
		/// </summary>
		
		public TList<Enquiries> EnquiriesCollection
		{
			get
			{
				if (_enquiriesSiteId == null)
				{
				_enquiriesSiteId = new TList<Enquiries>();
				}
	
				return _enquiriesSiteId;
			}
			set { _enquiriesSiteId = value; }
		}
		
		#endregion

		#region SiteAreaCollection
		
		private TList<SiteArea> _siteAreaSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteAreaSiteId
		/// </summary>
		
		public TList<SiteArea> SiteAreaCollection
		{
			get
			{
				if (_siteAreaSiteId == null)
				{
				_siteAreaSiteId = new TList<SiteArea>();
				}
	
				return _siteAreaSiteId;
			}
			set { _siteAreaSiteId = value; }
		}
		
		#endregion

		#region NewsCollection
		
		private TList<News> _newsSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _newsSiteId
		/// </summary>
		
		public TList<News> NewsCollection
		{
			get
			{
				if (_newsSiteId == null)
				{
				_newsSiteId = new TList<News>();
				}
	
				return _newsSiteId;
			}
			set { _newsSiteId = value; }
		}
		
		#endregion

		#region SiteCurrenciesCollection
		
		private TList<SiteCurrencies> _siteCurrenciesSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteCurrenciesSiteId
		/// </summary>
		
		public TList<SiteCurrencies> SiteCurrenciesCollection
		{
			get
			{
				if (_siteCurrenciesSiteId == null)
				{
				_siteCurrenciesSiteId = new TList<SiteCurrencies>();
				}
	
				return _siteCurrenciesSiteId;
			}
			set { _siteCurrenciesSiteId = value; }
		}
		
		#endregion

		#region SiteWorkTypeCollection
		
		private TList<SiteWorkType> _siteWorkTypeSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteWorkTypeSiteId
		/// </summary>
		
		public TList<SiteWorkType> SiteWorkTypeCollection
		{
			get
			{
				if (_siteWorkTypeSiteId == null)
				{
				_siteWorkTypeSiteId = new TList<SiteWorkType>();
				}
	
				return _siteWorkTypeSiteId;
			}
			set { _siteWorkTypeSiteId = value; }
		}
		
		#endregion

		#region DynamicContentCollection
		
		private TList<DynamicContent> _dynamicContentSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dynamicContentSiteId
		/// </summary>
		
		public TList<DynamicContent> DynamicContentCollection
		{
			get
			{
				if (_dynamicContentSiteId == null)
				{
				_dynamicContentSiteId = new TList<DynamicContent>();
				}
	
				return _dynamicContentSiteId;
			}
			set { _dynamicContentSiteId = value; }
		}
		
		#endregion

		#region JobItemsTypeCollection
		
		private TList<JobItemsType> _jobItemsTypeSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobItemsTypeSiteId
		/// </summary>
		
		public TList<JobItemsType> JobItemsTypeCollection
		{
			get
			{
				if (_jobItemsTypeSiteId == null)
				{
				_jobItemsTypeSiteId = new TList<JobItemsType>();
				}
	
				return _jobItemsTypeSiteId;
			}
			set { _jobItemsTypeSiteId = value; }
		}
		
		#endregion

		#region SiteSalaryTypeCollection
		
		private TList<SiteSalaryType> _siteSalaryTypeSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteSalaryTypeSiteId
		/// </summary>
		
		public TList<SiteSalaryType> SiteSalaryTypeCollection
		{
			get
			{
				if (_siteSalaryTypeSiteId == null)
				{
				_siteSalaryTypeSiteId = new TList<SiteSalaryType>();
				}
	
				return _siteSalaryTypeSiteId;
			}
			set { _siteSalaryTypeSiteId = value; }
		}
		
		#endregion

		#region ScreeningQuestionsTemplatesCollection
		
		private TList<ScreeningQuestionsTemplates> _screeningQuestionsTemplatesSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _screeningQuestionsTemplatesSiteId
		/// </summary>
		
		public TList<ScreeningQuestionsTemplates> ScreeningQuestionsTemplatesCollection
		{
			get
			{
				if (_screeningQuestionsTemplatesSiteId == null)
				{
				_screeningQuestionsTemplatesSiteId = new TList<ScreeningQuestionsTemplates>();
				}
	
				return _screeningQuestionsTemplatesSiteId;
			}
			set { _screeningQuestionsTemplatesSiteId = value; }
		}
		
		#endregion

		#region JobsArchiveCollection
		
		private TList<JobsArchive> _jobsArchiveSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _jobsArchiveSiteId
		/// </summary>
		
		public TList<JobsArchive> JobsArchiveCollection
		{
			get
			{
				if (_jobsArchiveSiteId == null)
				{
				_jobsArchiveSiteId = new TList<JobsArchive>();
				}
	
				return _jobsArchiveSiteId;
			}
			set { _jobsArchiveSiteId = value; }
		}
		
		#endregion

		#region SiteLanguagesCollection
		
		private TList<SiteLanguages> _siteLanguagesSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _siteLanguagesSiteId
		/// </summary>
		
		public TList<SiteLanguages> SiteLanguagesCollection
		{
			get
			{
				if (_siteLanguagesSiteId == null)
				{
				_siteLanguagesSiteId = new TList<SiteLanguages>();
				}
	
				return _siteLanguagesSiteId;
			}
			set { _siteLanguagesSiteId = value; }
		}
		
		#endregion

		#region CustomWidgetCssSelectorCollection
		
		private TList<CustomWidgetCssSelector> _customWidgetCssSelectorSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customWidgetCssSelectorSiteId
		/// </summary>
		
		public TList<CustomWidgetCssSelector> CustomWidgetCssSelectorCollection
		{
			get
			{
				if (_customWidgetCssSelectorSiteId == null)
				{
				_customWidgetCssSelectorSiteId = new TList<CustomWidgetCssSelector>();
				}
	
				return _customWidgetCssSelectorSiteId;
			}
			set { _customWidgetCssSelectorSiteId = value; }
		}
		
		#endregion

		#region EducationsCollection
		
		private TList<Educations> _educationsSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _educationsSiteId
		/// </summary>
		
		public TList<Educations> EducationsCollection
		{
			get
			{
				if (_educationsSiteId == null)
				{
				_educationsSiteId = new TList<Educations>();
				}
	
				return _educationsSiteId;
			}
			set { _educationsSiteId = value; }
		}
		
		#endregion

		#region GlobalSettingsCollection
		
		private TList<GlobalSettings> _globalSettingsSiteId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _globalSettingsSiteId
		/// </summary>
		
		public TList<GlobalSettings> GlobalSettingsCollection
		{
			get
			{
				if (_globalSettingsSiteId == null)
				{
				_globalSettingsSiteId = new TList<GlobalSettings>();
				}
	
				return _globalSettingsSiteId;
			}
			set { _globalSettingsSiteId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SitesEntityData _tmp = new SitesEntityData();
						
			_tmp.SiteId = this.SiteId;
			
			_tmp.SiteName = this.SiteName;
			_tmp.SiteUrl = this.SiteUrl;
			_tmp.SiteDescription = this.SiteDescription;
			_tmp.SiteAdminLogo = this.SiteAdminLogo;
			_tmp.LastModified = this.LastModified;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.Live = this.Live;
			_tmp.MobileEnabled = this.MobileEnabled;
			_tmp.MobileUrl = this.MobileUrl;
			_tmp.SiteAdminLogoUrl = this.SiteAdminLogoUrl;
			_tmp.SiteUrlAlias = this.SiteUrlAlias;
			
			#region Source Parent Composite Entities
			if (this.LastModifiedBySource != null)
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource) as AdminUsers;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._availableStatusSiteId != null)
				_tmp.AvailableStatusCollection = (TList<AvailableStatus>) MakeCopyOf(this.AvailableStatusCollection); 
			if (this._jobApplicationSiteIdReferral != null)
				_tmp.JobApplicationCollection = (TList<JobApplication>) MakeCopyOf(this.JobApplicationCollection); 
			if (this._jobViewsSiteId != null)
				_tmp.JobViewsCollection = (TList<JobViews>) MakeCopyOf(this.JobViewsCollection); 
			if (this._integrationMappingsSiteId != null)
				_tmp.IntegrationMappingsCollection = (TList<IntegrationMappings>) MakeCopyOf(this.IntegrationMappingsCollection); 
			if (this._siteResourcesSiteIdGetBySiteId != null)
				_tmp.SiteResourcesCollectionGetBySiteId = (TList<SiteResources>) MakeCopyOf(this.SiteResourcesCollectionGetBySiteId); 
			if (this._emailTemplatesSiteId != null)
				_tmp.EmailTemplatesCollection = (TList<EmailTemplates>) MakeCopyOf(this.EmailTemplatesCollection); 
			if (this._membersSiteId != null)
				_tmp.MembersCollection = (TList<Members>) MakeCopyOf(this.MembersCollection); 
			if (this._jobsSiteId != null)
				_tmp.JobsCollection = (TList<Jobs>) MakeCopyOf(this.JobsCollection); 
			if (this._dynamicPageFilesSiteId != null)
				_tmp.DynamicPageFilesCollection = (TList<DynamicPageFiles>) MakeCopyOf(this.DynamicPageFilesCollection); 
			if (this._siteMappingsSiteIdGetByMasterSiteId != null)
				_tmp.SiteMappingsCollectionGetByMasterSiteId = (TList<SiteMappings>) MakeCopyOf(this.SiteMappingsCollectionGetByMasterSiteId); 
			if (this._siteWebPartsSiteIdGetBySiteId != null)
				_tmp.SiteWebPartsCollectionGetBySiteId = (TList<SiteWebParts>) MakeCopyOf(this.SiteWebPartsCollectionGetBySiteId); 
			if (this._jobCustomXmlSiteId != null)
				_tmp.JobCustomXmlCollection = (TList<JobCustomXml>) MakeCopyOf(this.JobCustomXmlCollection); 
			if (this._dynamicPageWebPartTemplatesSiteId != null)
				_tmp.DynamicPageWebPartTemplatesCollection = (TList<DynamicPageWebPartTemplates>) MakeCopyOf(this.DynamicPageWebPartTemplatesCollection); 
			if (this._dynamicPagesSiteId != null)
				_tmp.DynamicPagesCollection = (TList<DynamicPages>) MakeCopyOf(this.DynamicPagesCollection); 
			if (this._newsCategoriesSiteId != null)
				_tmp.NewsCategoriesCollection = (TList<NewsCategories>) MakeCopyOf(this.NewsCategoriesCollection); 
			if (this._siteAdvertiserFilterSiteId != null)
				_tmp.SiteAdvertiserFilterCollection = (TList<SiteAdvertiserFilter>) MakeCopyOf(this.SiteAdvertiserFilterCollection); 
			if (this._memberMembershipsSiteId != null)
				_tmp.MemberMembershipsCollection = (TList<MemberMemberships>) MakeCopyOf(this.MemberMembershipsCollection); 
			if (this._jobTemplatesSiteId != null)
				_tmp.JobTemplatesCollection = (TList<JobTemplates>) MakeCopyOf(this.JobTemplatesCollection); 
			if (this._siteCountriesSiteId != null)
				_tmp.SiteCountriesCollection = (TList<SiteCountries>) MakeCopyOf(this.SiteCountriesCollection); 
			if (this._webServiceLogSiteId != null)
				_tmp.WebServiceLogCollection = (TList<WebServiceLog>) MakeCopyOf(this.WebServiceLogCollection); 
			if (this._siteLocationSiteId != null)
				_tmp.SiteLocationCollection = (TList<SiteLocation>) MakeCopyOf(this.SiteLocationCollection); 
			if (this._siteProfessionSiteId != null)
				_tmp.SiteProfessionCollection = (TList<SiteProfession>) MakeCopyOf(this.SiteProfessionCollection); 
			if (this._memberWizardSiteId != null)
				_tmp.MemberWizardCollection = (TList<MemberWizard>) MakeCopyOf(this.MemberWizardCollection); 
			if (this._industrySiteId != null)
				_tmp.IndustryCollection = (TList<Industry>) MakeCopyOf(this.IndustryCollection); 
			if (this._consultantsSiteId != null)
				_tmp.ConsultantsCollection = (TList<Consultants>) MakeCopyOf(this.ConsultantsCollection); 
			if (this._filesSiteId != null)
				_tmp.FilesCollection = (TList<Files>) MakeCopyOf(this.FilesCollection); 
			if (this._siteResourcesXmlSiteId != null)
				_tmp.SiteResourcesXmlCollection = (TList<SiteResourcesXml>) MakeCopyOf(this.SiteResourcesXmlCollection); 
			if (this._advertisersSiteId != null)
				_tmp.AdvertisersCollection = (TList<Advertisers>) MakeCopyOf(this.AdvertisersCollection); 
			if (this._memberStatusSiteId != null)
				_tmp.MemberStatusCollection = (TList<MemberStatus>) MakeCopyOf(this.MemberStatusCollection); 
			if (this._widgetContainersSiteId != null)
				_tmp.WidgetContainersCollection = (TList<WidgetContainers>) MakeCopyOf(this.WidgetContainersCollection); 
			if (this._foldersSiteId != null)
				_tmp.FoldersCollection = (TList<Folders>) MakeCopyOf(this.FoldersCollection); 
			if (this._siteCustomMappingSiteId != null)
				_tmp.SiteCustomMappingCollection = (TList<SiteCustomMapping>) MakeCopyOf(this.SiteCustomMappingCollection); 
			if (this._professionReferredSiteId != null)
				_tmp.ProfessionCollection = (TList<Profession>) MakeCopyOf(this.ProfessionCollection); 
			if (this._adminUsersSiteId != null)
				_tmp.AdminUsersCollection = (TList<AdminUsers>) MakeCopyOf(this.AdminUsersCollection); 
			if (this._jobAlertsSiteId != null)
				_tmp.JobAlertsCollection = (TList<JobAlerts>) MakeCopyOf(this.JobAlertsCollection); 
			if (this._jobApplicationTypeSiteId != null)
				_tmp.JobApplicationTypeCollection = (TList<JobApplicationType>) MakeCopyOf(this.JobApplicationTypeCollection); 
			if (this._customWidgetSiteId != null)
				_tmp.CustomWidgetCollection = (TList<CustomWidget>) MakeCopyOf(this.CustomWidgetCollection); 
			if (this._siteMappingsSiteIdGetBySiteId != null)
				_tmp.SiteMappingsCollectionGetBySiteId = (TList<SiteMappings>) MakeCopyOf(this.SiteMappingsCollectionGetBySiteId); 
			if (this._siteWebPartsSiteIdGetBySiteId != null)
				_tmp.SiteWebPartsCollectionGetBySiteId = (TList<SiteWebParts>) MakeCopyOf(this.SiteWebPartsCollectionGetBySiteId); 
			if (this._siteRolesSiteId != null)
				_tmp.SiteRolesCollection = (TList<SiteRoles>) MakeCopyOf(this.SiteRolesCollection); 
			if (this._customPaymentSiteId != null)
				_tmp.CustomPaymentCollection = (TList<CustomPayment>) MakeCopyOf(this.CustomPaymentCollection); 
			if (this._integrationsSiteId != null)
				_tmp.IntegrationsCollection = (TList<Integrations>) MakeCopyOf(this.IntegrationsCollection); 
			if (this._enquiriesSiteId != null)
				_tmp.EnquiriesCollection = (TList<Enquiries>) MakeCopyOf(this.EnquiriesCollection); 
			if (this._siteAreaSiteId != null)
				_tmp.SiteAreaCollection = (TList<SiteArea>) MakeCopyOf(this.SiteAreaCollection); 
			if (this._siteResourcesSiteIdGetBySiteId != null)
				_tmp.SiteResourcesCollectionGetBySiteId = (TList<SiteResources>) MakeCopyOf(this.SiteResourcesCollectionGetBySiteId); 
			if (this._newsSiteId != null)
				_tmp.NewsCollection = (TList<News>) MakeCopyOf(this.NewsCollection); 
			if (this._siteCurrenciesSiteId != null)
				_tmp.SiteCurrenciesCollection = (TList<SiteCurrencies>) MakeCopyOf(this.SiteCurrenciesCollection); 
			if (this._siteWorkTypeSiteId != null)
				_tmp.SiteWorkTypeCollection = (TList<SiteWorkType>) MakeCopyOf(this.SiteWorkTypeCollection); 
			if (this._dynamicContentSiteId != null)
				_tmp.DynamicContentCollection = (TList<DynamicContent>) MakeCopyOf(this.DynamicContentCollection); 
			if (this._jobItemsTypeSiteId != null)
				_tmp.JobItemsTypeCollection = (TList<JobItemsType>) MakeCopyOf(this.JobItemsTypeCollection); 
			if (this._siteSalaryTypeSiteId != null)
				_tmp.SiteSalaryTypeCollection = (TList<SiteSalaryType>) MakeCopyOf(this.SiteSalaryTypeCollection); 
			if (this._screeningQuestionsTemplatesSiteId != null)
				_tmp.ScreeningQuestionsTemplatesCollection = (TList<ScreeningQuestionsTemplates>) MakeCopyOf(this.ScreeningQuestionsTemplatesCollection); 
			if (this._jobsArchiveSiteId != null)
				_tmp.JobsArchiveCollection = (TList<JobsArchive>) MakeCopyOf(this.JobsArchiveCollection); 
			if (this._siteLanguagesSiteId != null)
				_tmp.SiteLanguagesCollection = (TList<SiteLanguages>) MakeCopyOf(this.SiteLanguagesCollection); 
			if (this._customWidgetCssSelectorSiteId != null)
				_tmp.CustomWidgetCssSelectorCollection = (TList<CustomWidgetCssSelector>) MakeCopyOf(this.CustomWidgetCssSelectorCollection); 
			if (this._educationsSiteId != null)
				_tmp.EducationsCollection = (TList<Educations>) MakeCopyOf(this.EducationsCollection); 
			if (this._globalSettingsSiteId != null)
				_tmp.GlobalSettingsCollection = (TList<GlobalSettings>) MakeCopyOf(this.GlobalSettingsCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SitesEntityData _tmp = new SitesEntityData();
						
			_tmp.SiteId = this.SiteId;
			
			_tmp.SiteName = this.SiteName;
			_tmp.SiteUrl = this.SiteUrl;
			_tmp.SiteDescription = this.SiteDescription;
			_tmp.SiteAdminLogo = this.SiteAdminLogo;
			_tmp.LastModified = this.LastModified;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.Live = this.Live;
			_tmp.MobileEnabled = this.MobileEnabled;
			_tmp.MobileUrl = this.MobileUrl;
			_tmp.SiteAdminLogoUrl = this.SiteAdminLogoUrl;
			_tmp.SiteUrlAlias = this.SiteUrlAlias;
			
			#region Source Parent Composite Entities
			if (this.LastModifiedBySource != null && existingCopies.Contains(this.LastModifiedBySource))
				_tmp.LastModifiedBySource = existingCopies[this.LastModifiedBySource] as AdminUsers;
			else
				_tmp.LastModifiedBySource = MakeCopyOf(this.LastModifiedBySource, existingCopies) as AdminUsers;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AvailableStatusCollection = (TList<AvailableStatus>) MakeCopyOf(this.AvailableStatusCollection, existingCopies); 
			_tmp.JobApplicationCollection = (TList<JobApplication>) MakeCopyOf(this.JobApplicationCollection, existingCopies); 
			_tmp.JobViewsCollection = (TList<JobViews>) MakeCopyOf(this.JobViewsCollection, existingCopies); 
			_tmp.IntegrationMappingsCollection = (TList<IntegrationMappings>) MakeCopyOf(this.IntegrationMappingsCollection, existingCopies); 
			_tmp.SiteResourcesCollectionGetBySiteId = (TList<SiteResources>) MakeCopyOf(this.SiteResourcesCollectionGetBySiteId, existingCopies); 
			_tmp.EmailTemplatesCollection = (TList<EmailTemplates>) MakeCopyOf(this.EmailTemplatesCollection, existingCopies); 
			_tmp.MembersCollection = (TList<Members>) MakeCopyOf(this.MembersCollection, existingCopies); 
			_tmp.JobsCollection = (TList<Jobs>) MakeCopyOf(this.JobsCollection, existingCopies); 
			_tmp.DynamicPageFilesCollection = (TList<DynamicPageFiles>) MakeCopyOf(this.DynamicPageFilesCollection, existingCopies); 
			_tmp.SiteMappingsCollectionGetByMasterSiteId = (TList<SiteMappings>) MakeCopyOf(this.SiteMappingsCollectionGetByMasterSiteId, existingCopies); 
			_tmp.SiteWebPartsCollectionGetBySiteId = (TList<SiteWebParts>) MakeCopyOf(this.SiteWebPartsCollectionGetBySiteId, existingCopies); 
			_tmp.JobCustomXmlCollection = (TList<JobCustomXml>) MakeCopyOf(this.JobCustomXmlCollection, existingCopies); 
			_tmp.DynamicPageWebPartTemplatesCollection = (TList<DynamicPageWebPartTemplates>) MakeCopyOf(this.DynamicPageWebPartTemplatesCollection, existingCopies); 
			_tmp.DynamicPagesCollection = (TList<DynamicPages>) MakeCopyOf(this.DynamicPagesCollection, existingCopies); 
			_tmp.NewsCategoriesCollection = (TList<NewsCategories>) MakeCopyOf(this.NewsCategoriesCollection, existingCopies); 
			_tmp.SiteAdvertiserFilterCollection = (TList<SiteAdvertiserFilter>) MakeCopyOf(this.SiteAdvertiserFilterCollection, existingCopies); 
			_tmp.MemberMembershipsCollection = (TList<MemberMemberships>) MakeCopyOf(this.MemberMembershipsCollection, existingCopies); 
			_tmp.JobTemplatesCollection = (TList<JobTemplates>) MakeCopyOf(this.JobTemplatesCollection, existingCopies); 
			_tmp.SiteCountriesCollection = (TList<SiteCountries>) MakeCopyOf(this.SiteCountriesCollection, existingCopies); 
			_tmp.WebServiceLogCollection = (TList<WebServiceLog>) MakeCopyOf(this.WebServiceLogCollection, existingCopies); 
			_tmp.SiteLocationCollection = (TList<SiteLocation>) MakeCopyOf(this.SiteLocationCollection, existingCopies); 
			_tmp.SiteProfessionCollection = (TList<SiteProfession>) MakeCopyOf(this.SiteProfessionCollection, existingCopies); 
			_tmp.MemberWizardCollection = (TList<MemberWizard>) MakeCopyOf(this.MemberWizardCollection, existingCopies); 
			_tmp.IndustryCollection = (TList<Industry>) MakeCopyOf(this.IndustryCollection, existingCopies); 
			_tmp.ConsultantsCollection = (TList<Consultants>) MakeCopyOf(this.ConsultantsCollection, existingCopies); 
			_tmp.FilesCollection = (TList<Files>) MakeCopyOf(this.FilesCollection, existingCopies); 
			_tmp.SiteResourcesXmlCollection = (TList<SiteResourcesXml>) MakeCopyOf(this.SiteResourcesXmlCollection, existingCopies); 
			_tmp.AdvertisersCollection = (TList<Advertisers>) MakeCopyOf(this.AdvertisersCollection, existingCopies); 
			_tmp.MemberStatusCollection = (TList<MemberStatus>) MakeCopyOf(this.MemberStatusCollection, existingCopies); 
			_tmp.WidgetContainersCollection = (TList<WidgetContainers>) MakeCopyOf(this.WidgetContainersCollection, existingCopies); 
			_tmp.FoldersCollection = (TList<Folders>) MakeCopyOf(this.FoldersCollection, existingCopies); 
			_tmp.SiteCustomMappingCollection = (TList<SiteCustomMapping>) MakeCopyOf(this.SiteCustomMappingCollection, existingCopies); 
			_tmp.ProfessionCollection = (TList<Profession>) MakeCopyOf(this.ProfessionCollection, existingCopies); 
			_tmp.AdminUsersCollection = (TList<AdminUsers>) MakeCopyOf(this.AdminUsersCollection, existingCopies); 
			_tmp.JobAlertsCollection = (TList<JobAlerts>) MakeCopyOf(this.JobAlertsCollection, existingCopies); 
			_tmp.JobApplicationTypeCollection = (TList<JobApplicationType>) MakeCopyOf(this.JobApplicationTypeCollection, existingCopies); 
			_tmp.CustomWidgetCollection = (TList<CustomWidget>) MakeCopyOf(this.CustomWidgetCollection, existingCopies); 
			_tmp.SiteMappingsCollectionGetBySiteId = (TList<SiteMappings>) MakeCopyOf(this.SiteMappingsCollectionGetBySiteId, existingCopies); 
			_tmp.SiteWebPartsCollectionGetBySiteId = (TList<SiteWebParts>) MakeCopyOf(this.SiteWebPartsCollectionGetBySiteId, existingCopies); 
			_tmp.SiteRolesCollection = (TList<SiteRoles>) MakeCopyOf(this.SiteRolesCollection, existingCopies); 
			_tmp.CustomPaymentCollection = (TList<CustomPayment>) MakeCopyOf(this.CustomPaymentCollection, existingCopies); 
			_tmp.IntegrationsCollection = (TList<Integrations>) MakeCopyOf(this.IntegrationsCollection, existingCopies); 
			_tmp.EnquiriesCollection = (TList<Enquiries>) MakeCopyOf(this.EnquiriesCollection, existingCopies); 
			_tmp.SiteAreaCollection = (TList<SiteArea>) MakeCopyOf(this.SiteAreaCollection, existingCopies); 
			_tmp.SiteResourcesCollectionGetBySiteId = (TList<SiteResources>) MakeCopyOf(this.SiteResourcesCollectionGetBySiteId, existingCopies); 
			_tmp.NewsCollection = (TList<News>) MakeCopyOf(this.NewsCollection, existingCopies); 
			_tmp.SiteCurrenciesCollection = (TList<SiteCurrencies>) MakeCopyOf(this.SiteCurrenciesCollection, existingCopies); 
			_tmp.SiteWorkTypeCollection = (TList<SiteWorkType>) MakeCopyOf(this.SiteWorkTypeCollection, existingCopies); 
			_tmp.DynamicContentCollection = (TList<DynamicContent>) MakeCopyOf(this.DynamicContentCollection, existingCopies); 
			_tmp.JobItemsTypeCollection = (TList<JobItemsType>) MakeCopyOf(this.JobItemsTypeCollection, existingCopies); 
			_tmp.SiteSalaryTypeCollection = (TList<SiteSalaryType>) MakeCopyOf(this.SiteSalaryTypeCollection, existingCopies); 
			_tmp.ScreeningQuestionsTemplatesCollection = (TList<ScreeningQuestionsTemplates>) MakeCopyOf(this.ScreeningQuestionsTemplatesCollection, existingCopies); 
			_tmp.JobsArchiveCollection = (TList<JobsArchive>) MakeCopyOf(this.JobsArchiveCollection, existingCopies); 
			_tmp.SiteLanguagesCollection = (TList<SiteLanguages>) MakeCopyOf(this.SiteLanguagesCollection, existingCopies); 
			_tmp.CustomWidgetCssSelectorCollection = (TList<CustomWidgetCssSelector>) MakeCopyOf(this.CustomWidgetCssSelectorCollection, existingCopies); 
			_tmp.EducationsCollection = (TList<Educations>) MakeCopyOf(this.EducationsCollection, existingCopies); 
			_tmp.GlobalSettingsCollection = (TList<GlobalSettings>) MakeCopyOf(this.GlobalSettingsCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SitesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SitesColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SitesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SitesColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SitesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SitesColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SitesEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SitesEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SitesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SitesColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SitesEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SitesEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SitesEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Sites"/> object.
	/// </remarks>
	public class SitesEventArgs : System.EventArgs
	{
		private SitesColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SitesEventArgs class.
		///</summary>
		public SitesEventArgs(SitesColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SitesEventArgs class.
		///</summary>
		public SitesEventArgs(SitesColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SitesColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SitesColumn" />
		public SitesColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Sites related events.
	///</summary>
	public delegate void SitesEventHandler(object sender, SitesEventArgs e);
	
	#region SitesComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SitesComparer : System.Collections.Generic.IComparer<Sites>
	{
		SitesColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SitesComparer"/> class.
        /// </summary>
		public SitesComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SitesComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SitesComparer(SitesColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Sites"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Sites"/> to compare.</param>
        /// <param name="b">The second <c>Sites</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Sites a, Sites b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Sites entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Sites a, Sites b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SitesColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SitesKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Sites"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SitesKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SitesKey class.
		/// </summary>
		public SitesKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SitesKey class.
		/// </summary>
		public SitesKey(SitesBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SiteId = entity.SiteId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SitesKey class.
		/// </summary>
		public SitesKey(System.Int32 _siteId)
		{
			#region Init Properties

			this.SiteId = _siteId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SitesBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SitesBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SiteId property
		private System.Int32 _siteId;
		
		/// <summary>
		/// Gets or sets the SiteId property.
		/// </summary>
		public System.Int32 SiteId
		{
			get { return _siteId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SiteId = value;
				
				_siteId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SiteId = ( values["SiteId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["SiteId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SiteId", SiteId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SiteId: {0}{1}",
								SiteId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SitesColumn Enum
	
	/// <summary>
	/// Enumerate the Sites columns.
	/// </summary>
	[Serializable]
	public enum SitesColumn : int
	{
		/// <summary>
		/// SiteId : 
		/// </summary>
		[EnumTextValue("SiteID")]
		[ColumnEnum("SiteID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		SiteId = 1,
		/// <summary>
		/// SiteName : 
		/// </summary>
		[EnumTextValue("SiteName")]
		[ColumnEnum("SiteName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		SiteName = 2,
		/// <summary>
		/// SiteUrl : 
		/// </summary>
		[EnumTextValue("SiteURL")]
		[ColumnEnum("SiteURL", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		SiteUrl = 3,
		/// <summary>
		/// SiteDescription : 
		/// </summary>
		[EnumTextValue("SiteDescription")]
		[ColumnEnum("SiteDescription", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		SiteDescription = 4,
		/// <summary>
		/// SiteAdminLogo : 
		/// </summary>
		[EnumTextValue("SiteAdminLogo")]
		[ColumnEnum("SiteAdminLogo", typeof(System.Byte[]), System.Data.DbType.Binary, false, false, true)]
		SiteAdminLogo = 5,
		/// <summary>
		/// LastModified : 
		/// </summary>
		[EnumTextValue("LastModified")]
		[ColumnEnum("LastModified", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastModified = 6,
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		[EnumTextValue("LastModifiedBy")]
		[ColumnEnum("LastModifiedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastModifiedBy = 7,
		/// <summary>
		/// Live : 
		/// </summary>
		[EnumTextValue("Live")]
		[ColumnEnum("Live", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Live = 8,
		/// <summary>
		/// MobileEnabled : 
		/// </summary>
		[EnumTextValue("MobileEnabled")]
		[ColumnEnum("MobileEnabled", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		MobileEnabled = 9,
		/// <summary>
		/// MobileUrl : 
		/// </summary>
		[EnumTextValue("MobileUrl")]
		[ColumnEnum("MobileUrl", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		MobileUrl = 10,
		/// <summary>
		/// SiteAdminLogoUrl : 
		/// </summary>
		[EnumTextValue("SiteAdminLogoUrl")]
		[ColumnEnum("SiteAdminLogoUrl", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		SiteAdminLogoUrl = 11,
		/// <summary>
		/// SiteUrlAlias : 
		/// </summary>
		[EnumTextValue("SiteURLAlias")]
		[ColumnEnum("SiteURLAlias", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		SiteUrlAlias = 12
	}//End enum

	#endregion SitesColumn Enum

} // end namespace

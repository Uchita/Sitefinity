/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ViewSalary.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'ViewSalary' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewSalaryBase")]
	public abstract partial class ViewSalaryBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// SalaryID : 
		/// </summary>
		private System.Int32		  _salaryId = (int)0;
		
		/// <summary>
		/// SalaryTypeId : 
		/// </summary>
		private System.Int32?		  _salaryTypeId = null;
		
		/// <summary>
		/// SalaryTypeName : 
		/// </summary>
		private System.String		  _salaryTypeName = string.Empty;
		
		/// <summary>
		/// Amount : 
		/// </summary>
		private System.Decimal		  _amount = 0.0m;
		
		/// <summary>
		/// IsFrom : 
		/// </summary>
		private System.Boolean		  _isFrom = false;
		
		/// <summary>
		/// CurrencyID : 
		/// </summary>
		private System.Int32?		  _currencyId = null;
		
		/// <summary>
		/// CurrencySymbol : 
		/// </summary>
		private System.String		  _currencySymbol = string.Empty;
		
		/// <summary>
		/// SalaryDisplay : 
		/// </summary>
		private System.String		  _salaryDisplay = string.Empty;
		
		/// <summary>
		/// SiteID : 
		/// </summary>
		private System.Int32		  _siteId = (int)0;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewSalaryBase"/> instance.
		///</summary>
		public ViewSalaryBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewSalaryBase"/> instance.
		///</summary>
		///<param name="_salaryId"></param>
		///<param name="_salaryTypeId"></param>
		///<param name="_salaryTypeName"></param>
		///<param name="_amount"></param>
		///<param name="_isFrom"></param>
		///<param name="_currencyId"></param>
		///<param name="_currencySymbol"></param>
		///<param name="_salaryDisplay"></param>
		///<param name="_siteId"></param>
		public ViewSalaryBase(System.Int32 _salaryId, System.Int32? _salaryTypeId, System.String _salaryTypeName, System.Decimal _amount, System.Boolean _isFrom, System.Int32? _currencyId, System.String _currencySymbol, System.String _salaryDisplay, System.Int32 _siteId)
		{
			this._salaryId = _salaryId;
			this._salaryTypeId = _salaryTypeId;
			this._salaryTypeName = _salaryTypeName;
			this._amount = _amount;
			this._isFrom = _isFrom;
			this._currencyId = _currencyId;
			this._currencySymbol = _currencySymbol;
			this._salaryDisplay = _salaryDisplay;
			this._siteId = _siteId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewSalary"/> instance.
		///</summary>
		///<param name="_salaryId"></param>
		///<param name="_salaryTypeId"></param>
		///<param name="_salaryTypeName"></param>
		///<param name="_amount"></param>
		///<param name="_isFrom"></param>
		///<param name="_currencyId"></param>
		///<param name="_currencySymbol"></param>
		///<param name="_salaryDisplay"></param>
		///<param name="_siteId"></param>
		public static ViewSalary CreateViewSalary(System.Int32 _salaryId, System.Int32? _salaryTypeId, System.String _salaryTypeName, System.Decimal _amount, System.Boolean _isFrom, System.Int32? _currencyId, System.String _currencySymbol, System.String _salaryDisplay, System.Int32 _siteId)
		{
			ViewSalary newViewSalary = new ViewSalary();
			newViewSalary.SalaryId = _salaryId;
			newViewSalary.SalaryTypeId = _salaryTypeId;
			newViewSalary.SalaryTypeName = _salaryTypeName;
			newViewSalary.Amount = _amount;
			newViewSalary.IsFrom = _isFrom;
			newViewSalary.CurrencyId = _currencyId;
			newViewSalary.CurrencySymbol = _currencySymbol;
			newViewSalary.SalaryDisplay = _salaryDisplay;
			newViewSalary.SiteId = _siteId;
			return newViewSalary;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the SalaryID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 SalaryId
		{
			get
			{
				return this._salaryId; 
			}
			set
			{
				if (_salaryId == value)
					return;
					
				this._salaryId = value;
				this._isDirty = true;
				
				OnPropertyChanged("SalaryId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SalaryTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSalaryTypeIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SalaryTypeId
		{
			get
			{
				return this._salaryTypeId; 
			}
			set
			{
				if (_salaryTypeId == value && SalaryTypeId != null )
					return;
					
				this._salaryTypeId = value;
				this._isDirty = true;
				
				OnPropertyChanged("SalaryTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SalaryTypeName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SalaryTypeName
		{
			get
			{
				return this._salaryTypeName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "SalaryTypeName does not allow null values.");
				if (_salaryTypeName == value)
					return;
					
				this._salaryTypeName = value;
				this._isDirty = true;
				
				OnPropertyChanged("SalaryTypeName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Amount property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal Amount
		{
			get
			{
				return this._amount; 
			}
			set
			{
				if (_amount == value)
					return;
					
				this._amount = value;
				this._isDirty = true;
				
				OnPropertyChanged("Amount");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the IsFrom property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean IsFrom
		{
			get
			{
				return this._isFrom; 
			}
			set
			{
				if (_isFrom == value)
					return;
					
				this._isFrom = value;
				this._isDirty = true;
				
				OnPropertyChanged("IsFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CurrencyID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCurrencyIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? CurrencyId
		{
			get
			{
				return this._currencyId; 
			}
			set
			{
				if (_currencyId == value && CurrencyId != null )
					return;
					
				this._currencyId = value;
				this._isDirty = true;
				
				OnPropertyChanged("CurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CurrencySymbol property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CurrencySymbol
		{
			get
			{
				return this._currencySymbol; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "CurrencySymbol does not allow null values.");
				if (_currencySymbol == value)
					return;
					
				this._currencySymbol = value;
				this._isDirty = true;
				
				OnPropertyChanged("CurrencySymbol");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SalaryDisplay property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SalaryDisplay
		{
			get
			{
				return this._salaryDisplay; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "SalaryDisplay does not allow null values.");
				if (_salaryDisplay == value)
					return;
					
				this._salaryDisplay = value;
				this._isDirty = true;
				
				OnPropertyChanged("SalaryDisplay");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SiteID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 SiteId
		{
			get
			{
				return this._siteId; 
			}
			set
			{
				if (_siteId == value)
					return;
					
				this._siteId = value;
				this._isDirty = true;
				
				OnPropertyChanged("SiteId");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "ViewSalary"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewSalaryBase Entity 
		///</summary>
		public virtual ViewSalaryBase Copy()
		{
			//shallow copy entity
			ViewSalary copy = new ViewSalary();
				copy.SalaryId = this.SalaryId;
				copy.SalaryTypeId = this.SalaryTypeId;
				copy.SalaryTypeName = this.SalaryTypeName;
				copy.Amount = this.Amount;
				copy.IsFrom = this.IsFrom;
				copy.CurrencyId = this.CurrencyId;
				copy.CurrencySymbol = this.CurrencySymbol;
				copy.SalaryDisplay = this.SalaryDisplay;
				copy.SiteId = this.SiteId;
			copy.AcceptChanges();
			return (ViewSalary)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewSalaryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewSalaryBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewSalaryBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewSalaryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewSalaryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewSalaryBase Object1, ViewSalaryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.SalaryId != Object2.SalaryId)
				equal = false;
			if (Object1.SalaryTypeId != null && Object2.SalaryTypeId != null )
			{
				if (Object1.SalaryTypeId != Object2.SalaryTypeId)
					equal = false;
			}
			else if (Object1.SalaryTypeId == null ^ Object1.SalaryTypeId == null )
			{
				equal = false;
			}
			if (Object1.SalaryTypeName != Object2.SalaryTypeName)
				equal = false;
			if (Object1.Amount != Object2.Amount)
				equal = false;
			if (Object1.IsFrom != Object2.IsFrom)
				equal = false;
			if (Object1.CurrencyId != null && Object2.CurrencyId != null )
			{
				if (Object1.CurrencyId != Object2.CurrencyId)
					equal = false;
			}
			else if (Object1.CurrencyId == null ^ Object1.CurrencyId == null )
			{
				equal = false;
			}
			if (Object1.CurrencySymbol != Object2.CurrencySymbol)
				equal = false;
			if (Object1.SalaryDisplay != Object2.SalaryDisplay)
				equal = false;
			if (Object1.SiteId != Object2.SiteId)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewSalary entity, string propertyName)
		{
			switch (propertyName)
			{
				case "SalaryId":
					return entity.SalaryId;
				case "SalaryTypeId":
					return entity.SalaryTypeId;
				case "SalaryTypeName":
					return entity.SalaryTypeName;
				case "Amount":
					return entity.Amount;
				case "IsFrom":
					return entity.IsFrom;
				case "CurrencyId":
					return entity.CurrencyId;
				case "CurrencySymbol":
					return entity.CurrencySymbol;
				case "SalaryDisplay":
					return entity.SalaryDisplay;
				case "SiteId":
					return entity.SiteId;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewSalary, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- SalaryId: {0}{9}- SalaryTypeId: {1}{9}- SalaryTypeName: {2}{9}- Amount: {3}{9}- IsFrom: {4}{9}- CurrencyId: {5}{9}- CurrencySymbol: {6}{9}- SalaryDisplay: {7}{9}- SiteId: {8}{9}", 
				this.SalaryId,
				(this.SalaryTypeId == null) ? string.Empty : this.SalaryTypeId.ToString(),
			     
				this.SalaryTypeName,
				this.Amount,
				this.IsFrom,
				(this.CurrencyId == null) ? string.Empty : this.CurrencyId.ToString(),
			     
				this.CurrencySymbol,
				this.SalaryDisplay,
				this.SiteId,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewSalary columns.
	/// </summary>
	[Serializable]
	public enum ViewSalaryColumn
	{
		/// <summary>
		/// SalaryID : 
		/// </summary>
		[EnumTextValue("SalaryID")]
		[ColumnEnum("SalaryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SalaryId,
		/// <summary>
		/// SalaryTypeId : 
		/// </summary>
		[EnumTextValue("SalaryTypeId")]
		[ColumnEnum("SalaryTypeId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SalaryTypeId,
		/// <summary>
		/// SalaryTypeName : 
		/// </summary>
		[EnumTextValue("SalaryTypeName")]
		[ColumnEnum("SalaryTypeName", typeof(System.String), System.Data.DbType.String, false, false, false, 510)]
		SalaryTypeName,
		/// <summary>
		/// Amount : 
		/// </summary>
		[EnumTextValue("Amount")]
		[ColumnEnum("Amount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Amount,
		/// <summary>
		/// IsFrom : 
		/// </summary>
		[EnumTextValue("IsFrom")]
		[ColumnEnum("IsFrom", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsFrom,
		/// <summary>
		/// CurrencyID : 
		/// </summary>
		[EnumTextValue("CurrencyID")]
		[ColumnEnum("CurrencyID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CurrencyId,
		/// <summary>
		/// CurrencySymbol : 
		/// </summary>
		[EnumTextValue("CurrencySymbol")]
		[ColumnEnum("CurrencySymbol", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 6)]
		CurrencySymbol,
		/// <summary>
		/// SalaryDisplay : 
		/// </summary>
		[EnumTextValue("SalaryDisplay")]
		[ColumnEnum("SalaryDisplay", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		SalaryDisplay,
		/// <summary>
		/// SiteID : 
		/// </summary>
		[EnumTextValue("SiteID")]
		[ColumnEnum("SiteID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteId
	}//End enum

} // end namespace

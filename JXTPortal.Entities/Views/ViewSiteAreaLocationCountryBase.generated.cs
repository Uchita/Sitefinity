/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ViewSiteAreaLocationCountry.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'ViewSiteAreaLocationCountry' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewSiteAreaLocationCountryBase")]
	public abstract partial class ViewSiteAreaLocationCountryBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// AreaID : 
		/// </summary>
		private System.Int32		  _areaId = (int)0;
		
		/// <summary>
		/// SiteLocationID : 
		/// </summary>
		private System.Int32		  _siteLocationId = (int)0;
		
		/// <summary>
		/// LocationID : 
		/// </summary>
		private System.Int32		  _locationId = (int)0;
		
		/// <summary>
		/// SiteAreaID : 
		/// </summary>
		private System.Int32		  _siteAreaId = (int)0;
		
		/// <summary>
		/// SiteAreaName : 
		/// </summary>
		private System.String		  _siteAreaName = null;
		
		/// <summary>
		/// SiteLocationName : 
		/// </summary>
		private System.String		  _siteLocationName = null;
		
		/// <summary>
		/// SiteID : 
		/// </summary>
		private System.Int32		  _siteId = (int)0;
		
		/// <summary>
		/// SiteLocationSiteId : 
		/// </summary>
		private System.Int32		  _siteLocationSiteId = (int)0;
		
		/// <summary>
		/// SiteCountrySiteId : 
		/// </summary>
		private System.Int32		  _siteCountrySiteId = (int)0;
		
		/// <summary>
		/// CountryID : 
		/// </summary>
		private System.Int32		  _countryId = (int)0;
		
		/// <summary>
		/// SiteCountryName : 
		/// </summary>
		private System.String		  _siteCountryName = string.Empty;
		
		/// <summary>
		/// Currency : 
		/// </summary>
		private System.String		  _currency = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewSiteAreaLocationCountryBase"/> instance.
		///</summary>
		public ViewSiteAreaLocationCountryBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewSiteAreaLocationCountryBase"/> instance.
		///</summary>
		///<param name="_areaId"></param>
		///<param name="_siteLocationId"></param>
		///<param name="_locationId"></param>
		///<param name="_siteAreaId"></param>
		///<param name="_siteAreaName"></param>
		///<param name="_siteLocationName"></param>
		///<param name="_siteId"></param>
		///<param name="_siteLocationSiteId"></param>
		///<param name="_siteCountrySiteId"></param>
		///<param name="_countryId"></param>
		///<param name="_siteCountryName"></param>
		///<param name="_currency"></param>
		public ViewSiteAreaLocationCountryBase(System.Int32 _areaId, System.Int32 _siteLocationId, System.Int32 _locationId, System.Int32 _siteAreaId, System.String _siteAreaName, System.String _siteLocationName, System.Int32 _siteId, System.Int32 _siteLocationSiteId, System.Int32 _siteCountrySiteId, System.Int32 _countryId, System.String _siteCountryName, System.String _currency)
		{
			this._areaId = _areaId;
			this._siteLocationId = _siteLocationId;
			this._locationId = _locationId;
			this._siteAreaId = _siteAreaId;
			this._siteAreaName = _siteAreaName;
			this._siteLocationName = _siteLocationName;
			this._siteId = _siteId;
			this._siteLocationSiteId = _siteLocationSiteId;
			this._siteCountrySiteId = _siteCountrySiteId;
			this._countryId = _countryId;
			this._siteCountryName = _siteCountryName;
			this._currency = _currency;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewSiteAreaLocationCountry"/> instance.
		///</summary>
		///<param name="_areaId"></param>
		///<param name="_siteLocationId"></param>
		///<param name="_locationId"></param>
		///<param name="_siteAreaId"></param>
		///<param name="_siteAreaName"></param>
		///<param name="_siteLocationName"></param>
		///<param name="_siteId"></param>
		///<param name="_siteLocationSiteId"></param>
		///<param name="_siteCountrySiteId"></param>
		///<param name="_countryId"></param>
		///<param name="_siteCountryName"></param>
		///<param name="_currency"></param>
		public static ViewSiteAreaLocationCountry CreateViewSiteAreaLocationCountry(System.Int32 _areaId, System.Int32 _siteLocationId, System.Int32 _locationId, System.Int32 _siteAreaId, System.String _siteAreaName, System.String _siteLocationName, System.Int32 _siteId, System.Int32 _siteLocationSiteId, System.Int32 _siteCountrySiteId, System.Int32 _countryId, System.String _siteCountryName, System.String _currency)
		{
			ViewSiteAreaLocationCountry newViewSiteAreaLocationCountry = new ViewSiteAreaLocationCountry();
			newViewSiteAreaLocationCountry.AreaId = _areaId;
			newViewSiteAreaLocationCountry.SiteLocationId = _siteLocationId;
			newViewSiteAreaLocationCountry.LocationId = _locationId;
			newViewSiteAreaLocationCountry.SiteAreaId = _siteAreaId;
			newViewSiteAreaLocationCountry.SiteAreaName = _siteAreaName;
			newViewSiteAreaLocationCountry.SiteLocationName = _siteLocationName;
			newViewSiteAreaLocationCountry.SiteId = _siteId;
			newViewSiteAreaLocationCountry.SiteLocationSiteId = _siteLocationSiteId;
			newViewSiteAreaLocationCountry.SiteCountrySiteId = _siteCountrySiteId;
			newViewSiteAreaLocationCountry.CountryId = _countryId;
			newViewSiteAreaLocationCountry.SiteCountryName = _siteCountryName;
			newViewSiteAreaLocationCountry.Currency = _currency;
			return newViewSiteAreaLocationCountry;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the AreaID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 AreaId
		{
			get
			{
				return this._areaId; 
			}
			set
			{
				if (_areaId == value)
					return;
					
				this._areaId = value;
				this._isDirty = true;
				
				OnPropertyChanged("AreaId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SiteLocationID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 SiteLocationId
		{
			get
			{
				return this._siteLocationId; 
			}
			set
			{
				if (_siteLocationId == value)
					return;
					
				this._siteLocationId = value;
				this._isDirty = true;
				
				OnPropertyChanged("SiteLocationId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LocationID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 LocationId
		{
			get
			{
				return this._locationId; 
			}
			set
			{
				if (_locationId == value)
					return;
					
				this._locationId = value;
				this._isDirty = true;
				
				OnPropertyChanged("LocationId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SiteAreaID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 SiteAreaId
		{
			get
			{
				return this._siteAreaId; 
			}
			set
			{
				if (_siteAreaId == value)
					return;
					
				this._siteAreaId = value;
				this._isDirty = true;
				
				OnPropertyChanged("SiteAreaId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SiteAreaName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SiteAreaName
		{
			get
			{
				return this._siteAreaName; 
			}
			set
			{
				if (_siteAreaName == value)
					return;
					
				this._siteAreaName = value;
				this._isDirty = true;
				
				OnPropertyChanged("SiteAreaName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SiteLocationName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SiteLocationName
		{
			get
			{
				return this._siteLocationName; 
			}
			set
			{
				if (_siteLocationName == value)
					return;
					
				this._siteLocationName = value;
				this._isDirty = true;
				
				OnPropertyChanged("SiteLocationName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SiteID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 SiteId
		{
			get
			{
				return this._siteId; 
			}
			set
			{
				if (_siteId == value)
					return;
					
				this._siteId = value;
				this._isDirty = true;
				
				OnPropertyChanged("SiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SiteLocationSiteId property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 SiteLocationSiteId
		{
			get
			{
				return this._siteLocationSiteId; 
			}
			set
			{
				if (_siteLocationSiteId == value)
					return;
					
				this._siteLocationSiteId = value;
				this._isDirty = true;
				
				OnPropertyChanged("SiteLocationSiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SiteCountrySiteId property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 SiteCountrySiteId
		{
			get
			{
				return this._siteCountrySiteId; 
			}
			set
			{
				if (_siteCountrySiteId == value)
					return;
					
				this._siteCountrySiteId = value;
				this._isDirty = true;
				
				OnPropertyChanged("SiteCountrySiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CountryID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 CountryId
		{
			get
			{
				return this._countryId; 
			}
			set
			{
				if (_countryId == value)
					return;
					
				this._countryId = value;
				this._isDirty = true;
				
				OnPropertyChanged("CountryId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SiteCountryName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SiteCountryName
		{
			get
			{
				return this._siteCountryName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "SiteCountryName does not allow null values.");
				if (_siteCountryName == value)
					return;
					
				this._siteCountryName = value;
				this._isDirty = true;
				
				OnPropertyChanged("SiteCountryName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Currency property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Currency
		{
			get
			{
				return this._currency; 
			}
			set
			{
				if (_currency == value)
					return;
					
				this._currency = value;
				this._isDirty = true;
				
				OnPropertyChanged("Currency");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "ViewSiteAreaLocationCountry"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewSiteAreaLocationCountryBase Entity 
		///</summary>
		public virtual ViewSiteAreaLocationCountryBase Copy()
		{
			//shallow copy entity
			ViewSiteAreaLocationCountry copy = new ViewSiteAreaLocationCountry();
				copy.AreaId = this.AreaId;
				copy.SiteLocationId = this.SiteLocationId;
				copy.LocationId = this.LocationId;
				copy.SiteAreaId = this.SiteAreaId;
				copy.SiteAreaName = this.SiteAreaName;
				copy.SiteLocationName = this.SiteLocationName;
				copy.SiteId = this.SiteId;
				copy.SiteLocationSiteId = this.SiteLocationSiteId;
				copy.SiteCountrySiteId = this.SiteCountrySiteId;
				copy.CountryId = this.CountryId;
				copy.SiteCountryName = this.SiteCountryName;
				copy.Currency = this.Currency;
			copy.AcceptChanges();
			return (ViewSiteAreaLocationCountry)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewSiteAreaLocationCountryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewSiteAreaLocationCountryBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewSiteAreaLocationCountryBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewSiteAreaLocationCountryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewSiteAreaLocationCountryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewSiteAreaLocationCountryBase Object1, ViewSiteAreaLocationCountryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.AreaId != Object2.AreaId)
				equal = false;
			if (Object1.SiteLocationId != Object2.SiteLocationId)
				equal = false;
			if (Object1.LocationId != Object2.LocationId)
				equal = false;
			if (Object1.SiteAreaId != Object2.SiteAreaId)
				equal = false;
			if (Object1.SiteAreaName != null && Object2.SiteAreaName != null )
			{
				if (Object1.SiteAreaName != Object2.SiteAreaName)
					equal = false;
			}
			else if (Object1.SiteAreaName == null ^ Object1.SiteAreaName == null )
			{
				equal = false;
			}
			if (Object1.SiteLocationName != null && Object2.SiteLocationName != null )
			{
				if (Object1.SiteLocationName != Object2.SiteLocationName)
					equal = false;
			}
			else if (Object1.SiteLocationName == null ^ Object1.SiteLocationName == null )
			{
				equal = false;
			}
			if (Object1.SiteId != Object2.SiteId)
				equal = false;
			if (Object1.SiteLocationSiteId != Object2.SiteLocationSiteId)
				equal = false;
			if (Object1.SiteCountrySiteId != Object2.SiteCountrySiteId)
				equal = false;
			if (Object1.CountryId != Object2.CountryId)
				equal = false;
			if (Object1.SiteCountryName != Object2.SiteCountryName)
				equal = false;
			if (Object1.Currency != null && Object2.Currency != null )
			{
				if (Object1.Currency != Object2.Currency)
					equal = false;
			}
			else if (Object1.Currency == null ^ Object1.Currency == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewSiteAreaLocationCountry entity, string propertyName)
		{
			switch (propertyName)
			{
				case "AreaId":
					return entity.AreaId;
				case "SiteLocationId":
					return entity.SiteLocationId;
				case "LocationId":
					return entity.LocationId;
				case "SiteAreaId":
					return entity.SiteAreaId;
				case "SiteAreaName":
					return entity.SiteAreaName;
				case "SiteLocationName":
					return entity.SiteLocationName;
				case "SiteId":
					return entity.SiteId;
				case "SiteLocationSiteId":
					return entity.SiteLocationSiteId;
				case "SiteCountrySiteId":
					return entity.SiteCountrySiteId;
				case "CountryId":
					return entity.CountryId;
				case "SiteCountryName":
					return entity.SiteCountryName;
				case "Currency":
					return entity.Currency;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewSiteAreaLocationCountry, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- AreaId: {0}{12}- SiteLocationId: {1}{12}- LocationId: {2}{12}- SiteAreaId: {3}{12}- SiteAreaName: {4}{12}- SiteLocationName: {5}{12}- SiteId: {6}{12}- SiteLocationSiteId: {7}{12}- SiteCountrySiteId: {8}{12}- CountryId: {9}{12}- SiteCountryName: {10}{12}- Currency: {11}{12}", 
				this.AreaId,
				this.SiteLocationId,
				this.LocationId,
				this.SiteAreaId,
				(this.SiteAreaName == null) ? string.Empty : this.SiteAreaName.ToString(),
			     
				(this.SiteLocationName == null) ? string.Empty : this.SiteLocationName.ToString(),
			     
				this.SiteId,
				this.SiteLocationSiteId,
				this.SiteCountrySiteId,
				this.CountryId,
				this.SiteCountryName,
				(this.Currency == null) ? string.Empty : this.Currency.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewSiteAreaLocationCountry columns.
	/// </summary>
	[Serializable]
	public enum ViewSiteAreaLocationCountryColumn
	{
		/// <summary>
		/// AreaID : 
		/// </summary>
		[EnumTextValue("AreaID")]
		[ColumnEnum("AreaID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		AreaId,
		/// <summary>
		/// SiteLocationID : 
		/// </summary>
		[EnumTextValue("SiteLocationID")]
		[ColumnEnum("SiteLocationID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteLocationId,
		/// <summary>
		/// LocationID : 
		/// </summary>
		[EnumTextValue("LocationID")]
		[ColumnEnum("LocationID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LocationId,
		/// <summary>
		/// SiteAreaID : 
		/// </summary>
		[EnumTextValue("SiteAreaID")]
		[ColumnEnum("SiteAreaID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteAreaId,
		/// <summary>
		/// SiteAreaName : 
		/// </summary>
		[EnumTextValue("SiteAreaName")]
		[ColumnEnum("SiteAreaName", typeof(System.String), System.Data.DbType.String, false, false, true, 1020)]
		SiteAreaName,
		/// <summary>
		/// SiteLocationName : 
		/// </summary>
		[EnumTextValue("SiteLocationName")]
		[ColumnEnum("SiteLocationName", typeof(System.String), System.Data.DbType.String, false, false, true, 1020)]
		SiteLocationName,
		/// <summary>
		/// SiteID : 
		/// </summary>
		[EnumTextValue("SiteID")]
		[ColumnEnum("SiteID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteId,
		/// <summary>
		/// SiteLocationSiteId : 
		/// </summary>
		[EnumTextValue("SiteLocationSiteId")]
		[ColumnEnum("SiteLocationSiteId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteLocationSiteId,
		/// <summary>
		/// SiteCountrySiteId : 
		/// </summary>
		[EnumTextValue("SiteCountrySiteId")]
		[ColumnEnum("SiteCountrySiteId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteCountrySiteId,
		/// <summary>
		/// CountryID : 
		/// </summary>
		[EnumTextValue("CountryID")]
		[ColumnEnum("CountryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CountryId,
		/// <summary>
		/// SiteCountryName : 
		/// </summary>
		[EnumTextValue("SiteCountryName")]
		[ColumnEnum("SiteCountryName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 255)]
		SiteCountryName,
		/// <summary>
		/// Currency : 
		/// </summary>
		[EnumTextValue("Currency")]
		[ColumnEnum("Currency", typeof(System.String), System.Data.DbType.String, false, false, true, 5)]
		Currency
	}//End enum

} // end namespace


/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file WebServiceLog.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'WebServiceLog' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class WebServiceLogBase : EntityBase, IWebServiceLog, IEntityId<WebServiceLogKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private WebServiceLogEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private WebServiceLogEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private WebServiceLogEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<WebServiceLog> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event WebServiceLogEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event WebServiceLogEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="WebServiceLogBase"/> instance.
		///</summary>
		public WebServiceLogBase()
		{
			this.entityData = new WebServiceLogEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="WebServiceLogBase"/> instance.
		///</summary>
		///<param name="_clientIpAddress"></param>
		///<param name="_advertiserId"></param>
		///<param name="_advertiserUserId"></param>
		///<param name="_createdDate"></param>
		///<param name="_methodInvoked"></param>
		///<param name="_inputXml"></param>
		///<param name="_outputResponse"></param>
		///<param name="_invalidXml"></param>
		///<param name="_totalSent"></param>
		///<param name="_totalUpdated"></param>
		///<param name="_totalArchived"></param>
		///<param name="_totalFailed"></param>
		///<param name="_siteId"></param>
		///<param name="_finishedDate"></param>
		///<param name="_totalInserted"></param>
		public WebServiceLogBase(System.String _clientIpAddress, System.Int32 _advertiserId, 
			System.Int32? _advertiserUserId, System.DateTime _createdDate, System.String _methodInvoked, 
			string _inputXml, string _outputResponse, System.String _invalidXml, System.Int32? _totalSent, 
			System.Int32? _totalUpdated, System.Int32? _totalArchived, System.Int32? _totalFailed, 
			System.Int32 _siteId, System.DateTime? _finishedDate, System.Int32 _totalInserted)
		{
			this.entityData = new WebServiceLogEntityData();
			this.backupData = null;

			this.ClientIpAddress = _clientIpAddress;
			this.AdvertiserId = _advertiserId;
			this.AdvertiserUserId = _advertiserUserId;
			this.CreatedDate = _createdDate;
			this.MethodInvoked = _methodInvoked;
			this.InputXml = _inputXml;
			this.OutputResponse = _outputResponse;
			this.InvalidXml = _invalidXml;
			this.TotalSent = _totalSent;
			this.TotalUpdated = _totalUpdated;
			this.TotalArchived = _totalArchived;
			this.TotalFailed = _totalFailed;
			this.SiteId = _siteId;
			this.FinishedDate = _finishedDate;
			this.TotalInserted = _totalInserted;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="WebServiceLog"/> instance.
		///</summary>
		///<param name="_clientIpAddress"></param>
		///<param name="_advertiserId"></param>
		///<param name="_advertiserUserId"></param>
		///<param name="_createdDate"></param>
		///<param name="_methodInvoked"></param>
		///<param name="_inputXml"></param>
		///<param name="_outputResponse"></param>
		///<param name="_invalidXml"></param>
		///<param name="_totalSent"></param>
		///<param name="_totalUpdated"></param>
		///<param name="_totalArchived"></param>
		///<param name="_totalFailed"></param>
		///<param name="_siteId"></param>
		///<param name="_finishedDate"></param>
		///<param name="_totalInserted"></param>
		public static WebServiceLog CreateWebServiceLog(System.String _clientIpAddress, System.Int32 _advertiserId, 
			System.Int32? _advertiserUserId, System.DateTime _createdDate, System.String _methodInvoked, 
			string _inputXml, string _outputResponse, System.String _invalidXml, System.Int32? _totalSent, 
			System.Int32? _totalUpdated, System.Int32? _totalArchived, System.Int32? _totalFailed, 
			System.Int32 _siteId, System.DateTime? _finishedDate, System.Int32 _totalInserted)
		{
			WebServiceLog newWebServiceLog = new WebServiceLog();
			newWebServiceLog.ClientIpAddress = _clientIpAddress;
			newWebServiceLog.AdvertiserId = _advertiserId;
			newWebServiceLog.AdvertiserUserId = _advertiserUserId;
			newWebServiceLog.CreatedDate = _createdDate;
			newWebServiceLog.MethodInvoked = _methodInvoked;
			newWebServiceLog.InputXml = _inputXml;
			newWebServiceLog.OutputResponse = _outputResponse;
			newWebServiceLog.InvalidXml = _invalidXml;
			newWebServiceLog.TotalSent = _totalSent;
			newWebServiceLog.TotalUpdated = _totalUpdated;
			newWebServiceLog.TotalArchived = _totalArchived;
			newWebServiceLog.TotalFailed = _totalFailed;
			newWebServiceLog.SiteId = _siteId;
			newWebServiceLog.FinishedDate = _finishedDate;
			newWebServiceLog.TotalInserted = _totalInserted;
			return newWebServiceLog;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the WebServiceLogId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 WebServiceLogId
		{
			get
			{
				return this.entityData.WebServiceLogId; 
			}
			
			set
			{
				if (this.entityData.WebServiceLogId == value)
					return;
					
				OnColumnChanging(WebServiceLogColumn.WebServiceLogId, this.entityData.WebServiceLogId);
				this.entityData.WebServiceLogId = value;
				this.EntityId.WebServiceLogId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WebServiceLogColumn.WebServiceLogId, this.entityData.WebServiceLogId);
				OnPropertyChanged("WebServiceLogId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ClientIpAddress property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String ClientIpAddress
		{
			get
			{
				return this.entityData.ClientIpAddress; 
			}
			
			set
			{
				if (this.entityData.ClientIpAddress == value)
					return;
					
				OnColumnChanging(WebServiceLogColumn.ClientIpAddress, this.entityData.ClientIpAddress);
				this.entityData.ClientIpAddress = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WebServiceLogColumn.ClientIpAddress, this.entityData.ClientIpAddress);
				OnPropertyChanged("ClientIpAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdvertiserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 AdvertiserId
		{
			get
			{
				return this.entityData.AdvertiserId; 
			}
			
			set
			{
				if (this.entityData.AdvertiserId == value)
					return;
					
				OnColumnChanging(WebServiceLogColumn.AdvertiserId, this.entityData.AdvertiserId);
				this.entityData.AdvertiserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WebServiceLogColumn.AdvertiserId, this.entityData.AdvertiserId);
				OnPropertyChanged("AdvertiserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdvertiserUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAdvertiserUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AdvertiserUserId
		{
			get
			{
				return this.entityData.AdvertiserUserId; 
			}
			
			set
			{
				if (this.entityData.AdvertiserUserId == value)
					return;
					
				OnColumnChanging(WebServiceLogColumn.AdvertiserUserId, this.entityData.AdvertiserUserId);
				this.entityData.AdvertiserUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WebServiceLogColumn.AdvertiserUserId, this.entityData.AdvertiserUserId);
				OnPropertyChanged("AdvertiserUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(WebServiceLogColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WebServiceLogColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MethodInvoked property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String MethodInvoked
		{
			get
			{
				return this.entityData.MethodInvoked; 
			}
			
			set
			{
				if (this.entityData.MethodInvoked == value)
					return;
					
				OnColumnChanging(WebServiceLogColumn.MethodInvoked, this.entityData.MethodInvoked);
				this.entityData.MethodInvoked = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WebServiceLogColumn.MethodInvoked, this.entityData.MethodInvoked);
				OnPropertyChanged("MethodInvoked");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InputXml property. 
		///		
		/// </summary>
		/// <value>This type is xml.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual string InputXml
		{
			get
			{
				return this.entityData.InputXml; 
			}
			
			set
			{
				if (this.entityData.InputXml == value)
					return;
					
				OnColumnChanging(WebServiceLogColumn.InputXml, this.entityData.InputXml);
				this.entityData.InputXml = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WebServiceLogColumn.InputXml, this.entityData.InputXml);
				OnPropertyChanged("InputXml");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OutputResponse property. 
		///		
		/// </summary>
		/// <value>This type is xml.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual string OutputResponse
		{
			get
			{
				return this.entityData.OutputResponse; 
			}
			
			set
			{
				if (this.entityData.OutputResponse == value)
					return;
					
				OnColumnChanging(WebServiceLogColumn.OutputResponse, this.entityData.OutputResponse);
				this.entityData.OutputResponse = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WebServiceLogColumn.OutputResponse, this.entityData.OutputResponse);
				OnPropertyChanged("OutputResponse");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InvalidXml property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String InvalidXml
		{
			get
			{
				return this.entityData.InvalidXml; 
			}
			
			set
			{
				if (this.entityData.InvalidXml == value)
					return;
					
				OnColumnChanging(WebServiceLogColumn.InvalidXml, this.entityData.InvalidXml);
				this.entityData.InvalidXml = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WebServiceLogColumn.InvalidXml, this.entityData.InvalidXml);
				OnPropertyChanged("InvalidXml");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalSent property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTotalSentNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TotalSent
		{
			get
			{
				return this.entityData.TotalSent; 
			}
			
			set
			{
				if (this.entityData.TotalSent == value)
					return;
					
				OnColumnChanging(WebServiceLogColumn.TotalSent, this.entityData.TotalSent);
				this.entityData.TotalSent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WebServiceLogColumn.TotalSent, this.entityData.TotalSent);
				OnPropertyChanged("TotalSent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalUpdated property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTotalUpdatedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TotalUpdated
		{
			get
			{
				return this.entityData.TotalUpdated; 
			}
			
			set
			{
				if (this.entityData.TotalUpdated == value)
					return;
					
				OnColumnChanging(WebServiceLogColumn.TotalUpdated, this.entityData.TotalUpdated);
				this.entityData.TotalUpdated = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WebServiceLogColumn.TotalUpdated, this.entityData.TotalUpdated);
				OnPropertyChanged("TotalUpdated");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalArchived property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTotalArchivedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TotalArchived
		{
			get
			{
				return this.entityData.TotalArchived; 
			}
			
			set
			{
				if (this.entityData.TotalArchived == value)
					return;
					
				OnColumnChanging(WebServiceLogColumn.TotalArchived, this.entityData.TotalArchived);
				this.entityData.TotalArchived = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WebServiceLogColumn.TotalArchived, this.entityData.TotalArchived);
				OnPropertyChanged("TotalArchived");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalFailed property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTotalFailedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TotalFailed
		{
			get
			{
				return this.entityData.TotalFailed; 
			}
			
			set
			{
				if (this.entityData.TotalFailed == value)
					return;
					
				OnColumnChanging(WebServiceLogColumn.TotalFailed, this.entityData.TotalFailed);
				this.entityData.TotalFailed = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WebServiceLogColumn.TotalFailed, this.entityData.TotalFailed);
				OnPropertyChanged("TotalFailed");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SiteId
		{
			get
			{
				return this.entityData.SiteId; 
			}
			
			set
			{
				if (this.entityData.SiteId == value)
					return;
					
				OnColumnChanging(WebServiceLogColumn.SiteId, this.entityData.SiteId);
				this.entityData.SiteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WebServiceLogColumn.SiteId, this.entityData.SiteId);
				OnPropertyChanged("SiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FinishedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFinishedDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FinishedDate
		{
			get
			{
				return this.entityData.FinishedDate; 
			}
			
			set
			{
				if (this.entityData.FinishedDate == value)
					return;
					
				OnColumnChanging(WebServiceLogColumn.FinishedDate, this.entityData.FinishedDate);
				this.entityData.FinishedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WebServiceLogColumn.FinishedDate, this.entityData.FinishedDate);
				OnPropertyChanged("FinishedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalInserted property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 TotalInserted
		{
			get
			{
				return this.entityData.TotalInserted; 
			}
			
			set
			{
				if (this.entityData.TotalInserted == value)
					return;
					
				OnColumnChanging(WebServiceLogColumn.TotalInserted, this.entityData.TotalInserted);
				this.entityData.TotalInserted = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WebServiceLogColumn.TotalInserted, this.entityData.TotalInserted);
				OnPropertyChanged("TotalInserted");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Sites SiteIdSource
      	{
            get { return entityData.SiteIdSource; }
            set { entityData.SiteIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ClientIpAddress", "Client Ip Address", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MethodInvoked", "Method Invoked", 255));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "WebServiceLog"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"WebServiceLogId", "ClientIPAddress", "AdvertiserId", "AdvertiserUserID", "CreatedDate", "MethodInvoked", "InputXML", "OutputResponse", "InvalidXML", "TotalSent", "TotalUpdated", "TotalArchived", "TotalFailed", "SiteId", "FinishedDate", "TotalInserted"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as WebServiceLogEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (WebServiceLog) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<WebServiceLog>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as WebServiceLog);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed WebServiceLog Entity 
		///</summary>
		protected virtual WebServiceLog Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			WebServiceLog copy = new WebServiceLog();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.WebServiceLogId = this.WebServiceLogId;
				copy.ClientIpAddress = this.ClientIpAddress;
				copy.AdvertiserId = this.AdvertiserId;
				copy.AdvertiserUserId = this.AdvertiserUserId;
				copy.CreatedDate = this.CreatedDate;
				copy.MethodInvoked = this.MethodInvoked;
				copy.InputXml = this.InputXml;
				copy.OutputResponse = this.OutputResponse;
				copy.InvalidXml = this.InvalidXml;
				copy.TotalSent = this.TotalSent;
				copy.TotalUpdated = this.TotalUpdated;
				copy.TotalArchived = this.TotalArchived;
				copy.TotalFailed = this.TotalFailed;
				copy.SiteId = this.SiteId;
				copy.FinishedDate = this.FinishedDate;
				copy.TotalInserted = this.TotalInserted;
			
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				copy.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				copy.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed WebServiceLog Entity 
		///</summary>
		public virtual WebServiceLog Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed WebServiceLog Entity which is a deep copy of the current entity.
		///</summary>
		public virtual WebServiceLog DeepCopy()
		{
			return EntityHelper.Clone<WebServiceLog>(this as WebServiceLog);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as WebServiceLogEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new WebServiceLogEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as WebServiceLogEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(WebServiceLogColumn column)
		{
			switch(column)
			{
					case WebServiceLogColumn.WebServiceLogId:
					return entityData.WebServiceLogId != _originalData.WebServiceLogId;
					case WebServiceLogColumn.ClientIpAddress:
					return entityData.ClientIpAddress != _originalData.ClientIpAddress;
					case WebServiceLogColumn.AdvertiserId:
					return entityData.AdvertiserId != _originalData.AdvertiserId;
					case WebServiceLogColumn.AdvertiserUserId:
					return entityData.AdvertiserUserId != _originalData.AdvertiserUserId;
					case WebServiceLogColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case WebServiceLogColumn.MethodInvoked:
					return entityData.MethodInvoked != _originalData.MethodInvoked;
					case WebServiceLogColumn.InputXml:
					return entityData.InputXml != _originalData.InputXml;
					case WebServiceLogColumn.OutputResponse:
					return entityData.OutputResponse != _originalData.OutputResponse;
					case WebServiceLogColumn.InvalidXml:
					return entityData.InvalidXml != _originalData.InvalidXml;
					case WebServiceLogColumn.TotalSent:
					return entityData.TotalSent != _originalData.TotalSent;
					case WebServiceLogColumn.TotalUpdated:
					return entityData.TotalUpdated != _originalData.TotalUpdated;
					case WebServiceLogColumn.TotalArchived:
					return entityData.TotalArchived != _originalData.TotalArchived;
					case WebServiceLogColumn.TotalFailed:
					return entityData.TotalFailed != _originalData.TotalFailed;
					case WebServiceLogColumn.SiteId:
					return entityData.SiteId != _originalData.SiteId;
					case WebServiceLogColumn.FinishedDate:
					return entityData.FinishedDate != _originalData.FinishedDate;
					case WebServiceLogColumn.TotalInserted:
					return entityData.TotalInserted != _originalData.TotalInserted;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< WebServiceLogColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.WebServiceLogId != _originalData.WebServiceLogId;
			result = result || entityData.ClientIpAddress != _originalData.ClientIpAddress;
			result = result || entityData.AdvertiserId != _originalData.AdvertiserId;
			result = result || entityData.AdvertiserUserId != _originalData.AdvertiserUserId;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.MethodInvoked != _originalData.MethodInvoked;
			result = result || entityData.InputXml != _originalData.InputXml;
			result = result || entityData.OutputResponse != _originalData.OutputResponse;
			result = result || entityData.InvalidXml != _originalData.InvalidXml;
			result = result || entityData.TotalSent != _originalData.TotalSent;
			result = result || entityData.TotalUpdated != _originalData.TotalUpdated;
			result = result || entityData.TotalArchived != _originalData.TotalArchived;
			result = result || entityData.TotalFailed != _originalData.TotalFailed;
			result = result || entityData.SiteId != _originalData.SiteId;
			result = result || entityData.FinishedDate != _originalData.FinishedDate;
			result = result || entityData.TotalInserted != _originalData.TotalInserted;
			return result;
		}	
		
		///<summary>
		///  Returns a WebServiceLog Entity with the original data.
		///</summary>
		public WebServiceLog GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateWebServiceLog(
				_originalData.ClientIpAddress,
				_originalData.AdvertiserId,
				_originalData.AdvertiserUserId,
				_originalData.CreatedDate,
				_originalData.MethodInvoked,
				_originalData.InputXml,
				_originalData.OutputResponse,
				_originalData.InvalidXml,
				_originalData.TotalSent,
				_originalData.TotalUpdated,
				_originalData.TotalArchived,
				_originalData.TotalFailed,
				_originalData.SiteId,
				_originalData.FinishedDate,
				_originalData.TotalInserted
				);
				
			return (WebServiceLog)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="WebServiceLogBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is WebServiceLogBase)
				return ValueEquals(this, (WebServiceLogBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="WebServiceLogBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.WebServiceLogId.GetHashCode() ^ 
					((this.ClientIpAddress == null) ? string.Empty : this.ClientIpAddress.ToString()).GetHashCode() ^ 
					this.AdvertiserId.GetHashCode() ^ 
					((this.AdvertiserUserId == null) ? string.Empty : this.AdvertiserUserId.ToString()).GetHashCode() ^ 
					this.CreatedDate.GetHashCode() ^ 
					((this.MethodInvoked == null) ? string.Empty : this.MethodInvoked.ToString()).GetHashCode() ^ 
					((this.InputXml == null) ? string.Empty : this.InputXml.ToString()).GetHashCode() ^ 
					((this.OutputResponse == null) ? string.Empty : this.OutputResponse.ToString()).GetHashCode() ^ 
					((this.InvalidXml == null) ? string.Empty : this.InvalidXml.ToString()).GetHashCode() ^ 
					((this.TotalSent == null) ? string.Empty : this.TotalSent.ToString()).GetHashCode() ^ 
					((this.TotalUpdated == null) ? string.Empty : this.TotalUpdated.ToString()).GetHashCode() ^ 
					((this.TotalArchived == null) ? string.Empty : this.TotalArchived.ToString()).GetHashCode() ^ 
					((this.TotalFailed == null) ? string.Empty : this.TotalFailed.ToString()).GetHashCode() ^ 
					this.SiteId.GetHashCode() ^ 
					((this.FinishedDate == null) ? string.Empty : this.FinishedDate.ToString()).GetHashCode() ^ 
					this.TotalInserted.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="WebServiceLogBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(WebServiceLogBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="WebServiceLogBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="WebServiceLogBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="WebServiceLogBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(WebServiceLogBase Object1, WebServiceLogBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.WebServiceLogId != Object2.WebServiceLogId)
				equal = false;
			if ( Object1.ClientIpAddress != null && Object2.ClientIpAddress != null )
			{
				if (Object1.ClientIpAddress != Object2.ClientIpAddress)
					equal = false;
			}
			else if (Object1.ClientIpAddress == null ^ Object2.ClientIpAddress == null )
			{
				equal = false;
			}
			if (Object1.AdvertiserId != Object2.AdvertiserId)
				equal = false;
			if ( Object1.AdvertiserUserId != null && Object2.AdvertiserUserId != null )
			{
				if (Object1.AdvertiserUserId != Object2.AdvertiserUserId)
					equal = false;
			}
			else if (Object1.AdvertiserUserId == null ^ Object2.AdvertiserUserId == null )
			{
				equal = false;
			}
			if (Object1.CreatedDate != Object2.CreatedDate)
				equal = false;
			if ( Object1.MethodInvoked != null && Object2.MethodInvoked != null )
			{
				if (Object1.MethodInvoked != Object2.MethodInvoked)
					equal = false;
			}
			else if (Object1.MethodInvoked == null ^ Object2.MethodInvoked == null )
			{
				equal = false;
			}
			if ( Object1.InputXml != null && Object2.InputXml != null )
			{
				if (Object1.InputXml != Object2.InputXml)
					equal = false;
			}
			else if (Object1.InputXml == null ^ Object2.InputXml == null )
			{
				equal = false;
			}
			if ( Object1.OutputResponse != null && Object2.OutputResponse != null )
			{
				if (Object1.OutputResponse != Object2.OutputResponse)
					equal = false;
			}
			else if (Object1.OutputResponse == null ^ Object2.OutputResponse == null )
			{
				equal = false;
			}
			if ( Object1.InvalidXml != null && Object2.InvalidXml != null )
			{
				if (Object1.InvalidXml != Object2.InvalidXml)
					equal = false;
			}
			else if (Object1.InvalidXml == null ^ Object2.InvalidXml == null )
			{
				equal = false;
			}
			if ( Object1.TotalSent != null && Object2.TotalSent != null )
			{
				if (Object1.TotalSent != Object2.TotalSent)
					equal = false;
			}
			else if (Object1.TotalSent == null ^ Object2.TotalSent == null )
			{
				equal = false;
			}
			if ( Object1.TotalUpdated != null && Object2.TotalUpdated != null )
			{
				if (Object1.TotalUpdated != Object2.TotalUpdated)
					equal = false;
			}
			else if (Object1.TotalUpdated == null ^ Object2.TotalUpdated == null )
			{
				equal = false;
			}
			if ( Object1.TotalArchived != null && Object2.TotalArchived != null )
			{
				if (Object1.TotalArchived != Object2.TotalArchived)
					equal = false;
			}
			else if (Object1.TotalArchived == null ^ Object2.TotalArchived == null )
			{
				equal = false;
			}
			if ( Object1.TotalFailed != null && Object2.TotalFailed != null )
			{
				if (Object1.TotalFailed != Object2.TotalFailed)
					equal = false;
			}
			else if (Object1.TotalFailed == null ^ Object2.TotalFailed == null )
			{
				equal = false;
			}
			if (Object1.SiteId != Object2.SiteId)
				equal = false;
			if ( Object1.FinishedDate != null && Object2.FinishedDate != null )
			{
				if (Object1.FinishedDate != Object2.FinishedDate)
					equal = false;
			}
			else if (Object1.FinishedDate == null ^ Object2.FinishedDate == null )
			{
				equal = false;
			}
			if (Object1.TotalInserted != Object2.TotalInserted)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((WebServiceLogBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static WebServiceLogComparer GetComparer()
        {
            return new WebServiceLogComparer();
        }
        */

        // Comparer delegates back to WebServiceLog
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(WebServiceLog rhs, WebServiceLogColumn which)
        {
            switch (which)
            {
            	
            	
            	case WebServiceLogColumn.WebServiceLogId:
            		return this.WebServiceLogId.CompareTo(rhs.WebServiceLogId);
            		
            		                 
            	
            	
            	case WebServiceLogColumn.ClientIpAddress:
            		return this.ClientIpAddress.CompareTo(rhs.ClientIpAddress);
            		
            		                 
            	
            	
            	case WebServiceLogColumn.AdvertiserId:
            		return this.AdvertiserId.CompareTo(rhs.AdvertiserId);
            		
            		                 
            	
            	
            	case WebServiceLogColumn.AdvertiserUserId:
            		return this.AdvertiserUserId.Value.CompareTo(rhs.AdvertiserUserId.Value);
            		
            		                 
            	
            	
            	case WebServiceLogColumn.CreatedDate:
            		return this.CreatedDate.CompareTo(rhs.CreatedDate);
            		
            		                 
            	
            	
            	case WebServiceLogColumn.MethodInvoked:
            		return this.MethodInvoked.CompareTo(rhs.MethodInvoked);
            		
            		                 
            	
            	
            	case WebServiceLogColumn.InputXml:
            		return this.InputXml.CompareTo(rhs.InputXml);
            		
            		                 
            	
            	
            	case WebServiceLogColumn.OutputResponse:
            		return this.OutputResponse.CompareTo(rhs.OutputResponse);
            		
            		                 
            	
            	
            	case WebServiceLogColumn.InvalidXml:
            		return this.InvalidXml.CompareTo(rhs.InvalidXml);
            		
            		                 
            	
            	
            	case WebServiceLogColumn.TotalSent:
            		return this.TotalSent.Value.CompareTo(rhs.TotalSent.Value);
            		
            		                 
            	
            	
            	case WebServiceLogColumn.TotalUpdated:
            		return this.TotalUpdated.Value.CompareTo(rhs.TotalUpdated.Value);
            		
            		                 
            	
            	
            	case WebServiceLogColumn.TotalArchived:
            		return this.TotalArchived.Value.CompareTo(rhs.TotalArchived.Value);
            		
            		                 
            	
            	
            	case WebServiceLogColumn.TotalFailed:
            		return this.TotalFailed.Value.CompareTo(rhs.TotalFailed.Value);
            		
            		                 
            	
            	
            	case WebServiceLogColumn.SiteId:
            		return this.SiteId.CompareTo(rhs.SiteId);
            		
            		                 
            	
            	
            	case WebServiceLogColumn.FinishedDate:
            		return this.FinishedDate.Value.CompareTo(rhs.FinishedDate.Value);
            		
            		                 
            	
            	
            	case WebServiceLogColumn.TotalInserted:
            		return this.TotalInserted.CompareTo(rhs.TotalInserted);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<WebServiceLogKey> Members
		
		// member variable for the EntityId property
		private WebServiceLogKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual WebServiceLogKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new WebServiceLogKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("WebServiceLog")
					.Append("|").Append( this.WebServiceLogId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- WebServiceLogId: {0}{16}- ClientIpAddress: {1}{16}- AdvertiserId: {2}{16}- AdvertiserUserId: {3}{16}- CreatedDate: {4}{16}- MethodInvoked: {5}{16}- InputXml: {6}{16}- OutputResponse: {7}{16}- InvalidXml: {8}{16}- TotalSent: {9}{16}- TotalUpdated: {10}{16}- TotalArchived: {11}{16}- TotalFailed: {12}{16}- SiteId: {13}{16}- FinishedDate: {14}{16}- TotalInserted: {15}{16}{18}", 
				this.WebServiceLogId,
				(this.ClientIpAddress == null) ? string.Empty : this.ClientIpAddress.ToString(),
				this.AdvertiserId,
				(this.AdvertiserUserId == null) ? string.Empty : this.AdvertiserUserId.ToString(),
				this.CreatedDate,
				(this.MethodInvoked == null) ? string.Empty : this.MethodInvoked.ToString(),
				(this.InputXml == null) ? string.Empty : this.InputXml.ToString(),
				(this.OutputResponse == null) ? string.Empty : this.OutputResponse.ToString(),
				(this.InvalidXml == null) ? string.Empty : this.InvalidXml.ToString(),
				(this.TotalSent == null) ? string.Empty : this.TotalSent.ToString(),
				(this.TotalUpdated == null) ? string.Empty : this.TotalUpdated.ToString(),
				(this.TotalArchived == null) ? string.Empty : this.TotalArchived.ToString(),
				(this.TotalFailed == null) ? string.Empty : this.TotalFailed.ToString(),
				this.SiteId,
				(this.FinishedDate == null) ? string.Empty : this.FinishedDate.ToString(),
				this.TotalInserted,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'WebServiceLog' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class WebServiceLogEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// WebServiceLogId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "WebServiceLog"</remarks>
		public System.Int32 WebServiceLogId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ClientIPAddress : 
		/// </summary>
		public System.String		  ClientIpAddress = null;
		
		/// <summary>
		/// AdvertiserId : 
		/// </summary>
		public System.Int32		  AdvertiserId = (int)0;
		
		/// <summary>
		/// AdvertiserUserID : 
		/// </summary>
		public System.Int32?		  AdvertiserUserId = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime		  CreatedDate = DateTime.MinValue;
		
		/// <summary>
		/// MethodInvoked : 
		/// </summary>
		public System.String		  MethodInvoked = null;
		
		/// <summary>
		/// InputXML : 
		/// </summary>
		public string		  InputXml = null;
		
		/// <summary>
		/// OutputResponse : 
		/// </summary>
		public string		  OutputResponse = null;
		
		/// <summary>
		/// InvalidXML : 
		/// </summary>
		public System.String		  InvalidXml = null;
		
		/// <summary>
		/// TotalSent : 
		/// </summary>
		public System.Int32?		  TotalSent = null;
		
		/// <summary>
		/// TotalUpdated : 
		/// </summary>
		public System.Int32?		  TotalUpdated = null;
		
		/// <summary>
		/// TotalArchived : 
		/// </summary>
		public System.Int32?		  TotalArchived = null;
		
		/// <summary>
		/// TotalFailed : 
		/// </summary>
		public System.Int32?		  TotalFailed = null;
		
		/// <summary>
		/// SiteId : 
		/// </summary>
		public System.Int32		  SiteId = (int)0;
		
		/// <summary>
		/// FinishedDate : 
		/// </summary>
		public System.DateTime?		  FinishedDate = null;
		
		/// <summary>
		/// TotalInserted : 
		/// </summary>
		public System.Int32		  TotalInserted = (int)0;
		#endregion
			
		#region Source Foreign Key Property
				
		private Sites _siteIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Sites SiteIdSource
      	{
            get { return this._siteIdSource; }
            set { this._siteIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			WebServiceLogEntityData _tmp = new WebServiceLogEntityData();
						
			_tmp.WebServiceLogId = this.WebServiceLogId;
			
			_tmp.ClientIpAddress = this.ClientIpAddress;
			_tmp.AdvertiserId = this.AdvertiserId;
			_tmp.AdvertiserUserId = this.AdvertiserUserId;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.MethodInvoked = this.MethodInvoked;
			_tmp.InputXml = this.InputXml;
			_tmp.OutputResponse = this.OutputResponse;
			_tmp.InvalidXml = this.InvalidXml;
			_tmp.TotalSent = this.TotalSent;
			_tmp.TotalUpdated = this.TotalUpdated;
			_tmp.TotalArchived = this.TotalArchived;
			_tmp.TotalFailed = this.TotalFailed;
			_tmp.SiteId = this.SiteId;
			_tmp.FinishedDate = this.FinishedDate;
			_tmp.TotalInserted = this.TotalInserted;
			
			#region Source Parent Composite Entities
			if (this.SiteIdSource != null)
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource) as Sites;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			WebServiceLogEntityData _tmp = new WebServiceLogEntityData();
						
			_tmp.WebServiceLogId = this.WebServiceLogId;
			
			_tmp.ClientIpAddress = this.ClientIpAddress;
			_tmp.AdvertiserId = this.AdvertiserId;
			_tmp.AdvertiserUserId = this.AdvertiserUserId;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.MethodInvoked = this.MethodInvoked;
			_tmp.InputXml = this.InputXml;
			_tmp.OutputResponse = this.OutputResponse;
			_tmp.InvalidXml = this.InvalidXml;
			_tmp.TotalSent = this.TotalSent;
			_tmp.TotalUpdated = this.TotalUpdated;
			_tmp.TotalArchived = this.TotalArchived;
			_tmp.TotalFailed = this.TotalFailed;
			_tmp.SiteId = this.SiteId;
			_tmp.FinishedDate = this.FinishedDate;
			_tmp.TotalInserted = this.TotalInserted;
			
			#region Source Parent Composite Entities
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				_tmp.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WebServiceLogColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(WebServiceLogColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WebServiceLogColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(WebServiceLogColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WebServiceLogColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(WebServiceLogColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				WebServiceLogEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new WebServiceLogEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WebServiceLogColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(WebServiceLogColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				WebServiceLogEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new WebServiceLogEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region WebServiceLogEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="WebServiceLog"/> object.
	/// </remarks>
	public class WebServiceLogEventArgs : System.EventArgs
	{
		private WebServiceLogColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the WebServiceLogEventArgs class.
		///</summary>
		public WebServiceLogEventArgs(WebServiceLogColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the WebServiceLogEventArgs class.
		///</summary>
		public WebServiceLogEventArgs(WebServiceLogColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The WebServiceLogColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="WebServiceLogColumn" />
		public WebServiceLogColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all WebServiceLog related events.
	///</summary>
	public delegate void WebServiceLogEventHandler(object sender, WebServiceLogEventArgs e);
	
	#region WebServiceLogComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class WebServiceLogComparer : System.Collections.Generic.IComparer<WebServiceLog>
	{
		WebServiceLogColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:WebServiceLogComparer"/> class.
        /// </summary>
		public WebServiceLogComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:WebServiceLogComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public WebServiceLogComparer(WebServiceLogColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="WebServiceLog"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="WebServiceLog"/> to compare.</param>
        /// <param name="b">The second <c>WebServiceLog</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(WebServiceLog a, WebServiceLog b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(WebServiceLog entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(WebServiceLog a, WebServiceLog b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public WebServiceLogColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region WebServiceLogKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="WebServiceLog"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class WebServiceLogKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the WebServiceLogKey class.
		/// </summary>
		public WebServiceLogKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the WebServiceLogKey class.
		/// </summary>
		public WebServiceLogKey(WebServiceLogBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.WebServiceLogId = entity.WebServiceLogId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the WebServiceLogKey class.
		/// </summary>
		public WebServiceLogKey(System.Int32 _webServiceLogId)
		{
			#region Init Properties

			this.WebServiceLogId = _webServiceLogId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private WebServiceLogBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public WebServiceLogBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the WebServiceLogId property
		private System.Int32 _webServiceLogId;
		
		/// <summary>
		/// Gets or sets the WebServiceLogId property.
		/// </summary>
		public System.Int32 WebServiceLogId
		{
			get { return _webServiceLogId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.WebServiceLogId = value;
				
				_webServiceLogId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				WebServiceLogId = ( values["WebServiceLogId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["WebServiceLogId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("WebServiceLogId", WebServiceLogId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("WebServiceLogId: {0}{1}",
								WebServiceLogId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region WebServiceLogColumn Enum
	
	/// <summary>
	/// Enumerate the WebServiceLog columns.
	/// </summary>
	[Serializable]
	public enum WebServiceLogColumn : int
	{
		/// <summary>
		/// WebServiceLogId : 
		/// </summary>
		[EnumTextValue("WebServiceLogId")]
		[ColumnEnum("WebServiceLogId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		WebServiceLogId = 1,
		/// <summary>
		/// ClientIpAddress : 
		/// </summary>
		[EnumTextValue("ClientIPAddress")]
		[ColumnEnum("ClientIPAddress", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ClientIpAddress = 2,
		/// <summary>
		/// AdvertiserId : 
		/// </summary>
		[EnumTextValue("AdvertiserId")]
		[ColumnEnum("AdvertiserId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		AdvertiserId = 3,
		/// <summary>
		/// AdvertiserUserId : 
		/// </summary>
		[EnumTextValue("AdvertiserUserID")]
		[ColumnEnum("AdvertiserUserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AdvertiserUserId = 4,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreatedDate = 5,
		/// <summary>
		/// MethodInvoked : 
		/// </summary>
		[EnumTextValue("MethodInvoked")]
		[ColumnEnum("MethodInvoked", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		MethodInvoked = 6,
		/// <summary>
		/// InputXml : 
		/// </summary>
		[EnumTextValue("InputXML")]
		[ColumnEnum("InputXML", typeof(string), System.Data.DbType.Xml, false, false, true)]
		InputXml = 7,
		/// <summary>
		/// OutputResponse : 
		/// </summary>
		[EnumTextValue("OutputResponse")]
		[ColumnEnum("OutputResponse", typeof(string), System.Data.DbType.Xml, false, false, true)]
		OutputResponse = 8,
		/// <summary>
		/// InvalidXml : 
		/// </summary>
		[EnumTextValue("InvalidXML")]
		[ColumnEnum("InvalidXML", typeof(System.String), System.Data.DbType.String, false, false, true)]
		InvalidXml = 9,
		/// <summary>
		/// TotalSent : 
		/// </summary>
		[EnumTextValue("TotalSent")]
		[ColumnEnum("TotalSent", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TotalSent = 10,
		/// <summary>
		/// TotalUpdated : 
		/// </summary>
		[EnumTextValue("TotalUpdated")]
		[ColumnEnum("TotalUpdated", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TotalUpdated = 11,
		/// <summary>
		/// TotalArchived : 
		/// </summary>
		[EnumTextValue("TotalArchived")]
		[ColumnEnum("TotalArchived", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TotalArchived = 12,
		/// <summary>
		/// TotalFailed : 
		/// </summary>
		[EnumTextValue("TotalFailed")]
		[ColumnEnum("TotalFailed", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TotalFailed = 13,
		/// <summary>
		/// SiteId : 
		/// </summary>
		[EnumTextValue("SiteId")]
		[ColumnEnum("SiteId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteId = 14,
		/// <summary>
		/// FinishedDate : 
		/// </summary>
		[EnumTextValue("FinishedDate")]
		[ColumnEnum("FinishedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FinishedDate = 15,
		/// <summary>
		/// TotalInserted : 
		/// </summary>
		[EnumTextValue("TotalInserted")]
		[ColumnEnum("TotalInserted", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		TotalInserted = 16
	}//End enum

	#endregion WebServiceLogColumn Enum

} // end namespace

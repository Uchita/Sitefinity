
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file WidgetContainers.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using JXTPortal.Entities.Validation;
#endregion

namespace JXTPortal.Entities
{
	///<summary>
	/// An object representation of the 'WidgetContainers' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class WidgetContainersBase : EntityBase, IWidgetContainers, IEntityId<WidgetContainersKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private WidgetContainersEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private WidgetContainersEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private WidgetContainersEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<WidgetContainers> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event WidgetContainersEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event WidgetContainersEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="WidgetContainersBase"/> instance.
		///</summary>
		public WidgetContainersBase()
		{
			this.entityData = new WidgetContainersEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="WidgetContainersBase"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_languageId"></param>
		///<param name="_widgetName"></param>
		///<param name="_widgetDomain"></param>
		///<param name="_widgetContainerClass"></param>
		///<param name="_widgetContainerHeaderClass"></param>
		///<param name="_widgetItemClass"></param>
		///<param name="_widgetJobLinkCss"></param>
		///<param name="_widgetItemLinkImageId"></param>
		///<param name="_valid"></param>
		///<param name="_showJobs"></param>
		///<param name="_showCompanies"></param>
		///<param name="_showSite"></param>
		///<param name="_showPeople"></param>
		///<param name="_jobHtml"></param>
		///<param name="_companyHtml"></param>
		///<param name="_siteHtml"></param>
		///<param name="_peopleHtml"></param>
		///<param name="_javascript"></param>
		///<param name="_searchCss"></param>
		///<param name="_defaultProfessionId"></param>
		///<param name="_defaultCountryId"></param>
		///<param name="_defaultLocationId"></param>
		///<param name="_width"></param>
		///<param name="_height"></param>
		///<param name="_onAdvancedSearch"></param>
		public WidgetContainersBase(System.Int32 _siteId, System.Int32 _languageId, System.String _widgetName, 
			System.String _widgetDomain, System.String _widgetContainerClass, System.String _widgetContainerHeaderClass, 
			System.String _widgetItemClass, System.String _widgetJobLinkCss, System.Int32? _widgetItemLinkImageId, 
			System.Boolean? _valid, System.Boolean? _showJobs, System.Boolean? _showCompanies, 
			System.Boolean? _showSite, System.Boolean? _showPeople, System.String _jobHtml, 
			System.String _companyHtml, System.String _siteHtml, System.String _peopleHtml, 
			System.String _javascript, System.String _searchCss, System.Int32? _defaultProfessionId, 
			System.Int32? _defaultCountryId, System.Int32? _defaultLocationId, System.Int32? _width, 
			System.Int32? _height, System.Boolean? _onAdvancedSearch)
		{
			this.entityData = new WidgetContainersEntityData();
			this.backupData = null;

			this.SiteId = _siteId;
			this.LanguageId = _languageId;
			this.WidgetName = _widgetName;
			this.WidgetDomain = _widgetDomain;
			this.WidgetContainerClass = _widgetContainerClass;
			this.WidgetContainerHeaderClass = _widgetContainerHeaderClass;
			this.WidgetItemClass = _widgetItemClass;
			this.WidgetJobLinkCss = _widgetJobLinkCss;
			this.WidgetItemLinkImageId = _widgetItemLinkImageId;
			this.Valid = _valid;
			this.ShowJobs = _showJobs;
			this.ShowCompanies = _showCompanies;
			this.ShowSite = _showSite;
			this.ShowPeople = _showPeople;
			this.JobHtml = _jobHtml;
			this.CompanyHtml = _companyHtml;
			this.SiteHtml = _siteHtml;
			this.PeopleHtml = _peopleHtml;
			this.Javascript = _javascript;
			this.SearchCss = _searchCss;
			this.DefaultProfessionId = _defaultProfessionId;
			this.DefaultCountryId = _defaultCountryId;
			this.DefaultLocationId = _defaultLocationId;
			this.Width = _width;
			this.Height = _height;
			this.OnAdvancedSearch = _onAdvancedSearch;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="WidgetContainers"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_languageId"></param>
		///<param name="_widgetName"></param>
		///<param name="_widgetDomain"></param>
		///<param name="_widgetContainerClass"></param>
		///<param name="_widgetContainerHeaderClass"></param>
		///<param name="_widgetItemClass"></param>
		///<param name="_widgetJobLinkCss"></param>
		///<param name="_widgetItemLinkImageId"></param>
		///<param name="_valid"></param>
		///<param name="_showJobs"></param>
		///<param name="_showCompanies"></param>
		///<param name="_showSite"></param>
		///<param name="_showPeople"></param>
		///<param name="_jobHtml"></param>
		///<param name="_companyHtml"></param>
		///<param name="_siteHtml"></param>
		///<param name="_peopleHtml"></param>
		///<param name="_javascript"></param>
		///<param name="_searchCss"></param>
		///<param name="_defaultProfessionId"></param>
		///<param name="_defaultCountryId"></param>
		///<param name="_defaultLocationId"></param>
		///<param name="_width"></param>
		///<param name="_height"></param>
		///<param name="_onAdvancedSearch"></param>
		public static WidgetContainers CreateWidgetContainers(System.Int32 _siteId, System.Int32 _languageId, System.String _widgetName, 
			System.String _widgetDomain, System.String _widgetContainerClass, System.String _widgetContainerHeaderClass, 
			System.String _widgetItemClass, System.String _widgetJobLinkCss, System.Int32? _widgetItemLinkImageId, 
			System.Boolean? _valid, System.Boolean? _showJobs, System.Boolean? _showCompanies, 
			System.Boolean? _showSite, System.Boolean? _showPeople, System.String _jobHtml, 
			System.String _companyHtml, System.String _siteHtml, System.String _peopleHtml, 
			System.String _javascript, System.String _searchCss, System.Int32? _defaultProfessionId, 
			System.Int32? _defaultCountryId, System.Int32? _defaultLocationId, System.Int32? _width, 
			System.Int32? _height, System.Boolean? _onAdvancedSearch)
		{
			WidgetContainers newWidgetContainers = new WidgetContainers();
			newWidgetContainers.SiteId = _siteId;
			newWidgetContainers.LanguageId = _languageId;
			newWidgetContainers.WidgetName = _widgetName;
			newWidgetContainers.WidgetDomain = _widgetDomain;
			newWidgetContainers.WidgetContainerClass = _widgetContainerClass;
			newWidgetContainers.WidgetContainerHeaderClass = _widgetContainerHeaderClass;
			newWidgetContainers.WidgetItemClass = _widgetItemClass;
			newWidgetContainers.WidgetJobLinkCss = _widgetJobLinkCss;
			newWidgetContainers.WidgetItemLinkImageId = _widgetItemLinkImageId;
			newWidgetContainers.Valid = _valid;
			newWidgetContainers.ShowJobs = _showJobs;
			newWidgetContainers.ShowCompanies = _showCompanies;
			newWidgetContainers.ShowSite = _showSite;
			newWidgetContainers.ShowPeople = _showPeople;
			newWidgetContainers.JobHtml = _jobHtml;
			newWidgetContainers.CompanyHtml = _companyHtml;
			newWidgetContainers.SiteHtml = _siteHtml;
			newWidgetContainers.PeopleHtml = _peopleHtml;
			newWidgetContainers.Javascript = _javascript;
			newWidgetContainers.SearchCss = _searchCss;
			newWidgetContainers.DefaultProfessionId = _defaultProfessionId;
			newWidgetContainers.DefaultCountryId = _defaultCountryId;
			newWidgetContainers.DefaultLocationId = _defaultLocationId;
			newWidgetContainers.Width = _width;
			newWidgetContainers.Height = _height;
			newWidgetContainers.OnAdvancedSearch = _onAdvancedSearch;
			return newWidgetContainers;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the WidgetId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 WidgetId
		{
			get
			{
				return this.entityData.WidgetId; 
			}
			
			set
			{
				if (this.entityData.WidgetId == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.WidgetId, this.entityData.WidgetId);
				this.entityData.WidgetId = value;
				this.EntityId.WidgetId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.WidgetId, this.entityData.WidgetId);
				OnPropertyChanged("WidgetId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SiteId
		{
			get
			{
				return this.entityData.SiteId; 
			}
			
			set
			{
				if (this.entityData.SiteId == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.SiteId, this.entityData.SiteId);
				this.entityData.SiteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.SiteId, this.entityData.SiteId);
				OnPropertyChanged("SiteId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LanguageId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LanguageId
		{
			get
			{
				return this.entityData.LanguageId; 
			}
			
			set
			{
				if (this.entityData.LanguageId == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.LanguageId, this.entityData.LanguageId);
				this.entityData.LanguageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.LanguageId, this.entityData.LanguageId);
				OnPropertyChanged("LanguageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WidgetName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String WidgetName
		{
			get
			{
				return this.entityData.WidgetName; 
			}
			
			set
			{
				if (this.entityData.WidgetName == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.WidgetName, this.entityData.WidgetName);
				this.entityData.WidgetName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.WidgetName, this.entityData.WidgetName);
				OnPropertyChanged("WidgetName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WidgetDomain property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String WidgetDomain
		{
			get
			{
				return this.entityData.WidgetDomain; 
			}
			
			set
			{
				if (this.entityData.WidgetDomain == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.WidgetDomain, this.entityData.WidgetDomain);
				this.entityData.WidgetDomain = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.WidgetDomain, this.entityData.WidgetDomain);
				OnPropertyChanged("WidgetDomain");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WidgetContainerClass property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String WidgetContainerClass
		{
			get
			{
				return this.entityData.WidgetContainerClass; 
			}
			
			set
			{
				if (this.entityData.WidgetContainerClass == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.WidgetContainerClass, this.entityData.WidgetContainerClass);
				this.entityData.WidgetContainerClass = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.WidgetContainerClass, this.entityData.WidgetContainerClass);
				OnPropertyChanged("WidgetContainerClass");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WidgetContainerHeaderClass property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String WidgetContainerHeaderClass
		{
			get
			{
				return this.entityData.WidgetContainerHeaderClass; 
			}
			
			set
			{
				if (this.entityData.WidgetContainerHeaderClass == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.WidgetContainerHeaderClass, this.entityData.WidgetContainerHeaderClass);
				this.entityData.WidgetContainerHeaderClass = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.WidgetContainerHeaderClass, this.entityData.WidgetContainerHeaderClass);
				OnPropertyChanged("WidgetContainerHeaderClass");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WidgetItemClass property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String WidgetItemClass
		{
			get
			{
				return this.entityData.WidgetItemClass; 
			}
			
			set
			{
				if (this.entityData.WidgetItemClass == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.WidgetItemClass, this.entityData.WidgetItemClass);
				this.entityData.WidgetItemClass = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.WidgetItemClass, this.entityData.WidgetItemClass);
				OnPropertyChanged("WidgetItemClass");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WidgetJobLinkCss property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String WidgetJobLinkCss
		{
			get
			{
				return this.entityData.WidgetJobLinkCss; 
			}
			
			set
			{
				if (this.entityData.WidgetJobLinkCss == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.WidgetJobLinkCss, this.entityData.WidgetJobLinkCss);
				this.entityData.WidgetJobLinkCss = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.WidgetJobLinkCss, this.entityData.WidgetJobLinkCss);
				OnPropertyChanged("WidgetJobLinkCss");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WidgetItemLinkImageId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsWidgetItemLinkImageIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? WidgetItemLinkImageId
		{
			get
			{
				return this.entityData.WidgetItemLinkImageId; 
			}
			
			set
			{
				if (this.entityData.WidgetItemLinkImageId == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.WidgetItemLinkImageId, this.entityData.WidgetItemLinkImageId);
				this.entityData.WidgetItemLinkImageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.WidgetItemLinkImageId, this.entityData.WidgetItemLinkImageId);
				OnPropertyChanged("WidgetItemLinkImageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Valid property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsValidNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Valid
		{
			get
			{
				return this.entityData.Valid; 
			}
			
			set
			{
				if (this.entityData.Valid == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.Valid, this.entityData.Valid);
				this.entityData.Valid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.Valid, this.entityData.Valid);
				OnPropertyChanged("Valid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShowJobs property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsShowJobsNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ShowJobs
		{
			get
			{
				return this.entityData.ShowJobs; 
			}
			
			set
			{
				if (this.entityData.ShowJobs == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.ShowJobs, this.entityData.ShowJobs);
				this.entityData.ShowJobs = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.ShowJobs, this.entityData.ShowJobs);
				OnPropertyChanged("ShowJobs");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShowCompanies property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsShowCompaniesNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ShowCompanies
		{
			get
			{
				return this.entityData.ShowCompanies; 
			}
			
			set
			{
				if (this.entityData.ShowCompanies == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.ShowCompanies, this.entityData.ShowCompanies);
				this.entityData.ShowCompanies = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.ShowCompanies, this.entityData.ShowCompanies);
				OnPropertyChanged("ShowCompanies");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShowSite property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsShowSiteNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ShowSite
		{
			get
			{
				return this.entityData.ShowSite; 
			}
			
			set
			{
				if (this.entityData.ShowSite == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.ShowSite, this.entityData.ShowSite);
				this.entityData.ShowSite = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.ShowSite, this.entityData.ShowSite);
				OnPropertyChanged("ShowSite");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShowPeople property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsShowPeopleNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ShowPeople
		{
			get
			{
				return this.entityData.ShowPeople; 
			}
			
			set
			{
				if (this.entityData.ShowPeople == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.ShowPeople, this.entityData.ShowPeople);
				this.entityData.ShowPeople = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.ShowPeople, this.entityData.ShowPeople);
				OnPropertyChanged("ShowPeople");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JobHtml property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String JobHtml
		{
			get
			{
				return this.entityData.JobHtml; 
			}
			
			set
			{
				if (this.entityData.JobHtml == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.JobHtml, this.entityData.JobHtml);
				this.entityData.JobHtml = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.JobHtml, this.entityData.JobHtml);
				OnPropertyChanged("JobHtml");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyHtml property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String CompanyHtml
		{
			get
			{
				return this.entityData.CompanyHtml; 
			}
			
			set
			{
				if (this.entityData.CompanyHtml == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.CompanyHtml, this.entityData.CompanyHtml);
				this.entityData.CompanyHtml = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.CompanyHtml, this.entityData.CompanyHtml);
				OnPropertyChanged("CompanyHtml");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiteHtml property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String SiteHtml
		{
			get
			{
				return this.entityData.SiteHtml; 
			}
			
			set
			{
				if (this.entityData.SiteHtml == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.SiteHtml, this.entityData.SiteHtml);
				this.entityData.SiteHtml = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.SiteHtml, this.entityData.SiteHtml);
				OnPropertyChanged("SiteHtml");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PeopleHtml property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String PeopleHtml
		{
			get
			{
				return this.entityData.PeopleHtml; 
			}
			
			set
			{
				if (this.entityData.PeopleHtml == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.PeopleHtml, this.entityData.PeopleHtml);
				this.entityData.PeopleHtml = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.PeopleHtml, this.entityData.PeopleHtml);
				OnPropertyChanged("PeopleHtml");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Javascript property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Javascript
		{
			get
			{
				return this.entityData.Javascript; 
			}
			
			set
			{
				if (this.entityData.Javascript == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.Javascript, this.entityData.Javascript);
				this.entityData.Javascript = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.Javascript, this.entityData.Javascript);
				OnPropertyChanged("Javascript");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SearchCss property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String SearchCss
		{
			get
			{
				return this.entityData.SearchCss; 
			}
			
			set
			{
				if (this.entityData.SearchCss == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.SearchCss, this.entityData.SearchCss);
				this.entityData.SearchCss = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.SearchCss, this.entityData.SearchCss);
				OnPropertyChanged("SearchCss");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DefaultProfessionId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDefaultProfessionIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DefaultProfessionId
		{
			get
			{
				return this.entityData.DefaultProfessionId; 
			}
			
			set
			{
				if (this.entityData.DefaultProfessionId == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.DefaultProfessionId, this.entityData.DefaultProfessionId);
				this.entityData.DefaultProfessionId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.DefaultProfessionId, this.entityData.DefaultProfessionId);
				OnPropertyChanged("DefaultProfessionId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DefaultCountryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDefaultCountryIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DefaultCountryId
		{
			get
			{
				return this.entityData.DefaultCountryId; 
			}
			
			set
			{
				if (this.entityData.DefaultCountryId == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.DefaultCountryId, this.entityData.DefaultCountryId);
				this.entityData.DefaultCountryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.DefaultCountryId, this.entityData.DefaultCountryId);
				OnPropertyChanged("DefaultCountryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DefaultLocationId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDefaultLocationIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DefaultLocationId
		{
			get
			{
				return this.entityData.DefaultLocationId; 
			}
			
			set
			{
				if (this.entityData.DefaultLocationId == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.DefaultLocationId, this.entityData.DefaultLocationId);
				this.entityData.DefaultLocationId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.DefaultLocationId, this.entityData.DefaultLocationId);
				OnPropertyChanged("DefaultLocationId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Width property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsWidthNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Width
		{
			get
			{
				return this.entityData.Width; 
			}
			
			set
			{
				if (this.entityData.Width == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.Width, this.entityData.Width);
				this.entityData.Width = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.Width, this.entityData.Width);
				OnPropertyChanged("Width");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Height property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsHeightNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Height
		{
			get
			{
				return this.entityData.Height; 
			}
			
			set
			{
				if (this.entityData.Height == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.Height, this.entityData.Height);
				this.entityData.Height = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.Height, this.entityData.Height);
				OnPropertyChanged("Height");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnAdvancedSearch property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsOnAdvancedSearchNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? OnAdvancedSearch
		{
			get
			{
				return this.entityData.OnAdvancedSearch; 
			}
			
			set
			{
				if (this.entityData.OnAdvancedSearch == value)
					return;
					
				OnColumnChanging(WidgetContainersColumn.OnAdvancedSearch, this.entityData.OnAdvancedSearch);
				this.entityData.OnAdvancedSearch = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WidgetContainersColumn.OnAdvancedSearch, this.entityData.OnAdvancedSearch);
				OnPropertyChanged("OnAdvancedSearch");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Profession"/>.
		/// </summary>
		/// <value>The source Profession for DefaultProfessionId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Profession DefaultProfessionIdSource
      	{
            get { return entityData.DefaultProfessionIdSource; }
            set { entityData.DefaultProfessionIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Countries"/>.
		/// </summary>
		/// <value>The source Countries for DefaultCountryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Countries DefaultCountryIdSource
      	{
            get { return entityData.DefaultCountryIdSource; }
            set { entityData.DefaultCountryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Location"/>.
		/// </summary>
		/// <value>The source Location for DefaultLocationId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Location DefaultLocationIdSource
      	{
            get { return entityData.DefaultLocationIdSource; }
            set { entityData.DefaultLocationIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Languages"/>.
		/// </summary>
		/// <value>The source Languages for LanguageId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Languages LanguageIdSource
      	{
            get { return entityData.LanguageIdSource; }
            set { entityData.LanguageIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Sites SiteIdSource
      	{
            get { return entityData.SiteIdSource; }
            set { entityData.SiteIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("WidgetName", "Widget Name", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("WidgetDomain", "Widget Domain", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("WidgetContainerClass", "Widget Container Class", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("WidgetContainerHeaderClass", "Widget Container Header Class", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("WidgetItemClass", "Widget Item Class", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("WidgetJobLinkCss", "Widget Job Link Css", 255));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "WidgetContainers"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"WidgetID", "SiteID", "LanguageID", "WidgetName", "WidgetDomain", "WidgetContainerClass", "WidgetContainerHeaderClass", "WidgetItemClass", "WidgetJobLinkCSS", "WidgetItemLinkImageID", "Valid", "ShowJobs", "ShowCompanies", "ShowSite", "ShowPeople", "JobHtml", "CompanyHtml", "SiteHtml", "PeopleHtml", "Javascript", "SearchCSS", "DefaultProfessionID", "DefaultCountryID", "DefaultLocationID", "Width", "Height", "OnAdvancedSearch"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as WidgetContainersEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (WidgetContainers) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<WidgetContainers>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as WidgetContainers);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed WidgetContainers Entity 
		///</summary>
		protected virtual WidgetContainers Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			WidgetContainers copy = new WidgetContainers();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.WidgetId = this.WidgetId;
				copy.SiteId = this.SiteId;
				copy.LanguageId = this.LanguageId;
				copy.WidgetName = this.WidgetName;
				copy.WidgetDomain = this.WidgetDomain;
				copy.WidgetContainerClass = this.WidgetContainerClass;
				copy.WidgetContainerHeaderClass = this.WidgetContainerHeaderClass;
				copy.WidgetItemClass = this.WidgetItemClass;
				copy.WidgetJobLinkCss = this.WidgetJobLinkCss;
				copy.WidgetItemLinkImageId = this.WidgetItemLinkImageId;
				copy.Valid = this.Valid;
				copy.ShowJobs = this.ShowJobs;
				copy.ShowCompanies = this.ShowCompanies;
				copy.ShowSite = this.ShowSite;
				copy.ShowPeople = this.ShowPeople;
				copy.JobHtml = this.JobHtml;
				copy.CompanyHtml = this.CompanyHtml;
				copy.SiteHtml = this.SiteHtml;
				copy.PeopleHtml = this.PeopleHtml;
				copy.Javascript = this.Javascript;
				copy.SearchCss = this.SearchCss;
				copy.DefaultProfessionId = this.DefaultProfessionId;
				copy.DefaultCountryId = this.DefaultCountryId;
				copy.DefaultLocationId = this.DefaultLocationId;
				copy.Width = this.Width;
				copy.Height = this.Height;
				copy.OnAdvancedSearch = this.OnAdvancedSearch;
			
			if (this.DefaultProfessionIdSource != null && existingCopies.Contains(this.DefaultProfessionIdSource))
				copy.DefaultProfessionIdSource = existingCopies[this.DefaultProfessionIdSource] as Profession;
			else
				copy.DefaultProfessionIdSource = MakeCopyOf(this.DefaultProfessionIdSource, existingCopies) as Profession;
			if (this.DefaultCountryIdSource != null && existingCopies.Contains(this.DefaultCountryIdSource))
				copy.DefaultCountryIdSource = existingCopies[this.DefaultCountryIdSource] as Countries;
			else
				copy.DefaultCountryIdSource = MakeCopyOf(this.DefaultCountryIdSource, existingCopies) as Countries;
			if (this.DefaultLocationIdSource != null && existingCopies.Contains(this.DefaultLocationIdSource))
				copy.DefaultLocationIdSource = existingCopies[this.DefaultLocationIdSource] as Location;
			else
				copy.DefaultLocationIdSource = MakeCopyOf(this.DefaultLocationIdSource, existingCopies) as Location;
			if (this.LanguageIdSource != null && existingCopies.Contains(this.LanguageIdSource))
				copy.LanguageIdSource = existingCopies[this.LanguageIdSource] as Languages;
			else
				copy.LanguageIdSource = MakeCopyOf(this.LanguageIdSource, existingCopies) as Languages;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				copy.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				copy.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed WidgetContainers Entity 
		///</summary>
		public virtual WidgetContainers Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed WidgetContainers Entity which is a deep copy of the current entity.
		///</summary>
		public virtual WidgetContainers DeepCopy()
		{
			return EntityHelper.Clone<WidgetContainers>(this as WidgetContainers);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as WidgetContainersEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new WidgetContainersEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as WidgetContainersEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(WidgetContainersColumn column)
		{
			switch(column)
			{
					case WidgetContainersColumn.WidgetId:
					return entityData.WidgetId != _originalData.WidgetId;
					case WidgetContainersColumn.SiteId:
					return entityData.SiteId != _originalData.SiteId;
					case WidgetContainersColumn.LanguageId:
					return entityData.LanguageId != _originalData.LanguageId;
					case WidgetContainersColumn.WidgetName:
					return entityData.WidgetName != _originalData.WidgetName;
					case WidgetContainersColumn.WidgetDomain:
					return entityData.WidgetDomain != _originalData.WidgetDomain;
					case WidgetContainersColumn.WidgetContainerClass:
					return entityData.WidgetContainerClass != _originalData.WidgetContainerClass;
					case WidgetContainersColumn.WidgetContainerHeaderClass:
					return entityData.WidgetContainerHeaderClass != _originalData.WidgetContainerHeaderClass;
					case WidgetContainersColumn.WidgetItemClass:
					return entityData.WidgetItemClass != _originalData.WidgetItemClass;
					case WidgetContainersColumn.WidgetJobLinkCss:
					return entityData.WidgetJobLinkCss != _originalData.WidgetJobLinkCss;
					case WidgetContainersColumn.WidgetItemLinkImageId:
					return entityData.WidgetItemLinkImageId != _originalData.WidgetItemLinkImageId;
					case WidgetContainersColumn.Valid:
					return entityData.Valid != _originalData.Valid;
					case WidgetContainersColumn.ShowJobs:
					return entityData.ShowJobs != _originalData.ShowJobs;
					case WidgetContainersColumn.ShowCompanies:
					return entityData.ShowCompanies != _originalData.ShowCompanies;
					case WidgetContainersColumn.ShowSite:
					return entityData.ShowSite != _originalData.ShowSite;
					case WidgetContainersColumn.ShowPeople:
					return entityData.ShowPeople != _originalData.ShowPeople;
					case WidgetContainersColumn.JobHtml:
					return entityData.JobHtml != _originalData.JobHtml;
					case WidgetContainersColumn.CompanyHtml:
					return entityData.CompanyHtml != _originalData.CompanyHtml;
					case WidgetContainersColumn.SiteHtml:
					return entityData.SiteHtml != _originalData.SiteHtml;
					case WidgetContainersColumn.PeopleHtml:
					return entityData.PeopleHtml != _originalData.PeopleHtml;
					case WidgetContainersColumn.Javascript:
					return entityData.Javascript != _originalData.Javascript;
					case WidgetContainersColumn.SearchCss:
					return entityData.SearchCss != _originalData.SearchCss;
					case WidgetContainersColumn.DefaultProfessionId:
					return entityData.DefaultProfessionId != _originalData.DefaultProfessionId;
					case WidgetContainersColumn.DefaultCountryId:
					return entityData.DefaultCountryId != _originalData.DefaultCountryId;
					case WidgetContainersColumn.DefaultLocationId:
					return entityData.DefaultLocationId != _originalData.DefaultLocationId;
					case WidgetContainersColumn.Width:
					return entityData.Width != _originalData.Width;
					case WidgetContainersColumn.Height:
					return entityData.Height != _originalData.Height;
					case WidgetContainersColumn.OnAdvancedSearch:
					return entityData.OnAdvancedSearch != _originalData.OnAdvancedSearch;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< WidgetContainersColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.WidgetId != _originalData.WidgetId;
			result = result || entityData.SiteId != _originalData.SiteId;
			result = result || entityData.LanguageId != _originalData.LanguageId;
			result = result || entityData.WidgetName != _originalData.WidgetName;
			result = result || entityData.WidgetDomain != _originalData.WidgetDomain;
			result = result || entityData.WidgetContainerClass != _originalData.WidgetContainerClass;
			result = result || entityData.WidgetContainerHeaderClass != _originalData.WidgetContainerHeaderClass;
			result = result || entityData.WidgetItemClass != _originalData.WidgetItemClass;
			result = result || entityData.WidgetJobLinkCss != _originalData.WidgetJobLinkCss;
			result = result || entityData.WidgetItemLinkImageId != _originalData.WidgetItemLinkImageId;
			result = result || entityData.Valid != _originalData.Valid;
			result = result || entityData.ShowJobs != _originalData.ShowJobs;
			result = result || entityData.ShowCompanies != _originalData.ShowCompanies;
			result = result || entityData.ShowSite != _originalData.ShowSite;
			result = result || entityData.ShowPeople != _originalData.ShowPeople;
			result = result || entityData.JobHtml != _originalData.JobHtml;
			result = result || entityData.CompanyHtml != _originalData.CompanyHtml;
			result = result || entityData.SiteHtml != _originalData.SiteHtml;
			result = result || entityData.PeopleHtml != _originalData.PeopleHtml;
			result = result || entityData.Javascript != _originalData.Javascript;
			result = result || entityData.SearchCss != _originalData.SearchCss;
			result = result || entityData.DefaultProfessionId != _originalData.DefaultProfessionId;
			result = result || entityData.DefaultCountryId != _originalData.DefaultCountryId;
			result = result || entityData.DefaultLocationId != _originalData.DefaultLocationId;
			result = result || entityData.Width != _originalData.Width;
			result = result || entityData.Height != _originalData.Height;
			result = result || entityData.OnAdvancedSearch != _originalData.OnAdvancedSearch;
			return result;
		}	
		
		///<summary>
		///  Returns a WidgetContainers Entity with the original data.
		///</summary>
		public WidgetContainers GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateWidgetContainers(
				_originalData.SiteId,
				_originalData.LanguageId,
				_originalData.WidgetName,
				_originalData.WidgetDomain,
				_originalData.WidgetContainerClass,
				_originalData.WidgetContainerHeaderClass,
				_originalData.WidgetItemClass,
				_originalData.WidgetJobLinkCss,
				_originalData.WidgetItemLinkImageId,
				_originalData.Valid,
				_originalData.ShowJobs,
				_originalData.ShowCompanies,
				_originalData.ShowSite,
				_originalData.ShowPeople,
				_originalData.JobHtml,
				_originalData.CompanyHtml,
				_originalData.SiteHtml,
				_originalData.PeopleHtml,
				_originalData.Javascript,
				_originalData.SearchCss,
				_originalData.DefaultProfessionId,
				_originalData.DefaultCountryId,
				_originalData.DefaultLocationId,
				_originalData.Width,
				_originalData.Height,
				_originalData.OnAdvancedSearch
				);
				
			return (WidgetContainers)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="WidgetContainersBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is WidgetContainersBase)
				return ValueEquals(this, (WidgetContainersBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="WidgetContainersBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.WidgetId.GetHashCode() ^ 
					this.SiteId.GetHashCode() ^ 
					this.LanguageId.GetHashCode() ^ 
					((this.WidgetName == null) ? string.Empty : this.WidgetName.ToString()).GetHashCode() ^ 
					((this.WidgetDomain == null) ? string.Empty : this.WidgetDomain.ToString()).GetHashCode() ^ 
					((this.WidgetContainerClass == null) ? string.Empty : this.WidgetContainerClass.ToString()).GetHashCode() ^ 
					((this.WidgetContainerHeaderClass == null) ? string.Empty : this.WidgetContainerHeaderClass.ToString()).GetHashCode() ^ 
					((this.WidgetItemClass == null) ? string.Empty : this.WidgetItemClass.ToString()).GetHashCode() ^ 
					((this.WidgetJobLinkCss == null) ? string.Empty : this.WidgetJobLinkCss.ToString()).GetHashCode() ^ 
					((this.WidgetItemLinkImageId == null) ? string.Empty : this.WidgetItemLinkImageId.ToString()).GetHashCode() ^ 
					((this.Valid == null) ? string.Empty : this.Valid.ToString()).GetHashCode() ^ 
					((this.ShowJobs == null) ? string.Empty : this.ShowJobs.ToString()).GetHashCode() ^ 
					((this.ShowCompanies == null) ? string.Empty : this.ShowCompanies.ToString()).GetHashCode() ^ 
					((this.ShowSite == null) ? string.Empty : this.ShowSite.ToString()).GetHashCode() ^ 
					((this.ShowPeople == null) ? string.Empty : this.ShowPeople.ToString()).GetHashCode() ^ 
					((this.JobHtml == null) ? string.Empty : this.JobHtml.ToString()).GetHashCode() ^ 
					((this.CompanyHtml == null) ? string.Empty : this.CompanyHtml.ToString()).GetHashCode() ^ 
					((this.SiteHtml == null) ? string.Empty : this.SiteHtml.ToString()).GetHashCode() ^ 
					((this.PeopleHtml == null) ? string.Empty : this.PeopleHtml.ToString()).GetHashCode() ^ 
					((this.Javascript == null) ? string.Empty : this.Javascript.ToString()).GetHashCode() ^ 
					((this.SearchCss == null) ? string.Empty : this.SearchCss.ToString()).GetHashCode() ^ 
					((this.DefaultProfessionId == null) ? string.Empty : this.DefaultProfessionId.ToString()).GetHashCode() ^ 
					((this.DefaultCountryId == null) ? string.Empty : this.DefaultCountryId.ToString()).GetHashCode() ^ 
					((this.DefaultLocationId == null) ? string.Empty : this.DefaultLocationId.ToString()).GetHashCode() ^ 
					((this.Width == null) ? string.Empty : this.Width.ToString()).GetHashCode() ^ 
					((this.Height == null) ? string.Empty : this.Height.ToString()).GetHashCode() ^ 
					((this.OnAdvancedSearch == null) ? string.Empty : this.OnAdvancedSearch.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="WidgetContainersBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(WidgetContainersBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="WidgetContainersBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="WidgetContainersBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="WidgetContainersBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(WidgetContainersBase Object1, WidgetContainersBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.WidgetId != Object2.WidgetId)
				equal = false;
			if (Object1.SiteId != Object2.SiteId)
				equal = false;
			if (Object1.LanguageId != Object2.LanguageId)
				equal = false;
			if ( Object1.WidgetName != null && Object2.WidgetName != null )
			{
				if (Object1.WidgetName != Object2.WidgetName)
					equal = false;
			}
			else if (Object1.WidgetName == null ^ Object2.WidgetName == null )
			{
				equal = false;
			}
			if ( Object1.WidgetDomain != null && Object2.WidgetDomain != null )
			{
				if (Object1.WidgetDomain != Object2.WidgetDomain)
					equal = false;
			}
			else if (Object1.WidgetDomain == null ^ Object2.WidgetDomain == null )
			{
				equal = false;
			}
			if ( Object1.WidgetContainerClass != null && Object2.WidgetContainerClass != null )
			{
				if (Object1.WidgetContainerClass != Object2.WidgetContainerClass)
					equal = false;
			}
			else if (Object1.WidgetContainerClass == null ^ Object2.WidgetContainerClass == null )
			{
				equal = false;
			}
			if ( Object1.WidgetContainerHeaderClass != null && Object2.WidgetContainerHeaderClass != null )
			{
				if (Object1.WidgetContainerHeaderClass != Object2.WidgetContainerHeaderClass)
					equal = false;
			}
			else if (Object1.WidgetContainerHeaderClass == null ^ Object2.WidgetContainerHeaderClass == null )
			{
				equal = false;
			}
			if ( Object1.WidgetItemClass != null && Object2.WidgetItemClass != null )
			{
				if (Object1.WidgetItemClass != Object2.WidgetItemClass)
					equal = false;
			}
			else if (Object1.WidgetItemClass == null ^ Object2.WidgetItemClass == null )
			{
				equal = false;
			}
			if ( Object1.WidgetJobLinkCss != null && Object2.WidgetJobLinkCss != null )
			{
				if (Object1.WidgetJobLinkCss != Object2.WidgetJobLinkCss)
					equal = false;
			}
			else if (Object1.WidgetJobLinkCss == null ^ Object2.WidgetJobLinkCss == null )
			{
				equal = false;
			}
			if ( Object1.WidgetItemLinkImageId != null && Object2.WidgetItemLinkImageId != null )
			{
				if (Object1.WidgetItemLinkImageId != Object2.WidgetItemLinkImageId)
					equal = false;
			}
			else if (Object1.WidgetItemLinkImageId == null ^ Object2.WidgetItemLinkImageId == null )
			{
				equal = false;
			}
			if ( Object1.Valid != null && Object2.Valid != null )
			{
				if (Object1.Valid != Object2.Valid)
					equal = false;
			}
			else if (Object1.Valid == null ^ Object2.Valid == null )
			{
				equal = false;
			}
			if ( Object1.ShowJobs != null && Object2.ShowJobs != null )
			{
				if (Object1.ShowJobs != Object2.ShowJobs)
					equal = false;
			}
			else if (Object1.ShowJobs == null ^ Object2.ShowJobs == null )
			{
				equal = false;
			}
			if ( Object1.ShowCompanies != null && Object2.ShowCompanies != null )
			{
				if (Object1.ShowCompanies != Object2.ShowCompanies)
					equal = false;
			}
			else if (Object1.ShowCompanies == null ^ Object2.ShowCompanies == null )
			{
				equal = false;
			}
			if ( Object1.ShowSite != null && Object2.ShowSite != null )
			{
				if (Object1.ShowSite != Object2.ShowSite)
					equal = false;
			}
			else if (Object1.ShowSite == null ^ Object2.ShowSite == null )
			{
				equal = false;
			}
			if ( Object1.ShowPeople != null && Object2.ShowPeople != null )
			{
				if (Object1.ShowPeople != Object2.ShowPeople)
					equal = false;
			}
			else if (Object1.ShowPeople == null ^ Object2.ShowPeople == null )
			{
				equal = false;
			}
			if ( Object1.JobHtml != null && Object2.JobHtml != null )
			{
				if (Object1.JobHtml != Object2.JobHtml)
					equal = false;
			}
			else if (Object1.JobHtml == null ^ Object2.JobHtml == null )
			{
				equal = false;
			}
			if ( Object1.CompanyHtml != null && Object2.CompanyHtml != null )
			{
				if (Object1.CompanyHtml != Object2.CompanyHtml)
					equal = false;
			}
			else if (Object1.CompanyHtml == null ^ Object2.CompanyHtml == null )
			{
				equal = false;
			}
			if ( Object1.SiteHtml != null && Object2.SiteHtml != null )
			{
				if (Object1.SiteHtml != Object2.SiteHtml)
					equal = false;
			}
			else if (Object1.SiteHtml == null ^ Object2.SiteHtml == null )
			{
				equal = false;
			}
			if ( Object1.PeopleHtml != null && Object2.PeopleHtml != null )
			{
				if (Object1.PeopleHtml != Object2.PeopleHtml)
					equal = false;
			}
			else if (Object1.PeopleHtml == null ^ Object2.PeopleHtml == null )
			{
				equal = false;
			}
			if ( Object1.Javascript != null && Object2.Javascript != null )
			{
				if (Object1.Javascript != Object2.Javascript)
					equal = false;
			}
			else if (Object1.Javascript == null ^ Object2.Javascript == null )
			{
				equal = false;
			}
			if ( Object1.SearchCss != null && Object2.SearchCss != null )
			{
				if (Object1.SearchCss != Object2.SearchCss)
					equal = false;
			}
			else if (Object1.SearchCss == null ^ Object2.SearchCss == null )
			{
				equal = false;
			}
			if ( Object1.DefaultProfessionId != null && Object2.DefaultProfessionId != null )
			{
				if (Object1.DefaultProfessionId != Object2.DefaultProfessionId)
					equal = false;
			}
			else if (Object1.DefaultProfessionId == null ^ Object2.DefaultProfessionId == null )
			{
				equal = false;
			}
			if ( Object1.DefaultCountryId != null && Object2.DefaultCountryId != null )
			{
				if (Object1.DefaultCountryId != Object2.DefaultCountryId)
					equal = false;
			}
			else if (Object1.DefaultCountryId == null ^ Object2.DefaultCountryId == null )
			{
				equal = false;
			}
			if ( Object1.DefaultLocationId != null && Object2.DefaultLocationId != null )
			{
				if (Object1.DefaultLocationId != Object2.DefaultLocationId)
					equal = false;
			}
			else if (Object1.DefaultLocationId == null ^ Object2.DefaultLocationId == null )
			{
				equal = false;
			}
			if ( Object1.Width != null && Object2.Width != null )
			{
				if (Object1.Width != Object2.Width)
					equal = false;
			}
			else if (Object1.Width == null ^ Object2.Width == null )
			{
				equal = false;
			}
			if ( Object1.Height != null && Object2.Height != null )
			{
				if (Object1.Height != Object2.Height)
					equal = false;
			}
			else if (Object1.Height == null ^ Object2.Height == null )
			{
				equal = false;
			}
			if ( Object1.OnAdvancedSearch != null && Object2.OnAdvancedSearch != null )
			{
				if (Object1.OnAdvancedSearch != Object2.OnAdvancedSearch)
					equal = false;
			}
			else if (Object1.OnAdvancedSearch == null ^ Object2.OnAdvancedSearch == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((WidgetContainersBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static WidgetContainersComparer GetComparer()
        {
            return new WidgetContainersComparer();
        }
        */

        // Comparer delegates back to WidgetContainers
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(WidgetContainers rhs, WidgetContainersColumn which)
        {
            switch (which)
            {
            	
            	
            	case WidgetContainersColumn.WidgetId:
            		return this.WidgetId.CompareTo(rhs.WidgetId);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.SiteId:
            		return this.SiteId.CompareTo(rhs.SiteId);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.LanguageId:
            		return this.LanguageId.CompareTo(rhs.LanguageId);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.WidgetName:
            		return this.WidgetName.CompareTo(rhs.WidgetName);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.WidgetDomain:
            		return this.WidgetDomain.CompareTo(rhs.WidgetDomain);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.WidgetContainerClass:
            		return this.WidgetContainerClass.CompareTo(rhs.WidgetContainerClass);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.WidgetContainerHeaderClass:
            		return this.WidgetContainerHeaderClass.CompareTo(rhs.WidgetContainerHeaderClass);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.WidgetItemClass:
            		return this.WidgetItemClass.CompareTo(rhs.WidgetItemClass);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.WidgetJobLinkCss:
            		return this.WidgetJobLinkCss.CompareTo(rhs.WidgetJobLinkCss);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.WidgetItemLinkImageId:
            		return this.WidgetItemLinkImageId.Value.CompareTo(rhs.WidgetItemLinkImageId.Value);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.Valid:
            		return this.Valid.Value.CompareTo(rhs.Valid.Value);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.ShowJobs:
            		return this.ShowJobs.Value.CompareTo(rhs.ShowJobs.Value);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.ShowCompanies:
            		return this.ShowCompanies.Value.CompareTo(rhs.ShowCompanies.Value);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.ShowSite:
            		return this.ShowSite.Value.CompareTo(rhs.ShowSite.Value);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.ShowPeople:
            		return this.ShowPeople.Value.CompareTo(rhs.ShowPeople.Value);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.JobHtml:
            		return this.JobHtml.CompareTo(rhs.JobHtml);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.CompanyHtml:
            		return this.CompanyHtml.CompareTo(rhs.CompanyHtml);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.SiteHtml:
            		return this.SiteHtml.CompareTo(rhs.SiteHtml);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.PeopleHtml:
            		return this.PeopleHtml.CompareTo(rhs.PeopleHtml);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.Javascript:
            		return this.Javascript.CompareTo(rhs.Javascript);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.SearchCss:
            		return this.SearchCss.CompareTo(rhs.SearchCss);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.DefaultProfessionId:
            		return this.DefaultProfessionId.Value.CompareTo(rhs.DefaultProfessionId.Value);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.DefaultCountryId:
            		return this.DefaultCountryId.Value.CompareTo(rhs.DefaultCountryId.Value);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.DefaultLocationId:
            		return this.DefaultLocationId.Value.CompareTo(rhs.DefaultLocationId.Value);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.Width:
            		return this.Width.Value.CompareTo(rhs.Width.Value);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.Height:
            		return this.Height.Value.CompareTo(rhs.Height.Value);
            		
            		                 
            	
            	
            	case WidgetContainersColumn.OnAdvancedSearch:
            		return this.OnAdvancedSearch.Value.CompareTo(rhs.OnAdvancedSearch.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<WidgetContainersKey> Members
		
		// member variable for the EntityId property
		private WidgetContainersKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual WidgetContainersKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new WidgetContainersKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("WidgetContainers")
					.Append("|").Append( this.WidgetId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{28}{27}- WidgetId: {0}{27}- SiteId: {1}{27}- LanguageId: {2}{27}- WidgetName: {3}{27}- WidgetDomain: {4}{27}- WidgetContainerClass: {5}{27}- WidgetContainerHeaderClass: {6}{27}- WidgetItemClass: {7}{27}- WidgetJobLinkCss: {8}{27}- WidgetItemLinkImageId: {9}{27}- Valid: {10}{27}- ShowJobs: {11}{27}- ShowCompanies: {12}{27}- ShowSite: {13}{27}- ShowPeople: {14}{27}- JobHtml: {15}{27}- CompanyHtml: {16}{27}- SiteHtml: {17}{27}- PeopleHtml: {18}{27}- Javascript: {19}{27}- SearchCss: {20}{27}- DefaultProfessionId: {21}{27}- DefaultCountryId: {22}{27}- DefaultLocationId: {23}{27}- Width: {24}{27}- Height: {25}{27}- OnAdvancedSearch: {26}{27}{29}", 
				this.WidgetId,
				this.SiteId,
				this.LanguageId,
				(this.WidgetName == null) ? string.Empty : this.WidgetName.ToString(),
				(this.WidgetDomain == null) ? string.Empty : this.WidgetDomain.ToString(),
				(this.WidgetContainerClass == null) ? string.Empty : this.WidgetContainerClass.ToString(),
				(this.WidgetContainerHeaderClass == null) ? string.Empty : this.WidgetContainerHeaderClass.ToString(),
				(this.WidgetItemClass == null) ? string.Empty : this.WidgetItemClass.ToString(),
				(this.WidgetJobLinkCss == null) ? string.Empty : this.WidgetJobLinkCss.ToString(),
				(this.WidgetItemLinkImageId == null) ? string.Empty : this.WidgetItemLinkImageId.ToString(),
				(this.Valid == null) ? string.Empty : this.Valid.ToString(),
				(this.ShowJobs == null) ? string.Empty : this.ShowJobs.ToString(),
				(this.ShowCompanies == null) ? string.Empty : this.ShowCompanies.ToString(),
				(this.ShowSite == null) ? string.Empty : this.ShowSite.ToString(),
				(this.ShowPeople == null) ? string.Empty : this.ShowPeople.ToString(),
				(this.JobHtml == null) ? string.Empty : this.JobHtml.ToString(),
				(this.CompanyHtml == null) ? string.Empty : this.CompanyHtml.ToString(),
				(this.SiteHtml == null) ? string.Empty : this.SiteHtml.ToString(),
				(this.PeopleHtml == null) ? string.Empty : this.PeopleHtml.ToString(),
				(this.Javascript == null) ? string.Empty : this.Javascript.ToString(),
				(this.SearchCss == null) ? string.Empty : this.SearchCss.ToString(),
				(this.DefaultProfessionId == null) ? string.Empty : this.DefaultProfessionId.ToString(),
				(this.DefaultCountryId == null) ? string.Empty : this.DefaultCountryId.ToString(),
				(this.DefaultLocationId == null) ? string.Empty : this.DefaultLocationId.ToString(),
				(this.Width == null) ? string.Empty : this.Width.ToString(),
				(this.Height == null) ? string.Empty : this.Height.ToString(),
				(this.OnAdvancedSearch == null) ? string.Empty : this.OnAdvancedSearch.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'WidgetContainers' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class WidgetContainersEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// WidgetID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "WidgetContainers"</remarks>
		public System.Int32 WidgetId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SiteID : 
		/// </summary>
		public System.Int32		  SiteId = (int)0;
		
		/// <summary>
		/// LanguageID : 
		/// </summary>
		public System.Int32		  LanguageId = (int)0;
		
		/// <summary>
		/// WidgetName : 
		/// </summary>
		public System.String		  WidgetName = null;
		
		/// <summary>
		/// WidgetDomain : 
		/// </summary>
		public System.String		  WidgetDomain = null;
		
		/// <summary>
		/// WidgetContainerClass : 
		/// </summary>
		public System.String		  WidgetContainerClass = null;
		
		/// <summary>
		/// WidgetContainerHeaderClass : 
		/// </summary>
		public System.String		  WidgetContainerHeaderClass = null;
		
		/// <summary>
		/// WidgetItemClass : 
		/// </summary>
		public System.String		  WidgetItemClass = null;
		
		/// <summary>
		/// WidgetJobLinkCSS : 
		/// </summary>
		public System.String		  WidgetJobLinkCss = null;
		
		/// <summary>
		/// WidgetItemLinkImageID : 
		/// </summary>
		public System.Int32?		  WidgetItemLinkImageId = null;
		
		/// <summary>
		/// Valid : 
		/// </summary>
		public System.Boolean?		  Valid = null;
		
		/// <summary>
		/// ShowJobs : 
		/// </summary>
		public System.Boolean?		  ShowJobs = null;
		
		/// <summary>
		/// ShowCompanies : 
		/// </summary>
		public System.Boolean?		  ShowCompanies = null;
		
		/// <summary>
		/// ShowSite : 
		/// </summary>
		public System.Boolean?		  ShowSite = null;
		
		/// <summary>
		/// ShowPeople : 
		/// </summary>
		public System.Boolean?		  ShowPeople = null;
		
		/// <summary>
		/// JobHtml : 
		/// </summary>
		public System.String		  JobHtml = null;
		
		/// <summary>
		/// CompanyHtml : 
		/// </summary>
		public System.String		  CompanyHtml = null;
		
		/// <summary>
		/// SiteHtml : 
		/// </summary>
		public System.String		  SiteHtml = null;
		
		/// <summary>
		/// PeopleHtml : 
		/// </summary>
		public System.String		  PeopleHtml = null;
		
		/// <summary>
		/// Javascript : 
		/// </summary>
		public System.String		  Javascript = null;
		
		/// <summary>
		/// SearchCSS : 
		/// </summary>
		public System.String		  SearchCss = null;
		
		/// <summary>
		/// DefaultProfessionID : 
		/// </summary>
		public System.Int32?		  DefaultProfessionId = null;
		
		/// <summary>
		/// DefaultCountryID : 
		/// </summary>
		public System.Int32?		  DefaultCountryId = null;
		
		/// <summary>
		/// DefaultLocationID : 
		/// </summary>
		public System.Int32?		  DefaultLocationId = null;
		
		/// <summary>
		/// Width : 
		/// </summary>
		public System.Int32?		  Width = null;
		
		/// <summary>
		/// Height : 
		/// </summary>
		public System.Int32?		  Height = null;
		
		/// <summary>
		/// OnAdvancedSearch : 
		/// </summary>
		public System.Boolean?		  OnAdvancedSearch = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Profession _defaultProfessionIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Profession"/>.
		/// </summary>
		/// <value>The source Profession for DefaultProfessionId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Profession DefaultProfessionIdSource
      	{
            get { return this._defaultProfessionIdSource; }
            set { this._defaultProfessionIdSource = value; }
      	}
		private Countries _defaultCountryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Countries"/>.
		/// </summary>
		/// <value>The source Countries for DefaultCountryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Countries DefaultCountryIdSource
      	{
            get { return this._defaultCountryIdSource; }
            set { this._defaultCountryIdSource = value; }
      	}
		private Location _defaultLocationIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Location"/>.
		/// </summary>
		/// <value>The source Location for DefaultLocationId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Location DefaultLocationIdSource
      	{
            get { return this._defaultLocationIdSource; }
            set { this._defaultLocationIdSource = value; }
      	}
		private Languages _languageIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Languages"/>.
		/// </summary>
		/// <value>The source Languages for LanguageId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Languages LanguageIdSource
      	{
            get { return this._languageIdSource; }
            set { this._languageIdSource = value; }
      	}
		private Sites _siteIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Sites"/>.
		/// </summary>
		/// <value>The source Sites for SiteId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Sites SiteIdSource
      	{
            get { return this._siteIdSource; }
            set { this._siteIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			WidgetContainersEntityData _tmp = new WidgetContainersEntityData();
						
			_tmp.WidgetId = this.WidgetId;
			
			_tmp.SiteId = this.SiteId;
			_tmp.LanguageId = this.LanguageId;
			_tmp.WidgetName = this.WidgetName;
			_tmp.WidgetDomain = this.WidgetDomain;
			_tmp.WidgetContainerClass = this.WidgetContainerClass;
			_tmp.WidgetContainerHeaderClass = this.WidgetContainerHeaderClass;
			_tmp.WidgetItemClass = this.WidgetItemClass;
			_tmp.WidgetJobLinkCss = this.WidgetJobLinkCss;
			_tmp.WidgetItemLinkImageId = this.WidgetItemLinkImageId;
			_tmp.Valid = this.Valid;
			_tmp.ShowJobs = this.ShowJobs;
			_tmp.ShowCompanies = this.ShowCompanies;
			_tmp.ShowSite = this.ShowSite;
			_tmp.ShowPeople = this.ShowPeople;
			_tmp.JobHtml = this.JobHtml;
			_tmp.CompanyHtml = this.CompanyHtml;
			_tmp.SiteHtml = this.SiteHtml;
			_tmp.PeopleHtml = this.PeopleHtml;
			_tmp.Javascript = this.Javascript;
			_tmp.SearchCss = this.SearchCss;
			_tmp.DefaultProfessionId = this.DefaultProfessionId;
			_tmp.DefaultCountryId = this.DefaultCountryId;
			_tmp.DefaultLocationId = this.DefaultLocationId;
			_tmp.Width = this.Width;
			_tmp.Height = this.Height;
			_tmp.OnAdvancedSearch = this.OnAdvancedSearch;
			
			#region Source Parent Composite Entities
			if (this.DefaultProfessionIdSource != null)
				_tmp.DefaultProfessionIdSource = MakeCopyOf(this.DefaultProfessionIdSource) as Profession;
			if (this.DefaultCountryIdSource != null)
				_tmp.DefaultCountryIdSource = MakeCopyOf(this.DefaultCountryIdSource) as Countries;
			if (this.DefaultLocationIdSource != null)
				_tmp.DefaultLocationIdSource = MakeCopyOf(this.DefaultLocationIdSource) as Location;
			if (this.LanguageIdSource != null)
				_tmp.LanguageIdSource = MakeCopyOf(this.LanguageIdSource) as Languages;
			if (this.SiteIdSource != null)
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource) as Sites;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			WidgetContainersEntityData _tmp = new WidgetContainersEntityData();
						
			_tmp.WidgetId = this.WidgetId;
			
			_tmp.SiteId = this.SiteId;
			_tmp.LanguageId = this.LanguageId;
			_tmp.WidgetName = this.WidgetName;
			_tmp.WidgetDomain = this.WidgetDomain;
			_tmp.WidgetContainerClass = this.WidgetContainerClass;
			_tmp.WidgetContainerHeaderClass = this.WidgetContainerHeaderClass;
			_tmp.WidgetItemClass = this.WidgetItemClass;
			_tmp.WidgetJobLinkCss = this.WidgetJobLinkCss;
			_tmp.WidgetItemLinkImageId = this.WidgetItemLinkImageId;
			_tmp.Valid = this.Valid;
			_tmp.ShowJobs = this.ShowJobs;
			_tmp.ShowCompanies = this.ShowCompanies;
			_tmp.ShowSite = this.ShowSite;
			_tmp.ShowPeople = this.ShowPeople;
			_tmp.JobHtml = this.JobHtml;
			_tmp.CompanyHtml = this.CompanyHtml;
			_tmp.SiteHtml = this.SiteHtml;
			_tmp.PeopleHtml = this.PeopleHtml;
			_tmp.Javascript = this.Javascript;
			_tmp.SearchCss = this.SearchCss;
			_tmp.DefaultProfessionId = this.DefaultProfessionId;
			_tmp.DefaultCountryId = this.DefaultCountryId;
			_tmp.DefaultLocationId = this.DefaultLocationId;
			_tmp.Width = this.Width;
			_tmp.Height = this.Height;
			_tmp.OnAdvancedSearch = this.OnAdvancedSearch;
			
			#region Source Parent Composite Entities
			if (this.DefaultProfessionIdSource != null && existingCopies.Contains(this.DefaultProfessionIdSource))
				_tmp.DefaultProfessionIdSource = existingCopies[this.DefaultProfessionIdSource] as Profession;
			else
				_tmp.DefaultProfessionIdSource = MakeCopyOf(this.DefaultProfessionIdSource, existingCopies) as Profession;
			if (this.DefaultCountryIdSource != null && existingCopies.Contains(this.DefaultCountryIdSource))
				_tmp.DefaultCountryIdSource = existingCopies[this.DefaultCountryIdSource] as Countries;
			else
				_tmp.DefaultCountryIdSource = MakeCopyOf(this.DefaultCountryIdSource, existingCopies) as Countries;
			if (this.DefaultLocationIdSource != null && existingCopies.Contains(this.DefaultLocationIdSource))
				_tmp.DefaultLocationIdSource = existingCopies[this.DefaultLocationIdSource] as Location;
			else
				_tmp.DefaultLocationIdSource = MakeCopyOf(this.DefaultLocationIdSource, existingCopies) as Location;
			if (this.LanguageIdSource != null && existingCopies.Contains(this.LanguageIdSource))
				_tmp.LanguageIdSource = existingCopies[this.LanguageIdSource] as Languages;
			else
				_tmp.LanguageIdSource = MakeCopyOf(this.LanguageIdSource, existingCopies) as Languages;
			if (this.SiteIdSource != null && existingCopies.Contains(this.SiteIdSource))
				_tmp.SiteIdSource = existingCopies[this.SiteIdSource] as Sites;
			else
				_tmp.SiteIdSource = MakeCopyOf(this.SiteIdSource, existingCopies) as Sites;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WidgetContainersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(WidgetContainersColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WidgetContainersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(WidgetContainersColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WidgetContainersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(WidgetContainersColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				WidgetContainersEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new WidgetContainersEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WidgetContainersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(WidgetContainersColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				WidgetContainersEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new WidgetContainersEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region WidgetContainersEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="WidgetContainers"/> object.
	/// </remarks>
	public class WidgetContainersEventArgs : System.EventArgs
	{
		private WidgetContainersColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the WidgetContainersEventArgs class.
		///</summary>
		public WidgetContainersEventArgs(WidgetContainersColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the WidgetContainersEventArgs class.
		///</summary>
		public WidgetContainersEventArgs(WidgetContainersColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The WidgetContainersColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="WidgetContainersColumn" />
		public WidgetContainersColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all WidgetContainers related events.
	///</summary>
	public delegate void WidgetContainersEventHandler(object sender, WidgetContainersEventArgs e);
	
	#region WidgetContainersComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class WidgetContainersComparer : System.Collections.Generic.IComparer<WidgetContainers>
	{
		WidgetContainersColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:WidgetContainersComparer"/> class.
        /// </summary>
		public WidgetContainersComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:WidgetContainersComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public WidgetContainersComparer(WidgetContainersColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="WidgetContainers"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="WidgetContainers"/> to compare.</param>
        /// <param name="b">The second <c>WidgetContainers</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(WidgetContainers a, WidgetContainers b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(WidgetContainers entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(WidgetContainers a, WidgetContainers b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public WidgetContainersColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region WidgetContainersKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="WidgetContainers"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class WidgetContainersKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the WidgetContainersKey class.
		/// </summary>
		public WidgetContainersKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the WidgetContainersKey class.
		/// </summary>
		public WidgetContainersKey(WidgetContainersBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.WidgetId = entity.WidgetId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the WidgetContainersKey class.
		/// </summary>
		public WidgetContainersKey(System.Int32 _widgetId)
		{
			#region Init Properties

			this.WidgetId = _widgetId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private WidgetContainersBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public WidgetContainersBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the WidgetId property
		private System.Int32 _widgetId;
		
		/// <summary>
		/// Gets or sets the WidgetId property.
		/// </summary>
		public System.Int32 WidgetId
		{
			get { return _widgetId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.WidgetId = value;
				
				_widgetId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				WidgetId = ( values["WidgetId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["WidgetId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("WidgetId", WidgetId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("WidgetId: {0}{1}",
								WidgetId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region WidgetContainersColumn Enum
	
	/// <summary>
	/// Enumerate the WidgetContainers columns.
	/// </summary>
	[Serializable]
	public enum WidgetContainersColumn : int
	{
		/// <summary>
		/// WidgetId : 
		/// </summary>
		[EnumTextValue("WidgetID")]
		[ColumnEnum("WidgetID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		WidgetId = 1,
		/// <summary>
		/// SiteId : 
		/// </summary>
		[EnumTextValue("SiteID")]
		[ColumnEnum("SiteID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SiteId = 2,
		/// <summary>
		/// LanguageId : 
		/// </summary>
		[EnumTextValue("LanguageID")]
		[ColumnEnum("LanguageID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LanguageId = 3,
		/// <summary>
		/// WidgetName : 
		/// </summary>
		[EnumTextValue("WidgetName")]
		[ColumnEnum("WidgetName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		WidgetName = 4,
		/// <summary>
		/// WidgetDomain : 
		/// </summary>
		[EnumTextValue("WidgetDomain")]
		[ColumnEnum("WidgetDomain", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		WidgetDomain = 5,
		/// <summary>
		/// WidgetContainerClass : 
		/// </summary>
		[EnumTextValue("WidgetContainerClass")]
		[ColumnEnum("WidgetContainerClass", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		WidgetContainerClass = 6,
		/// <summary>
		/// WidgetContainerHeaderClass : 
		/// </summary>
		[EnumTextValue("WidgetContainerHeaderClass")]
		[ColumnEnum("WidgetContainerHeaderClass", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		WidgetContainerHeaderClass = 7,
		/// <summary>
		/// WidgetItemClass : 
		/// </summary>
		[EnumTextValue("WidgetItemClass")]
		[ColumnEnum("WidgetItemClass", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		WidgetItemClass = 8,
		/// <summary>
		/// WidgetJobLinkCss : 
		/// </summary>
		[EnumTextValue("WidgetJobLinkCSS")]
		[ColumnEnum("WidgetJobLinkCSS", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		WidgetJobLinkCss = 9,
		/// <summary>
		/// WidgetItemLinkImageId : 
		/// </summary>
		[EnumTextValue("WidgetItemLinkImageID")]
		[ColumnEnum("WidgetItemLinkImageID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		WidgetItemLinkImageId = 10,
		/// <summary>
		/// Valid : 
		/// </summary>
		[EnumTextValue("Valid")]
		[ColumnEnum("Valid", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Valid = 11,
		/// <summary>
		/// ShowJobs : 
		/// </summary>
		[EnumTextValue("ShowJobs")]
		[ColumnEnum("ShowJobs", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ShowJobs = 12,
		/// <summary>
		/// ShowCompanies : 
		/// </summary>
		[EnumTextValue("ShowCompanies")]
		[ColumnEnum("ShowCompanies", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ShowCompanies = 13,
		/// <summary>
		/// ShowSite : 
		/// </summary>
		[EnumTextValue("ShowSite")]
		[ColumnEnum("ShowSite", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ShowSite = 14,
		/// <summary>
		/// ShowPeople : 
		/// </summary>
		[EnumTextValue("ShowPeople")]
		[ColumnEnum("ShowPeople", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ShowPeople = 15,
		/// <summary>
		/// JobHtml : 
		/// </summary>
		[EnumTextValue("JobHtml")]
		[ColumnEnum("JobHtml", typeof(System.String), System.Data.DbType.String, false, false, true)]
		JobHtml = 16,
		/// <summary>
		/// CompanyHtml : 
		/// </summary>
		[EnumTextValue("CompanyHtml")]
		[ColumnEnum("CompanyHtml", typeof(System.String), System.Data.DbType.String, false, false, true)]
		CompanyHtml = 17,
		/// <summary>
		/// SiteHtml : 
		/// </summary>
		[EnumTextValue("SiteHtml")]
		[ColumnEnum("SiteHtml", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SiteHtml = 18,
		/// <summary>
		/// PeopleHtml : 
		/// </summary>
		[EnumTextValue("PeopleHtml")]
		[ColumnEnum("PeopleHtml", typeof(System.String), System.Data.DbType.String, false, false, true)]
		PeopleHtml = 19,
		/// <summary>
		/// Javascript : 
		/// </summary>
		[EnumTextValue("Javascript")]
		[ColumnEnum("Javascript", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		Javascript = 20,
		/// <summary>
		/// SearchCss : 
		/// </summary>
		[EnumTextValue("SearchCSS")]
		[ColumnEnum("SearchCSS", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		SearchCss = 21,
		/// <summary>
		/// DefaultProfessionId : 
		/// </summary>
		[EnumTextValue("DefaultProfessionID")]
		[ColumnEnum("DefaultProfessionID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DefaultProfessionId = 22,
		/// <summary>
		/// DefaultCountryId : 
		/// </summary>
		[EnumTextValue("DefaultCountryID")]
		[ColumnEnum("DefaultCountryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DefaultCountryId = 23,
		/// <summary>
		/// DefaultLocationId : 
		/// </summary>
		[EnumTextValue("DefaultLocationID")]
		[ColumnEnum("DefaultLocationID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DefaultLocationId = 24,
		/// <summary>
		/// Width : 
		/// </summary>
		[EnumTextValue("Width")]
		[ColumnEnum("Width", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Width = 25,
		/// <summary>
		/// Height : 
		/// </summary>
		[EnumTextValue("Height")]
		[ColumnEnum("Height", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Height = 26,
		/// <summary>
		/// OnAdvancedSearch : 
		/// </summary>
		[EnumTextValue("OnAdvancedSearch")]
		[ColumnEnum("OnAdvancedSearch", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		OnAdvancedSearch = 27
	}//End enum

	#endregion WidgetContainersColumn Enum

} // end namespace

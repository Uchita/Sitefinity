
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdvertiserUsers.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using JXTPortal.Entities;
using JXTPortal.Entities.Validation;
//using Entities = JXTPortal.Entities;
using JXTPortal.Data;
using JXTPortal.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace JXTPortal
{		
	
	///<summary>
	/// An object representation of the 'AdvertiserUsers' table.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the AdvertiserUsers.cs file instead.
	/// All custom implementations should be done in the <see cref="AdvertiserUsers"/> class.
	/// </remarks>
	[DataObject]
	[CLSCompliant(true)]
	public partial class AdvertiserUsersServiceBase : ServiceBase<AdvertiserUsers, AdvertiserUsersKey>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdvertiserUsers"/> instance .
		///</summary>
		public AdvertiserUsersServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdvertiserUsers"/> instance.
		///</summary>
		///<param name="_advertiserId"></param>
		///<param name="_primaryAccount"></param>
		///<param name="_userName"></param>
		///<param name="_userPassword"></param>
		///<param name="_firstName"></param>
		///<param name="_surname"></param>
		///<param name="_email"></param>
		///<param name="_applicationEmailAddress"></param>
		///<param name="_phone"></param>
		///<param name="_fax"></param>
		///<param name="_accountStatus"></param>
		///<param name="_newsletter"></param>
		///<param name="_newsletterFormat"></param>
		///<param name="_emailFormat"></param>
		///<param name="_validated"></param>
		///<param name="_validateGuid"></param>
		///<param name="_description"></param>
		///<param name="_lastLoginDate"></param>
		///<param name="_lastModified"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_jobExpiryNotification"></param>
		///<param name="_loginAttempts"></param>
		///<param name="_lastAttemptDate"></param>
		///<param name="_status"></param>
		///<param name="_lastTermsAndConditionsDate"></param>
		///<param name="_defaultLanguageId"></param>
		///<param name="_externalAdvertiserUserId"></param>
		public static AdvertiserUsers CreateAdvertiserUsers(System.Int32 _advertiserId, System.Boolean _primaryAccount, System.String _userName, System.String _userPassword, System.String _firstName, System.String _surname, System.String _email, System.String _applicationEmailAddress, System.String _phone, System.String _fax, System.Int32? _accountStatus, System.Boolean _newsletter, System.Int32 _newsletterFormat, System.Int32 _emailFormat, System.Boolean? _validated, System.Guid? _validateGuid, System.String _description, System.DateTime? _lastLoginDate, System.DateTime? _lastModified, System.Int32 _lastModifiedBy, System.Boolean _jobExpiryNotification, System.Int32 _loginAttempts, System.DateTime? _lastAttemptDate, System.Int32 _status, System.DateTime? _lastTermsAndConditionsDate, System.Int32? _defaultLanguageId, System.String _externalAdvertiserUserId)
		{
			AdvertiserUsers newEntityAdvertiserUsers = new AdvertiserUsers();
			newEntityAdvertiserUsers.AdvertiserId  = _advertiserId;
			newEntityAdvertiserUsers.PrimaryAccount  = _primaryAccount;
			newEntityAdvertiserUsers.UserName  = _userName;
			newEntityAdvertiserUsers.UserPassword  = _userPassword;
			newEntityAdvertiserUsers.FirstName  = _firstName;
			newEntityAdvertiserUsers.Surname  = _surname;
			newEntityAdvertiserUsers.Email  = _email;
			newEntityAdvertiserUsers.ApplicationEmailAddress  = _applicationEmailAddress;
			newEntityAdvertiserUsers.Phone  = _phone;
			newEntityAdvertiserUsers.Fax  = _fax;
			newEntityAdvertiserUsers.AccountStatus  = _accountStatus;
			newEntityAdvertiserUsers.Newsletter  = _newsletter;
			newEntityAdvertiserUsers.NewsletterFormat  = _newsletterFormat;
			newEntityAdvertiserUsers.EmailFormat  = _emailFormat;
			newEntityAdvertiserUsers.Validated  = _validated;
			newEntityAdvertiserUsers.ValidateGuid  = _validateGuid;
			newEntityAdvertiserUsers.Description  = _description;
			newEntityAdvertiserUsers.LastLoginDate  = _lastLoginDate;
			newEntityAdvertiserUsers.LastModified  = _lastModified;
			newEntityAdvertiserUsers.LastModifiedBy  = _lastModifiedBy;
			newEntityAdvertiserUsers.JobExpiryNotification  = _jobExpiryNotification;
			newEntityAdvertiserUsers.LoginAttempts  = _loginAttempts;
			newEntityAdvertiserUsers.LastAttemptDate  = _lastAttemptDate;
			newEntityAdvertiserUsers.Status  = _status;
			newEntityAdvertiserUsers.LastTermsAndConditionsDate  = _lastTermsAndConditionsDate;
			newEntityAdvertiserUsers.DefaultLanguageId  = _defaultLanguageId;
			newEntityAdvertiserUsers.ExternalAdvertiserUserId  = _externalAdvertiserUserId;
			return newEntityAdvertiserUsers;
		}
		#endregion Constructors


		#region Fields
		private static SecurityContext<AdvertiserUsers> securityContext = new SecurityContext<AdvertiserUsers>();
		private static readonly string layerExceptionPolicy = "ServiceLayerExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		#endregion 
		
		#region SecurityContext
		///<summary>
		/// Contains all necessary information to validate and authorize the 
		/// call of the method with the Principal and Roles of the current user.
		///</summary>
		public static SecurityContext<AdvertiserUsers> SecurityContext
		{
			get
			{
				return securityContext;	
			}	
		}
		#endregion 
		
		#region Data Access Methods
		
		#region GetByForeignKey Methods
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{AdvertiserUsers}" /> from the datasource based on the FK__Advertise__Adver__04659998 key.
		///		FK__Advertise__Adver__04659998 Description: 
		/// </summary>
		/// <param name="_advertiserId"></param>
		/// <returns>Returns a generic collection of AdvertiserUsers objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<AdvertiserUsers> GetByAdvertiserId(System.Int32 _advertiserId)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAdvertiserId");
			#endregion Security check
			
			#region Initialisation
			TList<AdvertiserUsers> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<AdvertiserUsers>(dataProvider.AdvertiserUsersProvider.GetByAdvertiserId(transactionManager, _advertiserId));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{AdvertiserUsers}" /> from the datasource based on the FK__Advertise__Adver__04659998 key.
		///		FK__Advertise__Adver__04659998 Description: 
		/// </summary>
		/// <param name="_advertiserId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{AdvertiserUsers}" /> of <c>AdvertiserUsers</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<AdvertiserUsers> GetByAdvertiserId(System.Int32 _advertiserId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAdvertiserId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<AdvertiserUsers> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<AdvertiserUsers>(dataProvider.AdvertiserUsersProvider.GetByAdvertiserId(transactionManager, _advertiserId, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{AdvertiserUsers}" /> from the datasource based on the FK__Advertise__Email__5FB337D6 key.
		///		FK__Advertise__Email__5FB337D6 Description: 
		/// </summary>
		/// <param name="_emailFormat"></param>
		/// <returns>Returns a generic collection of AdvertiserUsers objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<AdvertiserUsers> GetByEmailFormat(System.Int32 _emailFormat)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByEmailFormat");
			#endregion Security check
			
			#region Initialisation
			TList<AdvertiserUsers> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<AdvertiserUsers>(dataProvider.AdvertiserUsersProvider.GetByEmailFormat(transactionManager, _emailFormat));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{AdvertiserUsers}" /> from the datasource based on the FK__Advertise__Email__5FB337D6 key.
		///		FK__Advertise__Email__5FB337D6 Description: 
		/// </summary>
		/// <param name="_emailFormat"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{AdvertiserUsers}" /> of <c>AdvertiserUsers</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<AdvertiserUsers> GetByEmailFormat(System.Int32 _emailFormat, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByEmailFormat");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<AdvertiserUsers> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<AdvertiserUsers>(dataProvider.AdvertiserUsersProvider.GetByEmailFormat(transactionManager, _emailFormat, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{AdvertiserUsers}" /> from the datasource based on the FK__Advertise__LastM__7CC477D0 key.
		///		FK__Advertise__LastM__7CC477D0 Description: 
		/// </summary>
		/// <param name="_lastModifiedBy"></param>
		/// <returns>Returns a generic collection of AdvertiserUsers objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<AdvertiserUsers> GetByLastModifiedBy(System.Int32 _lastModifiedBy)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLastModifiedBy");
			#endregion Security check
			
			#region Initialisation
			TList<AdvertiserUsers> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<AdvertiserUsers>(dataProvider.AdvertiserUsersProvider.GetByLastModifiedBy(transactionManager, _lastModifiedBy));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{AdvertiserUsers}" /> from the datasource based on the FK__Advertise__LastM__7CC477D0 key.
		///		FK__Advertise__LastM__7CC477D0 Description: 
		/// </summary>
		/// <param name="_lastModifiedBy"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{AdvertiserUsers}" /> of <c>AdvertiserUsers</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<AdvertiserUsers> GetByLastModifiedBy(System.Int32 _lastModifiedBy, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLastModifiedBy");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<AdvertiserUsers> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<AdvertiserUsers>(dataProvider.AdvertiserUsersProvider.GetByLastModifiedBy(transactionManager, _lastModifiedBy, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{AdvertiserUsers}" /> from the datasource based on the FK__Advertise__Newsl__5EBF139D key.
		///		FK__Advertise__Newsl__5EBF139D Description: 
		/// </summary>
		/// <param name="_newsletterFormat"></param>
		/// <returns>Returns a generic collection of AdvertiserUsers objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<AdvertiserUsers> GetByNewsletterFormat(System.Int32 _newsletterFormat)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByNewsletterFormat");
			#endregion Security check
			
			#region Initialisation
			TList<AdvertiserUsers> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<AdvertiserUsers>(dataProvider.AdvertiserUsersProvider.GetByNewsletterFormat(transactionManager, _newsletterFormat));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{AdvertiserUsers}" /> from the datasource based on the FK__Advertise__Newsl__5EBF139D key.
		///		FK__Advertise__Newsl__5EBF139D Description: 
		/// </summary>
		/// <param name="_newsletterFormat"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{AdvertiserUsers}" /> of <c>AdvertiserUsers</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<AdvertiserUsers> GetByNewsletterFormat(System.Int32 _newsletterFormat, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByNewsletterFormat");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<AdvertiserUsers> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<AdvertiserUsers>(dataProvider.AdvertiserUsersProvider.GetByNewsletterFormat(transactionManager, _newsletterFormat, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		#endregion GetByForeignKey Methods
		
		#region GetByIndexes
		/// <summary>
		/// 	Gets a row from the DataSource based on its primary key.
		/// </summary>
		/// <param name="key">The unique identifier of the row to retrieve.</param>
		/// <returns>Returns an instance of the Entity class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public override AdvertiserUsers Get(AdvertiserUsersKey key)
		{
			return GetByAdvertiserUserId(key.AdvertiserUserId);
		}

		/// <summary>
		///  method that Gets rows in a <see cref="TList{AdvertiserUsers}" /> from the datasource based on the primary key IX_Unique_AdvertiserUsers index.
		/// </summary>
		/// <param name="_userName"></param>
		/// <param name="_advertiserId"></param>
		/// <returns>Returns an instance of the <see cref="AdvertiserUsers"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual AdvertiserUsers GetByUserNameAdvertiserId(System.String _userName, System.Int32 _advertiserId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByUserNameAdvertiserId");
			#endregion Security check
			
			#region Initialisation
			AdvertiserUsers entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.AdvertiserUsersProvider.GetByUserNameAdvertiserId(transactionManager, _userName, _advertiserId)   as AdvertiserUsers;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{AdvertiserUsers}" /> from the datasource based on the primary key IX_Unique_AdvertiserUsers index.
		/// </summary>
		/// <param name="_userName"></param>
		/// <param name="_advertiserId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="AdvertiserUsers"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual AdvertiserUsers GetByUserNameAdvertiserId(System.String _userName, System.Int32 _advertiserId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByUserNameAdvertiserId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			AdvertiserUsers entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.AdvertiserUsersProvider.GetByUserNameAdvertiserId(transactionManager, _userName, _advertiserId, start, pageLength, out totalCount)   as AdvertiserUsers;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{AdvertiserUsers}" /> from the datasource based on the primary key PK__AdvertiserUsers__07F6335A index.
		/// </summary>
		/// <param name="_advertiserUserId"></param>
		/// <returns>Returns an instance of the <see cref="AdvertiserUsers"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual AdvertiserUsers GetByAdvertiserUserId(System.Int32 _advertiserUserId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAdvertiserUserId");
			#endregion Security check
			
			#region Initialisation
			AdvertiserUsers entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.AdvertiserUsersProvider.GetByAdvertiserUserId(transactionManager, _advertiserUserId)   as AdvertiserUsers;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{AdvertiserUsers}" /> from the datasource based on the primary key PK__AdvertiserUsers__07F6335A index.
		/// </summary>
		/// <param name="_advertiserUserId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="AdvertiserUsers"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual AdvertiserUsers GetByAdvertiserUserId(System.Int32 _advertiserUserId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAdvertiserUserId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			AdvertiserUsers entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.AdvertiserUsersProvider.GetByAdvertiserUserId(transactionManager, _advertiserUserId, start, pageLength, out totalCount)   as AdvertiserUsers;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
	
		#endregion GetByIndexes
	
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="AdvertiserUsers" /> entities.
		/// </summary>
		/// <returns></returns>
		public override TList<AdvertiserUsers> GetAll() 
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAll");
			#endregion Security check
			
			#region Initialisation
			TList<AdvertiserUsers> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.AdvertiserUsersProvider.GetAll(transactionManager);	
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}

		/// <summary>
		/// Get a set portion of a complete list of <see cref="AdvertiserUsers" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{AdvertiserUsers}"/> </returns>
		public virtual TList<AdvertiserUsers> GetAll(int start, int pageLength, out int totalCount) 
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAll");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<AdvertiserUsers> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.AdvertiserUsersProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{AdvertiserUsers}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>AdvertiserUsers</c> objects.</returns>
		public virtual TList<AdvertiserUsers> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, int.MaxValue, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{AdvertiserUsers}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>AdvertiserUsers</c> objects.</returns>
		public virtual TList<AdvertiserUsers> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{AdvertiserUsers}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>AdvertiserUsers</c> objects.</returns>
		public override TList<AdvertiserUsers> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetPaged");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<AdvertiserUsers> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.AdvertiserUsersProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, int.MaxValue, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	
				
		#region Find
		
		#region Parsed Find Methods
		
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual TList<AdvertiserUsers> Find(string whereClause)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			TList<AdvertiserUsers> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.AdvertiserUsersProvider.Find(transactionManager, whereClause);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}	
		
		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{AdvertiserUsers} of <c>AdvertiserUsers</c> objects.</returns>
		public override TList<AdvertiserUsers> Find(string whereClause, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<AdvertiserUsers> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.AdvertiserUsersProvider.Find(transactionManager, whereClause, start, pageLength, out totalCount);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods

		/// <summary>
		/// Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>AdvertiserUsers</c> objects.</returns>
		public virtual TList<AdvertiserUsers> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, (string) null);
		}
		
		/// <summary>
        /// Returns rows from the DataSource that meet the parameter conditions.
        /// </summary>
        /// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
        /// <param name="sortColumns">A collection of <see cref="SqlSortColumn"/> objects.</param>
        /// <returns>Returns a typed collection of <c>AdvertiserUsers</c> objects.</returns>
        public virtual TList<AdvertiserUsers> Find(IFilterParameterCollection parameters, ISortColumnCollection sortColumns)
        {
            return Find(parameters, sortColumns.ToString());
        }
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>AdvertiserUsers</c> objects.</returns>
		public virtual TList<AdvertiserUsers> Find(IFilterParameterCollection parameters, string orderBy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			TList<AdvertiserUsers> list = null;
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.AdvertiserUsersProvider.Find(transactionManager, parameters, orderBy);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;		
		}
		
		/// <summary>
        /// Returns rows from the DataSource that meet the parameter conditions.
        /// </summary>
        /// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
        /// <param name="sortColumns">A collection of <see cref="SqlSortColumn"/> objects.</param>
        /// <param name="start">Row number at which to start reading.</param>
        /// <param name="pageLength">Number of rows to return.</param>
        /// <param name="count">out. The number of rows that match this query.</param>
        /// <returns>Returns a typed collection of <c>AdvertiserUsers</c> objects.</returns>
        public virtual TList<AdvertiserUsers> Find(IFilterParameterCollection parameters, ISortColumnCollection sortColumns, int start, int pageLength, out int count)
        {
            return Find(parameters, sortColumns.ToString(), start, pageLength, out count);
        }
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>AdvertiserUsers</c> objects.</returns>
		public virtual TList<AdvertiserUsers> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			count = -1;
			TransactionManager transactionManager = null; 
			TList<AdvertiserUsers> list = null;
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.AdvertiserUsersProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion
		
		#region Insert

		#region Insert Entity
		/// <summary>
		/// public virtual method that Inserts a AdvertiserUsers object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">AdvertiserUsers object to Insert.</param>
		/// <remarks>After Inserting into the datasource, the AdvertiserUsers object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Insert Method with an already open transaction.
        /// <code>
		/// AdvertiserUsers entity = new AdvertiserUsers();
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Insert Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Insert(entity.ChildObjectSource);
		///		AdvertiserUsersService.Insert(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public override bool Insert(AdvertiserUsers entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Insert", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
                 SetDefaultValues(ref entity); 
				result = dataProvider.AdvertiserUsersProvider.Insert(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Insert Entity
		
		#region Insert Collection
		/// <summary>
		/// public virtual method that Inserts rows in <see cref="TList{AdvertiserUsers}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>AdvertiserUsers</c> objects in a <see cref="TList{AdvertiserUsers}" /> object to Insert.</param>
		/// <remarks>
		///		This function will only Insert entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Inserting the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Inserting into the datasource, the <c>AdvertiserUsers</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Insert.</returns>
		/// <example>
        /// The following code shows the usage of the Insert Method with a collection of AdvertiserUsers.
        /// <code><![CDATA[
		/// TList<AdvertiserUsers> list = new TList<AdvertiserUsers>();
		/// AdvertiserUsers entity = new AdvertiserUsers();
		/// entity.StringProperty = "foo";
		/// AdvertiserUsers entity2 = new AdvertiserUsers();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	AdvertiserUsersService.Insert(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public virtual TList<AdvertiserUsers> Insert(TList<AdvertiserUsers> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Insert", DomainUtil.GetErrorsFromList<AdvertiserUsers>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.AdvertiserUsersProvider.Insert(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Insert Collection

		#endregion Insert 
		
		#region Update

		#region Update Entity
		/// <summary>
		/// public virtual method that Updates a AdvertiserUsers object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">AdvertiserUsers object to Update.</param>
		/// <remarks>After Updateing into the datasource, the AdvertiserUsers object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Update Method with an already open transaction.
        /// <code>
		///	AdvertiserUsers entity = AdvertiserUsersService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Update Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Update(entity.ChildObjectSource);
		///		AdvertiserUsersService.Update(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool Update(AdvertiserUsers entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Update", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
                 SetDefaultValues(ref entity); 
				result = dataProvider.AdvertiserUsersProvider.Update(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Update Entity
		
		#region Update Collection
		/// <summary>
		/// public virtual method that Updates rows in <see cref="TList{AdvertiserUsers}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>AdvertiserUsers</c> objects in a <see cref="TList{AdvertiserUsers}" /> object to Update.</param>
		/// <remarks>
		///		This function will only Update entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Updateing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Updateing into the datasource, the <c>AdvertiserUsers</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Update.</returns>
		/// <example>
        /// The following code shows the usage of the Update Method with a collection of AdvertiserUsers.
        /// <code><![CDATA[
		/// TList<AdvertiserUsers> list = new TList<AdvertiserUsers>();
		/// AdvertiserUsers entity = new AdvertiserUsers();
		/// entity.StringProperty = "foo";
		/// AdvertiserUsers entity2 = new AdvertiserUsers();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	AdvertiserUsersService.Update(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual TList<AdvertiserUsers> Update(TList<AdvertiserUsers> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Update", DomainUtil.GetErrorsFromList<AdvertiserUsers>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.AdvertiserUsersProvider.Update(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Update Collection

		#endregion Update 
		
		#region Save

		#region Save Entity
		/// <summary>
		/// public virtual method that Saves a AdvertiserUsers object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">AdvertiserUsers object to Save.</param>
		/// <remarks>After Saveing into the datasource, the AdvertiserUsers object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Save Method with an already open transaction.
        /// <code>
		///	AdvertiserUsers entity = AdvertiserUsersService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Save Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Save(entity.ChildObjectSource);
		///		AdvertiserUsersService.Save(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override AdvertiserUsers Save(AdvertiserUsers entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Save");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Save", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
                 SetDefaultValues(ref entity); 
				dataProvider.AdvertiserUsersProvider.Save(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
		#endregion Save Entity
		
		#region Save Collection
		/// <summary>
		/// public virtual method that Saves rows in <see cref="TList{AdvertiserUsers}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>AdvertiserUsers</c> objects in a <see cref="TList{AdvertiserUsers}" /> object to Save.</param>
		/// <remarks>
		///		This function will only Save entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Saveing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Saveing into the datasource, the <c>AdvertiserUsers</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Save.</returns>
		/// <example>
        /// The following code shows the usage of the Save Method with a collection of AdvertiserUsers.
        /// <code><![CDATA[
		/// TList<AdvertiserUsers> list = new TList<AdvertiserUsers>();
		/// AdvertiserUsers entity = new AdvertiserUsers();
		/// entity.StringProperty = "foo";
		/// AdvertiserUsers entity2 = new AdvertiserUsers();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	AdvertiserUsersService.Save(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual TList<AdvertiserUsers> Save(TList<AdvertiserUsers> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Save");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Save", DomainUtil.GetErrorsFromList<AdvertiserUsers>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.AdvertiserUsersProvider.Save(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Save Collection

		#endregion Save 
		
		#region Delete

		#region Delete Entity
		/// <summary>
		/// public virtual method that Deletes a AdvertiserUsers object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">AdvertiserUsers object to Delete.</param>
		/// <remarks>After Deleteing into the datasource, the AdvertiserUsers object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Delete Method with an already open transaction.
        /// <code>
		///	AdvertiserUsers entity = AdvertiserUsersService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Delete Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Delete(entity.ChildObjectSource);
		///		AdvertiserUsersService.Delete(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public override bool Delete(AdvertiserUsers entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Delete", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
                
				result = dataProvider.AdvertiserUsersProvider.Delete(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Delete Entity
		
		#region Delete Collection
		/// <summary>
		/// public virtual method that Deletes rows in <see cref="TList{AdvertiserUsers}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>AdvertiserUsers</c> objects in a <see cref="TList{AdvertiserUsers}" /> object to Delete.</param>
		/// <remarks>
		///		This function will only Delete entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Deleteing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Deleteing into the datasource, the <c>AdvertiserUsers</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Delete.</returns>
		/// <example>
        /// The following code shows the usage of the Delete Method with a collection of AdvertiserUsers.
        /// <code><![CDATA[
		/// TList<AdvertiserUsers> list = new TList<AdvertiserUsers>();
		/// AdvertiserUsers entity = new AdvertiserUsers();
		/// entity.StringProperty = "foo";
		/// AdvertiserUsers entity2 = new AdvertiserUsers();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	AdvertiserUsersService.Delete(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public virtual TList<AdvertiserUsers> Delete(TList<AdvertiserUsers> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Delete", DomainUtil.GetErrorsFromList<AdvertiserUsers>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.AdvertiserUsersProvider.Delete(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Delete Collection

		#endregion Delete 

		#region   Delete
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="key">The unique identifier of the row to delete.</param>
		/// <returns>Returns true if operation suceeded.</returns>
		public bool Delete(AdvertiserUsersKey key)
		{
			return Delete(key.AdvertiserUserId );
		}
		
		/// <summary>
		/// 	Deletes a row from the DataSource based on the PK'S System.Int32 _advertiserUserId
		/// </summary>
		/// <param name="_advertiserUserId">AdvertiserUsers pk id.</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public virtual bool Delete(System.Int32 _advertiserUserId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			#endregion Security check

			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.AdvertiserUsersProvider.Delete(transactionManager, _advertiserUserId);
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
			
		}
		#endregion 
		
		#region  GetBy m:m Aggregate Relationships
		#endregion	N2N Relationships

		#region Custom Methods
		
		#region AdvertiserUsers_GetByUserNameAdvertiserId
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetByUserNameAdvertiserId' stored procedure. 
		/// </summary>
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByUserNameAdvertiserId(System.String userName, System.Int32? advertiserId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByUserNameAdvertiserId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.AdvertiserUsersProvider.GetByUserNameAdvertiserId(transactionManager , userName, advertiserId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetByUserNameAdvertiserId' stored procedure. 
		/// </summary>
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByUserNameAdvertiserId( System.String userName, System.Int32? advertiserId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByUserNameAdvertiserId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.AdvertiserUsersProvider.GetByUserNameAdvertiserId(transactionManager, start, pageLength , userName, advertiserId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region AdvertiserUsers_GetByAdvertiserUserId
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetByAdvertiserUserId' stored procedure. 
		/// </summary>
		/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByAdvertiserUserId(System.Int32? advertiserUserId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAdvertiserUserId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.AdvertiserUsersProvider.GetByAdvertiserUserId(transactionManager , advertiserUserId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetByAdvertiserUserId' stored procedure. 
		/// </summary>
		/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByAdvertiserUserId( System.Int32? advertiserUserId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAdvertiserUserId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.AdvertiserUsersProvider.GetByAdvertiserUserId(transactionManager, start, pageLength , advertiserUserId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region AdvertiserUsers_GetByNewsletterFormat
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetByNewsletterFormat' stored procedure. 
		/// </summary>
		/// <param name="newsletterFormat"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByNewsletterFormat(System.Int32? newsletterFormat)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByNewsletterFormat");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.AdvertiserUsersProvider.GetByNewsletterFormat(transactionManager , newsletterFormat);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetByNewsletterFormat' stored procedure. 
		/// </summary>
		/// <param name="newsletterFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByNewsletterFormat( System.Int32? newsletterFormat, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByNewsletterFormat");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.AdvertiserUsersProvider.GetByNewsletterFormat(transactionManager, start, pageLength , newsletterFormat);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region AdvertiserUsers_Insert
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_Insert' stored procedure. 
		/// </summary>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="primaryAccount"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="userPassword"> A <c>System.String</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="surname"> A <c>System.String</c> instance.</param>
		/// <param name="email"> A <c>System.String</c> instance.</param>
		/// <param name="applicationEmailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="phone"> A <c>System.String</c> instance.</param>
		/// <param name="fax"> A <c>System.String</c> instance.</param>
		/// <param name="accountStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="newsletter"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="newsletterFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="emailFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="validated"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="validateGuid"> A <c>System.Guid?</c> instance.</param>
		/// <param name="description"> A <c>System.String</c> instance.</param>
		/// <param name="lastLoginDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobExpiryNotification"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="loginAttempts"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastAttemptDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="status"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastTermsAndConditionsDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="defaultLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="externalAdvertiserUserId"> A <c>System.String</c> instance.</param>
			/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Insert(System.Int32? advertiserId, System.Boolean? primaryAccount, System.String userName, System.String userPassword, System.String firstName, System.String surname, System.String email, System.String applicationEmailAddress, System.String phone, System.String fax, System.Int32? accountStatus, System.Boolean? newsletter, System.Int32? newsletterFormat, System.Int32? emailFormat, System.Boolean? validated, System.Guid? validateGuid, System.String description, System.DateTime? lastLoginDate, System.DateTime? lastModified, System.Int32? lastModifiedBy, System.Boolean? jobExpiryNotification, System.Int32? loginAttempts, System.DateTime? lastAttemptDate, System.Int32? status, System.DateTime? lastTermsAndConditionsDate, System.Int32? defaultLanguageId, System.String externalAdvertiserUserId, ref System.Int32? advertiserUserId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.AdvertiserUsersProvider.Insert(transactionManager , advertiserId, primaryAccount, userName, userPassword, firstName, surname, email, applicationEmailAddress, phone, fax, accountStatus, newsletter, newsletterFormat, emailFormat, validated, validateGuid, description, lastLoginDate, lastModified, lastModifiedBy, jobExpiryNotification, loginAttempts, lastAttemptDate, status, lastTermsAndConditionsDate, defaultLanguageId, externalAdvertiserUserId, ref advertiserUserId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_Insert' stored procedure. 
		/// </summary>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="primaryAccount"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="userPassword"> A <c>System.String</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="surname"> A <c>System.String</c> instance.</param>
		/// <param name="email"> A <c>System.String</c> instance.</param>
		/// <param name="applicationEmailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="phone"> A <c>System.String</c> instance.</param>
		/// <param name="fax"> A <c>System.String</c> instance.</param>
		/// <param name="accountStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="newsletter"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="newsletterFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="emailFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="validated"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="validateGuid"> A <c>System.Guid?</c> instance.</param>
		/// <param name="description"> A <c>System.String</c> instance.</param>
		/// <param name="lastLoginDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobExpiryNotification"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="loginAttempts"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastAttemptDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="status"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastTermsAndConditionsDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="defaultLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="externalAdvertiserUserId"> A <c>System.String</c> instance.</param>
			/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Insert( System.Int32? advertiserId, System.Boolean? primaryAccount, System.String userName, System.String userPassword, System.String firstName, System.String surname, System.String email, System.String applicationEmailAddress, System.String phone, System.String fax, System.Int32? accountStatus, System.Boolean? newsletter, System.Int32? newsletterFormat, System.Int32? emailFormat, System.Boolean? validated, System.Guid? validateGuid, System.String description, System.DateTime? lastLoginDate, System.DateTime? lastModified, System.Int32? lastModifiedBy, System.Boolean? jobExpiryNotification, System.Int32? loginAttempts, System.DateTime? lastAttemptDate, System.Int32? status, System.DateTime? lastTermsAndConditionsDate, System.Int32? defaultLanguageId, System.String externalAdvertiserUserId, ref System.Int32? advertiserUserId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.AdvertiserUsersProvider.Insert(transactionManager, start, pageLength , advertiserId, primaryAccount, userName, userPassword, firstName, surname, email, applicationEmailAddress, phone, fax, accountStatus, newsletter, newsletterFormat, emailFormat, validated, validateGuid, description, lastLoginDate, lastModified, lastModifiedBy, jobExpiryNotification, loginAttempts, lastAttemptDate, status, lastTermsAndConditionsDate, defaultLanguageId, externalAdvertiserUserId, ref advertiserUserId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region AdvertiserUsers_Get_List
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_Get_List' stored procedure. 
		/// </summary>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet Get_List()
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Get_List");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.AdvertiserUsersProvider.Get_List(transactionManager );
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_Get_List' stored procedure. 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet Get_List( int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Get_List");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.AdvertiserUsersProvider.Get_List(transactionManager, start, pageLength );
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region AdvertiserUsers_GetPaged
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetPaged' stored procedure. 
		/// </summary>
		/// <param name="whereClause"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetPaged(System.String whereClause, System.String orderBy, System.Int32? pageIndex, System.Int32? pageSize)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetPaged");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.AdvertiserUsersProvider.GetPaged(transactionManager , whereClause, orderBy, pageIndex, pageSize);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetPaged' stored procedure. 
		/// </summary>
		/// <param name="whereClause"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetPaged( System.String whereClause, System.String orderBy, System.Int32? pageIndex, System.Int32? pageSize, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetPaged");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.AdvertiserUsersProvider.GetPaged(transactionManager, start, pageLength , whereClause, orderBy, pageIndex, pageSize);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region AdvertiserUsers_AdminGetPaged
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_AdminGetPaged' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="surname"> A <c>System.String</c> instance.</param>
		/// <param name="email"> A <c>System.String</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageNumber"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet AdminGetPaged(System.Int32? siteId, System.Int32? advertiserId, System.Int32? advertiserUserId, System.String userName, System.String firstName, System.String surname, System.String email, System.Int32? pageSize, System.Int32? pageNumber)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("AdminGetPaged");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.AdvertiserUsersProvider.AdminGetPaged(transactionManager , siteId, advertiserId, advertiserUserId, userName, firstName, surname, email, pageSize, pageNumber);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_AdminGetPaged' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="surname"> A <c>System.String</c> instance.</param>
		/// <param name="email"> A <c>System.String</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageNumber"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet AdminGetPaged( System.Int32? siteId, System.Int32? advertiserId, System.Int32? advertiserUserId, System.String userName, System.String firstName, System.String surname, System.String email, System.Int32? pageSize, System.Int32? pageNumber, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("AdminGetPaged");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.AdvertiserUsersProvider.AdminGetPaged(transactionManager, start, pageLength , siteId, advertiserId, advertiserUserId, userName, firstName, surname, email, pageSize, pageNumber);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region AdvertiserUsers_GetByAdvertiserId
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetByAdvertiserId' stored procedure. 
		/// </summary>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByAdvertiserId(System.Int32? advertiserId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAdvertiserId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.AdvertiserUsersProvider.GetByAdvertiserId(transactionManager , advertiserId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetByAdvertiserId' stored procedure. 
		/// </summary>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByAdvertiserId( System.Int32? advertiserId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAdvertiserId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.AdvertiserUsersProvider.GetByAdvertiserId(transactionManager, start, pageLength , advertiserId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region AdvertiserUsers_GetByUserNameSiteId
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetByUserNameSiteId' stored procedure. 
		/// </summary>
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  TList<AdvertiserUsers> GetByUserNameSiteId(System.String userName, System.Int32? siteId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByUserNameSiteId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<AdvertiserUsers> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.AdvertiserUsersProvider.GetByUserNameSiteId(transactionManager , userName, siteId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetByUserNameSiteId' stored procedure. 
		/// </summary>
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  TList<AdvertiserUsers> GetByUserNameSiteId( System.String userName, System.Int32? siteId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByUserNameSiteId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<AdvertiserUsers> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.AdvertiserUsersProvider.GetByUserNameSiteId(transactionManager, start, pageLength , userName, siteId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region AdvertiserUsers_Update
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_Update' stored procedure. 
		/// </summary>
		/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="primaryAccount"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="userPassword"> A <c>System.String</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="surname"> A <c>System.String</c> instance.</param>
		/// <param name="email"> A <c>System.String</c> instance.</param>
		/// <param name="applicationEmailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="phone"> A <c>System.String</c> instance.</param>
		/// <param name="fax"> A <c>System.String</c> instance.</param>
		/// <param name="accountStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="newsletter"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="newsletterFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="emailFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="validated"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="validateGuid"> A <c>System.Guid?</c> instance.</param>
		/// <param name="description"> A <c>System.String</c> instance.</param>
		/// <param name="lastLoginDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobExpiryNotification"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="loginAttempts"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastAttemptDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="status"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastTermsAndConditionsDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="defaultLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="externalAdvertiserUserId"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Update(System.Int32? advertiserUserId, System.Int32? advertiserId, System.Boolean? primaryAccount, System.String userName, System.String userPassword, System.String firstName, System.String surname, System.String email, System.String applicationEmailAddress, System.String phone, System.String fax, System.Int32? accountStatus, System.Boolean? newsletter, System.Int32? newsletterFormat, System.Int32? emailFormat, System.Boolean? validated, System.Guid? validateGuid, System.String description, System.DateTime? lastLoginDate, System.DateTime? lastModified, System.Int32? lastModifiedBy, System.Boolean? jobExpiryNotification, System.Int32? loginAttempts, System.DateTime? lastAttemptDate, System.Int32? status, System.DateTime? lastTermsAndConditionsDate, System.Int32? defaultLanguageId, System.String externalAdvertiserUserId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.AdvertiserUsersProvider.Update(transactionManager , advertiserUserId, advertiserId, primaryAccount, userName, userPassword, firstName, surname, email, applicationEmailAddress, phone, fax, accountStatus, newsletter, newsletterFormat, emailFormat, validated, validateGuid, description, lastLoginDate, lastModified, lastModifiedBy, jobExpiryNotification, loginAttempts, lastAttemptDate, status, lastTermsAndConditionsDate, defaultLanguageId, externalAdvertiserUserId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_Update' stored procedure. 
		/// </summary>
		/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="primaryAccount"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="userPassword"> A <c>System.String</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="surname"> A <c>System.String</c> instance.</param>
		/// <param name="email"> A <c>System.String</c> instance.</param>
		/// <param name="applicationEmailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="phone"> A <c>System.String</c> instance.</param>
		/// <param name="fax"> A <c>System.String</c> instance.</param>
		/// <param name="accountStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="newsletter"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="newsletterFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="emailFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="validated"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="validateGuid"> A <c>System.Guid?</c> instance.</param>
		/// <param name="description"> A <c>System.String</c> instance.</param>
		/// <param name="lastLoginDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobExpiryNotification"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="loginAttempts"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastAttemptDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="status"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastTermsAndConditionsDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="defaultLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="externalAdvertiserUserId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Update( System.Int32? advertiserUserId, System.Int32? advertiserId, System.Boolean? primaryAccount, System.String userName, System.String userPassword, System.String firstName, System.String surname, System.String email, System.String applicationEmailAddress, System.String phone, System.String fax, System.Int32? accountStatus, System.Boolean? newsletter, System.Int32? newsletterFormat, System.Int32? emailFormat, System.Boolean? validated, System.Guid? validateGuid, System.String description, System.DateTime? lastLoginDate, System.DateTime? lastModified, System.Int32? lastModifiedBy, System.Boolean? jobExpiryNotification, System.Int32? loginAttempts, System.DateTime? lastAttemptDate, System.Int32? status, System.DateTime? lastTermsAndConditionsDate, System.Int32? defaultLanguageId, System.String externalAdvertiserUserId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.AdvertiserUsersProvider.Update(transactionManager, start, pageLength , advertiserUserId, advertiserId, primaryAccount, userName, userPassword, firstName, surname, email, applicationEmailAddress, phone, fax, accountStatus, newsletter, newsletterFormat, emailFormat, validated, validateGuid, description, lastLoginDate, lastModified, lastModifiedBy, jobExpiryNotification, loginAttempts, lastAttemptDate, status, lastTermsAndConditionsDate, defaultLanguageId, externalAdvertiserUserId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region AdvertiserUsers_Find
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_Find' stored procedure. 
		/// </summary>
		/// <param name="searchUsingOr"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="primaryAccount"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="userPassword"> A <c>System.String</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="surname"> A <c>System.String</c> instance.</param>
		/// <param name="email"> A <c>System.String</c> instance.</param>
		/// <param name="applicationEmailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="phone"> A <c>System.String</c> instance.</param>
		/// <param name="fax"> A <c>System.String</c> instance.</param>
		/// <param name="accountStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="newsletter"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="newsletterFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="emailFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="validated"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="validateGuid"> A <c>System.Guid?</c> instance.</param>
		/// <param name="description"> A <c>System.String</c> instance.</param>
		/// <param name="lastLoginDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobExpiryNotification"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="loginAttempts"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastAttemptDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="status"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastTermsAndConditionsDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="defaultLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="externalAdvertiserUserId"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet Find(System.Boolean? searchUsingOr, System.Int32? advertiserUserId, System.Int32? advertiserId, System.Boolean? primaryAccount, System.String userName, System.String userPassword, System.String firstName, System.String surname, System.String email, System.String applicationEmailAddress, System.String phone, System.String fax, System.Int32? accountStatus, System.Boolean? newsletter, System.Int32? newsletterFormat, System.Int32? emailFormat, System.Boolean? validated, System.Guid? validateGuid, System.String description, System.DateTime? lastLoginDate, System.DateTime? lastModified, System.Int32? lastModifiedBy, System.Boolean? jobExpiryNotification, System.Int32? loginAttempts, System.DateTime? lastAttemptDate, System.Int32? status, System.DateTime? lastTermsAndConditionsDate, System.Int32? defaultLanguageId, System.String externalAdvertiserUserId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.AdvertiserUsersProvider.Find(transactionManager , searchUsingOr, advertiserUserId, advertiserId, primaryAccount, userName, userPassword, firstName, surname, email, applicationEmailAddress, phone, fax, accountStatus, newsletter, newsletterFormat, emailFormat, validated, validateGuid, description, lastLoginDate, lastModified, lastModifiedBy, jobExpiryNotification, loginAttempts, lastAttemptDate, status, lastTermsAndConditionsDate, defaultLanguageId, externalAdvertiserUserId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_Find' stored procedure. 
		/// </summary>
		/// <param name="searchUsingOr"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="primaryAccount"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="userName"> A <c>System.String</c> instance.</param>
		/// <param name="userPassword"> A <c>System.String</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="surname"> A <c>System.String</c> instance.</param>
		/// <param name="email"> A <c>System.String</c> instance.</param>
		/// <param name="applicationEmailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="phone"> A <c>System.String</c> instance.</param>
		/// <param name="fax"> A <c>System.String</c> instance.</param>
		/// <param name="accountStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="newsletter"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="newsletterFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="emailFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="validated"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="validateGuid"> A <c>System.Guid?</c> instance.</param>
		/// <param name="description"> A <c>System.String</c> instance.</param>
		/// <param name="lastLoginDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobExpiryNotification"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="loginAttempts"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastAttemptDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="status"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastTermsAndConditionsDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="defaultLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="externalAdvertiserUserId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet Find( System.Boolean? searchUsingOr, System.Int32? advertiserUserId, System.Int32? advertiserId, System.Boolean? primaryAccount, System.String userName, System.String userPassword, System.String firstName, System.String surname, System.String email, System.String applicationEmailAddress, System.String phone, System.String fax, System.Int32? accountStatus, System.Boolean? newsletter, System.Int32? newsletterFormat, System.Int32? emailFormat, System.Boolean? validated, System.Guid? validateGuid, System.String description, System.DateTime? lastLoginDate, System.DateTime? lastModified, System.Int32? lastModifiedBy, System.Boolean? jobExpiryNotification, System.Int32? loginAttempts, System.DateTime? lastAttemptDate, System.Int32? status, System.DateTime? lastTermsAndConditionsDate, System.Int32? defaultLanguageId, System.String externalAdvertiserUserId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.AdvertiserUsersProvider.Find(transactionManager, start, pageLength , searchUsingOr, advertiserUserId, advertiserId, primaryAccount, userName, userPassword, firstName, surname, email, applicationEmailAddress, phone, fax, accountStatus, newsletter, newsletterFormat, emailFormat, validated, validateGuid, description, lastLoginDate, lastModified, lastModifiedBy, jobExpiryNotification, loginAttempts, lastAttemptDate, status, lastTermsAndConditionsDate, defaultLanguageId, externalAdvertiserUserId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region AdvertiserUsers_Delete
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_Delete' stored procedure. 
		/// </summary>
		/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Delete(System.Int32? advertiserUserId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.AdvertiserUsersProvider.Delete(transactionManager , advertiserUserId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_Delete' stored procedure. 
		/// </summary>
		/// <param name="advertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Delete( System.Int32? advertiserUserId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.AdvertiserUsersProvider.Delete(transactionManager, start, pageLength , advertiserUserId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region AdvertiserUsers_GetByEmailFormat
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetByEmailFormat' stored procedure. 
		/// </summary>
		/// <param name="emailFormat"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByEmailFormat(System.Int32? emailFormat)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByEmailFormat");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.AdvertiserUsersProvider.GetByEmailFormat(transactionManager , emailFormat);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetByEmailFormat' stored procedure. 
		/// </summary>
		/// <param name="emailFormat"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByEmailFormat( System.Int32? emailFormat, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByEmailFormat");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.AdvertiserUsersProvider.GetByEmailFormat(transactionManager, start, pageLength , emailFormat);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region AdvertiserUsers_GetAdvertiserUserPassword
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetAdvertiserUserPassword' stored procedure. 
		/// </summary>
		/// <param name="username"> A <c>System.String</c> instance.</param>
		/// <param name="email"> A <c>System.String</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{AdvertiserUsers}"/> instance.</returns>
		public virtual  TList<AdvertiserUsers> GetAdvertiserUserPassword(System.String username, System.String email, System.Int32? siteId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAdvertiserUserPassword");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<AdvertiserUsers> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.AdvertiserUsersProvider.GetAdvertiserUserPassword(transactionManager , username, email, siteId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetAdvertiserUserPassword' stored procedure. 
		/// </summary>
		/// <param name="username"> A <c>System.String</c> instance.</param>
		/// <param name="email"> A <c>System.String</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{AdvertiserUsers}"/> instance.</returns>
		public virtual  TList<AdvertiserUsers> GetAdvertiserUserPassword( System.String username, System.String email, System.Int32? siteId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAdvertiserUserPassword");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<AdvertiserUsers> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.AdvertiserUsersProvider.GetAdvertiserUserPassword(transactionManager, start, pageLength , username, email, siteId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region AdvertiserUsers_GetByLastModifiedBy
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetByLastModifiedBy' stored procedure. 
		/// </summary>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByLastModifiedBy(System.Int32? lastModifiedBy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLastModifiedBy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.AdvertiserUsersProvider.GetByLastModifiedBy(transactionManager , lastModifiedBy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'AdvertiserUsers_GetByLastModifiedBy' stored procedure. 
		/// </summary>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByLastModifiedBy( System.Int32? lastModifiedBy, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLastModifiedBy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.AdvertiserUsersProvider.GetByLastModifiedBy(transactionManager, start, pageLength , lastModifiedBy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		#endregion
		
		#region DeepLoad
		#region Deep Load By Entity Keys
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="AdvertiserUsers"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_userName"></param>
		/// <param name="_advertiserId"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">AdvertiserUsers Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="AdvertiserUsers"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual AdvertiserUsers DeepLoadByUserNameAdvertiserId(System.String _userName, System.Int32 _advertiserId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByUserNameAdvertiserId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			AdvertiserUsers entity = GetByUserNameAdvertiserId(_userName, _advertiserId);
			
			//Check to see if entity is not null, before attempting to Deep Load
			if (entity != null)
				DeepLoad(entity, deep, deepLoadType, childTypes);
			
			return entity;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="AdvertiserUsers"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_advertiserUserId"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">AdvertiserUsers Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="AdvertiserUsers"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual AdvertiserUsers DeepLoadByAdvertiserUserId(System.Int32 _advertiserUserId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByAdvertiserUserId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			AdvertiserUsers entity = GetByAdvertiserUserId(_advertiserUserId);
			
			//Check to see if entity is not null, before attempting to Deep Load
			if (entity != null)
				DeepLoad(entity, deep, deepLoadType, childTypes);
			
			return entity;
		}
		
		
		#endregion 

		#region DeepLoad By Entity
		/// <summary>
		/// public virtualDeep Load the IEntity object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <param name="entity">AdvertiserUsers Object</param>
		/// <remarks>
		/// <seealso cref="DeepLoad(AdvertiserUsers)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(AdvertiserUsers entity)
		{
			DeepLoad(entity, false, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// public virtualDeep Load the IEntity object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(AdvertiserUsers)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entity">AdvertiserUsers Object</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(AdvertiserUsers entity, bool deep)
		{
			DeepLoad(entity, deep, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
			
		/// <summary>
		/// public virtualDeep Loads the <see cref="IEntity"/> object with criteria based of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <remarks>
		/// Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
		/// </remarks>
		/// <param name="entity">The <see cref="AdvertiserUsers"/> object to load.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
		/// If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">AdvertiserUsers Property Collection Type Array To Include or Exclude from Load</param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(AdvertiserUsers entity, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoad");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.AdvertiserUsersProvider.DeepLoad(transactionManager, entity, deep, deepLoadType, childTypes);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return;
		}
		#endregion
		
		#region DeepLoad By Entity Collection
		/// <summary>
		/// Deep Loads the <see cref="TList{AdvertiserUsers}" /> object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(AdvertiserUsers)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entityCollection">the <see cref="TList{AdvertiserUsers}" /> Object to deep loads.</param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(TList<AdvertiserUsers> entityCollection)
		{
			DeepLoad(entityCollection, false, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// Deep Loads the <see cref="TList{AdvertiserUsers}" /> object.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(AdvertiserUsers)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entityCollection">the <see cref="TList{AdvertiserUsers}" /> Object to deep loads.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(TList<AdvertiserUsers> entityCollection, bool deep)
		{
			DeepLoad(entityCollection, deep, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}	

		/// <summary>
		/// Deep Loads the entire <see cref="TList{AdvertiserUsers}" /> object with criteria based of the child 
		/// property collections only N Levels Deep based on the DeepLoadType.
		/// </summary>
		/// <remarks>
		/// Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
		/// </remarks>
		/// <param name="entityCollection">The <see cref="TList{AdvertiserUsers}" /> instance to load.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType"><see cref="DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
		///		Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
		///	</param>
		/// <param name="childTypes"><see cref="AdvertiserUsers"/> Property Collection Type Array To Include or Exclude from Load</param>
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public override void DeepLoad(TList<AdvertiserUsers> entityCollection, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{	
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoad");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.AdvertiserUsersProvider.DeepLoad(transactionManager, entityCollection, deep, deepLoadType, childTypes);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return;		
		}
		#endregion

		#endregion
		
		#region DeepSave
		
		#region DeepSave By Entity
		/// <summary>
		/// public virtualDeep Saves the <see cref="AdvertiserUsers"/> object with all of the child
		/// property collections N Levels Deep.
		/// </summary>
		/// <param name="entity">AdvertiserUsers Object</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(AdvertiserUsers entity)
		{
			return DeepSave(entity, DeepSaveType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// public virtualDeep Saves the entire object graph of the AdvertiserUsers object with criteria based of the child 
		/// Type property array and DeepSaveType.
		/// </summary>
		/// <param name="entity">AdvertiserUsers Object</param>
		/// <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
		/// <param name="childTypes"><c>AdvertiserUsers</c> property Type Array To Include or Exclude from Save</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(AdvertiserUsers entity, DeepSaveType deepSaveType, params System.Type[] childTypes)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepSave");
			
			if (!entity.IsValid)
			{
				throw new EntityNotValidException(entity, "DeepSave");
			}
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				
				result = dataProvider.AdvertiserUsersProvider.DeepSave(transactionManager, entity, deepSaveType, childTypes);
								
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return result;		
		}
		#endregion
		
		#region DeepSave By Entity Collection
		/// <summary>
		/// Deep Save the entire <see cref="TList{AdvertiserUsers}" /> object with all of the child 
		/// property collections.
		/// </summary>
		/// <param name="entityCollection">TList{AdvertiserUsers} Object</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual bool DeepSave(TList<AdvertiserUsers> entityCollection)
		{
			return DeepSave(entityCollection, DeepSaveType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// Deep Save the entire object graph of the <see cref="TList{AdvertiserUsers}" /> object with criteria based of the child 
		/// property collections.
		/// </summary>
		/// <param name="entityCollection"><see cref="TList{AdvertiserUsers}" /> Object</param>
		/// <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
		/// <param name="childTypes">AdvertiserUsers Property Collection Type Array To Include or Exclude from Save</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(TList<AdvertiserUsers> entityCollection, DeepSaveType deepSaveType, params System.Type[] childTypes)
		{	
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepSave");
			
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "DeepSave");
			}
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.AdvertiserUsersProvider.DeepSave(transactionManager, entityCollection,  deepSaveType, childTypes);
								
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return result;
		}
		#endregion

		#endregion 

		#endregion Data Access Methods
		
		private void SetDefaultValues(ref AdvertiserUsers entity)
		{
		
		}
		
	
	}//End Class
} // end namespace







/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file DynamicPages.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using JXTPortal.Entities;
using JXTPortal.Entities.Validation;
//using Entities = JXTPortal.Entities;
using JXTPortal.Data;
using JXTPortal.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace JXTPortal
{		
	
	///<summary>
	/// An object representation of the 'DynamicPages' table.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the DynamicPages.cs file instead.
	/// All custom implementations should be done in the <see cref="DynamicPages"/> class.
	/// </remarks>
	[DataObject]
	[CLSCompliant(true)]
	public partial class DynamicPagesServiceBase : ServiceBase<DynamicPages, DynamicPagesKey>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="DynamicPages"/> instance .
		///</summary>
		public DynamicPagesServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="DynamicPages"/> instance.
		///</summary>
		///<param name="_siteId"></param>
		///<param name="_languageId"></param>
		///<param name="_parentDynamicPageId"></param>
		///<param name="_pageName"></param>
		///<param name="_pageTitle"></param>
		///<param name="_pageContent"></param>
		///<param name="_dynamicPageWebPartTemplateId"></param>
		///<param name="_hyperLink"></param>
		///<param name="_valid"></param>
		///<param name="_openInNewWindow"></param>
		///<param name="_sequence"></param>
		///<param name="_fullScreen"></param>
		///<param name="_onTopNav"></param>
		///<param name="_onLeftNav"></param>
		///<param name="_onBottomNav"></param>
		///<param name="_onSiteMap"></param>
		///<param name="_searchable"></param>
		///<param name="_metaKeywords"></param>
		///<param name="_metaDescription"></param>
		///<param name="_pageFriendlyName"></param>
		///<param name="_lastModified"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_searchField"></param>
		///<param name="_sourceId"></param>
		///<param name="_secured"></param>
		///<param name="_customUrl"></param>
		///<param name="_metaTitle"></param>
		///<param name="_generateBreadcrumb"></param>
		///<param name="_publishOn"></param>
		///<param name="_visible"></param>
		public static DynamicPages CreateDynamicPages(System.Int32 _siteId, System.Int32 _languageId, System.Int32 _parentDynamicPageId, System.String _pageName, System.String _pageTitle, System.String _pageContent, System.Int32? _dynamicPageWebPartTemplateId, System.String _hyperLink, System.Boolean _valid, System.Boolean _openInNewWindow, System.Int32 _sequence, System.Boolean _fullScreen, System.Boolean _onTopNav, System.Boolean _onLeftNav, System.Boolean _onBottomNav, System.Boolean _onSiteMap, System.Boolean _searchable, System.String _metaKeywords, System.String _metaDescription, System.String _pageFriendlyName, System.DateTime _lastModified, System.Int32 _lastModifiedBy, System.String _searchField, System.Int32? _sourceId, System.Boolean _secured, System.String _customUrl, System.String _metaTitle, System.Boolean _generateBreadcrumb, System.DateTime? _publishOn, System.Boolean _visible)
		{
			DynamicPages newEntityDynamicPages = new DynamicPages();
			newEntityDynamicPages.SiteId  = _siteId;
			newEntityDynamicPages.LanguageId  = _languageId;
			newEntityDynamicPages.ParentDynamicPageId  = _parentDynamicPageId;
			newEntityDynamicPages.PageName  = _pageName;
			newEntityDynamicPages.PageTitle  = _pageTitle;
			newEntityDynamicPages.PageContent  = _pageContent;
			newEntityDynamicPages.DynamicPageWebPartTemplateId  = _dynamicPageWebPartTemplateId;
			newEntityDynamicPages.HyperLink  = _hyperLink;
			newEntityDynamicPages.Valid  = _valid;
			newEntityDynamicPages.OpenInNewWindow  = _openInNewWindow;
			newEntityDynamicPages.Sequence  = _sequence;
			newEntityDynamicPages.FullScreen  = _fullScreen;
			newEntityDynamicPages.OnTopNav  = _onTopNav;
			newEntityDynamicPages.OnLeftNav  = _onLeftNav;
			newEntityDynamicPages.OnBottomNav  = _onBottomNav;
			newEntityDynamicPages.OnSiteMap  = _onSiteMap;
			newEntityDynamicPages.Searchable  = _searchable;
			newEntityDynamicPages.MetaKeywords  = _metaKeywords;
			newEntityDynamicPages.MetaDescription  = _metaDescription;
			newEntityDynamicPages.PageFriendlyName  = _pageFriendlyName;
			newEntityDynamicPages.LastModified  = _lastModified;
			newEntityDynamicPages.LastModifiedBy  = _lastModifiedBy;
			newEntityDynamicPages.SearchField  = _searchField;
			newEntityDynamicPages.SourceId  = _sourceId;
			newEntityDynamicPages.Secured  = _secured;
			newEntityDynamicPages.CustomUrl  = _customUrl;
			newEntityDynamicPages.MetaTitle  = _metaTitle;
			newEntityDynamicPages.GenerateBreadcrumb  = _generateBreadcrumb;
			newEntityDynamicPages.PublishOn  = _publishOn;
			newEntityDynamicPages.Visible  = _visible;
			return newEntityDynamicPages;
		}
		#endregion Constructors


		#region Fields
		private static SecurityContext<DynamicPages> securityContext = new SecurityContext<DynamicPages>();
		private static readonly string layerExceptionPolicy = "ServiceLayerExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		#endregion 
		
		#region SecurityContext
		///<summary>
		/// Contains all necessary information to validate and authorize the 
		/// call of the method with the Principal and Roles of the current user.
		///</summary>
		public static SecurityContext<DynamicPages> SecurityContext
		{
			get
			{
				return securityContext;	
			}	
		}
		#endregion 
		
		#region Data Access Methods
		
		#region GetByForeignKey Methods
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{DynamicPages}" /> from the datasource based on the FK__DynamicPa__Dynam__619B8048 key.
		///		FK__DynamicPa__Dynam__619B8048 Description: 
		/// </summary>
		/// <param name="_dynamicPageWebPartTemplateId"></param>
		/// <returns>Returns a generic collection of DynamicPages objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<DynamicPages> GetByDynamicPageWebPartTemplateId(System.Int32? _dynamicPageWebPartTemplateId)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByDynamicPageWebPartTemplateId");
			#endregion Security check
			
			#region Initialisation
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<DynamicPages>(dataProvider.DynamicPagesProvider.GetByDynamicPageWebPartTemplateId(transactionManager, _dynamicPageWebPartTemplateId));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{DynamicPages}" /> from the datasource based on the FK__DynamicPa__Dynam__619B8048 key.
		///		FK__DynamicPa__Dynam__619B8048 Description: 
		/// </summary>
		/// <param name="_dynamicPageWebPartTemplateId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{DynamicPages}" /> of <c>DynamicPages</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<DynamicPages> GetByDynamicPageWebPartTemplateId(System.Int32? _dynamicPageWebPartTemplateId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByDynamicPageWebPartTemplateId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<DynamicPages>(dataProvider.DynamicPagesProvider.GetByDynamicPageWebPartTemplateId(transactionManager, _dynamicPageWebPartTemplateId, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{DynamicPages}" /> from the datasource based on the FK__DynamicPa__Langu__60A75C0F key.
		///		FK__DynamicPa__Langu__60A75C0F Description: 
		/// </summary>
		/// <param name="_languageId"></param>
		/// <returns>Returns a generic collection of DynamicPages objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<DynamicPages> GetByLanguageId(System.Int32 _languageId)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLanguageId");
			#endregion Security check
			
			#region Initialisation
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<DynamicPages>(dataProvider.DynamicPagesProvider.GetByLanguageId(transactionManager, _languageId));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{DynamicPages}" /> from the datasource based on the FK__DynamicPa__Langu__60A75C0F key.
		///		FK__DynamicPa__Langu__60A75C0F Description: 
		/// </summary>
		/// <param name="_languageId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{DynamicPages}" /> of <c>DynamicPages</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<DynamicPages> GetByLanguageId(System.Int32 _languageId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLanguageId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<DynamicPages>(dataProvider.DynamicPagesProvider.GetByLanguageId(transactionManager, _languageId, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{DynamicPages}" /> from the datasource based on the FK__DynamicPa__LastM__628FA481 key.
		///		FK__DynamicPa__LastM__628FA481 Description: 
		/// </summary>
		/// <param name="_lastModifiedBy"></param>
		/// <returns>Returns a generic collection of DynamicPages objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<DynamicPages> GetByLastModifiedBy(System.Int32 _lastModifiedBy)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLastModifiedBy");
			#endregion Security check
			
			#region Initialisation
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<DynamicPages>(dataProvider.DynamicPagesProvider.GetByLastModifiedBy(transactionManager, _lastModifiedBy));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{DynamicPages}" /> from the datasource based on the FK__DynamicPa__LastM__628FA481 key.
		///		FK__DynamicPa__LastM__628FA481 Description: 
		/// </summary>
		/// <param name="_lastModifiedBy"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{DynamicPages}" /> of <c>DynamicPages</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<DynamicPages> GetByLastModifiedBy(System.Int32 _lastModifiedBy, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLastModifiedBy");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<DynamicPages>(dataProvider.DynamicPagesProvider.GetByLastModifiedBy(transactionManager, _lastModifiedBy, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		

		

		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{DynamicPages}" /> from the datasource based on the FK_DynamicPages_Sites key.
		///		FK_DynamicPages_Sites Description: 
		/// </summary>
		/// <param name="_siteId"></param>
		/// <returns>Returns a generic collection of DynamicPages objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<DynamicPages> GetBySiteId(System.Int32 _siteId)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteId");
			#endregion Security check
			
			#region Initialisation
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<DynamicPages>(dataProvider.DynamicPagesProvider.GetBySiteId(transactionManager, _siteId));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{DynamicPages}" /> from the datasource based on the FK_DynamicPages_Sites key.
		///		FK_DynamicPages_Sites Description: 
		/// </summary>
		/// <param name="_siteId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{DynamicPages}" /> of <c>DynamicPages</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<DynamicPages> GetBySiteId(System.Int32 _siteId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<DynamicPages>(dataProvider.DynamicPagesProvider.GetBySiteId(transactionManager, _siteId, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		#endregion GetByForeignKey Methods
		
		#region GetByIndexes
		/// <summary>
		/// 	Gets a row from the DataSource based on its primary key.
		/// </summary>
		/// <param name="key">The unique identifier of the row to retrieve.</param>
		/// <returns>Returns an instance of the Entity class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public override DynamicPages Get(DynamicPagesKey key)
		{
			return GetByDynamicPageId(key.DynamicPageId);
		}

		/// <summary>
		///  method that Gets rows in a <see cref="TList{DynamicPages}" /> from the datasource based on the primary key IX_Unique_DynamicPages index.
		/// </summary>
		/// <param name="_siteId"></param>
		/// <param name="_pageName"></param>
		/// <param name="_languageId"></param>
		/// <returns>Returns an instance of the <see cref="DynamicPages"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual DynamicPages GetBySiteIdPageNameLanguageId(System.Int32 _siteId, System.String _pageName, System.Int32 _languageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdPageNameLanguageId");
			#endregion Security check
			
			#region Initialisation
			DynamicPages entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.DynamicPagesProvider.GetBySiteIdPageNameLanguageId(transactionManager, _siteId, _pageName, _languageId)   as DynamicPages;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{DynamicPages}" /> from the datasource based on the primary key IX_Unique_DynamicPages index.
		/// </summary>
		/// <param name="_siteId"></param>
		/// <param name="_pageName"></param>
		/// <param name="_languageId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="DynamicPages"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual DynamicPages GetBySiteIdPageNameLanguageId(System.Int32 _siteId, System.String _pageName, System.Int32 _languageId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdPageNameLanguageId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			DynamicPages entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.DynamicPagesProvider.GetBySiteIdPageNameLanguageId(transactionManager, _siteId, _pageName, _languageId, start, pageLength, out totalCount)   as DynamicPages;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{DynamicPages}" /> from the datasource based on the primary key IX_Unique_DynamicPages_FriendlyName index.
		/// </summary>
		/// <param name="_siteId"></param>
		/// <param name="_languageId"></param>
		/// <param name="_pageFriendlyName"></param>
		/// <returns>Returns an instance of the <see cref="DynamicPages"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual DynamicPages GetBySiteIdLanguageIdPageFriendlyName(System.Int32 _siteId, System.Int32 _languageId, System.String _pageFriendlyName)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdLanguageIdPageFriendlyName");
			#endregion Security check
			
			#region Initialisation
			DynamicPages entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.DynamicPagesProvider.GetBySiteIdLanguageIdPageFriendlyName(transactionManager, _siteId, _languageId, _pageFriendlyName)   as DynamicPages;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{DynamicPages}" /> from the datasource based on the primary key IX_Unique_DynamicPages_FriendlyName index.
		/// </summary>
		/// <param name="_siteId"></param>
		/// <param name="_languageId"></param>
		/// <param name="_pageFriendlyName"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="DynamicPages"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual DynamicPages GetBySiteIdLanguageIdPageFriendlyName(System.Int32 _siteId, System.Int32 _languageId, System.String _pageFriendlyName, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdLanguageIdPageFriendlyName");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			DynamicPages entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.DynamicPagesProvider.GetBySiteIdLanguageIdPageFriendlyName(transactionManager, _siteId, _languageId, _pageFriendlyName, start, pageLength, out totalCount)   as DynamicPages;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{DynamicPages}" /> from the datasource based on the primary key PK__DynamicPages__0BC6C43E index.
		/// </summary>
		/// <param name="_dynamicPageId"></param>
		/// <returns>Returns an instance of the <see cref="DynamicPages"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual DynamicPages GetByDynamicPageId(System.Int32 _dynamicPageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByDynamicPageId");
			#endregion Security check
			
			#region Initialisation
			DynamicPages entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.DynamicPagesProvider.GetByDynamicPageId(transactionManager, _dynamicPageId)   as DynamicPages;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{DynamicPages}" /> from the datasource based on the primary key PK__DynamicPages__0BC6C43E index.
		/// </summary>
		/// <param name="_dynamicPageId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="DynamicPages"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual DynamicPages GetByDynamicPageId(System.Int32 _dynamicPageId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByDynamicPageId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			DynamicPages entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.DynamicPagesProvider.GetByDynamicPageId(transactionManager, _dynamicPageId, start, pageLength, out totalCount)   as DynamicPages;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
	
		#endregion GetByIndexes
	
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="DynamicPages" /> entities.
		/// </summary>
		/// <returns></returns>
		public override TList<DynamicPages> GetAll() 
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAll");
			#endregion Security check
			
			#region Initialisation
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.DynamicPagesProvider.GetAll(transactionManager);	
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}

		/// <summary>
		/// Get a set portion of a complete list of <see cref="DynamicPages" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{DynamicPages}"/> </returns>
		public virtual TList<DynamicPages> GetAll(int start, int pageLength, out int totalCount) 
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAll");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.DynamicPagesProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{DynamicPages}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>DynamicPages</c> objects.</returns>
		public virtual TList<DynamicPages> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, int.MaxValue, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{DynamicPages}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>DynamicPages</c> objects.</returns>
		public virtual TList<DynamicPages> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{DynamicPages}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>DynamicPages</c> objects.</returns>
		public override TList<DynamicPages> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetPaged");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.DynamicPagesProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, int.MaxValue, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	
				
		#region Find
		
		#region Parsed Find Methods
		
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual TList<DynamicPages> Find(string whereClause)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.DynamicPagesProvider.Find(transactionManager, whereClause);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}	
		
		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{DynamicPages} of <c>DynamicPages</c> objects.</returns>
		public override TList<DynamicPages> Find(string whereClause, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.DynamicPagesProvider.Find(transactionManager, whereClause, start, pageLength, out totalCount);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods

		/// <summary>
		/// Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>DynamicPages</c> objects.</returns>
		public virtual TList<DynamicPages> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, (string) null);
		}
		
		/// <summary>
        /// Returns rows from the DataSource that meet the parameter conditions.
        /// </summary>
        /// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
        /// <param name="sortColumns">A collection of <see cref="SqlSortColumn"/> objects.</param>
        /// <returns>Returns a typed collection of <c>DynamicPages</c> objects.</returns>
        public virtual TList<DynamicPages> Find(IFilterParameterCollection parameters, ISortColumnCollection sortColumns)
        {
            return Find(parameters, sortColumns.ToString());
        }
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>DynamicPages</c> objects.</returns>
		public virtual TList<DynamicPages> Find(IFilterParameterCollection parameters, string orderBy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			TList<DynamicPages> list = null;
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.DynamicPagesProvider.Find(transactionManager, parameters, orderBy);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;		
		}
		
		/// <summary>
        /// Returns rows from the DataSource that meet the parameter conditions.
        /// </summary>
        /// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
        /// <param name="sortColumns">A collection of <see cref="SqlSortColumn"/> objects.</param>
        /// <param name="start">Row number at which to start reading.</param>
        /// <param name="pageLength">Number of rows to return.</param>
        /// <param name="count">out. The number of rows that match this query.</param>
        /// <returns>Returns a typed collection of <c>DynamicPages</c> objects.</returns>
        public virtual TList<DynamicPages> Find(IFilterParameterCollection parameters, ISortColumnCollection sortColumns, int start, int pageLength, out int count)
        {
            return Find(parameters, sortColumns.ToString(), start, pageLength, out count);
        }
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>DynamicPages</c> objects.</returns>
		public virtual TList<DynamicPages> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			count = -1;
			TransactionManager transactionManager = null; 
			TList<DynamicPages> list = null;
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.DynamicPagesProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion
		
		#region Insert

		#region Insert Entity
		/// <summary>
		/// public virtual method that Inserts a DynamicPages object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">DynamicPages object to Insert.</param>
		/// <remarks>After Inserting into the datasource, the DynamicPages object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Insert Method with an already open transaction.
        /// <code>
		/// DynamicPages entity = new DynamicPages();
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Insert Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Insert(entity.ChildObjectSource);
		///		DynamicPagesService.Insert(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public override bool Insert(DynamicPages entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Insert", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
                 SetDefaultValues(ref entity); 
				result = dataProvider.DynamicPagesProvider.Insert(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Insert Entity
		
		#region Insert Collection
		/// <summary>
		/// public virtual method that Inserts rows in <see cref="TList{DynamicPages}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>DynamicPages</c> objects in a <see cref="TList{DynamicPages}" /> object to Insert.</param>
		/// <remarks>
		///		This function will only Insert entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Inserting the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Inserting into the datasource, the <c>DynamicPages</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Insert.</returns>
		/// <example>
        /// The following code shows the usage of the Insert Method with a collection of DynamicPages.
        /// <code><![CDATA[
		/// TList<DynamicPages> list = new TList<DynamicPages>();
		/// DynamicPages entity = new DynamicPages();
		/// entity.StringProperty = "foo";
		/// DynamicPages entity2 = new DynamicPages();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	DynamicPagesService.Insert(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public virtual TList<DynamicPages> Insert(TList<DynamicPages> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Insert", DomainUtil.GetErrorsFromList<DynamicPages>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.DynamicPagesProvider.Insert(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Insert Collection

		#endregion Insert 
		
		#region Update

		#region Update Entity
		/// <summary>
		/// public virtual method that Updates a DynamicPages object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">DynamicPages object to Update.</param>
		/// <remarks>After Updateing into the datasource, the DynamicPages object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Update Method with an already open transaction.
        /// <code>
		///	DynamicPages entity = DynamicPagesService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Update Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Update(entity.ChildObjectSource);
		///		DynamicPagesService.Update(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool Update(DynamicPages entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Update", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
                 SetDefaultValues(ref entity); 
				result = dataProvider.DynamicPagesProvider.Update(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Update Entity
		
		#region Update Collection
		/// <summary>
		/// public virtual method that Updates rows in <see cref="TList{DynamicPages}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>DynamicPages</c> objects in a <see cref="TList{DynamicPages}" /> object to Update.</param>
		/// <remarks>
		///		This function will only Update entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Updateing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Updateing into the datasource, the <c>DynamicPages</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Update.</returns>
		/// <example>
        /// The following code shows the usage of the Update Method with a collection of DynamicPages.
        /// <code><![CDATA[
		/// TList<DynamicPages> list = new TList<DynamicPages>();
		/// DynamicPages entity = new DynamicPages();
		/// entity.StringProperty = "foo";
		/// DynamicPages entity2 = new DynamicPages();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	DynamicPagesService.Update(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual TList<DynamicPages> Update(TList<DynamicPages> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Update", DomainUtil.GetErrorsFromList<DynamicPages>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.DynamicPagesProvider.Update(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Update Collection

		#endregion Update 
		
		#region Save

		#region Save Entity
		/// <summary>
		/// public virtual method that Saves a DynamicPages object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">DynamicPages object to Save.</param>
		/// <remarks>After Saveing into the datasource, the DynamicPages object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Save Method with an already open transaction.
        /// <code>
		///	DynamicPages entity = DynamicPagesService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Save Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Save(entity.ChildObjectSource);
		///		DynamicPagesService.Save(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override DynamicPages Save(DynamicPages entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Save");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Save", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
                 SetDefaultValues(ref entity); 
				dataProvider.DynamicPagesProvider.Save(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
		#endregion Save Entity
		
		#region Save Collection
		/// <summary>
		/// public virtual method that Saves rows in <see cref="TList{DynamicPages}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>DynamicPages</c> objects in a <see cref="TList{DynamicPages}" /> object to Save.</param>
		/// <remarks>
		///		This function will only Save entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Saveing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Saveing into the datasource, the <c>DynamicPages</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Save.</returns>
		/// <example>
        /// The following code shows the usage of the Save Method with a collection of DynamicPages.
        /// <code><![CDATA[
		/// TList<DynamicPages> list = new TList<DynamicPages>();
		/// DynamicPages entity = new DynamicPages();
		/// entity.StringProperty = "foo";
		/// DynamicPages entity2 = new DynamicPages();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	DynamicPagesService.Save(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual TList<DynamicPages> Save(TList<DynamicPages> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Save");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Save", DomainUtil.GetErrorsFromList<DynamicPages>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.DynamicPagesProvider.Save(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Save Collection

		#endregion Save 
		
		#region Delete

		#region Delete Entity
		/// <summary>
		/// public virtual method that Deletes a DynamicPages object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">DynamicPages object to Delete.</param>
		/// <remarks>After Deleteing into the datasource, the DynamicPages object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Delete Method with an already open transaction.
        /// <code>
		///	DynamicPages entity = DynamicPagesService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Delete Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Delete(entity.ChildObjectSource);
		///		DynamicPagesService.Delete(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public override bool Delete(DynamicPages entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Delete", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
                
				result = dataProvider.DynamicPagesProvider.Delete(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Delete Entity
		
		#region Delete Collection
		/// <summary>
		/// public virtual method that Deletes rows in <see cref="TList{DynamicPages}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>DynamicPages</c> objects in a <see cref="TList{DynamicPages}" /> object to Delete.</param>
		/// <remarks>
		///		This function will only Delete entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Deleteing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Deleteing into the datasource, the <c>DynamicPages</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Delete.</returns>
		/// <example>
        /// The following code shows the usage of the Delete Method with a collection of DynamicPages.
        /// <code><![CDATA[
		/// TList<DynamicPages> list = new TList<DynamicPages>();
		/// DynamicPages entity = new DynamicPages();
		/// entity.StringProperty = "foo";
		/// DynamicPages entity2 = new DynamicPages();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	DynamicPagesService.Delete(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public virtual TList<DynamicPages> Delete(TList<DynamicPages> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Delete", DomainUtil.GetErrorsFromList<DynamicPages>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.DynamicPagesProvider.Delete(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Delete Collection

		#endregion Delete 

		#region   Delete
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="key">The unique identifier of the row to delete.</param>
		/// <returns>Returns true if operation suceeded.</returns>
		public bool Delete(DynamicPagesKey key)
		{
			return Delete(key.DynamicPageId );
		}
		
		/// <summary>
		/// 	Deletes a row from the DataSource based on the PK'S System.Int32 _dynamicPageId
		/// </summary>
		/// <param name="_dynamicPageId">DynamicPages pk id.</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public virtual bool Delete(System.Int32 _dynamicPageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			#endregion Security check

			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.DynamicPagesProvider.Delete(transactionManager, _dynamicPageId);
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
			
		}
		#endregion 
		
		#region  GetBy m:m Aggregate Relationships
		#region GetByRelatedDynamicPageIdFromRelatedDynamicPages
		/// <summary>
		///		Gets DynamicPages objects from the datasource by RelatedDynamicPageID in the
		///		RelatedDynamicPages table. Table DynamicPages is related to table DynamicPages
		///		through the (M:N) relationship defined in the RelatedDynamicPages table.
		/// </summary>
		/// <param name="_relatedDynamicPageId"></param>
		/// <returns>Returns a typed collection of DynamicPages objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<DynamicPages> GetByRelatedDynamicPageIdFromRelatedDynamicPages(System.Int32 _relatedDynamicPageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByRelatedDynamicPageIdFromRelatedDynamicPages");
			#endregion Security check
			
			#region Initialisation
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.DynamicPagesProvider.GetByRelatedDynamicPageIdFromRelatedDynamicPages(transactionManager, _relatedDynamicPageId);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return list;
		}
		
		/// <summary>
		///		Gets DynamicPages objects from the datasource by RelatedDynamicPageID in the
		///		RelatedDynamicPages table. Table DynamicPages is related to table DynamicPages
		///		through the (M:N) relationship defined in the RelatedDynamicPages table.
		/// </summary>
		/// <param name="_relatedDynamicPageId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out param: Total Number of results returned.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of DynamicPages objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<DynamicPages> GetByRelatedDynamicPageIdFromRelatedDynamicPages(System.Int32 _relatedDynamicPageId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByRelatedDynamicPageIdFromRelatedDynamicPages");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.DynamicPagesProvider.GetByRelatedDynamicPageIdFromRelatedDynamicPages(transactionManager, _relatedDynamicPageId, start,  pageLength, out totalCount);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return list;			
		}
		#endregion GetByRelatedDynamicPageIdFromRelatedDynamicPages
		
		#region GetByDynamicPageIdFromRelatedDynamicPages
		/// <summary>
		///		Gets DynamicPages objects from the datasource by DynamicPageID in the
		///		RelatedDynamicPages table. Table DynamicPages is related to table DynamicPages
		///		through the (M:N) relationship defined in the RelatedDynamicPages table.
		/// </summary>
		/// <param name="_dynamicPageId"></param>
		/// <returns>Returns a typed collection of DynamicPages objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<DynamicPages> GetByDynamicPageIdFromRelatedDynamicPages(System.Int32 _dynamicPageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByDynamicPageIdFromRelatedDynamicPages");
			#endregion Security check
			
			#region Initialisation
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.DynamicPagesProvider.GetByDynamicPageIdFromRelatedDynamicPages(transactionManager, _dynamicPageId);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return list;
		}
		
		/// <summary>
		///		Gets DynamicPages objects from the datasource by DynamicPageID in the
		///		RelatedDynamicPages table. Table DynamicPages is related to table DynamicPages
		///		through the (M:N) relationship defined in the RelatedDynamicPages table.
		/// </summary>
		/// <param name="_dynamicPageId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out param: Total Number of results returned.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of DynamicPages objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<DynamicPages> GetByDynamicPageIdFromRelatedDynamicPages(System.Int32 _dynamicPageId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByDynamicPageIdFromRelatedDynamicPages");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<DynamicPages> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.DynamicPagesProvider.GetByDynamicPageIdFromRelatedDynamicPages(transactionManager, _dynamicPageId, start,  pageLength, out totalCount);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return list;			
		}
		#endregion GetByDynamicPageIdFromRelatedDynamicPages
		
		#endregion	N2N Relationships

		#region Custom Methods
		
		#region DynamicPages_GetSiteMissingSystemPagesByName
		/// <summary>
		///	This method wrap the 'DynamicPages_GetSiteMissingSystemPagesByName' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetSiteMissingSystemPagesByName(System.Int32? siteId, System.String pageName)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSiteMissingSystemPagesByName");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetSiteMissingSystemPagesByName(transactionManager , siteId, pageName);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetSiteMissingSystemPagesByName' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetSiteMissingSystemPagesByName( System.Int32? siteId, System.String pageName, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSiteMissingSystemPagesByName");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetSiteMissingSystemPagesByName(transactionManager, start, pageLength , siteId, pageName);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetBySiteIdPageNameLanguageId
		/// <summary>
		///	This method wrap the 'DynamicPages_GetBySiteIdPageNameLanguageId' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetBySiteIdPageNameLanguageId(System.Int32? siteId, System.String pageName, System.Int32? languageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdPageNameLanguageId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetBySiteIdPageNameLanguageId(transactionManager , siteId, pageName, languageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetBySiteIdPageNameLanguageId' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetBySiteIdPageNameLanguageId( System.Int32? siteId, System.String pageName, System.Int32? languageId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdPageNameLanguageId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetBySiteIdPageNameLanguageId(transactionManager, start, pageLength , siteId, pageName, languageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetByKeywords
		/// <summary>
		///	This method wrap the 'DynamicPages_GetByKeywords' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="keywords"> A <c>System.String</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searhable"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageNumber"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{DynamicPages}"/> instance.</returns>
		public virtual  TList<DynamicPages> GetByKeywords(System.Int32? siteId, System.String keywords, System.Int32? languageId, System.Boolean? searhable, System.Int32? pageSize, System.Int32? pageNumber)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByKeywords");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetByKeywords(transactionManager , siteId, keywords, languageId, searhable, pageSize, pageNumber);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetByKeywords' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="keywords"> A <c>System.String</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searhable"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageNumber"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{DynamicPages}"/> instance.</returns>
		public virtual  TList<DynamicPages> GetByKeywords( System.Int32? siteId, System.String keywords, System.Int32? languageId, System.Boolean? searhable, System.Int32? pageSize, System.Int32? pageNumber, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByKeywords");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetByKeywords(transactionManager, start, pageLength , siteId, keywords, languageId, searhable, pageSize, pageNumber);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetNavigation
		/// <summary>
		///	This method wrap the 'DynamicPages_GetNavigation' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="onMainNavigation"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onDynamicPageNavigation"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onFooterNav"> A <c>System.Boolean?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{DynamicPages}"/> instance.</returns>
		public virtual  TList<DynamicPages> GetNavigation(System.Int32? siteId, System.Int32? languageId, System.Boolean? onMainNavigation, System.Boolean? onDynamicPageNavigation, System.Boolean? onFooterNav)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetNavigation");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetNavigation(transactionManager , siteId, languageId, onMainNavigation, onDynamicPageNavigation, onFooterNav);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetNavigation' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="onMainNavigation"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onDynamicPageNavigation"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onFooterNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{DynamicPages}"/> instance.</returns>
		public virtual  TList<DynamicPages> GetNavigation( System.Int32? siteId, System.Int32? languageId, System.Boolean? onMainNavigation, System.Boolean? onDynamicPageNavigation, System.Boolean? onFooterNav, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetNavigation");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetNavigation(transactionManager, start, pageLength , siteId, languageId, onMainNavigation, onDynamicPageNavigation, onFooterNav);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetBySiteIdPageName
		/// <summary>
		///	This method wrap the 'DynamicPages_GetBySiteIdPageName' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{DynamicPages}"/> instance.</returns>
		public virtual  TList<DynamicPages> GetBySiteIdPageName(System.Int32? siteId, System.String pageName)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdPageName");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetBySiteIdPageName(transactionManager , siteId, pageName);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetBySiteIdPageName' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{DynamicPages}"/> instance.</returns>
		public virtual  TList<DynamicPages> GetBySiteIdPageName( System.Int32? siteId, System.String pageName, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdPageName");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetBySiteIdPageName(transactionManager, start, pageLength , siteId, pageName);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_CopyDynamicPagesForNewLangauge
		/// <summary>
		///	This method wrap the 'DynamicPages_CopyDynamicPagesForNewLangauge' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="newSiteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="newLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dynamicPageWebPartTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet CopyDynamicPagesForNewLangauge(System.Int32? siteId, System.Int32? languageId, System.Int32? newSiteId, System.Int32? newLanguageId, System.Int32? dynamicPageWebPartTemplateId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("CopyDynamicPagesForNewLangauge");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.CopyDynamicPagesForNewLangauge(transactionManager , siteId, languageId, newSiteId, newLanguageId, dynamicPageWebPartTemplateId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_CopyDynamicPagesForNewLangauge' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="newSiteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="newLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dynamicPageWebPartTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet CopyDynamicPagesForNewLangauge( System.Int32? siteId, System.Int32? languageId, System.Int32? newSiteId, System.Int32? newLanguageId, System.Int32? dynamicPageWebPartTemplateId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("CopyDynamicPagesForNewLangauge");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.CopyDynamicPagesForNewLangauge(transactionManager, start, pageLength , siteId, languageId, newSiteId, newLanguageId, dynamicPageWebPartTemplateId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetByDynamicPageWebPartTemplateId

	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetByDynamicPageWebPartTemplateId' stored procedure. 
		/// </summary>
		/// <param name="dynamicPageWebPartTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByDynamicPageWebPartTemplateId( System.Int32? dynamicPageWebPartTemplateId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByDynamicPageWebPartTemplateId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetByDynamicPageWebPartTemplateId(transactionManager, start, pageLength , dynamicPageWebPartTemplateId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_Update
		/// <summary>
		///	This method wrap the 'DynamicPages_Update' stored procedure. 
		/// </summary>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="parentDynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="pageTitle"> A <c>System.String</c> instance.</param>
		/// <param name="pageContent"> A <c>System.String</c> instance.</param>
		/// <param name="dynamicPageWebPartTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="hyperLink"> A <c>System.String</c> instance.</param>
		/// <param name="valid"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="openInNewWindow"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="sequence"> A <c>System.Int32?</c> instance.</param>
		/// <param name="fullScreen"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onTopNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onLeftNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onBottomNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onSiteMap"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="searchable"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="metaKeywords"> A <c>System.String</c> instance.</param>
		/// <param name="metaDescription"> A <c>System.String</c> instance.</param>
		/// <param name="pageFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="sourceId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="secured"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="customUrl"> A <c>System.String</c> instance.</param>
		/// <param name="metaTitle"> A <c>System.String</c> instance.</param>
		/// <param name="generateBreadcrumb"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publishOn"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="visible"> A <c>System.Boolean?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Update(System.Int32? dynamicPageId, System.Int32? siteId, System.Int32? languageId, System.Int32? parentDynamicPageId, System.String pageName, System.String pageTitle, System.String pageContent, System.Int32? dynamicPageWebPartTemplateId, System.String hyperLink, System.Boolean? valid, System.Boolean? openInNewWindow, System.Int32? sequence, System.Boolean? fullScreen, System.Boolean? onTopNav, System.Boolean? onLeftNav, System.Boolean? onBottomNav, System.Boolean? onSiteMap, System.Boolean? searchable, System.String metaKeywords, System.String metaDescription, System.String pageFriendlyName, System.DateTime? lastModified, System.Int32? lastModifiedBy, System.String searchField, System.Int32? sourceId, System.Boolean? secured, System.String customUrl, System.String metaTitle, System.Boolean? generateBreadcrumb, System.DateTime? publishOn, System.Boolean? visible)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.DynamicPagesProvider.Update(transactionManager , dynamicPageId, siteId, languageId, parentDynamicPageId, pageName, pageTitle, pageContent, dynamicPageWebPartTemplateId, hyperLink, valid, openInNewWindow, sequence, fullScreen, onTopNav, onLeftNav, onBottomNav, onSiteMap, searchable, metaKeywords, metaDescription, pageFriendlyName, lastModified, lastModifiedBy, searchField, sourceId, secured, customUrl, metaTitle, generateBreadcrumb, publishOn, visible);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_Update' stored procedure. 
		/// </summary>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="parentDynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="pageTitle"> A <c>System.String</c> instance.</param>
		/// <param name="pageContent"> A <c>System.String</c> instance.</param>
		/// <param name="dynamicPageWebPartTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="hyperLink"> A <c>System.String</c> instance.</param>
		/// <param name="valid"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="openInNewWindow"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="sequence"> A <c>System.Int32?</c> instance.</param>
		/// <param name="fullScreen"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onTopNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onLeftNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onBottomNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onSiteMap"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="searchable"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="metaKeywords"> A <c>System.String</c> instance.</param>
		/// <param name="metaDescription"> A <c>System.String</c> instance.</param>
		/// <param name="pageFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="sourceId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="secured"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="customUrl"> A <c>System.String</c> instance.</param>
		/// <param name="metaTitle"> A <c>System.String</c> instance.</param>
		/// <param name="generateBreadcrumb"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publishOn"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="visible"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Update( System.Int32? dynamicPageId, System.Int32? siteId, System.Int32? languageId, System.Int32? parentDynamicPageId, System.String pageName, System.String pageTitle, System.String pageContent, System.Int32? dynamicPageWebPartTemplateId, System.String hyperLink, System.Boolean? valid, System.Boolean? openInNewWindow, System.Int32? sequence, System.Boolean? fullScreen, System.Boolean? onTopNav, System.Boolean? onLeftNav, System.Boolean? onBottomNav, System.Boolean? onSiteMap, System.Boolean? searchable, System.String metaKeywords, System.String metaDescription, System.String pageFriendlyName, System.DateTime? lastModified, System.Int32? lastModifiedBy, System.String searchField, System.Int32? sourceId, System.Boolean? secured, System.String customUrl, System.String metaTitle, System.Boolean? generateBreadcrumb, System.DateTime? publishOn, System.Boolean? visible, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.DynamicPagesProvider.Update(transactionManager, start, pageLength , dynamicPageId, siteId, languageId, parentDynamicPageId, pageName, pageTitle, pageContent, dynamicPageWebPartTemplateId, hyperLink, valid, openInNewWindow, sequence, fullScreen, onTopNav, onLeftNav, onBottomNav, onSiteMap, searchable, metaKeywords, metaDescription, pageFriendlyName, lastModified, lastModifiedBy, searchField, sourceId, secured, customUrl, metaTitle, generateBreadcrumb, publishOn, visible);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region DynamicPages_GetByDynamicPageId
		/// <summary>
		///	This method wrap the 'DynamicPages_GetByDynamicPageId' stored procedure. 
		/// </summary>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByDynamicPageId(System.Int32? dynamicPageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByDynamicPageId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetByDynamicPageId(transactionManager , dynamicPageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetByDynamicPageId' stored procedure. 
		/// </summary>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByDynamicPageId( System.Int32? dynamicPageId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByDynamicPageId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetByDynamicPageId(transactionManager, start, pageLength , dynamicPageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetDetail
		/// <summary>
		///	This method wrap the 'DynamicPages_GetDetail' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetDetail(System.Int32? siteId, System.String pageName, System.Int32? languageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetDetail");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetDetail(transactionManager , siteId, pageName, languageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetDetail' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetDetail( System.Int32? siteId, System.String pageName, System.Int32? languageId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetDetail");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetDetail(transactionManager, start, pageLength , siteId, pageName, languageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_CustomGetValidHierarchy
		/// <summary>
		///	This method wrap the 'DynamicPages_CustomGetValidHierarchy' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="onSiteMap"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="nonSystemPage"> A <c>System.Boolean?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{DynamicPages}"/> instance.</returns>
		public virtual  TList<DynamicPages> CustomGetValidHierarchy(System.Int32? siteId, System.Int32? languageId, System.Int32? dynamicPageId, System.Boolean? onSiteMap, System.Boolean? nonSystemPage)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("CustomGetValidHierarchy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.CustomGetValidHierarchy(transactionManager , siteId, languageId, dynamicPageId, onSiteMap, nonSystemPage);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_CustomGetValidHierarchy' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="onSiteMap"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="nonSystemPage"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{DynamicPages}"/> instance.</returns>
		public virtual  TList<DynamicPages> CustomGetValidHierarchy( System.Int32? siteId, System.Int32? languageId, System.Int32? dynamicPageId, System.Boolean? onSiteMap, System.Boolean? nonSystemPage, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("CustomGetValidHierarchy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.CustomGetValidHierarchy(transactionManager, start, pageLength , siteId, languageId, dynamicPageId, onSiteMap, nonSystemPage);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_Get_List
		/// <summary>
		///	This method wrap the 'DynamicPages_Get_List' stored procedure. 
		/// </summary>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet Get_List()
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Get_List");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.Get_List(transactionManager );
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_Get_List' stored procedure. 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet Get_List( int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Get_List");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.Get_List(transactionManager, start, pageLength );
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_Delete
		/// <summary>
		///	This method wrap the 'DynamicPages_Delete' stored procedure. 
		/// </summary>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Delete(System.Int32? dynamicPageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.DynamicPagesProvider.Delete(transactionManager , dynamicPageId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_Delete' stored procedure. 
		/// </summary>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Delete( System.Int32? dynamicPageId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.DynamicPagesProvider.Delete(transactionManager, start, pageLength , dynamicPageId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region DynamicPages_GetHierarchyByChild
		/// <summary>
		///	This method wrap the 'DynamicPages_GetHierarchyByChild' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{DynamicPages}"/> instance.</returns>
		public virtual  TList<DynamicPages> GetHierarchyByChild(System.Int32? siteId, System.Int32? languageId, System.Int32? dynamicPageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetHierarchyByChild");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetHierarchyByChild(transactionManager , siteId, languageId, dynamicPageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetHierarchyByChild' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{DynamicPages}"/> instance.</returns>
		public virtual  TList<DynamicPages> GetHierarchyByChild( System.Int32? siteId, System.Int32? languageId, System.Int32? dynamicPageId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetHierarchyByChild");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetHierarchyByChild(transactionManager, start, pageLength , siteId, languageId, dynamicPageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetSystemPagesBySiteIDPageName
		/// <summary>
		///	This method wrap the 'DynamicPages_GetSystemPagesBySiteIDPageName' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{DynamicPages}"/> instance.</returns>
		public virtual  TList<DynamicPages> GetSystemPagesBySiteIDPageName(System.Int32? siteId, System.String pageName)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSystemPagesBySiteIDPageName");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetSystemPagesBySiteIDPageName(transactionManager , siteId, pageName);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetSystemPagesBySiteIDPageName' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{DynamicPages}"/> instance.</returns>
		public virtual  TList<DynamicPages> GetSystemPagesBySiteIDPageName( System.Int32? siteId, System.String pageName, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSystemPagesBySiteIDPageName");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetSystemPagesBySiteIDPageName(transactionManager, start, pageLength , siteId, pageName);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_UpdateWebPartTemplate
		/// <summary>
		///	This method wrap the 'DynamicPages_UpdateWebPartTemplate' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dynamicPageWebPartTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="updateChildPages"> A <c>System.Boolean?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void UpdateWebPartTemplate(System.Int32? siteId, System.Int32? languageId, System.Int32? dynamicPageId, System.Int32? dynamicPageWebPartTemplateId, System.Boolean? updateChildPages)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("UpdateWebPartTemplate");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.DynamicPagesProvider.UpdateWebPartTemplate(transactionManager , siteId, languageId, dynamicPageId, dynamicPageWebPartTemplateId, updateChildPages);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_UpdateWebPartTemplate' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dynamicPageWebPartTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="updateChildPages"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void UpdateWebPartTemplate( System.Int32? siteId, System.Int32? languageId, System.Int32? dynamicPageId, System.Int32? dynamicPageWebPartTemplateId, System.Boolean? updateChildPages, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("UpdateWebPartTemplate");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.DynamicPagesProvider.UpdateWebPartTemplate(transactionManager, start, pageLength , siteId, languageId, dynamicPageId, dynamicPageWebPartTemplateId, updateChildPages);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region DynamicPages_CopySystemPage
		/// <summary>
		///	This method wrap the 'DynamicPages_CopySystemPage' stored procedure. 
		/// </summary>
		/// <param name="masterSiteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="defaultLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="defaultAdminId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void CopySystemPage(System.Int32? masterSiteId, System.Int32? siteId, System.String pageName, System.Int32? defaultLanguageId, System.Int32? defaultAdminId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("CopySystemPage");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.DynamicPagesProvider.CopySystemPage(transactionManager , masterSiteId, siteId, pageName, defaultLanguageId, defaultAdminId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_CopySystemPage' stored procedure. 
		/// </summary>
		/// <param name="masterSiteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="defaultLanguageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="defaultAdminId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void CopySystemPage( System.Int32? masterSiteId, System.Int32? siteId, System.String pageName, System.Int32? defaultLanguageId, System.Int32? defaultAdminId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("CopySystemPage");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.DynamicPagesProvider.CopySystemPage(transactionManager, start, pageLength , masterSiteId, siteId, pageName, defaultLanguageId, defaultAdminId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region DynamicPages_GetByDynamicPageIdFromRelatedDynamicPages
		/// <summary>
		///	This method wrap the 'DynamicPages_GetByDynamicPageIdFromRelatedDynamicPages' stored procedure. 
		/// </summary>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByDynamicPageIdFromRelatedDynamicPages(System.Int32? dynamicPageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByDynamicPageIdFromRelatedDynamicPages");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetByDynamicPageIdFromRelatedDynamicPages(transactionManager , dynamicPageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetByDynamicPageIdFromRelatedDynamicPages' stored procedure. 
		/// </summary>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByDynamicPageIdFromRelatedDynamicPages( System.Int32? dynamicPageId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByDynamicPageIdFromRelatedDynamicPages");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetByDynamicPageIdFromRelatedDynamicPages(transactionManager, start, pageLength , dynamicPageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetPaged
		/// <summary>
		///	This method wrap the 'DynamicPages_GetPaged' stored procedure. 
		/// </summary>
		/// <param name="whereClause"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetPaged(System.String whereClause, System.String orderBy, System.Int32? pageIndex, System.Int32? pageSize)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetPaged");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetPaged(transactionManager , whereClause, orderBy, pageIndex, pageSize);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetPaged' stored procedure. 
		/// </summary>
		/// <param name="whereClause"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetPaged( System.String whereClause, System.String orderBy, System.Int32? pageIndex, System.Int32? pageSize, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetPaged");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetPaged(transactionManager, start, pageLength , whereClause, orderBy, pageIndex, pageSize);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetMissingSystemPagesBySiteID
		/// <summary>
		///	This method wrap the 'DynamicPages_GetMissingSystemPagesBySiteID' stored procedure. 
		/// </summary>
		/// <param name="defaultSiteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetMissingSystemPagesBySiteID(System.Int32? defaultSiteId, System.Int32? siteId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetMissingSystemPagesBySiteID");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetMissingSystemPagesBySiteID(transactionManager , defaultSiteId, siteId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetMissingSystemPagesBySiteID' stored procedure. 
		/// </summary>
		/// <param name="defaultSiteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetMissingSystemPagesBySiteID( System.Int32? defaultSiteId, System.Int32? siteId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetMissingSystemPagesBySiteID");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetMissingSystemPagesBySiteID(transactionManager, start, pageLength , defaultSiteId, siteId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetBySiteIdLanguageIdPageFriendlyName
		/// <summary>
		///	This method wrap the 'DynamicPages_GetBySiteIdLanguageIdPageFriendlyName' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageFriendlyName"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetBySiteIdLanguageIdPageFriendlyName(System.Int32? siteId, System.Int32? languageId, System.String pageFriendlyName)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdLanguageIdPageFriendlyName");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetBySiteIdLanguageIdPageFriendlyName(transactionManager , siteId, languageId, pageFriendlyName);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetBySiteIdLanguageIdPageFriendlyName' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetBySiteIdLanguageIdPageFriendlyName( System.Int32? siteId, System.Int32? languageId, System.String pageFriendlyName, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdLanguageIdPageFriendlyName");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetBySiteIdLanguageIdPageFriendlyName(transactionManager, start, pageLength , siteId, languageId, pageFriendlyName);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetBySiteId
		/// <summary>
		///	This method wrap the 'DynamicPages_GetBySiteId' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetBySiteId(System.Int32? siteId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetBySiteId(transactionManager , siteId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetBySiteId' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetBySiteId( System.Int32? siteId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetBySiteId(transactionManager, start, pageLength , siteId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetByRelatedDynamicPageIdFromRelatedDynamicPages
		/// <summary>
		///	This method wrap the 'DynamicPages_GetByRelatedDynamicPageIdFromRelatedDynamicPages' stored procedure. 
		/// </summary>
		/// <param name="relatedDynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByRelatedDynamicPageIdFromRelatedDynamicPages(System.Int32? relatedDynamicPageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByRelatedDynamicPageIdFromRelatedDynamicPages");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetByRelatedDynamicPageIdFromRelatedDynamicPages(transactionManager , relatedDynamicPageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetByRelatedDynamicPageIdFromRelatedDynamicPages' stored procedure. 
		/// </summary>
		/// <param name="relatedDynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByRelatedDynamicPageIdFromRelatedDynamicPages( System.Int32? relatedDynamicPageId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByRelatedDynamicPageIdFromRelatedDynamicPages");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetByRelatedDynamicPageIdFromRelatedDynamicPages(transactionManager, start, pageLength , relatedDynamicPageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetSystemPagesBySiteIDLanguageID
		/// <summary>
		///	This method wrap the 'DynamicPages_GetSystemPagesBySiteIDLanguageID' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetSystemPagesBySiteIDLanguageID(System.Int32? siteId, System.Int32? languageId, System.String pageName)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSystemPagesBySiteIDLanguageID");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetSystemPagesBySiteIDLanguageID(transactionManager , siteId, languageId, pageName);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetSystemPagesBySiteIDLanguageID' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetSystemPagesBySiteIDLanguageID( System.Int32? siteId, System.Int32? languageId, System.String pageName, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSystemPagesBySiteIDLanguageID");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetSystemPagesBySiteIDLanguageID(transactionManager, start, pageLength , siteId, languageId, pageName);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetBySiteIdPageFriendlyName
		/// <summary>
		///	This method wrap the 'DynamicPages_GetBySiteIdPageFriendlyName' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageFriendlyName"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetBySiteIdPageFriendlyName(System.Int32? siteId, System.String pageFriendlyName)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdPageFriendlyName");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetBySiteIdPageFriendlyName(transactionManager , siteId, pageFriendlyName);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetBySiteIdPageFriendlyName' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetBySiteIdPageFriendlyName( System.Int32? siteId, System.String pageFriendlyName, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdPageFriendlyName");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetBySiteIdPageFriendlyName(transactionManager, start, pageLength , siteId, pageFriendlyName);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetByDynamicPageIdLanguageId
		/// <summary>
		///	This method wrap the 'DynamicPages_GetByDynamicPageIdLanguageId' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{DynamicPages}"/> instance.</returns>
		public virtual  TList<DynamicPages> GetByDynamicPageIdLanguageId(System.Int32? siteId, System.Int32? dynamicPageId, System.Int32? languageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByDynamicPageIdLanguageId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetByDynamicPageIdLanguageId(transactionManager , siteId, dynamicPageId, languageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetByDynamicPageIdLanguageId' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{DynamicPages}"/> instance.</returns>
		public virtual  TList<DynamicPages> GetByDynamicPageIdLanguageId( System.Int32? siteId, System.Int32? dynamicPageId, System.Int32? languageId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByDynamicPageIdLanguageId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetByDynamicPageIdLanguageId(transactionManager, start, pageLength , siteId, dynamicPageId, languageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_BulkUpdate
		/// <summary>
		///	This method wrap the 'DynamicPages_BulkUpdate' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="from"> A <c>System.String</c> instance.</param>
		/// <param name="to"> A <c>System.String</c> instance.</param>
		/// <param name="updateSystemPages"> A <c>System.Boolean?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet BulkUpdate(System.Int32? siteId, System.String from, System.String to, System.Boolean? updateSystemPages)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BulkUpdate");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.BulkUpdate(transactionManager , siteId, from, to, updateSystemPages);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_BulkUpdate' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="from"> A <c>System.String</c> instance.</param>
		/// <param name="to"> A <c>System.String</c> instance.</param>
		/// <param name="updateSystemPages"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet BulkUpdate( System.Int32? siteId, System.String from, System.String to, System.Boolean? updateSystemPages, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BulkUpdate");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.BulkUpdate(transactionManager, start, pageLength , siteId, from, to, updateSystemPages);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetHierarchy
		/// <summary>
		///	This method wrap the 'DynamicPages_GetHierarchy' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="onSiteMap"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="nonSystemPage"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showAll"> A <c>System.Boolean?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{DynamicPages}"/> instance.</returns>
		public virtual  TList<DynamicPages> GetHierarchy(System.Int32? siteId, System.Int32? languageId, System.Int32? dynamicPageId, System.Boolean? onSiteMap, System.Boolean? nonSystemPage, System.Boolean? showAll)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetHierarchy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetHierarchy(transactionManager , siteId, languageId, dynamicPageId, onSiteMap, nonSystemPage, showAll);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetHierarchy' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="onSiteMap"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="nonSystemPage"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showAll"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{DynamicPages}"/> instance.</returns>
		public virtual  TList<DynamicPages> GetHierarchy( System.Int32? siteId, System.Int32? languageId, System.Int32? dynamicPageId, System.Boolean? onSiteMap, System.Boolean? nonSystemPage, System.Boolean? showAll, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetHierarchy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetHierarchy(transactionManager, start, pageLength , siteId, languageId, dynamicPageId, onSiteMap, nonSystemPage, showAll);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetByLastModifiedBy
		/// <summary>
		///	This method wrap the 'DynamicPages_GetByLastModifiedBy' stored procedure. 
		/// </summary>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByLastModifiedBy(System.Int32? lastModifiedBy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLastModifiedBy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetByLastModifiedBy(transactionManager , lastModifiedBy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetByLastModifiedBy' stored procedure. 
		/// </summary>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByLastModifiedBy( System.Int32? lastModifiedBy, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLastModifiedBy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetByLastModifiedBy(transactionManager, start, pageLength , lastModifiedBy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_Insert
		/// <summary>
		///	This method wrap the 'DynamicPages_Insert' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="parentDynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="pageTitle"> A <c>System.String</c> instance.</param>
		/// <param name="pageContent"> A <c>System.String</c> instance.</param>
		/// <param name="dynamicPageWebPartTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="hyperLink"> A <c>System.String</c> instance.</param>
		/// <param name="valid"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="openInNewWindow"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="sequence"> A <c>System.Int32?</c> instance.</param>
		/// <param name="fullScreen"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onTopNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onLeftNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onBottomNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onSiteMap"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="searchable"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="metaKeywords"> A <c>System.String</c> instance.</param>
		/// <param name="metaDescription"> A <c>System.String</c> instance.</param>
		/// <param name="pageFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="sourceId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="secured"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="customUrl"> A <c>System.String</c> instance.</param>
		/// <param name="metaTitle"> A <c>System.String</c> instance.</param>
		/// <param name="generateBreadcrumb"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publishOn"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="visible"> A <c>System.Boolean?</c> instance.</param>
			/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Insert(System.Int32? siteId, System.Int32? languageId, System.Int32? parentDynamicPageId, System.String pageName, System.String pageTitle, System.String pageContent, System.Int32? dynamicPageWebPartTemplateId, System.String hyperLink, System.Boolean? valid, System.Boolean? openInNewWindow, System.Int32? sequence, System.Boolean? fullScreen, System.Boolean? onTopNav, System.Boolean? onLeftNav, System.Boolean? onBottomNav, System.Boolean? onSiteMap, System.Boolean? searchable, System.String metaKeywords, System.String metaDescription, System.String pageFriendlyName, System.DateTime? lastModified, System.Int32? lastModifiedBy, System.String searchField, System.Int32? sourceId, System.Boolean? secured, System.String customUrl, System.String metaTitle, System.Boolean? generateBreadcrumb, System.DateTime? publishOn, System.Boolean? visible, ref System.Int32? dynamicPageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.DynamicPagesProvider.Insert(transactionManager , siteId, languageId, parentDynamicPageId, pageName, pageTitle, pageContent, dynamicPageWebPartTemplateId, hyperLink, valid, openInNewWindow, sequence, fullScreen, onTopNav, onLeftNav, onBottomNav, onSiteMap, searchable, metaKeywords, metaDescription, pageFriendlyName, lastModified, lastModifiedBy, searchField, sourceId, secured, customUrl, metaTitle, generateBreadcrumb, publishOn, visible, ref dynamicPageId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_Insert' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="parentDynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="pageTitle"> A <c>System.String</c> instance.</param>
		/// <param name="pageContent"> A <c>System.String</c> instance.</param>
		/// <param name="dynamicPageWebPartTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="hyperLink"> A <c>System.String</c> instance.</param>
		/// <param name="valid"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="openInNewWindow"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="sequence"> A <c>System.Int32?</c> instance.</param>
		/// <param name="fullScreen"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onTopNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onLeftNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onBottomNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onSiteMap"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="searchable"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="metaKeywords"> A <c>System.String</c> instance.</param>
		/// <param name="metaDescription"> A <c>System.String</c> instance.</param>
		/// <param name="pageFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="sourceId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="secured"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="customUrl"> A <c>System.String</c> instance.</param>
		/// <param name="metaTitle"> A <c>System.String</c> instance.</param>
		/// <param name="generateBreadcrumb"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publishOn"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="visible"> A <c>System.Boolean?</c> instance.</param>
			/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Insert( System.Int32? siteId, System.Int32? languageId, System.Int32? parentDynamicPageId, System.String pageName, System.String pageTitle, System.String pageContent, System.Int32? dynamicPageWebPartTemplateId, System.String hyperLink, System.Boolean? valid, System.Boolean? openInNewWindow, System.Int32? sequence, System.Boolean? fullScreen, System.Boolean? onTopNav, System.Boolean? onLeftNav, System.Boolean? onBottomNav, System.Boolean? onSiteMap, System.Boolean? searchable, System.String metaKeywords, System.String metaDescription, System.String pageFriendlyName, System.DateTime? lastModified, System.Int32? lastModifiedBy, System.String searchField, System.Int32? sourceId, System.Boolean? secured, System.String customUrl, System.String metaTitle, System.Boolean? generateBreadcrumb, System.DateTime? publishOn, System.Boolean? visible, ref System.Int32? dynamicPageId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.DynamicPagesProvider.Insert(transactionManager, start, pageLength , siteId, languageId, parentDynamicPageId, pageName, pageTitle, pageContent, dynamicPageWebPartTemplateId, hyperLink, valid, openInNewWindow, sequence, fullScreen, onTopNav, onLeftNav, onBottomNav, onSiteMap, searchable, metaKeywords, metaDescription, pageFriendlyName, lastModified, lastModifiedBy, searchField, sourceId, secured, customUrl, metaTitle, generateBreadcrumb, publishOn, visible, ref dynamicPageId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region DynamicPages_GetSystemPagesNameBySiteID
		/// <summary>
		///	This method wrap the 'DynamicPages_GetSystemPagesNameBySiteID' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetSystemPagesNameBySiteID(System.Int32? siteId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSystemPagesNameBySiteID");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetSystemPagesNameBySiteID(transactionManager , siteId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetSystemPagesNameBySiteID' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetSystemPagesNameBySiteID( System.Int32? siteId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSystemPagesNameBySiteID");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetSystemPagesNameBySiteID(transactionManager, start, pageLength , siteId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_CustomGetBySiteIDLanguageID
		/// <summary>
		///	This method wrap the 'DynamicPages_CustomGetBySiteIDLanguageID' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet CustomGetBySiteIDLanguageID(System.Int32? siteId, System.Int32? languageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("CustomGetBySiteIDLanguageID");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.CustomGetBySiteIDLanguageID(transactionManager , siteId, languageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_CustomGetBySiteIDLanguageID' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet CustomGetBySiteIDLanguageID( System.Int32? siteId, System.Int32? languageId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("CustomGetBySiteIDLanguageID");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.CustomGetBySiteIDLanguageID(transactionManager, start, pageLength , siteId, languageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetBySiteIdPageNameLanguageIdWithRoot
		/// <summary>
		///	This method wrap the 'DynamicPages_GetBySiteIdPageNameLanguageIdWithRoot' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
        public virtual TList<DynamicPages> GetBySiteIdPageNameLanguageIdWithRoot(System.Int32? siteId, System.String pageName, System.Int32? languageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdPageNameLanguageIdWithRoot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
            TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetBySiteIdPageNameLanguageIdWithRoot(transactionManager , siteId, pageName, languageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetBySiteIdPageNameLanguageIdWithRoot' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
        public virtual TList<DynamicPages> GetBySiteIdPageNameLanguageIdWithRoot(System.Int32? siteId, System.String pageName, System.Int32? languageId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdPageNameLanguageIdWithRoot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
            TList<DynamicPages> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetBySiteIdPageNameLanguageIdWithRoot(transactionManager, start, pageLength , siteId, pageName, languageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_Find
		/// <summary>
		///	This method wrap the 'DynamicPages_Find' stored procedure. 
		/// </summary>
		/// <param name="searchUsingOr"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="parentDynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="pageTitle"> A <c>System.String</c> instance.</param>
		/// <param name="pageContent"> A <c>System.String</c> instance.</param>
		/// <param name="dynamicPageWebPartTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="hyperLink"> A <c>System.String</c> instance.</param>
		/// <param name="valid"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="openInNewWindow"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="sequence"> A <c>System.Int32?</c> instance.</param>
		/// <param name="fullScreen"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onTopNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onLeftNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onBottomNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onSiteMap"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="searchable"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="metaKeywords"> A <c>System.String</c> instance.</param>
		/// <param name="metaDescription"> A <c>System.String</c> instance.</param>
		/// <param name="pageFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="sourceId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="secured"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="customUrl"> A <c>System.String</c> instance.</param>
		/// <param name="metaTitle"> A <c>System.String</c> instance.</param>
		/// <param name="generateBreadcrumb"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publishOn"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="visible"> A <c>System.Boolean?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet Find(System.Boolean? searchUsingOr, System.Int32? dynamicPageId, System.Int32? siteId, System.Int32? languageId, System.Int32? parentDynamicPageId, System.String pageName, System.String pageTitle, System.String pageContent, System.Int32? dynamicPageWebPartTemplateId, System.String hyperLink, System.Boolean? valid, System.Boolean? openInNewWindow, System.Int32? sequence, System.Boolean? fullScreen, System.Boolean? onTopNav, System.Boolean? onLeftNav, System.Boolean? onBottomNav, System.Boolean? onSiteMap, System.Boolean? searchable, System.String metaKeywords, System.String metaDescription, System.String pageFriendlyName, System.DateTime? lastModified, System.Int32? lastModifiedBy, System.String searchField, System.Int32? sourceId, System.Boolean? secured, System.String customUrl, System.String metaTitle, System.Boolean? generateBreadcrumb, System.DateTime? publishOn, System.Boolean? visible)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.Find(transactionManager , searchUsingOr, dynamicPageId, siteId, languageId, parentDynamicPageId, pageName, pageTitle, pageContent, dynamicPageWebPartTemplateId, hyperLink, valid, openInNewWindow, sequence, fullScreen, onTopNav, onLeftNav, onBottomNav, onSiteMap, searchable, metaKeywords, metaDescription, pageFriendlyName, lastModified, lastModifiedBy, searchField, sourceId, secured, customUrl, metaTitle, generateBreadcrumb, publishOn, visible);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_Find' stored procedure. 
		/// </summary>
		/// <param name="searchUsingOr"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="dynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="parentDynamicPageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageName"> A <c>System.String</c> instance.</param>
		/// <param name="pageTitle"> A <c>System.String</c> instance.</param>
		/// <param name="pageContent"> A <c>System.String</c> instance.</param>
		/// <param name="dynamicPageWebPartTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="hyperLink"> A <c>System.String</c> instance.</param>
		/// <param name="valid"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="openInNewWindow"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="sequence"> A <c>System.Int32?</c> instance.</param>
		/// <param name="fullScreen"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onTopNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onLeftNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onBottomNav"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="onSiteMap"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="searchable"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="metaKeywords"> A <c>System.String</c> instance.</param>
		/// <param name="metaDescription"> A <c>System.String</c> instance.</param>
		/// <param name="pageFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="lastModifiedBy"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="sourceId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="secured"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="customUrl"> A <c>System.String</c> instance.</param>
		/// <param name="metaTitle"> A <c>System.String</c> instance.</param>
		/// <param name="generateBreadcrumb"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publishOn"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="visible"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet Find( System.Boolean? searchUsingOr, System.Int32? dynamicPageId, System.Int32? siteId, System.Int32? languageId, System.Int32? parentDynamicPageId, System.String pageName, System.String pageTitle, System.String pageContent, System.Int32? dynamicPageWebPartTemplateId, System.String hyperLink, System.Boolean? valid, System.Boolean? openInNewWindow, System.Int32? sequence, System.Boolean? fullScreen, System.Boolean? onTopNav, System.Boolean? onLeftNav, System.Boolean? onBottomNav, System.Boolean? onSiteMap, System.Boolean? searchable, System.String metaKeywords, System.String metaDescription, System.String pageFriendlyName, System.DateTime? lastModified, System.Int32? lastModifiedBy, System.String searchField, System.Int32? sourceId, System.Boolean? secured, System.String customUrl, System.String metaTitle, System.Boolean? generateBreadcrumb, System.DateTime? publishOn, System.Boolean? visible, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.Find(transactionManager, start, pageLength , searchUsingOr, dynamicPageId, siteId, languageId, parentDynamicPageId, pageName, pageTitle, pageContent, dynamicPageWebPartTemplateId, hyperLink, valid, openInNewWindow, sequence, fullScreen, onTopNav, onLeftNav, onBottomNav, onSiteMap, searchable, metaKeywords, metaDescription, pageFriendlyName, lastModified, lastModifiedBy, searchField, sourceId, secured, customUrl, metaTitle, generateBreadcrumb, publishOn, visible);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region DynamicPages_GetByLanguageId
		/// <summary>
		///	This method wrap the 'DynamicPages_GetByLanguageId' stored procedure. 
		/// </summary>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByLanguageId(System.Int32? languageId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLanguageId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.DynamicPagesProvider.GetByLanguageId(transactionManager , languageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'DynamicPages_GetByLanguageId' stored procedure. 
		/// </summary>
		/// <param name="languageId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByLanguageId( System.Int32? languageId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLanguageId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.DynamicPagesProvider.GetByLanguageId(transactionManager, start, pageLength , languageId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		#endregion
		
		#region DeepLoad
		#region Deep Load By Entity Keys
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="DynamicPages"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_siteId"></param>
		/// <param name="_pageName"></param>
		/// <param name="_languageId"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">DynamicPages Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="DynamicPages"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual DynamicPages DeepLoadBySiteIdPageNameLanguageId(System.Int32 _siteId, System.String _pageName, System.Int32 _languageId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadBySiteIdPageNameLanguageId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			DynamicPages entity = GetBySiteIdPageNameLanguageId(_siteId, _pageName, _languageId);
			
			//Check to see if entity is not null, before attempting to Deep Load
			if (entity != null)
				DeepLoad(entity, deep, deepLoadType, childTypes);
			
			return entity;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="DynamicPages"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_siteId"></param>
		/// <param name="_languageId"></param>
		/// <param name="_pageFriendlyName"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">DynamicPages Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="DynamicPages"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual DynamicPages DeepLoadBySiteIdLanguageIdPageFriendlyName(System.Int32 _siteId, System.Int32 _languageId, System.String _pageFriendlyName, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadBySiteIdLanguageIdPageFriendlyName");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			DynamicPages entity = GetBySiteIdLanguageIdPageFriendlyName(_siteId, _languageId, _pageFriendlyName);
			
			//Check to see if entity is not null, before attempting to Deep Load
			if (entity != null)
				DeepLoad(entity, deep, deepLoadType, childTypes);
			
			return entity;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="DynamicPages"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_dynamicPageId"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">DynamicPages Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="DynamicPages"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual DynamicPages DeepLoadByDynamicPageId(System.Int32 _dynamicPageId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByDynamicPageId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			DynamicPages entity = GetByDynamicPageId(_dynamicPageId);
			
			//Check to see if entity is not null, before attempting to Deep Load
			if (entity != null)
				DeepLoad(entity, deep, deepLoadType, childTypes);
			
			return entity;
		}
		
		
		#endregion 

		#region DeepLoad By Entity
		/// <summary>
		/// public virtualDeep Load the IEntity object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <param name="entity">DynamicPages Object</param>
		/// <remarks>
		/// <seealso cref="DeepLoad(DynamicPages)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(DynamicPages entity)
		{
			DeepLoad(entity, false, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// public virtualDeep Load the IEntity object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(DynamicPages)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entity">DynamicPages Object</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(DynamicPages entity, bool deep)
		{
			DeepLoad(entity, deep, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
			
		/// <summary>
		/// public virtualDeep Loads the <see cref="IEntity"/> object with criteria based of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <remarks>
		/// Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
		/// </remarks>
		/// <param name="entity">The <see cref="DynamicPages"/> object to load.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
		/// If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">DynamicPages Property Collection Type Array To Include or Exclude from Load</param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(DynamicPages entity, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoad");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.DynamicPagesProvider.DeepLoad(transactionManager, entity, deep, deepLoadType, childTypes);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return;
		}
		#endregion
		
		#region DeepLoad By Entity Collection
		/// <summary>
		/// Deep Loads the <see cref="TList{DynamicPages}" /> object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(DynamicPages)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entityCollection">the <see cref="TList{DynamicPages}" /> Object to deep loads.</param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(TList<DynamicPages> entityCollection)
		{
			DeepLoad(entityCollection, false, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// Deep Loads the <see cref="TList{DynamicPages}" /> object.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(DynamicPages)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entityCollection">the <see cref="TList{DynamicPages}" /> Object to deep loads.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(TList<DynamicPages> entityCollection, bool deep)
		{
			DeepLoad(entityCollection, deep, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}	

		/// <summary>
		/// Deep Loads the entire <see cref="TList{DynamicPages}" /> object with criteria based of the child 
		/// property collections only N Levels Deep based on the DeepLoadType.
		/// </summary>
		/// <remarks>
		/// Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
		/// </remarks>
		/// <param name="entityCollection">The <see cref="TList{DynamicPages}" /> instance to load.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType"><see cref="DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
		///		Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
		///	</param>
		/// <param name="childTypes"><see cref="DynamicPages"/> Property Collection Type Array To Include or Exclude from Load</param>
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public override void DeepLoad(TList<DynamicPages> entityCollection, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{	
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoad");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.DynamicPagesProvider.DeepLoad(transactionManager, entityCollection, deep, deepLoadType, childTypes);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return;		
		}
		#endregion

		#endregion
		
		#region DeepSave
		
		#region DeepSave By Entity
		/// <summary>
		/// public virtualDeep Saves the <see cref="DynamicPages"/> object with all of the child
		/// property collections N Levels Deep.
		/// </summary>
		/// <param name="entity">DynamicPages Object</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(DynamicPages entity)
		{
			return DeepSave(entity, DeepSaveType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// public virtualDeep Saves the entire object graph of the DynamicPages object with criteria based of the child 
		/// Type property array and DeepSaveType.
		/// </summary>
		/// <param name="entity">DynamicPages Object</param>
		/// <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
		/// <param name="childTypes"><c>DynamicPages</c> property Type Array To Include or Exclude from Save</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(DynamicPages entity, DeepSaveType deepSaveType, params System.Type[] childTypes)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepSave");
			
			if (!entity.IsValid)
			{
				throw new EntityNotValidException(entity, "DeepSave");
			}
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				
				result = dataProvider.DynamicPagesProvider.DeepSave(transactionManager, entity, deepSaveType, childTypes);
								
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return result;		
		}
		#endregion
		
		#region DeepSave By Entity Collection
		/// <summary>
		/// Deep Save the entire <see cref="TList{DynamicPages}" /> object with all of the child 
		/// property collections.
		/// </summary>
		/// <param name="entityCollection">TList{DynamicPages} Object</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual bool DeepSave(TList<DynamicPages> entityCollection)
		{
			return DeepSave(entityCollection, DeepSaveType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// Deep Save the entire object graph of the <see cref="TList{DynamicPages}" /> object with criteria based of the child 
		/// property collections.
		/// </summary>
		/// <param name="entityCollection"><see cref="TList{DynamicPages}" /> Object</param>
		/// <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
		/// <param name="childTypes">DynamicPages Property Collection Type Array To Include or Exclude from Save</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(TList<DynamicPages> entityCollection, DeepSaveType deepSaveType, params System.Type[] childTypes)
		{	
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepSave");
			
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "DeepSave");
			}
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.DynamicPagesProvider.DeepSave(transactionManager, entityCollection,  deepSaveType, childTypes);
								
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return result;
		}
		#endregion

		#endregion 

		#endregion Data Access Methods
		
		private void SetDefaultValues(ref DynamicPages entity)
		{
		
		}
		
	
	}//End Class
} // end namespace






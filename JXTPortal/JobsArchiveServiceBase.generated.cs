
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file JobsArchive.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using JXTPortal.Entities;
using JXTPortal.Entities.Validation;
//using Entities = JXTPortal.Entities;
using JXTPortal.Data;
using JXTPortal.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace JXTPortal
{		
	
	///<summary>
	/// An object representation of the 'JobsArchive' table.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the JobsArchive.cs file instead.
	/// All custom implementations should be done in the <see cref="JobsArchive"/> class.
	/// </remarks>
	[DataObject]
	[CLSCompliant(true)]
	public partial class JobsArchiveServiceBase : ServiceBase<JobsArchive, JobsArchiveKey>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="JobsArchive"/> instance .
		///</summary>
		public JobsArchiveServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="JobsArchive"/> instance.
		///</summary>
		///<param name="_jobId"></param>
		///<param name="_siteId"></param>
		///<param name="_workTypeId"></param>
		///<param name="_jobName"></param>
		///<param name="_description"></param>
		///<param name="_fullDescription"></param>
		///<param name="_webServiceProcessed"></param>
		///<param name="_applicationEmailAddress"></param>
		///<param name="_refNo"></param>
		///<param name="_visible"></param>
		///<param name="_datePosted"></param>
		///<param name="_expiryDate"></param>
		///<param name="_expired"></param>
		///<param name="_jobItemPrice"></param>
		///<param name="_billed"></param>
		///<param name="_lastModified"></param>
		///<param name="_showSalaryDetails"></param>
		///<param name="_salaryText"></param>
		///<param name="_advertiserId"></param>
		///<param name="_lastModifiedByAdvertiserUserId"></param>
		///<param name="_lastModifiedByAdminUserId"></param>
		///<param name="_jobItemTypeId"></param>
		///<param name="_applicationMethod"></param>
		///<param name="_applicationUrl"></param>
		///<param name="_uploadMethod"></param>
		///<param name="_tags"></param>
		///<param name="_jobTemplateId"></param>
		///<param name="_searchFieldExtension"></param>
		///<param name="_advertiserJobTemplateLogoId"></param>
		///<param name="_companyName"></param>
		///<param name="_hashValue"></param>
		///<param name="_requireLogonForExternalApplications"></param>
		///<param name="_showLocationDetails"></param>
		///<param name="_publicTransport"></param>
		///<param name="_address"></param>
		///<param name="_contactDetails"></param>
		///<param name="_jobContactPhone"></param>
		///<param name="_jobContactName"></param>
		///<param name="_qualificationsRecognised"></param>
		///<param name="_residentOnly"></param>
		///<param name="_documentLink"></param>
		///<param name="_bulletPoint1"></param>
		///<param name="_bulletPoint2"></param>
		///<param name="_bulletPoint3"></param>
		///<param name="_hotJob"></param>
		///<param name="_jobFriendlyName"></param>
		///<param name="_searchField"></param>
		///<param name="_showSalaryRange"></param>
		///<param name="_salaryLowerBand"></param>
		///<param name="_salaryUpperBand"></param>
		///<param name="_currencyId"></param>
		///<param name="_salaryTypeId"></param>
		///<param name="_enteredByAdvertiserUserId"></param>
		///<param name="_jobLatitude"></param>
		///<param name="_jobLongitude"></param>
		///<param name="_addressStatus"></param>
		///<param name="_jobExternalId"></param>
		public static JobsArchive CreateJobsArchive(System.Int32 _jobId, System.Int32 _siteId, System.Int32 _workTypeId, System.String _jobName, System.String _description, System.String _fullDescription, System.Boolean _webServiceProcessed, System.String _applicationEmailAddress, System.String _refNo, System.Boolean _visible, System.DateTime _datePosted, System.DateTime _expiryDate, System.Int32? _expired, System.Decimal? _jobItemPrice, System.Boolean _billed, System.DateTime _lastModified, System.Boolean _showSalaryDetails, System.String _salaryText, System.Int32? _advertiserId, System.Int32? _lastModifiedByAdvertiserUserId, System.Int32? _lastModifiedByAdminUserId, System.Int32? _jobItemTypeId, System.Int32? _applicationMethod, System.String _applicationUrl, System.Int32? _uploadMethod, System.String _tags, System.Int32? _jobTemplateId, System.String _searchFieldExtension, System.Int32? _advertiserJobTemplateLogoId, System.String _companyName, System.Byte[] _hashValue, System.Boolean _requireLogonForExternalApplications, System.Boolean? _showLocationDetails, System.String _publicTransport, System.String _address, System.String _contactDetails, System.String _jobContactPhone, System.String _jobContactName, System.Boolean _qualificationsRecognised, System.Boolean _residentOnly, System.String _documentLink, System.String _bulletPoint1, System.String _bulletPoint2, System.String _bulletPoint3, System.Boolean _hotJob, System.String _jobFriendlyName, System.String _searchField, System.Boolean _showSalaryRange, System.Decimal _salaryLowerBand, System.Decimal _salaryUpperBand, System.Int32 _currencyId, System.Int32 _salaryTypeId, System.Int32? _enteredByAdvertiserUserId, System.Double? _jobLatitude, System.Double? _jobLongitude, System.Int32? _addressStatus, System.String _jobExternalId)
		{
			JobsArchive newEntityJobsArchive = new JobsArchive();
			newEntityJobsArchive.JobId  = _jobId;
			newEntityJobsArchive.SiteId  = _siteId;
			newEntityJobsArchive.WorkTypeId  = _workTypeId;
			newEntityJobsArchive.JobName  = _jobName;
			newEntityJobsArchive.Description  = _description;
			newEntityJobsArchive.FullDescription  = _fullDescription;
			newEntityJobsArchive.WebServiceProcessed  = _webServiceProcessed;
			newEntityJobsArchive.ApplicationEmailAddress  = _applicationEmailAddress;
			newEntityJobsArchive.RefNo  = _refNo;
			newEntityJobsArchive.Visible  = _visible;
			newEntityJobsArchive.DatePosted  = _datePosted;
			newEntityJobsArchive.ExpiryDate  = _expiryDate;
			newEntityJobsArchive.Expired  = _expired;
			newEntityJobsArchive.JobItemPrice  = _jobItemPrice;
			newEntityJobsArchive.Billed  = _billed;
			newEntityJobsArchive.LastModified  = _lastModified;
			newEntityJobsArchive.ShowSalaryDetails  = _showSalaryDetails;
			newEntityJobsArchive.SalaryText  = _salaryText;
			newEntityJobsArchive.AdvertiserId  = _advertiserId;
			newEntityJobsArchive.LastModifiedByAdvertiserUserId  = _lastModifiedByAdvertiserUserId;
			newEntityJobsArchive.LastModifiedByAdminUserId  = _lastModifiedByAdminUserId;
			newEntityJobsArchive.JobItemTypeId  = _jobItemTypeId;
			newEntityJobsArchive.ApplicationMethod  = _applicationMethod;
			newEntityJobsArchive.ApplicationUrl  = _applicationUrl;
			newEntityJobsArchive.UploadMethod  = _uploadMethod;
			newEntityJobsArchive.Tags  = _tags;
			newEntityJobsArchive.JobTemplateId  = _jobTemplateId;
			newEntityJobsArchive.SearchFieldExtension  = _searchFieldExtension;
			newEntityJobsArchive.AdvertiserJobTemplateLogoId  = _advertiserJobTemplateLogoId;
			newEntityJobsArchive.CompanyName  = _companyName;
			newEntityJobsArchive.HashValue  = _hashValue;
			newEntityJobsArchive.RequireLogonForExternalApplications  = _requireLogonForExternalApplications;
			newEntityJobsArchive.ShowLocationDetails  = _showLocationDetails;
			newEntityJobsArchive.PublicTransport  = _publicTransport;
			newEntityJobsArchive.Address  = _address;
			newEntityJobsArchive.ContactDetails  = _contactDetails;
			newEntityJobsArchive.JobContactPhone  = _jobContactPhone;
			newEntityJobsArchive.JobContactName  = _jobContactName;
			newEntityJobsArchive.QualificationsRecognised  = _qualificationsRecognised;
			newEntityJobsArchive.ResidentOnly  = _residentOnly;
			newEntityJobsArchive.DocumentLink  = _documentLink;
			newEntityJobsArchive.BulletPoint1  = _bulletPoint1;
			newEntityJobsArchive.BulletPoint2  = _bulletPoint2;
			newEntityJobsArchive.BulletPoint3  = _bulletPoint3;
			newEntityJobsArchive.HotJob  = _hotJob;
			newEntityJobsArchive.JobFriendlyName  = _jobFriendlyName;
			newEntityJobsArchive.SearchField  = _searchField;
			newEntityJobsArchive.ShowSalaryRange  = _showSalaryRange;
			newEntityJobsArchive.SalaryLowerBand  = _salaryLowerBand;
			newEntityJobsArchive.SalaryUpperBand  = _salaryUpperBand;
			newEntityJobsArchive.CurrencyId  = _currencyId;
			newEntityJobsArchive.SalaryTypeId  = _salaryTypeId;
			newEntityJobsArchive.EnteredByAdvertiserUserId  = _enteredByAdvertiserUserId;
			newEntityJobsArchive.JobLatitude  = _jobLatitude;
			newEntityJobsArchive.JobLongitude  = _jobLongitude;
			newEntityJobsArchive.AddressStatus  = _addressStatus;
			newEntityJobsArchive.JobExternalId  = _jobExternalId;
			return newEntityJobsArchive;
		}
		#endregion Constructors


		#region Fields
		private static SecurityContext<JobsArchive> securityContext = new SecurityContext<JobsArchive>();
		private static readonly string layerExceptionPolicy = "ServiceLayerExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		#endregion 
		
		#region SecurityContext
		///<summary>
		/// Contains all necessary information to validate and authorize the 
		/// call of the method with the Principal and Roles of the current user.
		///</summary>
		public static SecurityContext<JobsArchive> SecurityContext
		{
			get
			{
				return securityContext;	
			}	
		}
		#endregion 
		
		#region Data Access Methods
		
		#region GetByForeignKey Methods
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the FK__JobsArchi__Adver__015F0FBB key.
		///		FK__JobsArchi__Adver__015F0FBB Description: 
		/// </summary>
		/// <param name="_advertiserId"></param>
		/// <returns>Returns a generic collection of JobsArchive objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetByAdvertiserId(System.Int32? _advertiserId)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAdvertiserId");
			#endregion Security check
			
			#region Initialisation
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<JobsArchive>(dataProvider.JobsArchiveProvider.GetByAdvertiserId(transactionManager, _advertiserId));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the FK__JobsArchi__Adver__015F0FBB key.
		///		FK__JobsArchi__Adver__015F0FBB Description: 
		/// </summary>
		/// <param name="_advertiserId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{JobsArchive}" /> of <c>JobsArchive</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetByAdvertiserId(System.Int32? _advertiserId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAdvertiserId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<JobsArchive>(dataProvider.JobsArchiveProvider.GetByAdvertiserId(transactionManager, _advertiserId, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the FK__JobsArchi__Curre__473D8CE8 key.
		///		FK__JobsArchi__Curre__473D8CE8 Description: 
		/// </summary>
		/// <param name="_currencyId"></param>
		/// <returns>Returns a generic collection of JobsArchive objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetByCurrencyId(System.Int32 _currencyId)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByCurrencyId");
			#endregion Security check
			
			#region Initialisation
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<JobsArchive>(dataProvider.JobsArchiveProvider.GetByCurrencyId(transactionManager, _currencyId));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the FK__JobsArchi__Curre__473D8CE8 key.
		///		FK__JobsArchi__Curre__473D8CE8 Description: 
		/// </summary>
		/// <param name="_currencyId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{JobsArchive}" /> of <c>JobsArchive</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetByCurrencyId(System.Int32 _currencyId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByCurrencyId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<JobsArchive>(dataProvider.JobsArchiveProvider.GetByCurrencyId(transactionManager, _currencyId, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the FK__JobsArchi__JobTe__052FA09F key.
		///		FK__JobsArchi__JobTe__052FA09F Description: 
		/// </summary>
		/// <param name="_jobTemplateId"></param>
		/// <returns>Returns a generic collection of JobsArchive objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetByJobTemplateId(System.Int32? _jobTemplateId)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByJobTemplateId");
			#endregion Security check
			
			#region Initialisation
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<JobsArchive>(dataProvider.JobsArchiveProvider.GetByJobTemplateId(transactionManager, _jobTemplateId));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the FK__JobsArchi__JobTe__052FA09F key.
		///		FK__JobsArchi__JobTe__052FA09F Description: 
		/// </summary>
		/// <param name="_jobTemplateId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{JobsArchive}" /> of <c>JobsArchive</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetByJobTemplateId(System.Int32? _jobTemplateId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByJobTemplateId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<JobsArchive>(dataProvider.JobsArchiveProvider.GetByJobTemplateId(transactionManager, _jobTemplateId, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the FK__JobsArchi__LastM__025333F4 key.
		///		FK__JobsArchi__LastM__025333F4 Description: 
		/// </summary>
		/// <param name="_lastModifiedByAdvertiserUserId"></param>
		/// <returns>Returns a generic collection of JobsArchive objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetByLastModifiedByAdvertiserUserId(System.Int32? _lastModifiedByAdvertiserUserId)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLastModifiedByAdvertiserUserId");
			#endregion Security check
			
			#region Initialisation
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<JobsArchive>(dataProvider.JobsArchiveProvider.GetByLastModifiedByAdvertiserUserId(transactionManager, _lastModifiedByAdvertiserUserId));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the FK__JobsArchi__LastM__025333F4 key.
		///		FK__JobsArchi__LastM__025333F4 Description: 
		/// </summary>
		/// <param name="_lastModifiedByAdvertiserUserId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{JobsArchive}" /> of <c>JobsArchive</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetByLastModifiedByAdvertiserUserId(System.Int32? _lastModifiedByAdvertiserUserId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLastModifiedByAdvertiserUserId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<JobsArchive>(dataProvider.JobsArchiveProvider.GetByLastModifiedByAdvertiserUserId(transactionManager, _lastModifiedByAdvertiserUserId, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the FK__JobsArchi__LastM__0347582D key.
		///		FK__JobsArchi__LastM__0347582D Description: 
		/// </summary>
		/// <param name="_lastModifiedByAdminUserId"></param>
		/// <returns>Returns a generic collection of JobsArchive objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetByLastModifiedByAdminUserId(System.Int32? _lastModifiedByAdminUserId)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLastModifiedByAdminUserId");
			#endregion Security check
			
			#region Initialisation
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<JobsArchive>(dataProvider.JobsArchiveProvider.GetByLastModifiedByAdminUserId(transactionManager, _lastModifiedByAdminUserId));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the FK__JobsArchi__LastM__0347582D key.
		///		FK__JobsArchi__LastM__0347582D Description: 
		/// </summary>
		/// <param name="_lastModifiedByAdminUserId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{JobsArchive}" /> of <c>JobsArchive</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetByLastModifiedByAdminUserId(System.Int32? _lastModifiedByAdminUserId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLastModifiedByAdminUserId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<JobsArchive>(dataProvider.JobsArchiveProvider.GetByLastModifiedByAdminUserId(transactionManager, _lastModifiedByAdminUserId, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the FK__JobsArchi__Salar__4831B121 key.
		///		FK__JobsArchi__Salar__4831B121 Description: 
		/// </summary>
		/// <param name="_salaryTypeId"></param>
		/// <returns>Returns a generic collection of JobsArchive objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetBySalaryTypeId(System.Int32 _salaryTypeId)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySalaryTypeId");
			#endregion Security check
			
			#region Initialisation
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<JobsArchive>(dataProvider.JobsArchiveProvider.GetBySalaryTypeId(transactionManager, _salaryTypeId));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the FK__JobsArchi__Salar__4831B121 key.
		///		FK__JobsArchi__Salar__4831B121 Description: 
		/// </summary>
		/// <param name="_salaryTypeId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{JobsArchive}" /> of <c>JobsArchive</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetBySalaryTypeId(System.Int32 _salaryTypeId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySalaryTypeId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<JobsArchive>(dataProvider.JobsArchiveProvider.GetBySalaryTypeId(transactionManager, _salaryTypeId, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the FK__JobsArchi__SiteI__79BDEDF3 key.
		///		FK__JobsArchi__SiteI__79BDEDF3 Description: 
		/// </summary>
		/// <param name="_siteId"></param>
		/// <returns>Returns a generic collection of JobsArchive objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetBySiteId(System.Int32 _siteId)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteId");
			#endregion Security check
			
			#region Initialisation
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<JobsArchive>(dataProvider.JobsArchiveProvider.GetBySiteId(transactionManager, _siteId));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the FK__JobsArchi__SiteI__79BDEDF3 key.
		///		FK__JobsArchi__SiteI__79BDEDF3 Description: 
		/// </summary>
		/// <param name="_siteId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{JobsArchive}" /> of <c>JobsArchive</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetBySiteId(System.Int32 _siteId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<JobsArchive>(dataProvider.JobsArchiveProvider.GetBySiteId(transactionManager, _siteId, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the FK__JobsArchi__WorkT__7AB2122C key.
		///		FK__JobsArchi__WorkT__7AB2122C Description: 
		/// </summary>
		/// <param name="_workTypeId"></param>
		/// <returns>Returns a generic collection of JobsArchive objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetByWorkTypeId(System.Int32 _workTypeId)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByWorkTypeId");
			#endregion Security check
			
			#region Initialisation
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<JobsArchive>(dataProvider.JobsArchiveProvider.GetByWorkTypeId(transactionManager, _workTypeId));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the FK__JobsArchi__WorkT__7AB2122C key.
		///		FK__JobsArchi__WorkT__7AB2122C Description: 
		/// </summary>
		/// <param name="_workTypeId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{JobsArchive}" /> of <c>JobsArchive</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetByWorkTypeId(System.Int32 _workTypeId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByWorkTypeId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<JobsArchive>(dataProvider.JobsArchiveProvider.GetByWorkTypeId(transactionManager, _workTypeId, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		#endregion GetByForeignKey Methods
		
		#region GetByIndexes
		/// <summary>
		/// 	Gets a row from the DataSource based on its primary key.
		/// </summary>
		/// <param name="key">The unique identifier of the row to retrieve.</param>
		/// <returns>Returns an instance of the Entity class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public override JobsArchive Get(JobsArchiveKey key)
		{
			return GetByJobId(key.JobId);
		}

		/// <summary>
		///  method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the primary key IX_JobsArchive_AddressSearch index.
		/// </summary>
		/// <param name="_addressStatus"></param>
		/// <returns>Returns an instance of the <see cref="TList{JobsArchive}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetByAddressStatus(System.Int32? _addressStatus)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAddressStatus");
			#endregion Security check
			
			#region Initialisation
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.JobsArchiveProvider.GetByAddressStatus(transactionManager, _addressStatus)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the primary key IX_JobsArchive_AddressSearch index.
		/// </summary>
		/// <param name="_addressStatus"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{JobsArchive}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetByAddressStatus(System.Int32? _addressStatus, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAddressStatus");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.JobsArchiveProvider.GetByAddressStatus(transactionManager, _addressStatus, start, pageLength, out totalCount)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the primary key IX_JobsArchive_Search index.
		/// </summary>
		/// <param name="_advertiserId"></param>
		/// <param name="_currencyId"></param>
		/// <param name="_salaryTypeId"></param>
		/// <param name="_salaryLowerBand"></param>
		/// <param name="_salaryUpperBand"></param>
		/// <param name="_workTypeId"></param>
		/// <param name="_expired"></param>
		/// <param name="_expiryDate"></param>
		/// <returns>Returns an instance of the <see cref="TList{JobsArchive}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate(System.Int32? _advertiserId, System.Int32 _currencyId, System.Int32 _salaryTypeId, System.Decimal _salaryLowerBand, System.Decimal _salaryUpperBand, System.Int32 _workTypeId, System.Int32? _expired, System.DateTime _expiryDate)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate");
			#endregion Security check
			
			#region Initialisation
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.JobsArchiveProvider.GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate(transactionManager, _advertiserId, _currencyId, _salaryTypeId, _salaryLowerBand, _salaryUpperBand, _workTypeId, _expired, _expiryDate)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the primary key IX_JobsArchive_Search index.
		/// </summary>
		/// <param name="_advertiserId"></param>
		/// <param name="_currencyId"></param>
		/// <param name="_salaryTypeId"></param>
		/// <param name="_salaryLowerBand"></param>
		/// <param name="_salaryUpperBand"></param>
		/// <param name="_workTypeId"></param>
		/// <param name="_expired"></param>
		/// <param name="_expiryDate"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{JobsArchive}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate(System.Int32? _advertiserId, System.Int32 _currencyId, System.Int32 _salaryTypeId, System.Decimal _salaryLowerBand, System.Decimal _salaryUpperBand, System.Int32 _workTypeId, System.Int32? _expired, System.DateTime _expiryDate, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.JobsArchiveProvider.GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate(transactionManager, _advertiserId, _currencyId, _salaryTypeId, _salaryLowerBand, _salaryUpperBand, _workTypeId, _expired, _expiryDate, start, pageLength, out totalCount)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the primary key IX_JobsArchive_SiteID_Billed_AdvertiserID index.
		/// </summary>
		/// <param name="_siteId"></param>
		/// <param name="_billed"></param>
		/// <param name="_advertiserId"></param>
		/// <returns>Returns an instance of the <see cref="TList{JobsArchive}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetBySiteIdBilledAdvertiserId(System.Int32 _siteId, System.Boolean _billed, System.Int32? _advertiserId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdBilledAdvertiserId");
			#endregion Security check
			
			#region Initialisation
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.JobsArchiveProvider.GetBySiteIdBilledAdvertiserId(transactionManager, _siteId, _billed, _advertiserId)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the primary key IX_JobsArchive_SiteID_Billed_AdvertiserID index.
		/// </summary>
		/// <param name="_siteId"></param>
		/// <param name="_billed"></param>
		/// <param name="_advertiserId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{JobsArchive}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetBySiteIdBilledAdvertiserId(System.Int32 _siteId, System.Boolean _billed, System.Int32? _advertiserId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdBilledAdvertiserId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.JobsArchiveProvider.GetBySiteIdBilledAdvertiserId(transactionManager, _siteId, _billed, _advertiserId, start, pageLength, out totalCount)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the primary key IX_JobsArchive_SiteID_Billed_AdvertiserID_DatePosted index.
		/// </summary>
		/// <param name="_siteId"></param>
		/// <param name="_billed"></param>
		/// <param name="_advertiserId"></param>
		/// <param name="_datePosted"></param>
		/// <returns>Returns an instance of the <see cref="TList{JobsArchive}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetBySiteIdBilledAdvertiserIdDatePosted(System.Int32 _siteId, System.Boolean _billed, System.Int32? _advertiserId, System.DateTime _datePosted)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdBilledAdvertiserIdDatePosted");
			#endregion Security check
			
			#region Initialisation
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.JobsArchiveProvider.GetBySiteIdBilledAdvertiserIdDatePosted(transactionManager, _siteId, _billed, _advertiserId, _datePosted)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the primary key IX_JobsArchive_SiteID_Billed_AdvertiserID_DatePosted index.
		/// </summary>
		/// <param name="_siteId"></param>
		/// <param name="_billed"></param>
		/// <param name="_advertiserId"></param>
		/// <param name="_datePosted"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{JobsArchive}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> GetBySiteIdBilledAdvertiserIdDatePosted(System.Int32 _siteId, System.Boolean _billed, System.Int32? _advertiserId, System.DateTime _datePosted, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdBilledAdvertiserIdDatePosted");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.JobsArchiveProvider.GetBySiteIdBilledAdvertiserIdDatePosted(transactionManager, _siteId, _billed, _advertiserId, _datePosted, start, pageLength, out totalCount)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the primary key PK__JobsArchive__78C9C9BA index.
		/// </summary>
		/// <param name="_jobId"></param>
		/// <returns>Returns an instance of the <see cref="JobsArchive"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual JobsArchive GetByJobId(System.Int32 _jobId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByJobId");
			#endregion Security check
			
			#region Initialisation
			JobsArchive entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.JobsArchiveProvider.GetByJobId(transactionManager, _jobId)   as JobsArchive;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{JobsArchive}" /> from the datasource based on the primary key PK__JobsArchive__78C9C9BA index.
		/// </summary>
		/// <param name="_jobId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="JobsArchive"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual JobsArchive GetByJobId(System.Int32 _jobId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByJobId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			JobsArchive entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.JobsArchiveProvider.GetByJobId(transactionManager, _jobId, start, pageLength, out totalCount)   as JobsArchive;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
	
		#endregion GetByIndexes
	
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="JobsArchive" /> entities.
		/// </summary>
		/// <returns></returns>
		public override TList<JobsArchive> GetAll() 
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAll");
			#endregion Security check
			
			#region Initialisation
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.JobsArchiveProvider.GetAll(transactionManager);	
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}

		/// <summary>
		/// Get a set portion of a complete list of <see cref="JobsArchive" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{JobsArchive}"/> </returns>
		public virtual TList<JobsArchive> GetAll(int start, int pageLength, out int totalCount) 
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAll");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.JobsArchiveProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{JobsArchive}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>JobsArchive</c> objects.</returns>
		public virtual TList<JobsArchive> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, int.MaxValue, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{JobsArchive}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>JobsArchive</c> objects.</returns>
		public virtual TList<JobsArchive> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{JobsArchive}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>JobsArchive</c> objects.</returns>
		public override TList<JobsArchive> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetPaged");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.JobsArchiveProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, int.MaxValue, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	
				
		#region Find
		
		#region Parsed Find Methods
		
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual TList<JobsArchive> Find(string whereClause)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.JobsArchiveProvider.Find(transactionManager, whereClause);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}	
		
		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{JobsArchive} of <c>JobsArchive</c> objects.</returns>
		public override TList<JobsArchive> Find(string whereClause, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<JobsArchive> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.JobsArchiveProvider.Find(transactionManager, whereClause, start, pageLength, out totalCount);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods

		/// <summary>
		/// Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>JobsArchive</c> objects.</returns>
		public virtual TList<JobsArchive> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, (string) null);
		}
		
		/// <summary>
        /// Returns rows from the DataSource that meet the parameter conditions.
        /// </summary>
        /// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
        /// <param name="sortColumns">A collection of <see cref="SqlSortColumn"/> objects.</param>
        /// <returns>Returns a typed collection of <c>JobsArchive</c> objects.</returns>
        public virtual TList<JobsArchive> Find(IFilterParameterCollection parameters, ISortColumnCollection sortColumns)
        {
            return Find(parameters, sortColumns.ToString());
        }
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>JobsArchive</c> objects.</returns>
		public virtual TList<JobsArchive> Find(IFilterParameterCollection parameters, string orderBy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			TList<JobsArchive> list = null;
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.JobsArchiveProvider.Find(transactionManager, parameters, orderBy);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;		
		}
		
		/// <summary>
        /// Returns rows from the DataSource that meet the parameter conditions.
        /// </summary>
        /// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
        /// <param name="sortColumns">A collection of <see cref="SqlSortColumn"/> objects.</param>
        /// <param name="start">Row number at which to start reading.</param>
        /// <param name="pageLength">Number of rows to return.</param>
        /// <param name="count">out. The number of rows that match this query.</param>
        /// <returns>Returns a typed collection of <c>JobsArchive</c> objects.</returns>
        public virtual TList<JobsArchive> Find(IFilterParameterCollection parameters, ISortColumnCollection sortColumns, int start, int pageLength, out int count)
        {
            return Find(parameters, sortColumns.ToString(), start, pageLength, out count);
        }
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>JobsArchive</c> objects.</returns>
		public virtual TList<JobsArchive> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			count = -1;
			TransactionManager transactionManager = null; 
			TList<JobsArchive> list = null;
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.JobsArchiveProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion
		
		#region Insert

		#region Insert Entity
		/// <summary>
		/// public virtual method that Inserts a JobsArchive object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">JobsArchive object to Insert.</param>
		/// <remarks>After Inserting into the datasource, the JobsArchive object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Insert Method with an already open transaction.
        /// <code>
		/// JobsArchive entity = new JobsArchive();
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Insert Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Insert(entity.ChildObjectSource);
		///		JobsArchiveService.Insert(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public override bool Insert(JobsArchive entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Insert", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
                 SetDefaultValues(ref entity); 
				result = dataProvider.JobsArchiveProvider.Insert(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Insert Entity
		
		#region Insert Collection
		/// <summary>
		/// public virtual method that Inserts rows in <see cref="TList{JobsArchive}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>JobsArchive</c> objects in a <see cref="TList{JobsArchive}" /> object to Insert.</param>
		/// <remarks>
		///		This function will only Insert entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Inserting the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Inserting into the datasource, the <c>JobsArchive</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Insert.</returns>
		/// <example>
        /// The following code shows the usage of the Insert Method with a collection of JobsArchive.
        /// <code><![CDATA[
		/// TList<JobsArchive> list = new TList<JobsArchive>();
		/// JobsArchive entity = new JobsArchive();
		/// entity.StringProperty = "foo";
		/// JobsArchive entity2 = new JobsArchive();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	JobsArchiveService.Insert(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public virtual TList<JobsArchive> Insert(TList<JobsArchive> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Insert", DomainUtil.GetErrorsFromList<JobsArchive>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.JobsArchiveProvider.Insert(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Insert Collection

		#endregion Insert 
		
		#region Update

		#region Update Entity
		/// <summary>
		/// public virtual method that Updates a JobsArchive object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">JobsArchive object to Update.</param>
		/// <remarks>After Updateing into the datasource, the JobsArchive object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Update Method with an already open transaction.
        /// <code>
		///	JobsArchive entity = JobsArchiveService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Update Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Update(entity.ChildObjectSource);
		///		JobsArchiveService.Update(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool Update(JobsArchive entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Update", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
                 SetDefaultValues(ref entity); 
				result = dataProvider.JobsArchiveProvider.Update(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Update Entity
		
		#region Update Collection
		/// <summary>
		/// public virtual method that Updates rows in <see cref="TList{JobsArchive}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>JobsArchive</c> objects in a <see cref="TList{JobsArchive}" /> object to Update.</param>
		/// <remarks>
		///		This function will only Update entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Updateing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Updateing into the datasource, the <c>JobsArchive</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Update.</returns>
		/// <example>
        /// The following code shows the usage of the Update Method with a collection of JobsArchive.
        /// <code><![CDATA[
		/// TList<JobsArchive> list = new TList<JobsArchive>();
		/// JobsArchive entity = new JobsArchive();
		/// entity.StringProperty = "foo";
		/// JobsArchive entity2 = new JobsArchive();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	JobsArchiveService.Update(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual TList<JobsArchive> Update(TList<JobsArchive> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Update", DomainUtil.GetErrorsFromList<JobsArchive>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.JobsArchiveProvider.Update(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Update Collection

		#endregion Update 
		
		#region Save

		#region Save Entity
		/// <summary>
		/// public virtual method that Saves a JobsArchive object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">JobsArchive object to Save.</param>
		/// <remarks>After Saveing into the datasource, the JobsArchive object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Save Method with an already open transaction.
        /// <code>
		///	JobsArchive entity = JobsArchiveService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Save Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Save(entity.ChildObjectSource);
		///		JobsArchiveService.Save(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override JobsArchive Save(JobsArchive entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Save");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Save", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
                 SetDefaultValues(ref entity); 
				dataProvider.JobsArchiveProvider.Save(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
		#endregion Save Entity
		
		#region Save Collection
		/// <summary>
		/// public virtual method that Saves rows in <see cref="TList{JobsArchive}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>JobsArchive</c> objects in a <see cref="TList{JobsArchive}" /> object to Save.</param>
		/// <remarks>
		///		This function will only Save entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Saveing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Saveing into the datasource, the <c>JobsArchive</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Save.</returns>
		/// <example>
        /// The following code shows the usage of the Save Method with a collection of JobsArchive.
        /// <code><![CDATA[
		/// TList<JobsArchive> list = new TList<JobsArchive>();
		/// JobsArchive entity = new JobsArchive();
		/// entity.StringProperty = "foo";
		/// JobsArchive entity2 = new JobsArchive();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	JobsArchiveService.Save(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual TList<JobsArchive> Save(TList<JobsArchive> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Save");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Save", DomainUtil.GetErrorsFromList<JobsArchive>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.JobsArchiveProvider.Save(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Save Collection

		#endregion Save 
		
		#region Delete

		#region Delete Entity
		/// <summary>
		/// public virtual method that Deletes a JobsArchive object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">JobsArchive object to Delete.</param>
		/// <remarks>After Deleteing into the datasource, the JobsArchive object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Delete Method with an already open transaction.
        /// <code>
		///	JobsArchive entity = JobsArchiveService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Delete Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Delete(entity.ChildObjectSource);
		///		JobsArchiveService.Delete(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public override bool Delete(JobsArchive entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Delete", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
                
				result = dataProvider.JobsArchiveProvider.Delete(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Delete Entity
		
		#region Delete Collection
		/// <summary>
		/// public virtual method that Deletes rows in <see cref="TList{JobsArchive}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>JobsArchive</c> objects in a <see cref="TList{JobsArchive}" /> object to Delete.</param>
		/// <remarks>
		///		This function will only Delete entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Deleteing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Deleteing into the datasource, the <c>JobsArchive</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Delete.</returns>
		/// <example>
        /// The following code shows the usage of the Delete Method with a collection of JobsArchive.
        /// <code><![CDATA[
		/// TList<JobsArchive> list = new TList<JobsArchive>();
		/// JobsArchive entity = new JobsArchive();
		/// entity.StringProperty = "foo";
		/// JobsArchive entity2 = new JobsArchive();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	JobsArchiveService.Delete(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public virtual TList<JobsArchive> Delete(TList<JobsArchive> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Delete", DomainUtil.GetErrorsFromList<JobsArchive>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.JobsArchiveProvider.Delete(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Delete Collection

		#endregion Delete 

		#region   Delete
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="key">The unique identifier of the row to delete.</param>
		/// <returns>Returns true if operation suceeded.</returns>
		public bool Delete(JobsArchiveKey key)
		{
			return Delete(key.JobId );
		}
		
		/// <summary>
		/// 	Deletes a row from the DataSource based on the PK'S System.Int32 _jobId
		/// </summary>
		/// <param name="_jobId">JobsArchive pk id.</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public virtual bool Delete(System.Int32 _jobId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			#endregion Security check

			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.JobsArchiveProvider.Delete(transactionManager, _jobId);
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
			
		}
		#endregion 
		
		#region  GetBy m:m Aggregate Relationships
		#endregion	N2N Relationships

		#region Custom Methods
		
		#region JobsArchive_GetBySalaryTypeId
		/// <summary>
		///	This method wrap the 'JobsArchive_GetBySalaryTypeId' stored procedure. 
		/// </summary>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetBySalaryTypeId(System.Int32? salaryTypeId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySalaryTypeId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.JobsArchiveProvider.GetBySalaryTypeId(transactionManager , salaryTypeId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetBySalaryTypeId' stored procedure. 
		/// </summary>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetBySalaryTypeId( System.Int32? salaryTypeId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySalaryTypeId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.GetBySalaryTypeId(transactionManager, start, pageLength , salaryTypeId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_GetBySiteIdBilledAdvertiserIdDatePosted
		/// <summary>
		///	This method wrap the 'JobsArchive_GetBySiteIdBilledAdvertiserIdDatePosted' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="billed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="datePosted"> A <c>System.DateTime?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetBySiteIdBilledAdvertiserIdDatePosted(System.Int32? siteId, System.Boolean? billed, System.Int32? advertiserId, System.DateTime? datePosted)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdBilledAdvertiserIdDatePosted");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.JobsArchiveProvider.GetBySiteIdBilledAdvertiserIdDatePosted(transactionManager , siteId, billed, advertiserId, datePosted);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetBySiteIdBilledAdvertiserIdDatePosted' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="billed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="datePosted"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetBySiteIdBilledAdvertiserIdDatePosted( System.Int32? siteId, System.Boolean? billed, System.Int32? advertiserId, System.DateTime? datePosted, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdBilledAdvertiserIdDatePosted");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.GetBySiteIdBilledAdvertiserIdDatePosted(transactionManager, start, pageLength , siteId, billed, advertiserId, datePosted);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_Update
		/// <summary>
		///	This method wrap the 'JobsArchive_Update' stored procedure. 
		/// </summary>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="originalJobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobName"> A <c>System.String</c> instance.</param>
		/// <param name="description"> A <c>System.String</c> instance.</param>
		/// <param name="fullDescription"> A <c>System.String</c> instance.</param>
		/// <param name="webServiceProcessed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="applicationEmailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="refNo"> A <c>System.String</c> instance.</param>
		/// <param name="visible"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="datePosted"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expired"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemPrice"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="billed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="showSalaryDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryText"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdminUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationUrl"> A <c>System.String</c> instance.</param>
		/// <param name="uploadMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="tags"> A <c>System.String</c> instance.</param>
		/// <param name="jobTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchFieldExtension"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserJobTemplateLogoId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="companyName"> A <c>System.String</c> instance.</param>
		/// <param name="hashValue"> A <c>System.Byte[]</c> instance.</param>
		/// <param name="requireLogonForExternalApplications"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showLocationDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicTransport"> A <c>System.String</c> instance.</param>
		/// <param name="address"> A <c>System.String</c> instance.</param>
		/// <param name="contactDetails"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactPhone"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactName"> A <c>System.String</c> instance.</param>
		/// <param name="qualificationsRecognised"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="residentOnly"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="documentLink"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint1"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint2"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint3"> A <c>System.String</c> instance.</param>
		/// <param name="hotJob"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="showSalaryRange"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enteredByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobLatitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="jobLongitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="addressStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobExternalId"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Update(System.Int32? jobId, System.Int32? originalJobId, System.Int32? siteId, System.Int32? workTypeId, System.String jobName, System.String description, System.String fullDescription, System.Boolean? webServiceProcessed, System.String applicationEmailAddress, System.String refNo, System.Boolean? visible, System.DateTime? datePosted, System.DateTime? expiryDate, System.Int32? expired, System.Decimal? jobItemPrice, System.Boolean? billed, System.DateTime? lastModified, System.Boolean? showSalaryDetails, System.String salaryText, System.Int32? advertiserId, System.Int32? lastModifiedByAdvertiserUserId, System.Int32? lastModifiedByAdminUserId, System.Int32? jobItemTypeId, System.Int32? applicationMethod, System.String applicationUrl, System.Int32? uploadMethod, System.String tags, System.Int32? jobTemplateId, System.String searchFieldExtension, System.Int32? advertiserJobTemplateLogoId, System.String companyName, System.Byte[] hashValue, System.Boolean? requireLogonForExternalApplications, System.Boolean? showLocationDetails, System.String publicTransport, System.String address, System.String contactDetails, System.String jobContactPhone, System.String jobContactName, System.Boolean? qualificationsRecognised, System.Boolean? residentOnly, System.String documentLink, System.String bulletPoint1, System.String bulletPoint2, System.String bulletPoint3, System.Boolean? hotJob, System.String jobFriendlyName, System.String searchField, System.Boolean? showSalaryRange, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? currencyId, System.Int32? salaryTypeId, System.Int32? enteredByAdvertiserUserId, System.Double? jobLatitude, System.Double? jobLongitude, System.Int32? addressStatus, System.String jobExternalId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.JobsArchiveProvider.Update(transactionManager , jobId, originalJobId, siteId, workTypeId, jobName, description, fullDescription, webServiceProcessed, applicationEmailAddress, refNo, visible, datePosted, expiryDate, expired, jobItemPrice, billed, lastModified, showSalaryDetails, salaryText, advertiserId, lastModifiedByAdvertiserUserId, lastModifiedByAdminUserId, jobItemTypeId, applicationMethod, applicationUrl, uploadMethod, tags, jobTemplateId, searchFieldExtension, advertiserJobTemplateLogoId, companyName, hashValue, requireLogonForExternalApplications, showLocationDetails, publicTransport, address, contactDetails, jobContactPhone, jobContactName, qualificationsRecognised, residentOnly, documentLink, bulletPoint1, bulletPoint2, bulletPoint3, hotJob, jobFriendlyName, searchField, showSalaryRange, salaryLowerBand, salaryUpperBand, currencyId, salaryTypeId, enteredByAdvertiserUserId, jobLatitude, jobLongitude, addressStatus, jobExternalId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_Update' stored procedure. 
		/// </summary>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="originalJobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobName"> A <c>System.String</c> instance.</param>
		/// <param name="description"> A <c>System.String</c> instance.</param>
		/// <param name="fullDescription"> A <c>System.String</c> instance.</param>
		/// <param name="webServiceProcessed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="applicationEmailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="refNo"> A <c>System.String</c> instance.</param>
		/// <param name="visible"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="datePosted"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expired"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemPrice"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="billed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="showSalaryDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryText"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdminUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationUrl"> A <c>System.String</c> instance.</param>
		/// <param name="uploadMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="tags"> A <c>System.String</c> instance.</param>
		/// <param name="jobTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchFieldExtension"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserJobTemplateLogoId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="companyName"> A <c>System.String</c> instance.</param>
		/// <param name="hashValue"> A <c>System.Byte[]</c> instance.</param>
		/// <param name="requireLogonForExternalApplications"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showLocationDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicTransport"> A <c>System.String</c> instance.</param>
		/// <param name="address"> A <c>System.String</c> instance.</param>
		/// <param name="contactDetails"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactPhone"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactName"> A <c>System.String</c> instance.</param>
		/// <param name="qualificationsRecognised"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="residentOnly"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="documentLink"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint1"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint2"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint3"> A <c>System.String</c> instance.</param>
		/// <param name="hotJob"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="showSalaryRange"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enteredByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobLatitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="jobLongitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="addressStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobExternalId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Update( System.Int32? jobId, System.Int32? originalJobId, System.Int32? siteId, System.Int32? workTypeId, System.String jobName, System.String description, System.String fullDescription, System.Boolean? webServiceProcessed, System.String applicationEmailAddress, System.String refNo, System.Boolean? visible, System.DateTime? datePosted, System.DateTime? expiryDate, System.Int32? expired, System.Decimal? jobItemPrice, System.Boolean? billed, System.DateTime? lastModified, System.Boolean? showSalaryDetails, System.String salaryText, System.Int32? advertiserId, System.Int32? lastModifiedByAdvertiserUserId, System.Int32? lastModifiedByAdminUserId, System.Int32? jobItemTypeId, System.Int32? applicationMethod, System.String applicationUrl, System.Int32? uploadMethod, System.String tags, System.Int32? jobTemplateId, System.String searchFieldExtension, System.Int32? advertiserJobTemplateLogoId, System.String companyName, System.Byte[] hashValue, System.Boolean? requireLogonForExternalApplications, System.Boolean? showLocationDetails, System.String publicTransport, System.String address, System.String contactDetails, System.String jobContactPhone, System.String jobContactName, System.Boolean? qualificationsRecognised, System.Boolean? residentOnly, System.String documentLink, System.String bulletPoint1, System.String bulletPoint2, System.String bulletPoint3, System.Boolean? hotJob, System.String jobFriendlyName, System.String searchField, System.Boolean? showSalaryRange, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? currencyId, System.Int32? salaryTypeId, System.Int32? enteredByAdvertiserUserId, System.Double? jobLatitude, System.Double? jobLongitude, System.Int32? addressStatus, System.String jobExternalId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.JobsArchiveProvider.Update(transactionManager, start, pageLength , jobId, originalJobId, siteId, workTypeId, jobName, description, fullDescription, webServiceProcessed, applicationEmailAddress, refNo, visible, datePosted, expiryDate, expired, jobItemPrice, billed, lastModified, showSalaryDetails, salaryText, advertiserId, lastModifiedByAdvertiserUserId, lastModifiedByAdminUserId, jobItemTypeId, applicationMethod, applicationUrl, uploadMethod, tags, jobTemplateId, searchFieldExtension, advertiserJobTemplateLogoId, companyName, hashValue, requireLogonForExternalApplications, showLocationDetails, publicTransport, address, contactDetails, jobContactPhone, jobContactName, qualificationsRecognised, residentOnly, documentLink, bulletPoint1, bulletPoint2, bulletPoint3, hotJob, jobFriendlyName, searchField, showSalaryRange, salaryLowerBand, salaryUpperBand, currencyId, salaryTypeId, enteredByAdvertiserUserId, jobLatitude, jobLongitude, addressStatus, jobExternalId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region JobsArchive_Find
		/// <summary>
		///	This method wrap the 'JobsArchive_Find' stored procedure. 
		/// </summary>
		/// <param name="searchUsingOr"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobName"> A <c>System.String</c> instance.</param>
		/// <param name="description"> A <c>System.String</c> instance.</param>
		/// <param name="fullDescription"> A <c>System.String</c> instance.</param>
		/// <param name="webServiceProcessed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="applicationEmailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="refNo"> A <c>System.String</c> instance.</param>
		/// <param name="visible"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="datePosted"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expired"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemPrice"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="billed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="showSalaryDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryText"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdminUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationUrl"> A <c>System.String</c> instance.</param>
		/// <param name="uploadMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="tags"> A <c>System.String</c> instance.</param>
		/// <param name="jobTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchFieldExtension"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserJobTemplateLogoId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="companyName"> A <c>System.String</c> instance.</param>
		/// <param name="hashValue"> A <c>System.Byte[]</c> instance.</param>
		/// <param name="requireLogonForExternalApplications"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showLocationDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicTransport"> A <c>System.String</c> instance.</param>
		/// <param name="address"> A <c>System.String</c> instance.</param>
		/// <param name="contactDetails"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactPhone"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactName"> A <c>System.String</c> instance.</param>
		/// <param name="qualificationsRecognised"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="residentOnly"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="documentLink"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint1"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint2"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint3"> A <c>System.String</c> instance.</param>
		/// <param name="hotJob"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="showSalaryRange"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enteredByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobLatitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="jobLongitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="addressStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobExternalId"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet Find(System.Boolean? searchUsingOr, System.Int32? jobId, System.Int32? siteId, System.Int32? workTypeId, System.String jobName, System.String description, System.String fullDescription, System.Boolean? webServiceProcessed, System.String applicationEmailAddress, System.String refNo, System.Boolean? visible, System.DateTime? datePosted, System.DateTime? expiryDate, System.Int32? expired, System.Decimal? jobItemPrice, System.Boolean? billed, System.DateTime? lastModified, System.Boolean? showSalaryDetails, System.String salaryText, System.Int32? advertiserId, System.Int32? lastModifiedByAdvertiserUserId, System.Int32? lastModifiedByAdminUserId, System.Int32? jobItemTypeId, System.Int32? applicationMethod, System.String applicationUrl, System.Int32? uploadMethod, System.String tags, System.Int32? jobTemplateId, System.String searchFieldExtension, System.Int32? advertiserJobTemplateLogoId, System.String companyName, System.Byte[] hashValue, System.Boolean? requireLogonForExternalApplications, System.Boolean? showLocationDetails, System.String publicTransport, System.String address, System.String contactDetails, System.String jobContactPhone, System.String jobContactName, System.Boolean? qualificationsRecognised, System.Boolean? residentOnly, System.String documentLink, System.String bulletPoint1, System.String bulletPoint2, System.String bulletPoint3, System.Boolean? hotJob, System.String jobFriendlyName, System.String searchField, System.Boolean? showSalaryRange, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? currencyId, System.Int32? salaryTypeId, System.Int32? enteredByAdvertiserUserId, System.Double? jobLatitude, System.Double? jobLongitude, System.Int32? addressStatus, System.String jobExternalId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.JobsArchiveProvider.Find(transactionManager , searchUsingOr, jobId, siteId, workTypeId, jobName, description, fullDescription, webServiceProcessed, applicationEmailAddress, refNo, visible, datePosted, expiryDate, expired, jobItemPrice, billed, lastModified, showSalaryDetails, salaryText, advertiserId, lastModifiedByAdvertiserUserId, lastModifiedByAdminUserId, jobItemTypeId, applicationMethod, applicationUrl, uploadMethod, tags, jobTemplateId, searchFieldExtension, advertiserJobTemplateLogoId, companyName, hashValue, requireLogonForExternalApplications, showLocationDetails, publicTransport, address, contactDetails, jobContactPhone, jobContactName, qualificationsRecognised, residentOnly, documentLink, bulletPoint1, bulletPoint2, bulletPoint3, hotJob, jobFriendlyName, searchField, showSalaryRange, salaryLowerBand, salaryUpperBand, currencyId, salaryTypeId, enteredByAdvertiserUserId, jobLatitude, jobLongitude, addressStatus, jobExternalId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_Find' stored procedure. 
		/// </summary>
		/// <param name="searchUsingOr"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobName"> A <c>System.String</c> instance.</param>
		/// <param name="description"> A <c>System.String</c> instance.</param>
		/// <param name="fullDescription"> A <c>System.String</c> instance.</param>
		/// <param name="webServiceProcessed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="applicationEmailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="refNo"> A <c>System.String</c> instance.</param>
		/// <param name="visible"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="datePosted"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expired"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemPrice"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="billed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="showSalaryDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryText"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdminUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationUrl"> A <c>System.String</c> instance.</param>
		/// <param name="uploadMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="tags"> A <c>System.String</c> instance.</param>
		/// <param name="jobTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchFieldExtension"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserJobTemplateLogoId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="companyName"> A <c>System.String</c> instance.</param>
		/// <param name="hashValue"> A <c>System.Byte[]</c> instance.</param>
		/// <param name="requireLogonForExternalApplications"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showLocationDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicTransport"> A <c>System.String</c> instance.</param>
		/// <param name="address"> A <c>System.String</c> instance.</param>
		/// <param name="contactDetails"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactPhone"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactName"> A <c>System.String</c> instance.</param>
		/// <param name="qualificationsRecognised"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="residentOnly"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="documentLink"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint1"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint2"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint3"> A <c>System.String</c> instance.</param>
		/// <param name="hotJob"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="showSalaryRange"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enteredByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobLatitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="jobLongitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="addressStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobExternalId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet Find( System.Boolean? searchUsingOr, System.Int32? jobId, System.Int32? siteId, System.Int32? workTypeId, System.String jobName, System.String description, System.String fullDescription, System.Boolean? webServiceProcessed, System.String applicationEmailAddress, System.String refNo, System.Boolean? visible, System.DateTime? datePosted, System.DateTime? expiryDate, System.Int32? expired, System.Decimal? jobItemPrice, System.Boolean? billed, System.DateTime? lastModified, System.Boolean? showSalaryDetails, System.String salaryText, System.Int32? advertiserId, System.Int32? lastModifiedByAdvertiserUserId, System.Int32? lastModifiedByAdminUserId, System.Int32? jobItemTypeId, System.Int32? applicationMethod, System.String applicationUrl, System.Int32? uploadMethod, System.String tags, System.Int32? jobTemplateId, System.String searchFieldExtension, System.Int32? advertiserJobTemplateLogoId, System.String companyName, System.Byte[] hashValue, System.Boolean? requireLogonForExternalApplications, System.Boolean? showLocationDetails, System.String publicTransport, System.String address, System.String contactDetails, System.String jobContactPhone, System.String jobContactName, System.Boolean? qualificationsRecognised, System.Boolean? residentOnly, System.String documentLink, System.String bulletPoint1, System.String bulletPoint2, System.String bulletPoint3, System.Boolean? hotJob, System.String jobFriendlyName, System.String searchField, System.Boolean? showSalaryRange, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? currencyId, System.Int32? salaryTypeId, System.Int32? enteredByAdvertiserUserId, System.Double? jobLatitude, System.Double? jobLongitude, System.Int32? addressStatus, System.String jobExternalId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.Find(transactionManager, start, pageLength , searchUsingOr, jobId, siteId, workTypeId, jobName, description, fullDescription, webServiceProcessed, applicationEmailAddress, refNo, visible, datePosted, expiryDate, expired, jobItemPrice, billed, lastModified, showSalaryDetails, salaryText, advertiserId, lastModifiedByAdvertiserUserId, lastModifiedByAdminUserId, jobItemTypeId, applicationMethod, applicationUrl, uploadMethod, tags, jobTemplateId, searchFieldExtension, advertiserJobTemplateLogoId, companyName, hashValue, requireLogonForExternalApplications, showLocationDetails, publicTransport, address, contactDetails, jobContactPhone, jobContactName, qualificationsRecognised, residentOnly, documentLink, bulletPoint1, bulletPoint2, bulletPoint3, hotJob, jobFriendlyName, searchField, showSalaryRange, salaryLowerBand, salaryUpperBand, currencyId, salaryTypeId, enteredByAdvertiserUserId, jobLatitude, jobLongitude, addressStatus, jobExternalId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_GetByAddressStatus
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByAddressStatus' stored procedure. 
		/// </summary>
		/// <param name="addressStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByAddressStatus( System.Int32? addressStatus, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAddressStatus");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.GetByAddressStatus(transactionManager, start, pageLength , addressStatus);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_GetByJobId
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByJobId' stored procedure. 
		/// </summary>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByJobId(System.Int32? jobId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByJobId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.JobsArchiveProvider.GetByJobId(transactionManager , jobId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByJobId' stored procedure. 
		/// </summary>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByJobId( System.Int32? jobId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByJobId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.GetByJobId(transactionManager, start, pageLength , jobId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_Get_List
		/// <summary>
		///	This method wrap the 'JobsArchive_Get_List' stored procedure. 
		/// </summary>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet Get_List()
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Get_List");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.JobsArchiveProvider.Get_List(transactionManager );
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_Get_List' stored procedure. 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet Get_List( int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Get_List");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.Get_List(transactionManager, start, pageLength );
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_GetByProfessionId
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByProfessionId' stored procedure. 
		/// </summary>
		/// <param name="professionId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetByProfessionId(System.Int32? professionId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByProfessionId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.JobsArchiveProvider.GetByProfessionId(transactionManager , professionId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByProfessionId' stored procedure. 
		/// </summary>
		/// <param name="professionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetByProfessionId( System.Int32? professionId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByProfessionId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.JobsArchiveProvider.GetByProfessionId(transactionManager, start, pageLength , professionId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region JobsArchive_GetByScreeningQuestionsTemplateId
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByScreeningQuestionsTemplateId' stored procedure. 
		/// </summary>
		/// <param name="screeningQuestionsTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetByScreeningQuestionsTemplateId(System.Int32? screeningQuestionsTemplateId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByScreeningQuestionsTemplateId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.JobsArchiveProvider.GetByScreeningQuestionsTemplateId(transactionManager , screeningQuestionsTemplateId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByScreeningQuestionsTemplateId' stored procedure. 
		/// </summary>
		/// <param name="screeningQuestionsTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetByScreeningQuestionsTemplateId( System.Int32? screeningQuestionsTemplateId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByScreeningQuestionsTemplateId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.JobsArchiveProvider.GetByScreeningQuestionsTemplateId(transactionManager, start, pageLength , screeningQuestionsTemplateId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region JobsArchive_GetPaged
		/// <summary>
		///	This method wrap the 'JobsArchive_GetPaged' stored procedure. 
		/// </summary>
		/// <param name="whereClause"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetPaged(System.String whereClause, System.String orderBy, System.Int32? pageIndex, System.Int32? pageSize)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetPaged");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.JobsArchiveProvider.GetPaged(transactionManager , whereClause, orderBy, pageIndex, pageSize);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetPaged' stored procedure. 
		/// </summary>
		/// <param name="whereClause"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetPaged( System.String whereClause, System.String orderBy, System.Int32? pageIndex, System.Int32? pageSize, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetPaged");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.GetPaged(transactionManager, start, pageLength , whereClause, orderBy, pageIndex, pageSize);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_Delete
		/// <summary>
		///	This method wrap the 'JobsArchive_Delete' stored procedure. 
		/// </summary>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Delete(System.Int32? jobId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.JobsArchiveProvider.Delete(transactionManager , jobId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_Delete' stored procedure. 
		/// </summary>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Delete( System.Int32? jobId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.JobsArchiveProvider.Delete(transactionManager, start, pageLength , jobId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region JobsArchive_GetByLocationId
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByLocationId' stored procedure. 
		/// </summary>
		/// <param name="locationId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetByLocationId(System.Int32? locationId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLocationId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.JobsArchiveProvider.GetByLocationId(transactionManager , locationId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByLocationId' stored procedure. 
		/// </summary>
		/// <param name="locationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetByLocationId( System.Int32? locationId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLocationId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.JobsArchiveProvider.GetByLocationId(transactionManager, start, pageLength , locationId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region JobsArchive_GetBySiteIdBilledAdvertiserId
		/// <summary>
		///	This method wrap the 'JobsArchive_GetBySiteIdBilledAdvertiserId' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="billed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetBySiteIdBilledAdvertiserId(System.Int32? siteId, System.Boolean? billed, System.Int32? advertiserId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdBilledAdvertiserId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.JobsArchiveProvider.GetBySiteIdBilledAdvertiserId(transactionManager , siteId, billed, advertiserId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetBySiteIdBilledAdvertiserId' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="billed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetBySiteIdBilledAdvertiserId( System.Int32? siteId, System.Boolean? billed, System.Int32? advertiserId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteIdBilledAdvertiserId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.GetBySiteIdBilledAdvertiserId(transactionManager, start, pageLength , siteId, billed, advertiserId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_Insert
		/// <summary>
		///	This method wrap the 'JobsArchive_Insert' stored procedure. 
		/// </summary>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobName"> A <c>System.String</c> instance.</param>
		/// <param name="description"> A <c>System.String</c> instance.</param>
		/// <param name="fullDescription"> A <c>System.String</c> instance.</param>
		/// <param name="webServiceProcessed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="applicationEmailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="refNo"> A <c>System.String</c> instance.</param>
		/// <param name="visible"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="datePosted"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expired"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemPrice"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="billed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="showSalaryDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryText"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdminUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationUrl"> A <c>System.String</c> instance.</param>
		/// <param name="uploadMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="tags"> A <c>System.String</c> instance.</param>
		/// <param name="jobTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchFieldExtension"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserJobTemplateLogoId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="companyName"> A <c>System.String</c> instance.</param>
		/// <param name="hashValue"> A <c>System.Byte[]</c> instance.</param>
		/// <param name="requireLogonForExternalApplications"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showLocationDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicTransport"> A <c>System.String</c> instance.</param>
		/// <param name="address"> A <c>System.String</c> instance.</param>
		/// <param name="contactDetails"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactPhone"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactName"> A <c>System.String</c> instance.</param>
		/// <param name="qualificationsRecognised"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="residentOnly"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="documentLink"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint1"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint2"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint3"> A <c>System.String</c> instance.</param>
		/// <param name="hotJob"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="showSalaryRange"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enteredByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobLatitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="jobLongitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="addressStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobExternalId"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Insert(System.Int32? jobId, System.Int32? siteId, System.Int32? workTypeId, System.String jobName, System.String description, System.String fullDescription, System.Boolean? webServiceProcessed, System.String applicationEmailAddress, System.String refNo, System.Boolean? visible, System.DateTime? datePosted, System.DateTime? expiryDate, System.Int32? expired, System.Decimal? jobItemPrice, System.Boolean? billed, System.DateTime? lastModified, System.Boolean? showSalaryDetails, System.String salaryText, System.Int32? advertiserId, System.Int32? lastModifiedByAdvertiserUserId, System.Int32? lastModifiedByAdminUserId, System.Int32? jobItemTypeId, System.Int32? applicationMethod, System.String applicationUrl, System.Int32? uploadMethod, System.String tags, System.Int32? jobTemplateId, System.String searchFieldExtension, System.Int32? advertiserJobTemplateLogoId, System.String companyName, System.Byte[] hashValue, System.Boolean? requireLogonForExternalApplications, System.Boolean? showLocationDetails, System.String publicTransport, System.String address, System.String contactDetails, System.String jobContactPhone, System.String jobContactName, System.Boolean? qualificationsRecognised, System.Boolean? residentOnly, System.String documentLink, System.String bulletPoint1, System.String bulletPoint2, System.String bulletPoint3, System.Boolean? hotJob, System.String jobFriendlyName, System.String searchField, System.Boolean? showSalaryRange, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? currencyId, System.Int32? salaryTypeId, System.Int32? enteredByAdvertiserUserId, System.Double? jobLatitude, System.Double? jobLongitude, System.Int32? addressStatus, System.String jobExternalId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.JobsArchiveProvider.Insert(transactionManager , jobId, siteId, workTypeId, jobName, description, fullDescription, webServiceProcessed, applicationEmailAddress, refNo, visible, datePosted, expiryDate, expired, jobItemPrice, billed, lastModified, showSalaryDetails, salaryText, advertiserId, lastModifiedByAdvertiserUserId, lastModifiedByAdminUserId, jobItemTypeId, applicationMethod, applicationUrl, uploadMethod, tags, jobTemplateId, searchFieldExtension, advertiserJobTemplateLogoId, companyName, hashValue, requireLogonForExternalApplications, showLocationDetails, publicTransport, address, contactDetails, jobContactPhone, jobContactName, qualificationsRecognised, residentOnly, documentLink, bulletPoint1, bulletPoint2, bulletPoint3, hotJob, jobFriendlyName, searchField, showSalaryRange, salaryLowerBand, salaryUpperBand, currencyId, salaryTypeId, enteredByAdvertiserUserId, jobLatitude, jobLongitude, addressStatus, jobExternalId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_Insert' stored procedure. 
		/// </summary>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobName"> A <c>System.String</c> instance.</param>
		/// <param name="description"> A <c>System.String</c> instance.</param>
		/// <param name="fullDescription"> A <c>System.String</c> instance.</param>
		/// <param name="webServiceProcessed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="applicationEmailAddress"> A <c>System.String</c> instance.</param>
		/// <param name="refNo"> A <c>System.String</c> instance.</param>
		/// <param name="visible"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="datePosted"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="expired"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemPrice"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="billed"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="lastModified"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="showSalaryDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryText"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="lastModifiedByAdminUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobItemTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="applicationUrl"> A <c>System.String</c> instance.</param>
		/// <param name="uploadMethod"> A <c>System.Int32?</c> instance.</param>
		/// <param name="tags"> A <c>System.String</c> instance.</param>
		/// <param name="jobTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="searchFieldExtension"> A <c>System.String</c> instance.</param>
		/// <param name="advertiserJobTemplateLogoId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="companyName"> A <c>System.String</c> instance.</param>
		/// <param name="hashValue"> A <c>System.Byte[]</c> instance.</param>
		/// <param name="requireLogonForExternalApplications"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="showLocationDetails"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="publicTransport"> A <c>System.String</c> instance.</param>
		/// <param name="address"> A <c>System.String</c> instance.</param>
		/// <param name="contactDetails"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactPhone"> A <c>System.String</c> instance.</param>
		/// <param name="jobContactName"> A <c>System.String</c> instance.</param>
		/// <param name="qualificationsRecognised"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="residentOnly"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="documentLink"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint1"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint2"> A <c>System.String</c> instance.</param>
		/// <param name="bulletPoint3"> A <c>System.String</c> instance.</param>
		/// <param name="hotJob"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="jobFriendlyName"> A <c>System.String</c> instance.</param>
		/// <param name="searchField"> A <c>System.String</c> instance.</param>
		/// <param name="showSalaryRange"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="enteredByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobLatitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="jobLongitude"> A <c>System.Double?</c> instance.</param>
		/// <param name="addressStatus"> A <c>System.Int32?</c> instance.</param>
		/// <param name="jobExternalId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Insert( System.Int32? jobId, System.Int32? siteId, System.Int32? workTypeId, System.String jobName, System.String description, System.String fullDescription, System.Boolean? webServiceProcessed, System.String applicationEmailAddress, System.String refNo, System.Boolean? visible, System.DateTime? datePosted, System.DateTime? expiryDate, System.Int32? expired, System.Decimal? jobItemPrice, System.Boolean? billed, System.DateTime? lastModified, System.Boolean? showSalaryDetails, System.String salaryText, System.Int32? advertiserId, System.Int32? lastModifiedByAdvertiserUserId, System.Int32? lastModifiedByAdminUserId, System.Int32? jobItemTypeId, System.Int32? applicationMethod, System.String applicationUrl, System.Int32? uploadMethod, System.String tags, System.Int32? jobTemplateId, System.String searchFieldExtension, System.Int32? advertiserJobTemplateLogoId, System.String companyName, System.Byte[] hashValue, System.Boolean? requireLogonForExternalApplications, System.Boolean? showLocationDetails, System.String publicTransport, System.String address, System.String contactDetails, System.String jobContactPhone, System.String jobContactName, System.Boolean? qualificationsRecognised, System.Boolean? residentOnly, System.String documentLink, System.String bulletPoint1, System.String bulletPoint2, System.String bulletPoint3, System.Boolean? hotJob, System.String jobFriendlyName, System.String searchField, System.Boolean? showSalaryRange, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? currencyId, System.Int32? salaryTypeId, System.Int32? enteredByAdvertiserUserId, System.Double? jobLatitude, System.Double? jobLongitude, System.Int32? addressStatus, System.String jobExternalId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.JobsArchiveProvider.Insert(transactionManager, start, pageLength , jobId, siteId, workTypeId, jobName, description, fullDescription, webServiceProcessed, applicationEmailAddress, refNo, visible, datePosted, expiryDate, expired, jobItemPrice, billed, lastModified, showSalaryDetails, salaryText, advertiserId, lastModifiedByAdvertiserUserId, lastModifiedByAdminUserId, jobItemTypeId, applicationMethod, applicationUrl, uploadMethod, tags, jobTemplateId, searchFieldExtension, advertiserJobTemplateLogoId, companyName, hashValue, requireLogonForExternalApplications, showLocationDetails, publicTransport, address, contactDetails, jobContactPhone, jobContactName, qualificationsRecognised, residentOnly, documentLink, bulletPoint1, bulletPoint2, bulletPoint3, hotJob, jobFriendlyName, searchField, showSalaryRange, salaryLowerBand, salaryUpperBand, currencyId, salaryTypeId, enteredByAdvertiserUserId, jobLatitude, jobLongitude, addressStatus, jobExternalId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region JobsArchive_GetByLastModifiedByAdminUserId
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByLastModifiedByAdminUserId' stored procedure. 
		/// </summary>
		/// <param name="lastModifiedByAdminUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByLastModifiedByAdminUserId( System.Int32? lastModifiedByAdminUserId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLastModifiedByAdminUserId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.GetByLastModifiedByAdminUserId(transactionManager, start, pageLength , lastModifiedByAdminUserId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate' stored procedure. 
		/// </summary>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="expired"> A <c>System.Int32?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate(System.Int32? advertiserId, System.Int32? currencyId, System.Int32? salaryTypeId, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? workTypeId, System.Int32? expired, System.DateTime? expiryDate)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.JobsArchiveProvider.GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate(transactionManager , advertiserId, currencyId, salaryTypeId, salaryLowerBand, salaryUpperBand, workTypeId, expired, expiryDate);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate' stored procedure. 
		/// </summary>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="expired"> A <c>System.Int32?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate( System.Int32? advertiserId, System.Int32? currencyId, System.Int32? salaryTypeId, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? workTypeId, System.Int32? expired, System.DateTime? expiryDate, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate(transactionManager, start, pageLength , advertiserId, currencyId, salaryTypeId, salaryLowerBand, salaryUpperBand, workTypeId, expired, expiryDate);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_GetByExpiredExpiryDateAdvertiserIdCurrencyIdSalaryUpperBandSalaryLowerBandWorkTypeId
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByExpiredExpiryDateAdvertiserIdCurrencyIdSalaryUpperBandSalaryLowerBandWorkTypeId' stored procedure. 
		/// </summary>
		/// <param name="expired"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByExpiredExpiryDateAdvertiserIdCurrencyIdSalaryUpperBandSalaryLowerBandWorkTypeId(System.Boolean? expired, System.DateTime? expiryDate, System.Int32? advertiserId, System.Int32? currencyId, System.Decimal? salaryUpperBand, System.Decimal? salaryLowerBand, System.Int32? workTypeId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByExpiredExpiryDateAdvertiserIdCurrencyIdSalaryUpperBandSalaryLowerBandWorkTypeId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.JobsArchiveProvider.GetByExpiredExpiryDateAdvertiserIdCurrencyIdSalaryUpperBandSalaryLowerBandWorkTypeId(transactionManager , expired, expiryDate, advertiserId, currencyId, salaryUpperBand, salaryLowerBand, workTypeId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByExpiredExpiryDateAdvertiserIdCurrencyIdSalaryUpperBandSalaryLowerBandWorkTypeId' stored procedure. 
		/// </summary>
		/// <param name="expired"> A <c>System.Boolean?</c> instance.</param>
		/// <param name="expiryDate"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByExpiredExpiryDateAdvertiserIdCurrencyIdSalaryUpperBandSalaryLowerBandWorkTypeId( System.Boolean? expired, System.DateTime? expiryDate, System.Int32? advertiserId, System.Int32? currencyId, System.Decimal? salaryUpperBand, System.Decimal? salaryLowerBand, System.Int32? workTypeId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByExpiredExpiryDateAdvertiserIdCurrencyIdSalaryUpperBandSalaryLowerBandWorkTypeId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.GetByExpiredExpiryDateAdvertiserIdCurrencyIdSalaryUpperBandSalaryLowerBandWorkTypeId(transactionManager, start, pageLength , expired, expiryDate, advertiserId, currencyId, salaryUpperBand, salaryLowerBand, workTypeId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_GetByAdvertiserId
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByAdvertiserId' stored procedure. 
		/// </summary>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByAdvertiserId( System.Int32? advertiserId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAdvertiserId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.GetByAdvertiserId(transactionManager, start, pageLength , advertiserId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_GetByWorkTypeId
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByWorkTypeId' stored procedure. 
		/// </summary>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByWorkTypeId(System.Int32? workTypeId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByWorkTypeId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.JobsArchiveProvider.GetByWorkTypeId(transactionManager , workTypeId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByWorkTypeId' stored procedure. 
		/// </summary>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByWorkTypeId( System.Int32? workTypeId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByWorkTypeId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.GetByWorkTypeId(transactionManager, start, pageLength , workTypeId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_GetByAreaId
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByAreaId' stored procedure. 
		/// </summary>
		/// <param name="areaId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetByAreaId(System.Int32? areaId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAreaId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.JobsArchiveProvider.GetByAreaId(transactionManager , areaId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByAreaId' stored procedure. 
		/// </summary>
		/// <param name="areaId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetByAreaId( System.Int32? areaId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAreaId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.JobsArchiveProvider.GetByAreaId(transactionManager, start, pageLength , areaId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region JobsArchive_GetByJobItemTypeId
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByJobItemTypeId' stored procedure. 
		/// </summary>
		/// <param name="jobItemTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByJobItemTypeId(System.Int32? jobItemTypeId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByJobItemTypeId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.JobsArchiveProvider.GetByJobItemTypeId(transactionManager , jobItemTypeId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByJobItemTypeId' stored procedure. 
		/// </summary>
		/// <param name="jobItemTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByJobItemTypeId( System.Int32? jobItemTypeId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByJobItemTypeId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.GetByJobItemTypeId(transactionManager, start, pageLength , jobItemTypeId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_GetByLastModifiedByAdvertiserUserId
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByLastModifiedByAdvertiserUserId' stored procedure. 
		/// </summary>
		/// <param name="lastModifiedByAdvertiserUserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByLastModifiedByAdvertiserUserId( System.Int32? lastModifiedByAdvertiserUserId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByLastModifiedByAdvertiserUserId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.GetByLastModifiedByAdvertiserUserId(transactionManager, start, pageLength , lastModifiedByAdvertiserUserId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_GetByJobTemplateId
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByJobTemplateId' stored procedure. 
		/// </summary>
		/// <param name="jobTemplateId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByJobTemplateId( System.Int32? jobTemplateId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByJobTemplateId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.GetByJobTemplateId(transactionManager, start, pageLength , jobTemplateId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_GetBySiteId
		/// <summary>
		///	This method wrap the 'JobsArchive_GetBySiteId' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetBySiteId(System.Int32? siteId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.JobsArchiveProvider.GetBySiteId(transactionManager , siteId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetBySiteId' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetBySiteId( System.Int32? siteId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySiteId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.GetBySiteId(transactionManager, start, pageLength , siteId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_GetByCurrencyId
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByCurrencyId' stored procedure. 
		/// </summary>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByCurrencyId(System.Int32? currencyId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByCurrencyId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.JobsArchiveProvider.GetByCurrencyId(transactionManager , currencyId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByCurrencyId' stored procedure. 
		/// </summary>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual  DataSet GetByCurrencyId( System.Int32? currencyId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByCurrencyId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.JobsArchiveProvider.GetByCurrencyId(transactionManager, start, pageLength , currencyId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region JobsArchive_GetByRoleId
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByRoleId' stored procedure. 
		/// </summary>
		/// <param name="roleId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetByRoleId(System.Int32? roleId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByRoleId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.JobsArchiveProvider.GetByRoleId(transactionManager , roleId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'JobsArchive_GetByRoleId' stored procedure. 
		/// </summary>
		/// <param name="roleId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetByRoleId( System.Int32? roleId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByRoleId");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.JobsArchiveProvider.GetByRoleId(transactionManager, start, pageLength , roleId);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		#endregion
		
		#region DeepLoad
		#region Deep Load By Entity Keys
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;JobsArchive&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_addressStatus"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">JobsArchive Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;JobsArchive&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> DeepLoadByAddressStatus(System.Int32? _addressStatus, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByAddressStatus");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<JobsArchive> list = GetByAddressStatus(_addressStatus);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;JobsArchive&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_advertiserId"></param>
		/// <param name="_currencyId"></param>
		/// <param name="_salaryTypeId"></param>
		/// <param name="_salaryLowerBand"></param>
		/// <param name="_salaryUpperBand"></param>
		/// <param name="_workTypeId"></param>
		/// <param name="_expired"></param>
		/// <param name="_expiryDate"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">JobsArchive Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;JobsArchive&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> DeepLoadByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate(System.Int32? _advertiserId, System.Int32 _currencyId, System.Int32 _salaryTypeId, System.Decimal _salaryLowerBand, System.Decimal _salaryUpperBand, System.Int32 _workTypeId, System.Int32? _expired, System.DateTime _expiryDate, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<JobsArchive> list = GetByAdvertiserIdCurrencyIdSalaryTypeIdSalaryLowerBandSalaryUpperBandWorkTypeIdExpiredExpiryDate(_advertiserId, _currencyId, _salaryTypeId, _salaryLowerBand, _salaryUpperBand, _workTypeId, _expired, _expiryDate);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;JobsArchive&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_siteId"></param>
		/// <param name="_billed"></param>
		/// <param name="_advertiserId"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">JobsArchive Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;JobsArchive&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> DeepLoadBySiteIdBilledAdvertiserId(System.Int32 _siteId, System.Boolean _billed, System.Int32? _advertiserId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadBySiteIdBilledAdvertiserId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<JobsArchive> list = GetBySiteIdBilledAdvertiserId(_siteId, _billed, _advertiserId);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;JobsArchive&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_siteId"></param>
		/// <param name="_billed"></param>
		/// <param name="_advertiserId"></param>
		/// <param name="_datePosted"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">JobsArchive Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;JobsArchive&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<JobsArchive> DeepLoadBySiteIdBilledAdvertiserIdDatePosted(System.Int32 _siteId, System.Boolean _billed, System.Int32? _advertiserId, System.DateTime _datePosted, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadBySiteIdBilledAdvertiserIdDatePosted");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<JobsArchive> list = GetBySiteIdBilledAdvertiserIdDatePosted(_siteId, _billed, _advertiserId, _datePosted);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="JobsArchive"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_jobId"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">JobsArchive Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="JobsArchive"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual JobsArchive DeepLoadByJobId(System.Int32 _jobId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByJobId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			JobsArchive entity = GetByJobId(_jobId);
			
			//Check to see if entity is not null, before attempting to Deep Load
			if (entity != null)
				DeepLoad(entity, deep, deepLoadType, childTypes);
			
			return entity;
		}
		
		
		#endregion 

		#region DeepLoad By Entity
		/// <summary>
		/// public virtualDeep Load the IEntity object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <param name="entity">JobsArchive Object</param>
		/// <remarks>
		/// <seealso cref="DeepLoad(JobsArchive)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(JobsArchive entity)
		{
			DeepLoad(entity, false, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// public virtualDeep Load the IEntity object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(JobsArchive)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entity">JobsArchive Object</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(JobsArchive entity, bool deep)
		{
			DeepLoad(entity, deep, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
			
		/// <summary>
		/// public virtualDeep Loads the <see cref="IEntity"/> object with criteria based of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <remarks>
		/// Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
		/// </remarks>
		/// <param name="entity">The <see cref="JobsArchive"/> object to load.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
		/// If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">JobsArchive Property Collection Type Array To Include or Exclude from Load</param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(JobsArchive entity, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoad");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.JobsArchiveProvider.DeepLoad(transactionManager, entity, deep, deepLoadType, childTypes);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return;
		}
		#endregion
		
		#region DeepLoad By Entity Collection
		/// <summary>
		/// Deep Loads the <see cref="TList{JobsArchive}" /> object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(JobsArchive)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entityCollection">the <see cref="TList{JobsArchive}" /> Object to deep loads.</param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(TList<JobsArchive> entityCollection)
		{
			DeepLoad(entityCollection, false, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// Deep Loads the <see cref="TList{JobsArchive}" /> object.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(JobsArchive)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entityCollection">the <see cref="TList{JobsArchive}" /> Object to deep loads.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(TList<JobsArchive> entityCollection, bool deep)
		{
			DeepLoad(entityCollection, deep, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}	

		/// <summary>
		/// Deep Loads the entire <see cref="TList{JobsArchive}" /> object with criteria based of the child 
		/// property collections only N Levels Deep based on the DeepLoadType.
		/// </summary>
		/// <remarks>
		/// Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
		/// </remarks>
		/// <param name="entityCollection">The <see cref="TList{JobsArchive}" /> instance to load.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType"><see cref="DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
		///		Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
		///	</param>
		/// <param name="childTypes"><see cref="JobsArchive"/> Property Collection Type Array To Include or Exclude from Load</param>
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public override void DeepLoad(TList<JobsArchive> entityCollection, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{	
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoad");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.JobsArchiveProvider.DeepLoad(transactionManager, entityCollection, deep, deepLoadType, childTypes);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return;		
		}
		#endregion

		#endregion
		
		#region DeepSave
		
		#region DeepSave By Entity
		/// <summary>
		/// public virtualDeep Saves the <see cref="JobsArchive"/> object with all of the child
		/// property collections N Levels Deep.
		/// </summary>
		/// <param name="entity">JobsArchive Object</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(JobsArchive entity)
		{
			return DeepSave(entity, DeepSaveType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// public virtualDeep Saves the entire object graph of the JobsArchive object with criteria based of the child 
		/// Type property array and DeepSaveType.
		/// </summary>
		/// <param name="entity">JobsArchive Object</param>
		/// <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
		/// <param name="childTypes"><c>JobsArchive</c> property Type Array To Include or Exclude from Save</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(JobsArchive entity, DeepSaveType deepSaveType, params System.Type[] childTypes)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepSave");
			
			if (!entity.IsValid)
			{
				throw new EntityNotValidException(entity, "DeepSave");
			}
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				
				result = dataProvider.JobsArchiveProvider.DeepSave(transactionManager, entity, deepSaveType, childTypes);
								
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return result;		
		}
		#endregion
		
		#region DeepSave By Entity Collection
		/// <summary>
		/// Deep Save the entire <see cref="TList{JobsArchive}" /> object with all of the child 
		/// property collections.
		/// </summary>
		/// <param name="entityCollection">TList{JobsArchive} Object</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual bool DeepSave(TList<JobsArchive> entityCollection)
		{
			return DeepSave(entityCollection, DeepSaveType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// Deep Save the entire object graph of the <see cref="TList{JobsArchive}" /> object with criteria based of the child 
		/// property collections.
		/// </summary>
		/// <param name="entityCollection"><see cref="TList{JobsArchive}" /> Object</param>
		/// <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
		/// <param name="childTypes">JobsArchive Property Collection Type Array To Include or Exclude from Save</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(TList<JobsArchive> entityCollection, DeepSaveType deepSaveType, params System.Type[] childTypes)
		{	
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepSave");
			
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "DeepSave");
			}
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.JobsArchiveProvider.DeepSave(transactionManager, entityCollection,  deepSaveType, childTypes);
								
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return result;
		}
		#endregion

		#endregion 

		#endregion Data Access Methods
		
		private void SetDefaultValues(ref JobsArchive entity)
		{
		
		}
		
	
	}//End Class
} // end namespace






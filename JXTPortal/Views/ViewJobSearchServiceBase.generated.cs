
/*
	File generated by NetTiers templates [www.NetTiers.com]
	Important: Do not modify this file. Edit the file ViewJobSearch.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using JXTPortal.Entities;
using JXTPortal.Entities.Validation;
using Entities = JXTPortal.Entities;
using JXTPortal.Data;
using JXTPortal.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace JXTPortal
{		
	
	///<summary>
	/// An object representation of the 'ViewJobSearch' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the ViewJobSearch.cs file instead.
	/// All custom implementations should be done in the <see cref="ViewJobSearch"/> class.
	/// </remarks>
	[DataObject]
	public partial class ViewJobSearchServiceBase : ServiceViewBase<ViewJobSearch>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewJobSearch"/> instance .
		///</summary>
		public ViewJobSearchServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewJobSearch"/> instance.
		///</summary>
		///<param name="_jobId"></param>
		///<param name="_siteId"></param>
		///<param name="_jobName"></param>
		///<param name="_description"></param>
		///<param name="_fullDescription"></param>
		///<param name="_datePosted"></param>
		///<param name="_visible"></param>
		///<param name="_expired"></param>
		///<param name="_showSalaryDetails"></param>
		///<param name="_showSalaryRange"></param>
		///<param name="_salaryText"></param>
		///<param name="_advertiserId"></param>
		///<param name="_applicationMethod"></param>
		///<param name="_applicationUrl"></param>
		///<param name="_advertiserJobTemplateLogoId"></param>
		///<param name="_companyName"></param>
		///<param name="_showLocationDetails"></param>
		///<param name="_bulletPoint1"></param>
		///<param name="_bulletPoint2"></param>
		///<param name="_bulletPoint3"></param>
		///<param name="_hotJob"></param>
		///<param name="_applicationEmailAddress"></param>
		///<param name="_expiryDate"></param>
		///<param name="_contactDetails"></param>
		///<param name="_refNo"></param>
		///<param name="_advertiserName"></param>
		///<param name="_currencySymbol"></param>
		///<param name="_salaryUpperBand"></param>
		///<param name="_salaryLowerBand"></param>
		///<param name="_salaryTypeId"></param>
		///<param name="_salaryTypeName"></param>
		///<param name="_workTypeName"></param>
		///<param name="_countryId"></param>
		///<param name="_locationId"></param>
		///<param name="_areaId"></param>
		///<param name="_countryName"></param>
		///<param name="_locationName"></param>
		///<param name="_areaName"></param>
		///<param name="_professionId"></param>
		///<param name="_roleId"></param>
		///<param name="_siteProfessionName"></param>
		///<param name="_siteRoleName"></param>
		///<param name="_breadCrumbNavigation"></param>
		///<param name="_workTypeId"></param>
		///<param name="_jobFriendlyName"></param>
		///<param name="_salaryDisplay"></param>
		///<param name="_jobItemTypeId"></param>
		///<param name="_jobLatitude"></param>
		///<param name="_jobLongitude"></param>
		///<param name="_addressStatus"></param>
		///<param name="_hasAdvertiserLogo"></param>
		///<param name="_customXml"></param>
		///<param name="_address"></param>
		///<param name="_publicTransport"></param>
		public static ViewJobSearch CreateViewJobSearch(System.Int32 _jobId, System.Int32 _siteId, System.String _jobName, System.String _description, System.String _fullDescription, System.DateTime _datePosted, System.Boolean _visible, System.Int32? _expired, System.Boolean _showSalaryDetails, System.Boolean _showSalaryRange, System.String _salaryText, System.Int32? _advertiserId, System.Int32? _applicationMethod, System.String _applicationUrl, System.Int32? _advertiserJobTemplateLogoId, System.String _companyName, System.Boolean? _showLocationDetails, System.String _bulletPoint1, System.String _bulletPoint2, System.String _bulletPoint3, System.Boolean _hotJob, System.String _applicationEmailAddress, System.DateTime _expiryDate, System.String _contactDetails, System.String _refNo, System.String _advertiserName, System.String _currencySymbol, System.Decimal _salaryUpperBand, System.Decimal _salaryLowerBand, System.Int32 _salaryTypeId, System.String _salaryTypeName, System.String _workTypeName, System.Int32 _countryId, System.Int32 _locationId, System.Int32 _areaId, System.String _countryName, System.String _locationName, System.String _areaName, System.Int32 _professionId, System.Int32 _roleId, System.String _siteProfessionName, System.String _siteRoleName, System.String _breadCrumbNavigation, System.Int32 _workTypeId, System.String _jobFriendlyName, System.String _salaryDisplay, System.Int32? _jobItemTypeId, System.Double? _jobLatitude, System.Double? _jobLongitude, System.Int32? _addressStatus, System.Int32 _hasAdvertiserLogo, System.String _customXml, System.String _address, System.String _publicTransport)
		{
			ViewJobSearch newEntityViewJobSearch = new ViewJobSearch();
			newEntityViewJobSearch.JobId  = _jobId;
			newEntityViewJobSearch.SiteId  = _siteId;
			newEntityViewJobSearch.JobName  = _jobName;
			newEntityViewJobSearch.Description  = _description;
			newEntityViewJobSearch.FullDescription  = _fullDescription;
			newEntityViewJobSearch.DatePosted  = _datePosted;
			newEntityViewJobSearch.Visible  = _visible;
			newEntityViewJobSearch.Expired  = _expired;
			newEntityViewJobSearch.ShowSalaryDetails  = _showSalaryDetails;
			newEntityViewJobSearch.ShowSalaryRange  = _showSalaryRange;
			newEntityViewJobSearch.SalaryText  = _salaryText;
			newEntityViewJobSearch.AdvertiserId  = _advertiserId;
			newEntityViewJobSearch.ApplicationMethod  = _applicationMethod;
			newEntityViewJobSearch.ApplicationUrl  = _applicationUrl;
			newEntityViewJobSearch.AdvertiserJobTemplateLogoId  = _advertiserJobTemplateLogoId;
			newEntityViewJobSearch.CompanyName  = _companyName;
			newEntityViewJobSearch.ShowLocationDetails  = _showLocationDetails;
			newEntityViewJobSearch.BulletPoint1  = _bulletPoint1;
			newEntityViewJobSearch.BulletPoint2  = _bulletPoint2;
			newEntityViewJobSearch.BulletPoint3  = _bulletPoint3;
			newEntityViewJobSearch.HotJob  = _hotJob;
			newEntityViewJobSearch.ApplicationEmailAddress  = _applicationEmailAddress;
			newEntityViewJobSearch.ExpiryDate  = _expiryDate;
			newEntityViewJobSearch.ContactDetails  = _contactDetails;
			newEntityViewJobSearch.RefNo  = _refNo;
			newEntityViewJobSearch.AdvertiserName  = _advertiserName;
			newEntityViewJobSearch.CurrencySymbol  = _currencySymbol;
			newEntityViewJobSearch.SalaryUpperBand  = _salaryUpperBand;
			newEntityViewJobSearch.SalaryLowerBand  = _salaryLowerBand;
			newEntityViewJobSearch.SalaryTypeId  = _salaryTypeId;
			newEntityViewJobSearch.SalaryTypeName  = _salaryTypeName;
			newEntityViewJobSearch.WorkTypeName  = _workTypeName;
			newEntityViewJobSearch.CountryId  = _countryId;
			newEntityViewJobSearch.LocationId  = _locationId;
			newEntityViewJobSearch.AreaId  = _areaId;
			newEntityViewJobSearch.CountryName  = _countryName;
			newEntityViewJobSearch.LocationName  = _locationName;
			newEntityViewJobSearch.AreaName  = _areaName;
			newEntityViewJobSearch.ProfessionId  = _professionId;
			newEntityViewJobSearch.RoleId  = _roleId;
			newEntityViewJobSearch.SiteProfessionName  = _siteProfessionName;
			newEntityViewJobSearch.SiteRoleName  = _siteRoleName;
			newEntityViewJobSearch.BreadCrumbNavigation  = _breadCrumbNavigation;
			newEntityViewJobSearch.WorkTypeId  = _workTypeId;
			newEntityViewJobSearch.JobFriendlyName  = _jobFriendlyName;
			newEntityViewJobSearch.SalaryDisplay  = _salaryDisplay;
			newEntityViewJobSearch.JobItemTypeId  = _jobItemTypeId;
			newEntityViewJobSearch.JobLatitude  = _jobLatitude;
			newEntityViewJobSearch.JobLongitude  = _jobLongitude;
			newEntityViewJobSearch.AddressStatus  = _addressStatus;
			newEntityViewJobSearch.HasAdvertiserLogo  = _hasAdvertiserLogo;
			newEntityViewJobSearch.CustomXml  = _customXml;
			newEntityViewJobSearch.Address  = _address;
			newEntityViewJobSearch.PublicTransport  = _publicTransport;
			return newEntityViewJobSearch;
		}
		#endregion Constructors

		#region Fields
		//private static SecurityContext<ViewJobSearch> securityContext = new SecurityContext<ViewJobSearch>();
		private static readonly string layerExceptionPolicy = "NoneExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 10000;
		#endregion 
		
		#region Data Access Methods
			
		#region Get 
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public override VList<ViewJobSearch> Get(string whereClause, string orderBy)
		{
			int totalCount = -1;
			return Get(whereClause, orderBy, 0, defaultMaxRecords, out totalCount);
		}

		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{ViewJobSearch} of <c>ViewJobSearch</c> objects.</returns>
		public override VList<ViewJobSearch> Get(string whereClause, string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
								
			// get this data
			VList<ViewJobSearch> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewJobSearchProvider.Get(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion Get Methods
		
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="ViewJobSearch" /> entities.
		/// </summary>
		/// <returns></returns>
		public virtual VList<ViewJobSearch> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

       
		/// <summary>
		/// Get a set portion of a complete list of <see cref="ViewJobSearch" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{ViewJobSearch}"/> </returns>
		public override VList<ViewJobSearch> GetAll(int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			VList<ViewJobSearch> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.ViewJobSearchProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{ViewJobSearch}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewJobSearch</c> objects.</returns>
		public virtual VList<ViewJobSearch> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{ViewJobSearch}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewJobSearch</c> objects.</returns>
		public virtual VList<ViewJobSearch> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{ViewJobSearch}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewJobSearch</c> objects.</returns>
		public override VList<ViewJobSearch> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			VList<ViewJobSearch> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewJobSearchProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	

		#region Find Methods

		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>ViewJobSearch</c> objects.</returns>
		public virtual VList<ViewJobSearch> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, null);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>ViewJobSearch</c> objects.</returns>
		public virtual VList<ViewJobSearch> Find(IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return Find(parameters, orderBy, 0, defaultMaxRecords, out count);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>ViewJobSearch</c> objects.</returns>
		public override VList<ViewJobSearch> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Find");
								
			// get this data
			TransactionManager transactionManager = null; 
			VList<ViewJobSearch> list = null;
			count = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewJobSearchProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return list;
		}
		
		#endregion Find Methods
		
		#region Custom Methods
		
		#region ViewJobSearch_GetBySearchFilter
		/// <summary>
		///	This method wrap the 'ViewJobSearch_GetBySearchFilter' stored procedure. 
		/// </summary>
		/// <param name="keyword"> A <c>System.String</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="professionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="roleId"> A <c>System.String</c> instance.</param>
		/// <param name="countryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="locationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="areaId"> A <c>System.String</c> instance.</param>
		/// <param name="dateFrom"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="jobTypeIds"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewJobSearch}"/> instance.</returns>
		public virtual VList<ViewJobSearch> GetBySearchFilter(System.String keyword, System.Int32? siteId, System.Int32? advertiserId, System.Int32? currencyId, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? salaryTypeId, System.Int32? workTypeId, System.Int32? professionId, System.String roleId, System.Int32? countryId, System.Int32? locationId, System.String areaId, System.DateTime? dateFrom, System.Int32? pageIndex, System.Int32? pageSize, System.String orderBy, System.String jobTypeIds)
		{
			return GetBySearchFilter( keyword, siteId, advertiserId, currencyId, salaryLowerBand, salaryUpperBand, salaryTypeId, workTypeId, professionId, roleId, countryId, locationId, areaId, dateFrom, pageIndex, pageSize, orderBy, jobTypeIds, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'ViewJobSearch_GetBySearchFilter' stored procedure. 
		/// </summary>
		/// <param name="keyword"> A <c>System.String</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="professionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="roleId"> A <c>System.String</c> instance.</param>
		/// <param name="countryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="locationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="areaId"> A <c>System.String</c> instance.</param>
		/// <param name="dateFrom"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="pageIndex"> A <c>System.Int32?</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="jobTypeIds"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewJobSearch}"/> instance.</returns>
		public virtual VList<ViewJobSearch> GetBySearchFilter(System.String keyword, System.Int32? siteId, System.Int32? advertiserId, System.Int32? currencyId, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? salaryTypeId, System.Int32? workTypeId, System.Int32? professionId, System.String roleId, System.Int32? countryId, System.Int32? locationId, System.String areaId, System.DateTime? dateFrom, System.Int32? pageIndex, System.Int32? pageSize, System.String orderBy, System.String jobTypeIds, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetBySearchFilter");
			
		
			VList<ViewJobSearch> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewJobSearchProvider.GetBySearchFilter(transactionManager, start, pageLength , keyword, siteId, advertiserId, currencyId, salaryLowerBand, salaryUpperBand, salaryTypeId, workTypeId, professionId, roleId, countryId, locationId, areaId, dateFrom, pageIndex, pageSize, orderBy, jobTypeIds);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region ViewJobSearch_GetPremiumSearchFilter
		/// <summary>
		///	This method wrap the 'ViewJobSearch_GetPremiumSearchFilter' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="professionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="roleId"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewJobSearch}"/> instance.</returns>
		public virtual VList<ViewJobSearch> GetPremiumSearchFilter(System.Int32? siteId, System.Int32? professionId, System.String roleId, System.String orderBy, System.Int32? pageSize)
		{
			return GetPremiumSearchFilter( siteId, professionId, roleId, orderBy, pageSize, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'ViewJobSearch_GetPremiumSearchFilter' stored procedure. 
		/// </summary>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="professionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="roleId"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="pageSize"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewJobSearch}"/> instance.</returns>
		public virtual VList<ViewJobSearch> GetPremiumSearchFilter(System.Int32? siteId, System.Int32? professionId, System.String roleId, System.String orderBy, System.Int32? pageSize, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetPremiumSearchFilter");
			
		
			VList<ViewJobSearch> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewJobSearchProvider.GetPremiumSearchFilter(transactionManager, start, pageLength , siteId, professionId, roleId, orderBy, pageSize);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region ViewJobSearch_Get_List
		/// <summary>
		///	This method wrap the 'ViewJobSearch_Get_List' stored procedure. 
		/// </summary>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual DataSet Get_List()
		{
			return Get_List( 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'ViewJobSearch_Get_List' stored procedure. 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual DataSet Get_List(int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get_List");
			
		
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewJobSearchProvider.Get_List(transactionManager, start, pageLength );
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region ViewJobSearch_GetBySearchFilterGoogleMap
		/// <summary>
		///	This method wrap the 'ViewJobSearch_GetBySearchFilterGoogleMap' stored procedure. 
		/// </summary>
		/// <param name="keyword"> A <c>System.String</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="professionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="roleId"> A <c>System.String</c> instance.</param>
		/// <param name="countryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="locationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="areaId"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="jobTypeIds"> A <c>System.String</c> instance.</param>
		/// <param name="northEastLat"> A <c>System.Double?</c> instance.</param>
		/// <param name="northEastLng"> A <c>System.Double?</c> instance.</param>
		/// <param name="southWestLat"> A <c>System.Double?</c> instance.</param>
		/// <param name="southWestLng"> A <c>System.Double?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewJobSearch}"/> instance.</returns>
		public virtual VList<ViewJobSearch> GetBySearchFilterGoogleMap(System.String keyword, System.Int32? siteId, System.Int32? advertiserId, System.Int32? currencyId, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? salaryTypeId, System.Int32? workTypeId, System.Int32? professionId, System.String roleId, System.Int32? countryId, System.Int32? locationId, System.String areaId, System.String orderBy, System.String jobTypeIds, System.Double? northEastLat, System.Double? northEastLng, System.Double? southWestLat, System.Double? southWestLng)
		{
			return GetBySearchFilterGoogleMap( keyword, siteId, advertiserId, currencyId, salaryLowerBand, salaryUpperBand, salaryTypeId, workTypeId, professionId, roleId, countryId, locationId, areaId, orderBy, jobTypeIds, northEastLat, northEastLng, southWestLat, southWestLng, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'ViewJobSearch_GetBySearchFilterGoogleMap' stored procedure. 
		/// </summary>
		/// <param name="keyword"> A <c>System.String</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="professionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="roleId"> A <c>System.String</c> instance.</param>
		/// <param name="countryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="locationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="areaId"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="jobTypeIds"> A <c>System.String</c> instance.</param>
		/// <param name="northEastLat"> A <c>System.Double?</c> instance.</param>
		/// <param name="northEastLng"> A <c>System.Double?</c> instance.</param>
		/// <param name="southWestLat"> A <c>System.Double?</c> instance.</param>
		/// <param name="southWestLng"> A <c>System.Double?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewJobSearch}"/> instance.</returns>
		public virtual VList<ViewJobSearch> GetBySearchFilterGoogleMap(System.String keyword, System.Int32? siteId, System.Int32? advertiserId, System.Int32? currencyId, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? salaryTypeId, System.Int32? workTypeId, System.Int32? professionId, System.String roleId, System.Int32? countryId, System.Int32? locationId, System.String areaId, System.String orderBy, System.String jobTypeIds, System.Double? northEastLat, System.Double? northEastLng, System.Double? southWestLat, System.Double? southWestLng, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetBySearchFilterGoogleMap");
			
		
			VList<ViewJobSearch> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewJobSearchProvider.GetBySearchFilterGoogleMap(transactionManager, start, pageLength , keyword, siteId, advertiserId, currencyId, salaryLowerBand, salaryUpperBand, salaryTypeId, workTypeId, professionId, roleId, countryId, locationId, areaId, orderBy, jobTypeIds, northEastLat, northEastLng, southWestLat, southWestLng);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region ViewJobSearch_GetBySearchFilterRedefine
		/// <summary>
		///	This method wrap the 'ViewJobSearch_GetBySearchFilterRedefine' stored procedure. 
		/// </summary>
		/// <param name="keyword"> A <c>System.String</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="professionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="roleId"> A <c>System.String</c> instance.</param>
		/// <param name="countryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="locationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="areaId"> A <c>System.String</c> instance.</param>
		/// <param name="dateFrom"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="jobTypeIds"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual DataSet GetBySearchFilterRedefine(System.String keyword, System.Int32? siteId, System.Int32? advertiserId, System.Int32? currencyId, System.Int32? salaryTypeId, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? workTypeId, System.Int32? professionId, System.String roleId, System.Int32? countryId, System.Int32? locationId, System.String areaId, System.DateTime? dateFrom, System.String jobTypeIds)
		{
			return GetBySearchFilterRedefine( keyword, siteId, advertiserId, currencyId, salaryTypeId, salaryLowerBand, salaryUpperBand, workTypeId, professionId, roleId, countryId, locationId, areaId, dateFrom, jobTypeIds, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'ViewJobSearch_GetBySearchFilterRedefine' stored procedure. 
		/// </summary>
		/// <param name="keyword"> A <c>System.String</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="advertiserId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="currencyId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="salaryLowerBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="salaryUpperBand"> A <c>System.Decimal?</c> instance.</param>
		/// <param name="workTypeId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="professionId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="roleId"> A <c>System.String</c> instance.</param>
		/// <param name="countryId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="locationId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="areaId"> A <c>System.String</c> instance.</param>
		/// <param name="dateFrom"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="jobTypeIds"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual DataSet GetBySearchFilterRedefine(System.String keyword, System.Int32? siteId, System.Int32? advertiserId, System.Int32? currencyId, System.Int32? salaryTypeId, System.Decimal? salaryLowerBand, System.Decimal? salaryUpperBand, System.Int32? workTypeId, System.Int32? professionId, System.String roleId, System.Int32? countryId, System.Int32? locationId, System.String areaId, System.DateTime? dateFrom, System.String jobTypeIds, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetBySearchFilterRedefine");
			
		
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewJobSearchProvider.GetBySearchFilterRedefine(transactionManager, start, pageLength , keyword, siteId, advertiserId, currencyId, salaryTypeId, salaryLowerBand, salaryUpperBand, workTypeId, professionId, roleId, countryId, locationId, areaId, dateFrom, jobTypeIds);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region ViewJobSearch_Get
	
		/// <summary>
		///	This method wrap the 'ViewJobSearch_Get' stored procedure. 
		/// </summary>
		/// <param name="whereClause"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual DataSet Get(System.String whereClause, System.String orderBy, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
			
		
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewJobSearchProvider.Get(transactionManager, start, pageLength , whereClause, orderBy);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		#endregion
		
		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace




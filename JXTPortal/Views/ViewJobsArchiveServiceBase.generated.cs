
/*
	File generated by NetTiers templates [www.NetTiers.com]
	Important: Do not modify this file. Edit the file ViewJobsArchive.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using JXTPortal.Entities;
using JXTPortal.Entities.Validation;
using Entities = JXTPortal.Entities;
using JXTPortal.Data;
using JXTPortal.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace JXTPortal
{		
	
	///<summary>
	/// An object representation of the 'ViewJobsArchive' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the ViewJobsArchive.cs file instead.
	/// All custom implementations should be done in the <see cref="ViewJobsArchive"/> class.
	/// </remarks>
	[DataObject]
	public partial class ViewJobsArchiveServiceBase : ServiceViewBase<ViewJobsArchive>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewJobsArchive"/> instance .
		///</summary>
		public ViewJobsArchiveServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewJobsArchive"/> instance.
		///</summary>
		///<param name="_jobId"></param>
		///<param name="_siteId"></param>
		///<param name="_workTypeId"></param>
		///<param name="_jobName"></param>
		///<param name="_description"></param>
		///<param name="_fullDescription"></param>
		///<param name="_webServiceProcessed"></param>
		///<param name="_applicationEmailAddress"></param>
		///<param name="_refNo"></param>
		///<param name="_visible"></param>
		///<param name="_datePosted"></param>
		///<param name="_expiryDate"></param>
		///<param name="_expired"></param>
		///<param name="_jobItemPrice"></param>
		///<param name="_billed"></param>
		///<param name="_lastModified"></param>
		///<param name="_showSalaryDetails"></param>
		///<param name="_showSalaryRange"></param>
		///<param name="_salaryText"></param>
		///<param name="_advertiserId"></param>
		///<param name="_lastModifiedByAdvertiserUserId"></param>
		///<param name="_lastModifiedByAdminUserId"></param>
		///<param name="_jobItemTypeId"></param>
		///<param name="_applicationMethod"></param>
		///<param name="_applicationUrl"></param>
		///<param name="_uploadMethod"></param>
		///<param name="_tags"></param>
		///<param name="_jobTemplateId"></param>
		///<param name="_searchField"></param>
		///<param name="_advertiserJobTemplateLogoId"></param>
		///<param name="_companyName"></param>
		///<param name="_hashValue"></param>
		///<param name="_requireLogonForExternalApplications"></param>
		///<param name="_showLocationDetails"></param>
		///<param name="_publicTransport"></param>
		///<param name="_address"></param>
		///<param name="_contactDetails"></param>
		///<param name="_jobContactPhone"></param>
		///<param name="_jobContactName"></param>
		///<param name="_qualificationsRecognised"></param>
		///<param name="_residentOnly"></param>
		///<param name="_documentLink"></param>
		///<param name="_bulletPoint1"></param>
		///<param name="_bulletPoint2"></param>
		///<param name="_bulletPoint3"></param>
		///<param name="_hotJob"></param>
		///<param name="_advertiserCompanyName"></param>
		///<param name="_businessNumber"></param>
		///<param name="_streetAddress1"></param>
		///<param name="_streetAddress2"></param>
		///<param name="_webAddress"></param>
		///<param name="_profile"></param>
		///<param name="_requireLogonForExternalApplication"></param>
		///<param name="_advertiserLogo"></param>
		///<param name="_siteWorkTypeName"></param>
		///<param name="_currencySymbol"></param>
		///<param name="_salaryUpperBand"></param>
		///<param name="_salaryLowerBand"></param>
		///<param name="_salaryTypeId"></param>
		///<param name="_jobTemplateHtml"></param>
		///<param name="_salaryTypeName"></param>
		///<param name="_siteAreaName"></param>
		///<param name="_siteLocationName"></param>
		///<param name="_siteRoleName"></param>
		///<param name="_siteProfessionName"></param>
		///<param name="_jobFriendlyName"></param>
		///<param name="_professionId"></param>
		///<param name="_roleId"></param>
		///<param name="_locationId"></param>
		///<param name="_areaId"></param>
		///<param name="_salaryDisplay"></param>
		public static ViewJobsArchive CreateViewJobsArchive(System.Int32 _jobId, System.Int32 _siteId, System.Int32 _workTypeId, System.String _jobName, System.String _description, System.String _fullDescription, System.Boolean _webServiceProcessed, System.String _applicationEmailAddress, System.String _refNo, System.Boolean _visible, System.DateTime _datePosted, System.DateTime _expiryDate, System.Int32? _expired, System.Decimal? _jobItemPrice, System.Boolean _billed, System.DateTime _lastModified, System.Boolean _showSalaryDetails, System.Boolean _showSalaryRange, System.String _salaryText, System.Int32? _advertiserId, System.Int32? _lastModifiedByAdvertiserUserId, System.Int32? _lastModifiedByAdminUserId, System.Int32? _jobItemTypeId, System.Int32? _applicationMethod, System.String _applicationUrl, System.Int32? _uploadMethod, System.String _tags, System.Int32? _jobTemplateId, System.String _searchField, System.Int32? _advertiserJobTemplateLogoId, System.String _companyName, System.Byte[] _hashValue, System.Boolean _requireLogonForExternalApplications, System.Boolean? _showLocationDetails, System.String _publicTransport, System.String _address, System.String _contactDetails, System.String _jobContactPhone, System.String _jobContactName, System.Boolean _qualificationsRecognised, System.Boolean _residentOnly, System.String _documentLink, System.String _bulletPoint1, System.String _bulletPoint2, System.String _bulletPoint3, System.Boolean _hotJob, System.String _advertiserCompanyName, System.String _businessNumber, System.String _streetAddress1, System.String _streetAddress2, System.String _webAddress, System.String _profile, System.Boolean _requireLogonForExternalApplication, System.Byte[] _advertiserLogo, System.String _siteWorkTypeName, System.String _currencySymbol, System.Decimal _salaryUpperBand, System.Decimal _salaryLowerBand, System.Int32 _salaryTypeId, System.String _jobTemplateHtml, System.String _salaryTypeName, System.String _siteAreaName, System.String _siteLocationName, System.String _siteRoleName, System.String _siteProfessionName, System.String _jobFriendlyName, System.Int32 _professionId, System.Int32 _roleId, System.Int32 _locationId, System.Int32 _areaId, System.String _salaryDisplay)
		{
			ViewJobsArchive newEntityViewJobsArchive = new ViewJobsArchive();
			newEntityViewJobsArchive.JobId  = _jobId;
			newEntityViewJobsArchive.SiteId  = _siteId;
			newEntityViewJobsArchive.WorkTypeId  = _workTypeId;
			newEntityViewJobsArchive.JobName  = _jobName;
			newEntityViewJobsArchive.Description  = _description;
			newEntityViewJobsArchive.FullDescription  = _fullDescription;
			newEntityViewJobsArchive.WebServiceProcessed  = _webServiceProcessed;
			newEntityViewJobsArchive.ApplicationEmailAddress  = _applicationEmailAddress;
			newEntityViewJobsArchive.RefNo  = _refNo;
			newEntityViewJobsArchive.Visible  = _visible;
			newEntityViewJobsArchive.DatePosted  = _datePosted;
			newEntityViewJobsArchive.ExpiryDate  = _expiryDate;
			newEntityViewJobsArchive.Expired  = _expired;
			newEntityViewJobsArchive.JobItemPrice  = _jobItemPrice;
			newEntityViewJobsArchive.Billed  = _billed;
			newEntityViewJobsArchive.LastModified  = _lastModified;
			newEntityViewJobsArchive.ShowSalaryDetails  = _showSalaryDetails;
			newEntityViewJobsArchive.ShowSalaryRange  = _showSalaryRange;
			newEntityViewJobsArchive.SalaryText  = _salaryText;
			newEntityViewJobsArchive.AdvertiserId  = _advertiserId;
			newEntityViewJobsArchive.LastModifiedByAdvertiserUserId  = _lastModifiedByAdvertiserUserId;
			newEntityViewJobsArchive.LastModifiedByAdminUserId  = _lastModifiedByAdminUserId;
			newEntityViewJobsArchive.JobItemTypeId  = _jobItemTypeId;
			newEntityViewJobsArchive.ApplicationMethod  = _applicationMethod;
			newEntityViewJobsArchive.ApplicationUrl  = _applicationUrl;
			newEntityViewJobsArchive.UploadMethod  = _uploadMethod;
			newEntityViewJobsArchive.Tags  = _tags;
			newEntityViewJobsArchive.JobTemplateId  = _jobTemplateId;
			newEntityViewJobsArchive.SearchField  = _searchField;
			newEntityViewJobsArchive.AdvertiserJobTemplateLogoId  = _advertiserJobTemplateLogoId;
			newEntityViewJobsArchive.CompanyName  = _companyName;
			newEntityViewJobsArchive.HashValue  = _hashValue;
			newEntityViewJobsArchive.RequireLogonForExternalApplications  = _requireLogonForExternalApplications;
			newEntityViewJobsArchive.ShowLocationDetails  = _showLocationDetails;
			newEntityViewJobsArchive.PublicTransport  = _publicTransport;
			newEntityViewJobsArchive.Address  = _address;
			newEntityViewJobsArchive.ContactDetails  = _contactDetails;
			newEntityViewJobsArchive.JobContactPhone  = _jobContactPhone;
			newEntityViewJobsArchive.JobContactName  = _jobContactName;
			newEntityViewJobsArchive.QualificationsRecognised  = _qualificationsRecognised;
			newEntityViewJobsArchive.ResidentOnly  = _residentOnly;
			newEntityViewJobsArchive.DocumentLink  = _documentLink;
			newEntityViewJobsArchive.BulletPoint1  = _bulletPoint1;
			newEntityViewJobsArchive.BulletPoint2  = _bulletPoint2;
			newEntityViewJobsArchive.BulletPoint3  = _bulletPoint3;
			newEntityViewJobsArchive.HotJob  = _hotJob;
			newEntityViewJobsArchive.AdvertiserCompanyName  = _advertiserCompanyName;
			newEntityViewJobsArchive.BusinessNumber  = _businessNumber;
			newEntityViewJobsArchive.StreetAddress1  = _streetAddress1;
			newEntityViewJobsArchive.StreetAddress2  = _streetAddress2;
			newEntityViewJobsArchive.WebAddress  = _webAddress;
			newEntityViewJobsArchive.Profile  = _profile;
			newEntityViewJobsArchive.RequireLogonForExternalApplication  = _requireLogonForExternalApplication;
			newEntityViewJobsArchive.AdvertiserLogo  = _advertiserLogo;
			newEntityViewJobsArchive.SiteWorkTypeName  = _siteWorkTypeName;
			newEntityViewJobsArchive.CurrencySymbol  = _currencySymbol;
			newEntityViewJobsArchive.SalaryUpperBand  = _salaryUpperBand;
			newEntityViewJobsArchive.SalaryLowerBand  = _salaryLowerBand;
			newEntityViewJobsArchive.SalaryTypeId  = _salaryTypeId;
			newEntityViewJobsArchive.JobTemplateHtml  = _jobTemplateHtml;
			newEntityViewJobsArchive.SalaryTypeName  = _salaryTypeName;
			newEntityViewJobsArchive.SiteAreaName  = _siteAreaName;
			newEntityViewJobsArchive.SiteLocationName  = _siteLocationName;
			newEntityViewJobsArchive.SiteRoleName  = _siteRoleName;
			newEntityViewJobsArchive.SiteProfessionName  = _siteProfessionName;
			newEntityViewJobsArchive.JobFriendlyName  = _jobFriendlyName;
			newEntityViewJobsArchive.ProfessionId  = _professionId;
			newEntityViewJobsArchive.RoleId  = _roleId;
			newEntityViewJobsArchive.LocationId  = _locationId;
			newEntityViewJobsArchive.AreaId  = _areaId;
			newEntityViewJobsArchive.SalaryDisplay  = _salaryDisplay;
			return newEntityViewJobsArchive;
		}
		#endregion Constructors

		#region Fields
		//private static SecurityContext<ViewJobsArchive> securityContext = new SecurityContext<ViewJobsArchive>();
		private static readonly string layerExceptionPolicy = "NoneExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 10000;
		#endregion 
		
		#region Data Access Methods
			
		#region Get 
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public override VList<ViewJobsArchive> Get(string whereClause, string orderBy)
		{
			int totalCount = -1;
			return Get(whereClause, orderBy, 0, defaultMaxRecords, out totalCount);
		}

		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{ViewJobsArchive} of <c>ViewJobsArchive</c> objects.</returns>
		public override VList<ViewJobsArchive> Get(string whereClause, string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
								
			// get this data
			VList<ViewJobsArchive> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewJobsArchiveProvider.Get(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion Get Methods
		
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="ViewJobsArchive" /> entities.
		/// </summary>
		/// <returns></returns>
		public virtual VList<ViewJobsArchive> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

       
		/// <summary>
		/// Get a set portion of a complete list of <see cref="ViewJobsArchive" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{ViewJobsArchive}"/> </returns>
		public override VList<ViewJobsArchive> GetAll(int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			VList<ViewJobsArchive> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.ViewJobsArchiveProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{ViewJobsArchive}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewJobsArchive</c> objects.</returns>
		public virtual VList<ViewJobsArchive> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{ViewJobsArchive}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewJobsArchive</c> objects.</returns>
		public virtual VList<ViewJobsArchive> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{ViewJobsArchive}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewJobsArchive</c> objects.</returns>
		public override VList<ViewJobsArchive> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			VList<ViewJobsArchive> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewJobsArchiveProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	

		#region Find Methods

		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>ViewJobsArchive</c> objects.</returns>
		public virtual VList<ViewJobsArchive> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, null);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>ViewJobsArchive</c> objects.</returns>
		public virtual VList<ViewJobsArchive> Find(IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return Find(parameters, orderBy, 0, defaultMaxRecords, out count);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>ViewJobsArchive</c> objects.</returns>
		public override VList<ViewJobsArchive> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Find");
								
			// get this data
			TransactionManager transactionManager = null; 
			VList<ViewJobsArchive> list = null;
			count = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewJobsArchiveProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return list;
		}
		
		#endregion Find Methods
		
		#region Custom Methods
		
		#region ViewJobsArchive_GetByID
		/// <summary>
		///	This method wrap the 'ViewJobsArchive_GetByID' stored procedure. 
		/// </summary>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewJobsArchive}"/> instance.</returns>
		public virtual VList<ViewJobsArchive> GetByID(System.Int32? jobId, System.Int32? siteId)
		{
			return GetByID( jobId, siteId, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'ViewJobsArchive_GetByID' stored procedure. 
		/// </summary>
		/// <param name="jobId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="siteId"> A <c>System.Int32?</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewJobsArchive}"/> instance.</returns>
		public virtual VList<ViewJobsArchive> GetByID(System.Int32? jobId, System.Int32? siteId, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetByID");
			
		
			VList<ViewJobsArchive> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewJobsArchiveProvider.GetByID(transactionManager, start, pageLength , jobId, siteId);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region ViewJobsArchive_Get_List
		/// <summary>
		///	This method wrap the 'ViewJobsArchive_Get_List' stored procedure. 
		/// </summary>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual DataSet Get_List()
		{
			return Get_List( 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'ViewJobsArchive_Get_List' stored procedure. 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual DataSet Get_List(int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get_List");
			
		
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewJobsArchiveProvider.Get_List(transactionManager, start, pageLength );
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region ViewJobsArchive_Get
	
		/// <summary>
		///	This method wrap the 'ViewJobsArchive_Get' stored procedure. 
		/// </summary>
		/// <param name="whereClause"> A <c>System.String</c> instance.</param>
		/// <param name="orderBy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public virtual DataSet Get(System.String whereClause, System.String orderBy, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
			
		
			DataSet result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewJobsArchiveProvider.Get(transactionManager, start, pageLength , whereClause, orderBy);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		#endregion
		
		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace




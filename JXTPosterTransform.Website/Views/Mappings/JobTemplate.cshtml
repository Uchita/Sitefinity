@{
    ViewBag.Title = "JobTemplate";

    JobTemplateMap defaultSetting = Model.Mappings.Where(c => c.isDefaultSetting).FirstOrDefault();
}
@using JXTPosterTransform.Library.Models
@model JobTemplateMappingModel
@{
    Html.RenderPartial("~/Views/Mappings/_MappingsNavigation2.cshtml");
}
<div class="">
    <h1 class="page-header">
        Job Template</h1>
    <div class="pull-right">
        <span class="pull-right btn btn-success fileinput-button">
            <!-- The file input field used as target for the file upload widget -->
            <input id="fileupload" type="file" name="files[]" />
        </span>
        <div class="clearfix">
        </div>
        <p>
            <i>Accepts xls &amp; xlsx only. First column will be imported.</i></p>
    </div>
    <div class="clearfix">
    </div>
    @Html.Raw(TempData["Message"])
    @Html.Raw(ViewBag.Message)
    <div id="jsMessage">
    </div>
</div>
@{ int counter = 0; }
@if (Model.availableJobTemplates == null)
{
    <div class="alert alert-warning">
        Failed to retreive available job templates defaults.
    </div>
}
else
{
    <form method="post" action="@Request.Url" onsubmit="return ValidateMappingSelection(this);">
    <table id="dataTable" class="table table-striped table-bordered table-hover dataTable no-footer">
        <thead>
            <tr>
                <th>
                    From Job Template Value
                </th>
                <th>
                    JXT Job Template <a href="javascript:void(0)" class="pull-right" onclick="SortByJobTemplate()">
                        <i class="fa fa-sort-alpha-asc"></i></a>
                </th>
                <th>
                    JXT Job Template ID
                </th>
                <th>
                    Actions
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Mappings == null || Model.Mappings.Count() == 0)
            {
                <tr class="dataRow">
                    <td>
                        <input type="text" name="submit[@(counter)].ClientJobTemplateID" class="form-control" placeholder="Template mapping" />
                        @Html.ValidationMessage("submit[" + counter + "].ClientJobTemplateID")
                    </td>
                    <td>
                        <select name="submit[@(counter)].MapToJobTemplateID" class="form-control mappingSelect" onchange="UpdateIDFromDropDown(this, '.idDisplay'); MappingSelectOnChange(this);">
                            <option value="-1">Please select...</option>
                            @if (Model.availableJobTemplates != null)
                            {
                                foreach (JobTemplateAvailable w in Model.availableJobTemplates)
                                {
                                <option value="@w.MapToJobTemplateID">@w.MapToJobTemplateDescription</option>
                                }
                            }
                        </select>
                    </td>
                    <td class="idDisplay">
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger" onclick="ClearDataRow(this);">
                            Clear</button>
                    </td>
                </tr>
                            counter++;

            }
            else
            {

                foreach (JobTemplateMap m in Model.Mappings.Where(c => !c.isDefaultSetting))
                {
                <tr class="dataRow">
                    <td>
                        <input type="text" name="submit[@(counter)].ClientJobTemplateID" class="form-control" value="@m.ClientJobTemplateID"/>
                        @Html.ValidationMessage("submit[" + counter + "].ClientJobTemplateID")
                    </td>
                    <td>
                        <select name="submit[@(counter)].MapToJobTemplateID" class="form-control mappingSelect" onchange="UpdateIDFromDropDown(this, '.idDisplay'); MappingSelectOnChange(this);">
                            <option value="-1">Please select...</option>
                            @if (Model.availableJobTemplates != null)
                            {
                                foreach (JobTemplateAvailable w in Model.availableJobTemplates)
                                {
                                <option value="@w.MapToJobTemplateID" @(new MvcHtmlString(m.MapToJobTemplateID == w.MapToJobTemplateID ? @"selected=""selected""" : string.Empty))>@w.MapToJobTemplateDescription</option>
                                }

                            }
                        </select>
                    </td>
                    <td class="idDisplay">
                        @m.MapToJobTemplateID
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger" onclick="ClearDataRow(this);">
                            Clear</button>
                    </td>
                </tr>
                            counter++;
                }
            }
            @*<tr class="dataRow defaultRow">
                <td class="text-right">
                    Default Mapping
                </td>
                <td>
                    <input type="hidden" name="submit[@(counter)].isDefaultSetting" value="true" />
                    <select name="submit[@(counter)].MapToJobTemplateID" class="form-control" onchange="UpdateIDFromDropDown(this, '.idDisplay')">
                        <option value="-1">Please select...</option>
                        @foreach (JobTemplateAvailable w in Model.availableJobTemplates)
                        {
                            <option value="@w.MapToJobTemplateID" @(new MvcHtmlString(defaultSetting != null && defaultSetting.MapToJobTemplateID == w.MapToJobTemplateID ? @"selected=""selected""" : string.Empty))>@w.MapToJobTemplateDescription</option>
                        }
                    </select>
                </td>
                <td class="idDisplay">
                    @(defaultSetting != null ? defaultSetting.MapToJobTemplateID.ToString() : "-")
                </td>
                @{
                    counter++;                   
                }
            </tr>*@
            <tr>
                <td colspan="4" class="text-right">
                    <a href="javascript:void(0)" class="btn btn-default" onclick="AddNewTypeRow('#dataTable', rowCounter)">
                        + Add Row</a>
                </td>
            </tr>
        </tbody>
    </table>
    <button type="submit" class="btn btn-primary">
        Submit Mappings</button>
    </form>
}
@section Scripts
{
    <!-- The jQuery UI widget factory, can be omitted if jQuery UI is already included -->
    <script type="text/javascript" src="/scripts/FileUploader/js/vendor/jquery.ui.widget.js"></script>
    <!-- The Iframe Transport is required for browsers without support for XHR file uploads -->
    <script type="text/javascript" src="/scripts/FileUploader/js/jquery.iframe-transport.js"></script>
    <!-- The basic File Upload plugin -->
    <script type="text/javascript" src="/scripts/FileUploader/js/jquery.fileupload.js"></script>
    <script src="/Scripts/main.js" type="text/javascript"></script>
    <script type="text/javascript">
        var rowCounter = @(counter);

        function SortByJobTemplate()
        {
            var dataStore = new Array();
            for(var i=0;i<rowCounter;i++)
            {
                var newDataRow = { mapJTID: $("input[name='submit[" + i + "].ClientJobTemplateID']").val(), JTName:$("select[name='submit[" + i + "].MapToJobTemplateID'] option:selected").text(), JTID: $("select[name='submit[" + i + "].MapToJobTemplateID']").val() };              
                dataStore.push(newDataRow);
            }

            dataStore.sort(
            function(a,b){ 
                return a.JTName.localeCompare(b.JTName);            
            });

            for(var i=0;i<rowCounter;i++)
            {
                var thisDataRow = dataStore[i];

                $("input[name='submit[" + i + "].ClientJobTemplateID']").val(thisDataRow.mapJTID);
                $("select[name='submit[" + i + "].MapToJobTemplateID']").val(thisDataRow.JTID).change();
            }
        }

        $(function () {
            'use strict';
            // Change this to the location of your server-side upload handler:
            var url = '/mappings/exceluploadprocessor';

            $('#fileupload').fileupload({
                url: url,
                dataType: 'json',
                sequentialUploads: true,
                done: function (e, data) {
                    var responseData = data.jqXHR.responseJSON;

                    if (responseData.Success) {

                        $.each(responseData.rowData, function (idx, data) {

                            var thisRowCounter = rowCounter;
                            AddNewTypeRow('#dataTable', rowCounter);

                            //modify the data
                            $("input[name='submit[" + thisRowCounter + "].ClientJobTemplateID']").val(data.str1);

                            $("select[name='submit[" + thisRowCounter + "].MapToJobTemplateID']").val("-1").change();

                        });

                    }
                    else {

                        var msg = $("<div></div>").addClass("alert alert-warning").html(responseData.Message);

                        $("#jsMessage").html(msg);

                    }

                }
            });
        });
    </script>
}

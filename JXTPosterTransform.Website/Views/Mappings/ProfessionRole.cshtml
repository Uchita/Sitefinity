@{
    ViewBag.Title = "Profession / Role";

    ProfessionRoleMap defaultSetting = Model.Mappings.Where(c => c.isDefaultSetting).FirstOrDefault();
    
}
@using JXTPosterTransform.Library.Models
@model ProfessionRoleMappingModel
@{
    Html.RenderPartial("~/Views/Mappings/_MappingsNavigation.cshtml");
}
<div class="">
    <h1 class="page-header">
        Profession Roles</h1>
    <div class="pull-right">
        <span class="pull-right btn btn-success fileinput-button">
            <!-- The file input field used as target for the file upload widget -->
            <input id="fileupload" type="file" name="files[]" />
        </span>
        <div class="clearfix">
        </div>
        <p>
            <i>Accepts xls &amp; xlsx only. First 2 columns will be imported.</i></p>
    </div>
    <div class="clearfix">
    </div>
    @Html.Raw(TempData["Message"])
    @Html.Raw(ViewBag.Message)
    <div id="jsMessage">
    </div>
</div>
<form method="post" accept="@Request.Url" onsubmit="return ValidateMappingSelection(this);">
<table id="dataTable" class="table table-striped table-bordered table-hover dataTable no-footer">
    <thead>
        <tr>
            <th>
                From Profession Value
            </th>
            <th>
                From Role Value
            </th>
            <th>
                JXT PR <a href="javascript:void(0)" class="pull-right" onclick="SortByPR()">
                        <i class="fa fa-sort-alpha-asc"></i></a>
            </th>
            <th>
                JXT ProfID / RoleID
            </th>
            <th>
                Actions
            </th>
        </tr>
    </thead>
    <tbody>
        @{int counter = 0;}
        @if (Model.Mappings == null || Model.Mappings.Count() == 0)
        {
            <tr class="dataRow">
                <td>
                    <input type="text" class="form-control" name="submit[0].ClientProfessionID" value=""
                        placeholder="Client mapping profession" />
                    @Html.ValidationMessage("submit[" + counter + "].ClientProfessionID")
                </td>
                <td>
                    <input type="text" class="form-control" name="submit[0].ClientRoleID" value="" placeholder="Client mapping role" />
                </td>
                @* === Profession Role === *@
                <td>
                    <select class="countryDropDown form-control mappingSelect" name="submit[0].MapToRoleID"
                        onchange="UpdateIDFromDropDown(this, '.idDisplay1'); RoleOnChange(this); MappingSelectOnChange(this);">
                        <option data-professionid="0" value="-1">Please Select...</option>
                        @if (Model.availableProfessions != null)
                        {
                            foreach (PRItem profession in Model.availableProfessions)
                            {
                            <optgroup label="@profession.description">
                                @foreach (PRItem role in profession.childs)
                                {                                                    
                                    <option data-professionid="@profession.id" value="@role.id">&nbsp;&nbsp;&nbsp;&nbsp;@role.description</option>
                                }
                            </optgroup>
                            }
                        }
                    </select>
                    <input class="mapProfessionInput" type="hidden" name="submit[@(counter)].MapToProfessionID" value="0"/>
                </td>
                <td class="idDisplay1">
                </td>
                <td>
                    <button type="button" class="btn btn-danger" onclick="ClearDataRow(this);">
                        Clear</button>
                </td>
            </tr>
                        counter++;
        }
        else
        {
            foreach (ProfessionRoleMap m in Model.Mappings.Where(c => !c.isDefaultSetting))
            {
                        
            <tr class="dataRow">
                <td>
                    <input type="text" class="form-control" name="submit[@(counter)].ClientProfessionID" value="@m.ClientProfessionID" placeholder="Client mapping profession" />
                    @Html.ValidationMessage("submit[" + counter + "].ClientProfessionID")
                </td>
                <td>
                    <input type="text" class="form-control" name="submit[@(counter)].ClientRoleID" value="@m.ClientRoleID" placeholder="Client mapping role"/>
                </td>
                @* === Country Location Area === *@
                <td>
                    <select class="countryDropDown form-control mappingSelect" name="submit[@(counter)].MapToRoleID" onchange="UpdateIDFromDropDown(this, '.idDisplay1'); RoleOnChange(this); MappingSelectOnChange(this);">
                        <option data-professionid="0" value="-1">Please Select...</option>
                        @if (Model.availableProfessions != null)
                        {
                            foreach (PRItem profession in Model.availableProfessions)
                            {
                            <optgroup label="@profession.description">
                                @foreach (PRItem role in profession.childs)
                                {                                                    
                                    <option data-professionid="@profession.id" value="@role.id" @(new MvcHtmlString(role.id == m.MapToRoleID ? @"selected=""selected""" : string.Empty))>
                                        &nbsp;&nbsp;&nbsp;&nbsp;@role.description</option>
                                }
                            </optgroup>
                            }
                        }
                    </select>
                    <input class="mapProfessionInput" type="hidden" name="submit[@(counter)].MapToProfessionID" value="@m.MapToProfessionID"/>
                </td>
                <td class="idDisplay1">
                    @m.MapToProfessionID / @m.MapToRoleID
                </td>
                <td>
                    <button type="button" class="btn btn-danger" onclick="ClearDataRow(this);">
                        Clear</button>
                </td>
            </tr>
                        counter++;
            }
        }
        @*<tr class="dataRow defaultRow">
            <td colspan="2" class="text-right">
                Default Mapping
            </td>
            <td>
                <input type="hidden" name="submit[@(counter)].isDefaultSetting" value="true" />
                <select class="countryDropDown form-control" name="submit[@(counter)].MapToRoleID" onchange="UpdateIDFromDropDown(this, '.idDisplay1'); RoleOnChange(this);">
                    <option data-professionid="0" value="-1">Please Select...</option>
                    @foreach (PRItem profession in Model.availableProfessions)
                    {
                        <optgroup label="@profession.description">
                            @foreach (PRItem role in profession.childs)
                            {                                                    
                                <option data-professionid="@profession.id" value="@role.id" @(new MvcHtmlString(defaultSetting != null && defaultSetting.MapToRoleID == role.id ? @"selected=""selected""" : string.Empty))>
                                    &nbsp;&nbsp;&nbsp;&nbsp;@role.description</option>
                            }
                        </optgroup>
                    }
                </select>
                <input class="mapProfessionInput" type="hidden" name="submit[@(counter)].MapToProfessionID" value="@(defaultSetting != null ? defaultSetting.MapToProfessionID : 0)"/>
            </td>
            <td class="idDisplay1">
                @(defaultSetting != null ? defaultSetting.MapToProfessionID.ToString() + " / " + defaultSetting.MapToRoleID.ToString() : "-")
            </td>
            @{
                counter++;
            }
        </tr>*@
        <tr>
            <td colspan="5" class="text-right">
                <a href="javascript:void(0)" class="btn btn-default" onclick="AddNewTypeRow('#dataTable', rowCounter)">
                    + Add Row</a>
            </td>
        </tr>
    </tbody>
</table>
<button type="submit" class="btn btn-primary">
    Submit Mappings</button>
</form>
@section Scripts
{
    <!-- The jQuery UI widget factory, can be omitted if jQuery UI is already included -->
    <script type="text/javascript" src="/scripts/FileUploader/js/vendor/jquery.ui.widget.js"></script>
    <!-- The Iframe Transport is required for browsers without support for XHR file uploads -->
    <script type="text/javascript" src="/scripts/FileUploader/js/jquery.iframe-transport.js"></script>
    <!-- The basic File Upload plugin -->
    <script type="text/javascript" src="/scripts/FileUploader/js/jquery.fileupload.js"></script>
    <script src="/Scripts/main.js" type="text/javascript"></script>
    <script type="text/javascript">
        var rowCounter = @(counter);

        var cla_ref = JSON.parse('@(new MvcHtmlString(ViewBag.CLAJsonData))');        
    </script>
    <script type="text/javascript">

        function CountryOnChange(caller) {

            var selectedCountryID = $(caller).val();
            var locationElement = $(caller).closest(".dataRow").find(".locationDropDown");

            //update selection in location dd
            var countryCLARef = FindCLAItem(cla_ref, selectedCountryID);

            LoadCLAItemsToDropDown(countryCLARef.childs, locationElement);

            $(locationElement).change();

        }

        function RoleOnChange(caller) {

            var selectedRoleOption = $(caller).find('option:selected');

            $(caller).siblings(".mapProfessionInput").val($(selectedRoleOption).data("professionid"));

        }

        function FindCLAItem(claItemList, targetVal) {

            var returnVal = null;

            $.each(claItemList, function (idx, val) {

                if (val.id == targetVal) {
                    returnVal = val;
                    return;
                }
            });

            return returnVal;
        }

        function LoadCLAItemsToDropDown(claItemList, targetDDL) {

            //clear all options
            $(targetDDL).empty();

            $.each(claItemList, function (idx, val) {

                var newOption = "<option value='" + val.id + "'>" + val.description + "</option>";

                $(targetDDL).append(newOption);

            });
        }

        function SortByPR()
        {
            var dataStore = new Array();
            for(var i=0;i<rowCounter;i++)
            {
                var newDataRow = {
                    clientProfID: $("input[name='submit[" + i + "].ClientProfessionID']").val(),
                    clientRoleID: $("input[name='submit[" + i + "].ClientRoleID']").val(),
                    mapRoleID: $("select[name='submit[" + i + "].MapToRoleID']").val(),
                    mapRoleName: $("select[name='submit[" + i + "].MapToRoleID'] option:selected").text().trim(),
                    mapProfID: $("select[name='submit[" + i + "].MapToRoleID'] option:selected").data("professionid"),
                    mapProfName: $("select[name='submit[" + i + "].MapToRoleID'] option:selected").parent("optgroup").attr("label")
                };              
                dataStore.push(newDataRow);
            }

            dataStore.sort(
            function (a, b) {

                var aStr = a.mapProfName + " " + a.mapRoleName;
                var bStr = b.mapProfName + " " + b.mapRoleName;

                return aStr.localeCompare(bStr);
            });

            for(var i=0;i<rowCounter;i++)
            {
                var thisDataRow = dataStore[i];

                $("input[name='submit[" + i + "].ClientProfessionID']").val(thisDataRow.clientProfID);
                $("input[name='submit[" + i + "].ClientRoleID']").val(thisDataRow.clientRoleID);
                $("select[name='submit[" + i + "].MapToRoleID']").val(thisDataRow.mapRoleID).change();
            }
        }



        $(function () {
            'use strict';
            // Change this to the location of your server-side upload handler:
            var url = '/mappings/exceluploadprocessor';

            $('#fileupload').fileupload({
                url: url,
                dataType: 'json',
                sequentialUploads: true,
                done: function (e, data) {
                    var responseData = data.jqXHR.responseJSON;

                    if (responseData.Success) {
                        console.log(responseData);
                        $.each(responseData.rowData, function (idx, data) {
                            //rowCounter = rowCounter + 1;
                            var thisRowCounter = rowCounter;
                            AddNewTypeRow('#dataTable', rowCounter);

                            //modify the data
                            $("input[name='submit[" + thisRowCounter + "].ClientProfessionID']").val(data.str1);
                            $("input[name='submit[" + thisRowCounter + "].ClientRoleID']").val(data.str2);

                            $("select[name='submit[" + thisRowCounter + "].MapToRoleID']").val("-1").change();

                        });

                    }
                    else {

                        var msg = $("<div></div>").addClass("alert alert-warning").html(responseData.Message);

                        $("#jsMessage").html(msg);

                    }

                }
            });
        });


    </script>
}

@{
    ViewBag.Title = "WorkType";

    WorkTypeMap defaultSetting = Model.Mappings.Where(c => c.isDefaultSetting).FirstOrDefault();
}
@using JXTPosterTransform.Library.Models
@model WorkTypeMappingModel
@{
    Html.RenderPartial("~/Views/Mappings/_MappingsNavigation.cshtml");
}
<div class="">
    <h1 class="page-header">
        Work Type</h1>
    <div class="pull-right">
        <span class="pull-right btn btn-success fileinput-button">
            <!-- The file input field used as target for the file upload widget -->
            <input id="fileupload" type="file" name="files[]" />
        </span>
        <div class="clearfix">
        </div>
        <p>
            <i>Accepts xls &amp; xlsx only. First column will be imported.</i></p>
    </div>
    <div class="clearfix">
    </div>
    @Html.Raw(TempData["Message"])
    @Html.Raw(ViewBag.Message)
    <div id="jsMessage">
    </div>
</div>
<form method="post" action="@Request.Url" onsubmit="return ValidateMappingSelection(this);">
<table id="workTypeTable" class="table table-striped table-bordered table-hover dataTable no-footer">
    <thead>
        <tr>
            <th>
                From Work type
            </th>
            <th>
                JXT Work Type <a href="javascript:void(0)" class="pull-right" onclick="SortByWorkType()"><i class="fa fa-sort-alpha-asc"></i></a>
            </th>
            <th>
                JXT Work Type ID
            </th>
            <th>
                Actions
            </th>
        </tr>
    </thead>
    <tbody>
        @{ int counter = 0; }
        @if (Model.Mappings == null || Model.Mappings.Count() == 0)
        {
            <tr class="dataRow">
                <td>
                    <input type="text" class="form-control" name="submit[@(counter)].ClientWorkTypeID" value="" placeholder="Work type mapping" />
                    @Html.ValidationMessage("submit[" + counter + "].ClientWorkTypeID")
                </td>
                <td>
                    <select name="submit[@(counter)].MapToWorkTypeID" class="form-control mappingSelect" onchange="UpdateIDFromDropDown(this, '.idDisplay');MappingSelectOnChange(this);">
                        <option value="-1">Please Select...</option>
                        @if (Model.availableWorkTypes != null)
                        {
                            foreach (WorkTypeAvailable w in Model.availableWorkTypes)
                            {
                                <option value="@w.MapToWorkTypeID">@w.MapToWorkTypeDescription</option>
                            }
                        }
                    </select>
                </td>
                <td class="idDisplay">
                </td>
                <td>
                    <button type="button" class="btn btn-danger" onclick="ClearDataRow(this);">
                        Clear</button>
                </td>
            </tr>
                        counter++;
        }
        else
        {
            foreach (WorkTypeMap m in Model.Mappings.Where(c => !c.isDefaultSetting))
            {
            <tr class="dataRow">
                <td>
                    <input type="text" class="form-control" name="submit[@(counter)].ClientWorkTypeID" value="@m.ClientWorkTypeID"/>
                    @Html.ValidationMessage("submit[" + counter + "].ClientWorkTypeID")
                </td>
                <td>
                    <select name="submit[@(counter)].MapToWorkTypeID" class="form-control mappingSelect" onchange="UpdateIDFromDropDown(this, '.idDisplay');MappingSelectOnChange(this);" >
                        <option value="-1">Please Select...</option>
                        @if (Model.availableWorkTypes != null)
                        {
                            foreach (WorkTypeAvailable w in Model.availableWorkTypes)
                            {
                                <option value="@w.MapToWorkTypeID" @(new MvcHtmlString(m.MapToWorkTypeID == w.MapToWorkTypeID ? @"selected=""selected""" : string.Empty))>@w.MapToWorkTypeDescription</option>
                            }
                        }
                    </select>
                </td>
                <td class="idDisplay">
                    @m.MapToWorkTypeID
                </td>
                <td>
                    <button type="button" class="btn btn-danger" onclick="ClearDataRow(this);">
                        Clear</button>
                </td>
            </tr>
                        counter++;
            }
        }
        @*<tr class="dataRow defaultRow">
            <td class="text-right">
                Default Mapping
            </td>
            <td>
            <input type="hidden" name="submit[@(counter)].isDefaultSetting" value="true" />
                <select name="submit[@(counter)].MapToWorkTypeID" class="form-control" onchange="UpdateIDFromDropDown(this, '.idDisplay')">
                       <option value="-1">Please Select...</option>
                    @foreach (WorkTypeAvailable w in Model.availableWorkTypes)
                    {
                        <option value="@w.MapToWorkTypeID" @(new MvcHtmlString(defaultSetting != null && defaultSetting.MapToWorkTypeID == w.MapToWorkTypeID ? @"selected=""selected""" : string.Empty))>@w.MapToWorkTypeDescription</option>
                    }
                </select>
            </td>
            <td class="idDisplay">
                @(defaultSetting != null ? defaultSetting.MapToWorkTypeID.ToString() : "-" )
            </td>
            @{
                counter++;
            }
        </tr>*@
        <tr>
            <td colspan="4" class="text-right">
                <a href="javascript:void(0)" class="btn btn-default" onclick="AddNewTypeRow('#workTypeTable', rowCounter)">
                    + Add Row</a>
            </td>
        </tr>
    </tbody>
</table>
<button type="submit" class="btn btn-primary">
    Submit Mappings</button>
</form>
@section Scripts
{
    <!-- The jQuery UI widget factory, can be omitted if jQuery UI is already included -->
    <script type="text/javascript" src="/scripts/FileUploader/js/vendor/jquery.ui.widget.js"></script>
    <!-- The Iframe Transport is required for browsers without support for XHR file uploads -->
    <script type="text/javascript" src="/scripts/FileUploader/js/jquery.iframe-transport.js"></script>
    <!-- The basic File Upload plugin -->
    <script type="text/javascript" src="/scripts/FileUploader/js/jquery.fileupload.js"></script>
    <script src="/Scripts/main.js" type="text/javascript"></script>
    <script type="text/javascript">
        var rowCounter = @(counter);

        function SortByWorkType()
        {
            var dataStore = new Array();
            for(var i=0;i<rowCounter;i++)
            {
                var newDataRow = { mapWTID: $("input[name='submit[" + i + "].ClientWorkTypeID']").val(), WTName:$("select[name='submit[" + i + "].MapToWorkTypeID'] option:selected").text(), WTID: $("select[name='submit[" + i + "].MapToWorkTypeID']").val() };              
                dataStore.push(newDataRow);
            }

            dataStore.sort(
            function(a,b){ 
                return a.WTName.localeCompare(b.WTName);            
            });

            for(var i=0;i<rowCounter;i++)
            {
                var thisDataRow = dataStore[i];

                $("input[name='submit[" + i + "].ClientWorkTypeID']").val(thisDataRow.mapWTID);
                $("select[name='submit[" + i + "].MapToWorkTypeID']").val(thisDataRow.WTID).change();
            }


        }

        $(function () {
            'use strict';
            // Change this to the location of your server-side upload handler:
            var url = '/mappings/exceluploadprocessor';

            $('#fileupload').fileupload({
                url: url,
                dataType: 'json',
                sequentialUploads: true,
                done: function (e, data) {
                    var responseData = data.jqXHR.responseJSON;

                    if (responseData.Success) {

                        $.each(responseData.rowData, function (idx, data) {

                            var thisRowCounter = rowCounter;
                            AddNewTypeRow('#workTypeTable', rowCounter);

                            //modify the data
                            $("input[name='submit[" + thisRowCounter + "].ClientWorkTypeID']").val(data.str1);

                            $("select[name='submit[" + thisRowCounter + "].MapToWorkTypeID']").val("-1").change();

                        });

                    }
                    else {

                        var msg = $("<div></div>").addClass("alert alert-warning").html(responseData.Message);

                        $("#jsMessage").html(msg);

                    }

                }
            });
        });

    </script>
}

@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;

@*Add scripts and stylesheets*@
@Html.Script(ScriptRef.JQuery, "top", true)
@Html.Script(Url.Content("https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"), "top", true)
@Html.Script(Url.Content("https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"), "top", true)

<div class="@Model.CssClass">
    <nav>
        @* @Html.Action("GetView", new { viewName = "Dropdown", model= Model}) *@


        <button class="menuToggle" type="button" data-toggle="collapse" data-target='#@Html.UniqueId("navbar")' aria-controls='@Html.UniqueId("navbar")' aria-expanded="false" aria-label="@Html.Resource(" ToggleNavigation")">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <div class="main-menu" id='@Html.UniqueId("navbar")'>
            <ul class="first-level">
                @foreach (var node in Model.Nodes)
                {
                @RenderRootLevelNode(node);
                }
            </ul>
        </div>
        <div class="search-bar" style="display: none;">
            <div class="container">
                <div class="bg-srch">
                    <div class="cntr-form">
                        <h5 class="sub-title">ENTER A NEW SEARCH</h5>

                        <div class="row">
                            <div class="col-xs-12 col-sm-8">
                                <div class="form-group">
                                    <input type="text" class="form-control" placeholder="Type here...">
                                </div>
                            </div>
                            <div class="col-xs-12 col-sm-4">
                                <div class="form-group">
                                    <input type="submit" class="btn green-btn" value="SEARCH">
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </nav>
</div>

@*Here is specified the rendering for the root level*@
@helper RenderRootLevelNode(NodeViewModel node)
{
    if (node.ChildNodes.Count > 0)
    {
<li class="nav-item dropdown @GetClass(node)">
    <a class="nav-link dropdown-toggle" href="#" id='@Html.UniqueId("navbarDropdownMenuLink")' data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">@node.Title</a>
    <ul class="dropdown-menu" aria-labelledby='@Html.UniqueId("navbarDropdownMenuLink")'>
        @RenderSubLevelsRecursive(node)
    </ul>
</li>
    }
    else
    {
<li class="@GetClass(node)">
    <a href="@node.Url" target="@node.LinkTarget">@node.Title</a>
</li>
    }
}

@*Here is specified the rendering for all child levels*@
@helper RenderSubLevelsRecursive(NodeViewModel node)
{
    foreach (var childNode in node.ChildNodes)
    {
        if(childNode.ChildNodes.Count > 0)
        {
<li class="dropdown-submenu">
    <a class="dropdown-item @GetClass(childNode)" href="@childNode.Url" target="@childNode.LinkTarget">
        @childNode.Title
        <span class="right-caret"></span>
    </a>
    <ul class="dropdown-menu">
        @RenderSubLevelsRecursive(childNode)
    </ul>
</li>
        }
        else
        {
<li>
    <a class="dropdown-item @GetClass(childNode)" href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
</li>
        }
    }
}

@*Resolves the class that will be added for each node depending whether it is selected*@
@helper GetClass(NodeViewModel node)
{

    if (node.IsCurrentlyOpened)
    {
        @Html.HtmlSanitize("active");
    }
    else if (node.HasChildOpen)
    {
        @Html.HtmlSanitize("active");
    }
}

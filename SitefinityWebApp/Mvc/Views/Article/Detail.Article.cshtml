@model Telerik.Sitefinity.Frontend.Mvc.Models.ContentDetailsViewModel

@using System.Linq;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Libraries.Model;
@using Telerik.Sitefinity.Modules.Pages;
@using HtmlAgilityPack;
@using Telerik.Sitefinity.Services;
@using Telerik.Sitefinity.RelatedData;
@using Telerik.Sitefinity.DynamicModules.Model;
@using JXTNext.Sitefinity.Media.Mvc.Helpers;
@{
    var sanitizedContent = Html.HtmlSanitize((string)Model.Item.Fields.Content);

    var htmlDoc = new HtmlDocument();
    htmlDoc.LoadHtml(sanitizedContent.ToString());
    // Remove any comments from the HTML
    // htmlDoc.DocumentNode.SelectNodes("//comment()")?.ForEach(c => c.Remove());
    // Remove HTML from the content
    string textOnlyContent = htmlDoc.DocumentNode.InnerText;
    // Remove any HTML entities
    textOnlyContent = WebUtility.HtmlDecode(textOnlyContent);

    Model.CssClass = string.Format("c-article--{0} {1}", Model.Item.Fields.UrlName, Model.CssClass).Trim();

    var images = new List<Image>();
    if (Model.Item.Fields.Images != null)
    {
        images = Model.Item.DataItem.GetRelatedItems<Image>("Images").ToList();
    }
    var featureImage = images.FirstOrDefault();
    var author = String.Empty;

    if (Model.Item.Fields.ArticleAuthor != null)
    {
        author = Model.Item.Fields.ArticleAuthor.Identifier;
    }
}
@* schema.org for better SEO Needs to be improved to get canical url of article  *@
<script type="application/ld+json">
    { "@@context": "http://schema.org",
    "@@type": "Article",
    "mainEntityOfPage": {
    "@@type": "WebPage",
    "@@id": "@HyperLinkHelpers.GetDetailPageUrl(Model.Item, Guid.Empty, true)"
    },
    "headline": "@Model.Item.Fields.Title",
    "alternativeHeadline": "@Model.Item.Fields.MetaTitle",
    "image": "@ImageHelper.GetImageUrl(featureImage, "article")",
    @*"author": "Patrick Coombe", // this must be implemented in order to be valid*@
    @*"wordcount": "1120",*@
    @*"publisher": "Book Publisher Inc", // this must be implemented in order to *@
    "url": "@Model.Item.DefaultUrl",
    "datePublished": "@Model.Item.GetDateTime("PublicationDate", "yyyy-MM-dd")",
    "dateCreated": "@Model.Item.GetDateTime("PublicationDate", "yyyy-MM-dd")",
    "dateModified": "@Model.Item.GetDateTime("LastModified", "yyyy-MM-dd")",
    "description": "@Model.Item.Fields.Description",
    "articleBody": "@textOnlyContent"
    }
</script>
<article class="o-article @Model.CssClass" @Html.InlineEditingAttributes(Model.ProviderName, Model.ContentType.FullName, (Guid)Model.Item.Fields.Id)>
    <header class="o-article__header">
        @*Start primary image*@
        @if (featureImage != null)
        {
            <div class="o-article__headerImg">
                @Html.ImgTag(featureImage, null, "art-detail").WithCssClass("o-article__headerImg-img")
            </div>
        }
        @*End Images field*@
        <h1 class="o-article__headerTitle" @Html.InlineEditingFieldAttributes("Title", "ShortText")>
            @Model.Item.Fields.Title
        </h1>
        <ul class="o-article__headerInfo">
            <li class="o-article__headerInfoItem">
                <span class="o-article__headerInfoItemTxt">@Html.Resource("Published", "JxtAuthoringResources")</span>
                <time class="o-article__headerInfoItemTxt" datetime="@Model.Item.GetDateTime("PublicationDate", "s")">@Model.Item.GetDateTime("PublicationDate", "MMMM d, yyyy")</time>
            </li>
            @if (!string.IsNullOrWhiteSpace(author))
            {
                <li class="o-article__headerInfoItem"><span class="o-item-info__auth-text">@Html.Resource("By", "JxtAuthoringResources")</span> <span class="o-article__headerInfoItemTxt">@author</span></li>
            }
            <li class="o-article__headerInfoItem">@Html.CommentsCount("", @Model.Item.DataItem)</li>
        </ul>
    </header>
    @*Start Category field*@
    @if (Model.Item.Fields.Category != null)
    {
        var categories = Model.Item.GetHierarchicalTaxons("Category");
        if (categories.Count > 0)
        {
            <div class="o-article__categories">
                <h3 class="o-article__categoriesTitle">Categories</h3>
                <ul class="o-article__categoriesList" @Html.InlineEditingFieldAttributes("Category", "HierarchicalTaxon")>
                    @foreach (var taxon in categories)
                    {
                        <li class="o-article__categoriesListItem">
                            @* Need to sort out category links *@
                            @*<a href="#" class="o-categories__item">@taxon.Title.ToString()</a>*@
                            <span class="o-article__categoriesListItemTxt">@taxon.Title.ToString()</span>
                        </li>
                    }
                </ul>
            </div>
        }
    }
    @*End Category field*@

    @*If in inline editing mode display descrption field so it can be edited. If description field is used within the detail view remove the if below. *@
    @if (SystemManager.IsInlineEditingMode)
    {
        <div class="o-article__descr" @Html.InlineEditingFieldAttributes("Description", "LongText")>@Html.HtmlSanitize((string)Model.Item.Fields.Description)</div>
    }
    @*End Description field*@

    @*Start Content field*@
    <section class="o-article__body" @Html.InlineEditingFieldAttributes("Content", "LongText")>
        <div class="o-article__bodyContent" @Html.InlineEditingFieldAttributes("Content", "LongText")>
            @Html.HtmlSanitize((string)Model.Item.Fields.Content)
        </div>
    </section>
    @*End Content field*@

    @*Start Images field*@
    @if (images != null && images.Count > 1)
    {
        <div class="o-article__imgGallery">
            @foreach (var image in images)
            {
                <div class="o-article__imgGalleryItem">
                    <a href='@ImageHelper.GetImageUrl(image,"gal-lrg")' class="o-article__imgGalleryItem-link">
                        @Html.ImgTag(image, null, "gal-sml").WithCssClass("o-article__imgGalleryItem-img")
                    </a>
                </div>
            }
        </div>
    }
    @*End Images field*@

    @*Start Tags field*@
    @if (Model.Item.Fields.Tags != null)
    {
        var tags = Model.Item.GetFlatTaxons("Tags");
        if (tags.Count > 0)
        {
            <div class="o-article__tags">
                <h3 class="o-article__tagsTitle">Tags</h3>
                <ul class="o-article__tagsList" @Html.InlineEditingFieldAttributes("Tags", "FlatTaxon")>
                    @foreach (var taxon in tags)
                    {
                        <li class="o-article__tagsListItem">
                            @* Need to sort out tag links *@
                            @*<a href="#" class="o-tags__item">@taxon.Title.ToString()</a>*@
                            <span class="o-article__tagsListItemTxt">@taxon.Title.ToString()</span>
                        </li>
                    }
                </ul>
            </div>
        }
    }
    @*End Tags field*@
    <section class="o-article__comments">
        @Html.CommentsList(@Model.Item.DataItem)
    </section>
</article>
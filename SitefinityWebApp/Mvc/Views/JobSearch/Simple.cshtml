@model List<SitefinityWebApp.Mvc.Models.JobSearchModel>
@using SitefinityWebApp.Mvc.Models

@using Telerik.Sitefinity.Frontend.Mvc.Helpers

@Html.StyleSheet(Url.Content("~/Mvc/Scripts/JobSearch/dropdowntree.css"), "bottom")
@Html.Script(Url.Content("~/Mvc/Scripts/JobSearch/dropdowntree.js"), "bottom")

@functions {
    List<string> _itemsList = new List<string>();
    Dictionary<string, dynamic> _idNamesLevelsPair = new Dictionary<string, dynamic>();

    public List<string> GetValuesList(List<JobSearchItem> searchItemsList)
    {

        foreach (var item in searchItemsList)
        {
            if (!string.IsNullOrEmpty(item.Label) && item.Selected == true)
            {
                _itemsList.Add(item.Label);
                _idNamesLevelsPair.Add(item.ID, new { name = item.Label, level = item.Level });
            }
            if (item.Filters != null)
                GetValuesList(item.Filters);
        }

        return _itemsList;
    }
}

@if (Model != null)
{
<form action="@ViewData["JobResultsPageUrl"]" name="JobSearchResults" method="get" onsubmit="return preventSubmit();">
    @{
        int counter = 0;
    }
    @foreach (var item in Model)
    {
        switch (item.ControlType)
        {
            case "TextBox":
                <input type="text" class="form-control" placeholder="@item.PlaceholderText" name="Keywords" />
                break;

            case "DropDown Single":
                _itemsList.Clear();
                _idNamesLevelsPair.Clear();
                GetValuesList(item.Filters);

                <select class="form-control" name="Filters[@counter].values">
                    <option value="" disabled selected>@item.PlaceholderText</option>
                    @foreach (dynamic itemName in _idNamesLevelsPair)
                    {
                        <option value="@itemName.Key">@itemName.Value.name</option>
                    }
                </select>

                counter++;
                break;

            case "DropDown Multi":

                <input type="hidden" name="Filters[@counter].searchTarget" value='@item.FilterType' />
                <input type="hidden" name="Filters[@counter].rootId" value='@item.ID' />
                <select id=@string.Format("selected-{0}",item.ID) name="Filters[@counter].values" style="display:none" multiple></select>
                <div class="dropdown dropdown-tree" id=@item.ID></div>

                counter++;
                break;

            case "Map Search":
                break;

            default:
                break;

        }
    }
    <input class="btn btn-primary" type="submit" value="Browse Jobs" />
</form>
}

<script type="text/javascript">
    var optionsArray = {};

    function preventSubmit() {
         $.each(optionsArray,function (id, item) {
            $($("#" + id).GetSelectedElementIds()).each(function (index, value) {
                $("#selected-" + id).append('<option value="' + value + '" selected="true">' + value + '</option>')
            });
        });

        return true;
    };

    $(document).ready(function () {
         @{
                var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
                var json = serializer.Serialize(Model);
          }

        var model = @Html.Raw(json);
        if (model != null && @Html.Raw(json) != "undefined") {
            var filterData = JSON.parse('@Html.Raw(Json.Encode(Model))');

      
            for (var item of filterData) {
                switch (item.ControlType) {
                    case 'TextBox':
                        break;

                    case 'DropDown Multi':
                        optionsArray[item.ID] = {
                            title: item.PlaceholderText,
                            data: item.Filters,
                            maxHeight: 500,
                            closedArrow: '<i class="fa fa-caret-right" aria-hidden="true"></i>',
                            openedArrow: '<i class="fa fa-caret-down" aria-hidden="true"></i>',
                            multiSelect: true,
                            selectChildren: true,
                        };
                        $("#" + item.ID).DropDownTree(optionsArray[item.ID]);
                        break;

                    default:
                        break;
                }
            }
        }
   });
</script>


@model Telerik.Sitefinity.Frontend.Identity.Mvc.Models.Profile.ProfileEditViewModel

@using System.Collections.Generic;
@using System.Linq.Expressions;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Identity.Mvc.Models.Profile
@using Telerik.Sitefinity.Modules.Pages;
@using Telerik.Sitefinity.UI.MVC;
@using Telerik.Sitefinity.Utilities;
@using Telerik.Sitefinity.Services;
@using JXTNext.Sitefinity.Common.Mvc.Helpers;

@Html.Script("//ajax.aspnetcdn.com/ajax/jquery.validate/1.8.1/jquery.validate.js", "head", true)
@Html.Script("//ajax.aspnetcdn.com/ajax/mvc/4.0/jquery.validate.unobtrusive.min.js", "head", true)

@*currently this code is written for sitefinity 11.2 hence, it will not work with sitefinity 11.0. Please wait till sitefinity update to 11.2 to test.*@

<div class="o-editprofile @Model.CssClass">
    @Html.DynamicTag("h3", Html.Resource("EditProfileLink"), "o-editprofile__hdg")


    @if (Model.ShowProfileChangedMsg)
    {
        <div class="alert alert-success" role="alert" aria-live="assertive">@Html.Resource("ChangesAreSaved")</div>
    }
    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <div class="alert alert-danger" role="alert" aria-live="assertive">@ViewBag.ErrorMessage</div>
    }

    @using (Html.BeginFormSitefinity("Index", "EditProfileForm", FormMethod.Post, new Dictionary<string, object> { { "enctype", "multipart/form-data" }, { "role", "form" } }))
    {
        // currently this line throws error - might be fixed after updating sitefinity
        string[] readOnlyFields = ViewBag.ReadOnlyFields.ContainsKey("SitefinityProfile") ? (string[])ViewBag.ReadOnlyFields["SitefinityProfile"] : new string[0];

        if (readOnlyFields.Count() > 0 || ViewBag.IsEmailReadOnly)
        {
            <div class="alert alert-info" role="alert">@string.Format(Html.Resource("YouAreRegisteredWith"), Model.ExternalProviderName)</div>
        }
        <div class="o-editprofile__contentwrap">
            <div class="o-editprofile__imagecol">
                @Html.HiddenFor(u => u.DeletePicture, new Dictionary<string, object>() { { "data-sf-role", "edit-profile-delete-picture" } })
                @Html.HiddenFor(u => u.DefaultAvatarUrl, new Dictionary<string, object>() { { "data-sf-role", "edit-profile-default-avatar-url" } })
                <div class="o-editprofile__image">
                    <img data-sf-role="edit-profile-user-image" src="@Model.AvatarImageUrl" alt="@Model.UserName" />

                    @*No idea why this was commented out*@
                    @*<button type="button" class="sf-remove close" aria-label="Close" data-sf-role="edit-profile-delete-picture-button">
                            <span aria-hidden="true">&times;</span>
                        </button>*@
                </div>
                <div class="o-editprofile__fileupload">
                    <input type="file" data-sf-role="edit-profile-upload-picture-input" name="UploadedImage" />
                    <a href="javascript:void(0)" data-sf-role="edit-profile-upload-picture-button" role="button">@Html.Resource("EditProfileUploadImage")</a>
                </div>
            </div>
            <div class="o-editprofile__form">
                @if (readOnlyFields.Any(x => x.Equals("FirstName", StringComparison.OrdinalIgnoreCase)))
                {
                    @ReadOnlyFormGroupPanel("EditProfileFirstName", u => u.Profile["FirstName"])
                }
                else
                {
                    @FormGroupPanel("EditProfileFirstName", u => u.Profile["FirstName"], "ProfileFirstName")
                }

                @if (readOnlyFields.Any(x => x.Equals("LastName", StringComparison.OrdinalIgnoreCase)))
                {
                    @ReadOnlyFormGroupPanel("EditProfileLastName", u => u.Profile["LastName"])
                }
                else
                {
                    @FormGroupPanel("EditProfileLastName", u => u.Profile["LastName"], "ProfileLastName")
                }

                @if (readOnlyFields.Any(x => x.Equals("Nickname", StringComparison.OrdinalIgnoreCase)))
                {
                    @ReadOnlyFormGroupPanel("EditProfileNickname", u => u.Profile["Nickname"])
                }
                else
                {
                    @FormGroupPanel("EditProfileNickname", u => u.Profile["Nickname"], "ProfileNickName")
                }

                @if (readOnlyFields.Any(x => x.Equals("About", StringComparison.OrdinalIgnoreCase)))
                {
                    @ReadOnlyFormGroupPanel("EditProfileAbout", u => u.Profile["About"])
                }
                else
                {
                    @FormGroupPanel("EditProfileAbout", u => u.Profile["About"], "ProfileAbout", "textarea")
                }

                @if (ViewBag.IsEmailReadOnly)
                {
                    @ReadOnlyFormGroupPanel("EditProfileEmail", u => u.Email)
                }
                else
                {
                    @FormGroupPanel("EditProfileEmail", u => u.Email, "ProfileEmail")
                }

                @if (string.IsNullOrEmpty(Model.ExternalProviderName))
                {
                    <div class="o-editprofile__form-changepass">
                        <a href="#" class="o-editprofile__btn" data-sf-role="edit-profile-change-password-button" role="button">
                            @Html.Resource("EditProfileChangePasswordButton")
                            <span class="sr-only">@Html.Resource("WillExpandChangePasswordSection")</span>
                        </a>
                    </div>
                    <div data-sf-role="edit-profile-change-password-holder" class="o-editprofile__form-changepassform">
                        @Html.DynamicTag("h3", Html.Resource("EditProfileEditChangePasswordHeader"), "o-editprofile__form-changepasshdg")

                        @FormGroupPanel("EditProfileOldPassword", u => u.OldPassword, "ProfileOldPassword", "password", null, new Dictionary<string, object>() { { "autocomplete", "off" } })
                        @FormGroupPanel("EditProfileNewPassword", u => u.NewPassword, "ProfileNewPassword", "password")
                        @FormGroupPanel("EditProfileRepeatPassword", u => u.RepeatPassword, "ProfileRepeatPassword", "password")
                    </div>
                }
                else
                {
                    @ReadOnlyFormGroupPanel("Password", null, string.Format(Html.Resource("ExternalProviderNoPassword"), Model.ExternalProviderName))
                }

                @if (SystemManager.IsDesignMode)
                {
                    <button data-sf-role="profile-submit" type="button" class="btn btn-primary o-editprofile__btn">@Html.Resource("EditProfileSave")</button>
                }
                else
                {
                    <button data-sf-role="profile-submit" type="submit" class="btn btn-primary o-editprofile__btn">@Html.Resource("EditProfileSave")</button>
                }

                @if (SystemManager.IsPreviewMode)
                {
                    <div class="o-editprofile__profilesaveerror" role="alert" aria-live="assertive" data-sf-role="profile-submit-preview-message">
                        <span class="form-text"><span class="field-validation-error">@Html.Resource("PreviewProfileSaveMessage")</span></span>
                    </div>
                }
            </div>
        </div>
    }
</div>
@{
    bool hasPasswordErrors = ViewBag.HasPasswordErrors is bool && ViewBag.HasPasswordErrors == true;
}
<input type="hidden" data-sf-role="has-password-errors" value="@hasPasswordErrors.ToString().ToLowerInvariant()" />
@Html.Script(Url.WidgetContent("Mvc/Scripts/Profile/profile-edit.js"), "bottom", true)
@helper FormGroupPanel(string label, Expression<Func<ProfileEditViewModel, string>> expression, string descId, string inputType = "text", string classValue = null, IDictionary<string, object> additionalAttributes = null)
{
    var hasValidationMessage = Html.ValidationMessageFor(expression) != null;
    var attributes = new Dictionary<string, object>();
    var cls = "form-control";

    if (classValue != null)
    {
        cls += " " + classValue;
    }

    attributes.Add("class", cls);

    if (hasValidationMessage)
    {
        attributes.Add("aria-describedby", Html.UniqueId(descId));
    }
    if (additionalAttributes != null)
    {
        attributes = attributes.Concat(additionalAttributes).ToDictionary(x => x.Key, x => x.Value);
    }

    <div class="o-editprofile__form">
        @Html.LabelFor(expression, Html.Resource(label))
        @switch (inputType)
        {
            case "text":
                @Html.TextBoxFor(expression, attributes);
                break;

            case "textarea":
                @Html.TextAreaFor(expression, attributes);
                break;

            case "password":
                @Html.PasswordFor(expression, attributes);
                break;

            default:
                break;
        }
        @if (hasValidationMessage)
        {
            <div id='@Html.UniqueId(descId)' class="text-danger" role="alert" aria-live="assertive">
                <span class="form-text">@Html.ValidationMessageFor(expression)</span>
            </div>
        }
    </div>
}
@helper ReadOnlyFormGroupPanel(string label, Expression<Func<ProfileEditViewModel, string>> expression, string message = null)
{
    <div class="o-editprofile__form">
        @Html.DynamicTag("label", Html.Resource(label), "o-card__label")

        @if (message == null)
        {
            <div>
                @Html.HiddenFor(expression)
                @Html.DisplayTextFor(expression)
            </div>
        }
        else
        {
            <div class="o-editprofile__txt">@message</div>
        }
    </div>
}
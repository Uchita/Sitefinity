@model Telerik.Sitefinity.Frontend.Mvc.Models.ContentDetailsViewModel

@using System.Collections;
@using System.Linq;
@using Telerik.Sitefinity.Frontend.DynamicContent.WidgetTemplates.Fields.Helpers;
@using Telerik.Sitefinity;
@using Telerik.Sitefinity.Data.ContentLinks;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Libraries.Model;
@using Telerik.Sitefinity.Localization;
@using Telerik.Sitefinity.Model;
@using Telerik.Sitefinity.Model.ContentLinks;
@using Telerik.Sitefinity.Modules.Pages;
@using Telerik.Sitefinity.Pages.Model;
@using Telerik.Sitefinity.Modules.Libraries;

@{
    List<string> filterValues = new List<string>();
    var imageThumbUrl = "";

    if (Model.Item.Fields.Category != null)
    {
        foreach (var taxon in Model.Item.GetHierarchicalTaxons("Category"))
        {
            filterValues.Add(taxon.Name);
        }
    }
}
<div class="profile-detail-view">
    <div class="row" data-filtersector="@(string.Join(",", filterValues))">

        @if (Model.Item.Fields.Pic != null)
        {
            imageThumbUrl = MediaContentExtensions.ResolveThumbnailUrl(Model.Item.Fields.Pic.DataItem, "thumb350");
        }
        else
        {
            imageThumbUrl = "/ResourcePackages/Hudson/assets/dist/images/placeholder-image.jpg";
        }
        <div class="col-sm-4">
            <div class="profile-media">
                <img class="full-width" src="@imageThumbUrl" alt="@Model.Item.Fields.ConsultantName" />
                
                @if (Model.Item.Fields.Office != null)
                {
                    var OfficeLocationName = "";
                    var OfficeLocationUrl = "";


                    if (Model.Item.Fields.Office.GetType().ToString() == "Telerik.Sitefinity.Frontend.Mvc.Models.ItemViewModel")
                    {
                        OfficeLocationName = Html.HtmlSanitize((string)Model.Item.Fields.Office.Fields.Name).ToString();
                        OfficeLocationUrl = Model.Item.Fields.Office.Fields.UrlName.ToString();
                    }
                    else
                    {
                        List<string> OfficeLocationNameList = new List<string>();
                        List<string> OfficeLocationUrlList = new List<string>();

                        foreach (var office in Model.Item.Fields.Office)
                        {
                            if (!OfficeLocationNameList.Contains((string)office.Fields.Name))
                            {
                                OfficeLocationNameList.Add((string)office.Fields.Name);
                                OfficeLocationUrlList.Add(office.Fields.UrlName.ToString());
                            }
                        }

                        OfficeLocationName = string.Join(", ", OfficeLocationNameList.ToArray());
                        OfficeLocationUrl = string.Join(",", OfficeLocationUrlList.ToArray());
                    }

                    <p class="consultant-sum">@Html.HtmlSanitize((string)Model.Item.Fields.Position), @OfficeLocationName</p>
                }
                else
                {
                    <div class="contact-consultant-position">@Html.HtmlSanitize((string)Model.Item.Fields.Position)</div>
                }
                <p class="email-stamp">
                    @if (!string.IsNullOrWhiteSpace(@Model.Item.Fields.Email))
                    {
                        <em class="far fa-envelope"></em><a href="mailto:@Model.Item.Fields.Email" title="Email at @Model.Item.Fields.Email">@Model.Item.Fields.Email</a><br />
                    }

                    @if (!string.IsNullOrWhiteSpace(@Model.Item.Fields.PhoneNumber))
                    {
                        var consultantPhone = Model.Item.Fields.PhoneNumber.ToString().Replace(" ", "");

                        <a href="tel:@consultantPhone" title="Call at @Model.Item.Fields.PhoneNumber"><em class="fas fa-phone"></em>@Model.Item.Fields.PhoneNumber</a><br />
                    }

                    @if (!string.IsNullOrWhiteSpace(@Model.Item.Fields.LinkedInProfileUrl))
                    {
                        <a href="@Model.Item.Fields.LinkedInProfileUrl" title="Go to LinkedIN Profile"><em class="fab fa-linkedin-in"></em>@Model.Item.Fields.LinkedInProfileName</a>
                    }
                </p>
            </div>
            
        </div>

        <div class="col-sm-8">
            <div class="caption-text-widget">

                <h3 class="consultant-name">@Html.HtmlSanitize((string)Model.Item.Fields.ConsultantName)</h3>

                <div>
                    @Html.HtmlSanitize((string)Model.Item.Fields.Bio)
                </div>
            </div>


          

        </div>
    </div>
</div>
@*<div class="row">
        <div class="col-md-4"></div>
        <div class="col-md-8">
            <h3>Contact me</h3>
        </div>
    </div>*@

